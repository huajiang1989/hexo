{
	"meta": {
		"exported_on": 1496998401598,
		"version": "008"
	},
	"data": {
		"posts": [
			{
				"id": "cj3pm6jdm0000kkfcvoh8fptj",
				"title": "Nodejs实现简单的集群负载",
				"slug": "nodejs_ngix",
				"markdown": "\n\n在Nodejs中使用集群还是不容易的。Javascript的单线程属性让nodejs下的应用很难使用现代机器的多核特性。比如下面的代码实现了一个http服务器的主干部分。这部分代码只会执行在一个线程上，不管这段代码运行的机器是单核的cpu还是1000个内核的cpu。\n<!--more-->\n```js\nvar http = require(\"http\");\nvar port = parseInt(process.argv[2]);\n\nhttp.createServer(function(request, response) {\n  console.log(\"Request for:  \" + request.url);\n  response.writeHead(200);\n  response.end(\"hello world\\n\");\n}).listen(port);\n```\n# 使用多核特性\n\n只需要一点修改，上面的代码就可以把cpu的所有核心都用起来。上面的示例代码将使用 cluster 模块重构。 cluster 模块可以让你很容易的创建多个分享端口的进程。每一个进程使用一个系统核心，也就是代码中的 numCPUs 变量中cpu核心的一个。每一个子进程都实现了HTTP server，并监听指定的端口。\n```js\nvar cluster = require(\"cluster\");\nvar http = require(\"http\");\nvar numCPUs = require(\"os\").cpus().length;\nvar port = parseInt(process.argv[2]);\n\nif (cluster.isMaster) {\n  for (var i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(\"exit\", function(worker, code, signal) {\n    cluster.fork();\n  });\n} else {\n  http.createServer(function(request, response) {\n    console.log(\"Request for:  \" + request.url);\n    response.writeHead(200);\n    response.end(\"hello world\\n\");\n  }).listen(port);\n}\n```\n# 多机器的均衡\n\n使用cluster模块，你就可以更高效的使用硬件。然而，你还是被限制在单一的机器上。如果你的应用有客观的访问量，你最终还是把负载分部在不同的机器上。使用reverse proxy server可以把并发的访问负载到不同的服务器上。\n\nNodejitsu开发了 node-http-proxy 模块，一个开源的nodejs应用代理服务。使用以下命令可以安装这个模块：\n```\nnpm install http-proxy\n```\n实际的使用可以参考以下代码。在这里例子中负载被分发到两台服务器上。首先测试反转代理，确保HTTP server运行在8080和8081两个端口上。接下来，运行反转代理，然后用浏览器访问这个代理。如果一切正常的话，你会发现请求被两个服务器交替处理。\n```js\nvar proxyServer = require('http-proxy');\nvar port = parseInt(process.argv[2]);\nvar servers = [\n  {\n    host: \"localhost\",\n    port: 8081\n  },\n  {\n    host: \"localhost\",\n    port: 8080\n  }\n];\n\nproxyServer.createServer(function (req, res, proxy) {\n  var target = servers.shift();\n\n  proxy.proxyRequest(req, res, target);\n  servers.push(target);\n}).listen(port);\n```\n当然，这个例子只使用了一台机器。然而，如果你有多台机器的话，你可以在一台机器上运行反向代理服务器，其他的机器上运行HTTP server。\n\n# 使用nginx负载均衡\n\n使用nodejs写的反向代理有一个好处是你使用的技术都是一样的。但是，在生产环境下，更多使用的是nginx来处理负载均衡。nginx是一个开源的HTTP server和反向代理工具，尤其擅长处理静态文件，比如：CSS和HTML。因此，nginx常被用于处理站点的静态文件，和分发动态请求到nodejs的服务器上。\n\n要实现nginx的负载均衡，只需要安装nginx，之后把nodejs服务器作为upstream resource添加在配置文件中。配置文件的路劲一般是{nginx-root}/conf/nginx.conf，{nginx-root}是nginx安装的根目录。整个的配置文件请参考下面的示例。当然，我们只需要用到其中的一小部分。\n```\n#user  nobody;\nworker_processes  1;\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid\t\tlogs/nginx.pid;\n\nevents {\n\tworker_connections  1024;\n}\nhttp {\n\tinclude\t   mime.types;\n\tdefault_type  application/octet-stream;\n\n\t#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n\t#\t\t\t\t  '$status $body_bytes_sent \"$http_referer\" '\n\t#\t\t\t\t  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\t#access_log  logs/access.log  main;\n\n\tsendfile\t\ton;\n\t#tcp_nopush\t on;\n\t#keepalive_timeout  0;\n\tkeepalive_timeout  65;\n\t#gzip  on;\n\tupstream node_app {\n\t  server 127.0.0.1:8080;\n\t  server 127.0.0.1:8081;\n\t}\n\tserver {\n\t\tlisten\t   80;\n\t\tserver_name  localhost;\n\t\t#charset koi8-r;\n\t\t#access_log  logs/host.access.log  main;\n\n\t\tlocation / {\n\t\t\troot   html;\n\t\t\tindex  index.html index.htm;\n\t\t}\n\t\tlocation /foo {\n\t\t  proxy_redirect off;\n\t\t  proxy_set_header   X-Real-IP\t\t\t$remote_addr;\n\t\t  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n\t\t  proxy_set_header   X-Forwarded-Proto $scheme;\n\t\t  proxy_set_header   Host\t\t\t\t   $http_host;\n\t\t  proxy_set_header   X-NginX-Proxy\ttrue;\n\t\t  proxy_set_header   Connection \"\";\n\t\t  proxy_http_version 1.1;\n\t\t  proxy_pass\t\t http://node_app;\n\t\t}\n\t\t#error_page  404\t\t\t  /404.html;\n\n\t\t# redirect server error pages to the static page /50x.html\n\t\t#\n\t\terror_page   500 502 503 504  /50x.html;\n\t\tlocation = /50x.html {\n\t\t\troot   html;\n\t\t}\n\t\t# proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\t\t#\n\t\t#location ~ \\.php$ {\n\t\t#\tproxy_pass   http://127.0.0.1;\n\t\t#}\n\t\t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t\t#\n\t\t#location ~ \\.php$ {\n\t\t#\troot\t\t   html;\n\t\t#\tfastcgi_pass   127.0.0.1:9000;\n\t\t#\tfastcgi_index  index.php;\n\t\t#\tfastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\t\t#\tinclude\t\tfastcgi_params;\n\t\t#}\n\t\t# deny access to .htaccess files, if Apache's document root\n\t\t# concurs with nginx's one\n\t\t#\n\t\t#location ~ /\\.ht {\n\t\t#\tdeny  all;\n\t\t#}\n\t}\n\t# another virtual host using mix of IP-, name-, and port-based configuration\n\t#\n\t#server {\n\t#\tlisten\t   8000;\n\t#\tlisten\t   somename:8080;\n\t#\tserver_name  somename  alias  another.alias;\n\t#\tlocation / {\n\t#\t\troot   html;\n\t#\t\tindex  index.html index.htm;\n\t#\t}\n\t#}\n\t# HTTPS server\n\t#\n\t#server {\n\t#\tlisten\t   443;\n\t#\tserver_name  localhost;\n\t#\tssl\t\t\t\t  on;\n\t#\tssl_certificate\t  cert.pem;\n\t#\tssl_certificate_key  cert.key;\n\t#\tssl_session_timeout  5m;\n\t#\tssl_protocols  SSLv2 SSLv3 TLSv1;\n\t#\tssl_ciphers  HIGH:!aNULL:!MD5;\n\t#\tssl_prefer_server_ciphers   on;\n\t#\tlocation / {\n\t#\t\troot   html;\n\t#\t\tindex  index.html index.htm;\n\t#\t}\n\t#}\n}\n```\n如前文所述，本教程只会涉及到整个配置文件的一部分。第一个需要关注的部分如下所示。\n```js\nupstream node_app {\n  server 127.0.0.1:8080;\n  server 127.0.0.1:8081;\n}\n```\n这部分的配置定义了一个 upstream 服务器，名称为 node_app 。对这个服务器的请求会分配到就两个ip地址上（这里只用端口区分了一下）。\n\n只是定义了一个upstream服务器还没有告诉nginx如何使用它。因此，我们必须使用如下的指令顶一个路由的规则。使用这个路由，任何的到/foo的请求都会被代理到之前配置的nodejs服务器上。\n```js\nlocation /foo {\n  proxy_redirect off;\n  proxy_set_header   X-Real-IP            $remote_addr;\n  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n  proxy_set_header   X-Forwarded-Proto $scheme;\n  proxy_set_header   Host                   $http_host;\n  proxy_set_header   X-NginX-Proxy    true;\n  proxy_set_header   Connection \"\";\n  proxy_http_version 1.1;\n  proxy_pass         http://node_app;\n}\n```\n# 最后\n\n本教程旨在介绍如何把单线程的Nodejs应用运行在多台机器的多个核心上。你也可以学到如何使用nodejs或者nginx建立一个负载均衡。当然本文不是深入的介绍如何在产品环境下运行的。因此，如果你使用的是nginx，还有很多其他的可以做的，比如缓存，来提高系统性能。你也会需要使用forever，如果崩溃的话这个工具可以重启你的nodejs进程。",
				"html": "<p>在Nodejs中使用集群还是不容易的。Javascript的单线程属性让nodejs下的应用很难使用现代机器的多核特性。比如下面的代码实现了一个http服务器的主干部分。这部分代码只会执行在一个线程上，不管这段代码运行的机器是单核的cpu还是1000个内核的cpu。<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"built_in\">parseInt</span>(process.argv[<span class=\"number\">2</span>]);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for:  \"</span> + request.url);</div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">  response.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">&#125;).listen(port);</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用多核特性\"><a href=\"#使用多核特性\" class=\"headerlink\" title=\"使用多核特性\"></a>使用多核特性</h1><p>只需要一点修改，上面的代码就可以把cpu的所有核心都用起来。上面的示例代码将使用 cluster 模块重构。 cluster 模块可以让你很容易的创建多个分享端口的进程。每一个进程使用一个系统核心，也就是代码中的 numCPUs 变量中cpu核心的一个。每一个子进程都实现了HTTP server，并监听指定的端口。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">\"cluster\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">\"os\"</span>).cpus().length;</div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"built_in\">parseInt</span>(process.argv[<span class=\"number\">2</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (cluster.isMaster) &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</div><div class=\"line\">    cluster.fork();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  cluster.on(<span class=\"string\">\"exit\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, code, signal</span>) </span>&#123;</div><div class=\"line\">    cluster.fork();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for:  \"</span> + request.url);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    response.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">  &#125;).listen(port);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"多机器的均衡\"><a href=\"#多机器的均衡\" class=\"headerlink\" title=\"多机器的均衡\"></a>多机器的均衡</h1><p>使用cluster模块，你就可以更高效的使用硬件。然而，你还是被限制在单一的机器上。如果你的应用有客观的访问量，你最终还是把负载分部在不同的机器上。使用reverse proxy server可以把并发的访问负载到不同的服务器上。</p>\n<p>Nodejitsu开发了 node-http-proxy 模块，一个开源的nodejs应用代理服务。使用以下命令可以安装这个模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install http-proxy</div></pre></td></tr></table></figure></p>\n<p>实际的使用可以参考以下代码。在这里例子中负载被分发到两台服务器上。首先测试反转代理，确保HTTP server运行在8080和8081两个端口上。接下来，运行反转代理，然后用浏览器访问这个代理。如果一切正常的话，你会发现请求被两个服务器交替处理。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> proxyServer = <span class=\"built_in\">require</span>(<span class=\"string\">'http-proxy'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"built_in\">parseInt</span>(process.argv[<span class=\"number\">2</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> servers = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">\"localhost\"</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8081</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">\"localhost\"</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">proxyServer.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, proxy</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> target = servers.shift();</div><div class=\"line\"></div><div class=\"line\">  proxy.proxyRequest(req, res, target);</div><div class=\"line\">  servers.push(target);</div><div class=\"line\">&#125;).listen(port);</div></pre></td></tr></table></figure></p>\n<p>当然，这个例子只使用了一台机器。然而，如果你有多台机器的话，你可以在一台机器上运行反向代理服务器，其他的机器上运行HTTP server。</p>\n<h1 id=\"使用nginx负载均衡\"><a href=\"#使用nginx负载均衡\" class=\"headerlink\" title=\"使用nginx负载均衡\"></a>使用nginx负载均衡</h1><p>使用nodejs写的反向代理有一个好处是你使用的技术都是一样的。但是，在生产环境下，更多使用的是nginx来处理负载均衡。nginx是一个开源的HTTP server和反向代理工具，尤其擅长处理静态文件，比如：CSS和HTML。因此，nginx常被用于处理站点的静态文件，和分发动态请求到nodejs的服务器上。</p>\n<p>要实现nginx的负载均衡，只需要安装nginx，之后把nodejs服务器作为upstream resource添加在配置文件中。配置文件的路劲一般是{nginx-root}/conf/nginx.conf，{nginx-root}是nginx安装的根目录。整个的配置文件请参考下面的示例。当然，我们只需要用到其中的一小部分。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\">#user  nobody;</div><div class=\"line\">worker_processes  1;</div><div class=\"line\">#error_log  logs/error.log;</div><div class=\"line\">#error_log  logs/error.log  notice;</div><div class=\"line\">#error_log  logs/error.log  info;</div><div class=\"line\"></div><div class=\"line\">#pid\t\tlogs/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">\tworker_connections  1024;</div><div class=\"line\">&#125;</div><div class=\"line\">http &#123;</div><div class=\"line\">\tinclude\t   mime.types;</div><div class=\"line\">\tdefault_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">\t#log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">\t#\t\t\t\t  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">\t#\t\t\t\t  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\">\t#access_log  logs/access.log  main;</div><div class=\"line\"></div><div class=\"line\">\tsendfile\t\ton;</div><div class=\"line\">\t#tcp_nopush\t on;</div><div class=\"line\">\t#keepalive_timeout  0;</div><div class=\"line\">\tkeepalive_timeout  65;</div><div class=\"line\">\t#gzip  on;</div><div class=\"line\">\tupstream node_app &#123;</div><div class=\"line\">\t  server 127.0.0.1:8080;</div><div class=\"line\">\t  server 127.0.0.1:8081;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tserver &#123;</div><div class=\"line\">\t\tlisten\t   80;</div><div class=\"line\">\t\tserver_name  localhost;</div><div class=\"line\">\t\t#charset koi8-r;</div><div class=\"line\">\t\t#access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">\t\tlocation / &#123;</div><div class=\"line\">\t\t\troot   html;</div><div class=\"line\">\t\t\tindex  index.html index.htm;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlocation /foo &#123;</div><div class=\"line\">\t\t  proxy_redirect off;</div><div class=\"line\">\t\t  proxy_set_header   X-Real-IP\t\t\t$remote_addr;</div><div class=\"line\">\t\t  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</div><div class=\"line\">\t\t  proxy_set_header   X-Forwarded-Proto $scheme;</div><div class=\"line\">\t\t  proxy_set_header   Host\t\t\t\t   $http_host;</div><div class=\"line\">\t\t  proxy_set_header   X-NginX-Proxy\ttrue;</div><div class=\"line\">\t\t  proxy_set_header   Connection &quot;&quot;;</div><div class=\"line\">\t\t  proxy_http_version 1.1;</div><div class=\"line\">\t\t  proxy_pass\t\t http://node_app;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t#error_page  404\t\t\t  /404.html;</div><div class=\"line\"></div><div class=\"line\">\t\t# redirect server error pages to the static page /50x.html</div><div class=\"line\">\t\t#</div><div class=\"line\">\t\terror_page   500 502 503 504  /50x.html;</div><div class=\"line\">\t\tlocation = /50x.html &#123;</div><div class=\"line\">\t\t\troot   html;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t# proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class=\"line\">\t\t#</div><div class=\"line\">\t\t#location ~ \\.php$ &#123;</div><div class=\"line\">\t\t#\tproxy_pass   http://127.0.0.1;</div><div class=\"line\">\t\t#&#125;</div><div class=\"line\">\t\t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class=\"line\">\t\t#</div><div class=\"line\">\t\t#location ~ \\.php$ &#123;</div><div class=\"line\">\t\t#\troot\t\t   html;</div><div class=\"line\">\t\t#\tfastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">\t\t#\tfastcgi_index  index.php;</div><div class=\"line\">\t\t#\tfastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class=\"line\">\t\t#\tinclude\t\tfastcgi_params;</div><div class=\"line\">\t\t#&#125;</div><div class=\"line\">\t\t# deny access to .htaccess files, if Apache&apos;s document root</div><div class=\"line\">\t\t# concurs with nginx&apos;s one</div><div class=\"line\">\t\t#</div><div class=\"line\">\t\t#location ~ /\\.ht &#123;</div><div class=\"line\">\t\t#\tdeny  all;</div><div class=\"line\">\t\t#&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t# another virtual host using mix of IP-, name-, and port-based configuration</div><div class=\"line\">\t#</div><div class=\"line\">\t#server &#123;</div><div class=\"line\">\t#\tlisten\t   8000;</div><div class=\"line\">\t#\tlisten\t   somename:8080;</div><div class=\"line\">\t#\tserver_name  somename  alias  another.alias;</div><div class=\"line\">\t#\tlocation / &#123;</div><div class=\"line\">\t#\t\troot   html;</div><div class=\"line\">\t#\t\tindex  index.html index.htm;</div><div class=\"line\">\t#\t&#125;</div><div class=\"line\">\t#&#125;</div><div class=\"line\">\t# HTTPS server</div><div class=\"line\">\t#</div><div class=\"line\">\t#server &#123;</div><div class=\"line\">\t#\tlisten\t   443;</div><div class=\"line\">\t#\tserver_name  localhost;</div><div class=\"line\">\t#\tssl\t\t\t\t  on;</div><div class=\"line\">\t#\tssl_certificate\t  cert.pem;</div><div class=\"line\">\t#\tssl_certificate_key  cert.key;</div><div class=\"line\">\t#\tssl_session_timeout  5m;</div><div class=\"line\">\t#\tssl_protocols  SSLv2 SSLv3 TLSv1;</div><div class=\"line\">\t#\tssl_ciphers  HIGH:!aNULL:!MD5;</div><div class=\"line\">\t#\tssl_prefer_server_ciphers   on;</div><div class=\"line\">\t#\tlocation / &#123;</div><div class=\"line\">\t#\t\troot   html;</div><div class=\"line\">\t#\t\tindex  index.html index.htm;</div><div class=\"line\">\t#\t&#125;</div><div class=\"line\">\t#&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如前文所述，本教程只会涉及到整个配置文件的一部分。第一个需要关注的部分如下所示。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream node_app &#123;</div><div class=\"line\">  server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8080</span>;</div><div class=\"line\">  server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8081</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这部分的配置定义了一个 upstream 服务器，名称为 node_app 。对这个服务器的请求会分配到就两个ip地址上（这里只用端口区分了一下）。</p>\n<p>只是定义了一个upstream服务器还没有告诉nginx如何使用它。因此，我们必须使用如下的指令顶一个路由的规则。使用这个路由，任何的到/foo的请求都会被代理到之前配置的nodejs服务器上。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /foo &#123;</div><div class=\"line\">  proxy_redirect off;</div><div class=\"line\">  proxy_set_header   X-Real-IP            $remote_addr;</div><div class=\"line\">  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</div><div class=\"line\">  proxy_set_header   X-Forwarded-Proto $scheme;</div><div class=\"line\">  proxy_set_header   Host                   $http_host;</div><div class=\"line\">  proxy_set_header   X-NginX-<span class=\"built_in\">Proxy</span>    <span class=\"literal\">true</span>;</div><div class=\"line\">  proxy_set_header   Connection <span class=\"string\">\"\"</span>;</div><div class=\"line\">  proxy_http_version <span class=\"number\">1.1</span>;</div><div class=\"line\">  proxy_pass         http:<span class=\"comment\">//node_app;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>本教程旨在介绍如何把单线程的Nodejs应用运行在多台机器的多个核心上。你也可以学到如何使用nodejs或者nginx建立一个负载均衡。当然本文不是深入的介绍如何在产品环境下运行的。因此，如果你使用的是nginx，还有很多其他的可以做的，比如缓存，来提高系统性能。你也会需要使用forever，如果崩溃的话这个工具可以重启你的nodejs进程。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1496998358890,
				"created_by": 2,
				"updated_at": 1496998360759,
				"updated_by": 2,
				"published_at": 1496998358890,
				"published_by": 2
			},
			{
				"id": "cj3maj58l000038fco7c2ggq4",
				"title": "grpc之node调用静态代码",
				"slug": "grpc_node_static",
				"markdown": "\n# 创建项目文件夹，初始化项目\n我的文件夹为grpctest\ncd到项目文件下，运行 npm init\n\n<!--more-->\n\n# 安装protoc以及grpc插件\n这个用npm直接安装\n```\nnpm install grpc-tools --save-dev\nnpm install google-protobuf --save\nnpm install grpc --save\n```\n在./node_modules/grpc-tools/bin下，你会找到 protoc.exe 和 grpc_node_plugin.exe两个文件。\n# 编写.proto文件并使用protoc 进行编译\nHelloWorldService.proto\n```js\nsyntax = \"proto3\";\npackage com.sdp.grpctest;\nmessage HelloRequest{\n  string name = 1;\n}\nmessage HelloResponse{\n  string helloString = 1;\n}\n// 服务HelloWorld\nservice HelloWorldService{\n  rpc hello (HelloRequest) returns (HelloResponse){}\n}\n```\n# 运行编译命令\n```\n./node_modules/grpc-tools/bin/protoc --js_out=import_style=commonjs,binary:./ --plugin=protoc-gen-grpc=./node_modules/grpc-tools/bin/grpc_node_plugin.exe --grpc_out=./ HelloWorldService.proto\n```\n运行完成后，会生成HelloWorldService_grpc_pb.js 和 HelloWorldServer_pb.js两个文件。\n# 编写server.js文件\nserver.js\n```js\nvar services = require('./HelloWorldService_grpc_pb.js');\nvar messages = require('./HelloWorldService_pb.js');\nvar grpc = require('grpc')\nvar hello = function(call, callback) {\n  var response = new messages.HelloResponse();\n  response.setHellostring(\"hello,\" + call.request.getName());\n  callback(null, response);\n}\nvar server = new grpc.Server();\nserver.addService(\n  services.HelloWorldServiceService,\n  {\n    hello:hello\n  }\n);\nserver.bind('0.0.0.0:50051', grpc.ServerCredentials.createInsecure());\nserver.start(function(err,data){\n  console.log(err);\n  console.log(data);\n});\n```\n运行node server.js启动server\n\n# 编写client.js文件\n```js\nvar grpc = require('grpc');\nvar messages = require('./HelloWorldService_pb.js');\nvar services = require('./HelloWorldService_grpc_pb.js')\nvar request = new messages.HelloRequest();\nrequest.setName('world');\nvar client = new services.HelloWorldServiceClient(\n  'localhost:50051',\n  grpc.credentials.createInsecure()\n);\nclient.hello(request, function(err,data){\n  if(err){\n    console.error(err);\n  }\n  console.log(data);\n  console.log(data.getHellostring());\n})\n```\n运行node client.js ， 最后成功打印出hello,world",
				"html": "<h1 id=\"创建项目文件夹，初始化项目\"><a href=\"#创建项目文件夹，初始化项目\" class=\"headerlink\" title=\"创建项目文件夹，初始化项目\"></a>创建项目文件夹，初始化项目</h1><p>我的文件夹为grpctest<br>cd到项目文件下，运行 npm init</p>\n<a id=\"more\"></a>\n<h1 id=\"安装protoc以及grpc插件\"><a href=\"#安装protoc以及grpc插件\" class=\"headerlink\" title=\"安装protoc以及grpc插件\"></a>安装protoc以及grpc插件</h1><p>这个用npm直接安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install grpc-tools --save-dev</div><div class=\"line\">npm install google-protobuf --save</div><div class=\"line\">npm install grpc --save</div></pre></td></tr></table></figure></p>\n<p>在./node_modules/grpc-tools/bin下，你会找到 protoc.exe 和 grpc_node_plugin.exe两个文件。</p>\n<h1 id=\"编写-proto文件并使用protoc-进行编译\"><a href=\"#编写-proto文件并使用protoc-进行编译\" class=\"headerlink\" title=\"编写.proto文件并使用protoc 进行编译\"></a>编写.proto文件并使用protoc 进行编译</h1><p>HelloWorldService.proto<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</div><div class=\"line\">package com.sdp.grpctest;</div><div class=\"line\">message HelloRequest&#123;</div><div class=\"line\">  string name = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">message HelloResponse&#123;</div><div class=\"line\">  string helloString = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 服务HelloWorld</span></div><div class=\"line\">service HelloWorldService&#123;</div><div class=\"line\">  rpc hello (HelloRequest) returns (HelloResponse)&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"运行编译命令\"><a href=\"#运行编译命令\" class=\"headerlink\" title=\"运行编译命令\"></a>运行编译命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./node_modules/grpc-tools/bin/protoc --js_out=import_style=commonjs,binary:./ --plugin=protoc-gen-grpc=./node_modules/grpc-tools/bin/grpc_node_plugin.exe --grpc_out=./ HelloWorldService.proto</div></pre></td></tr></table></figure>\n<p>运行完成后，会生成HelloWorldService_grpc_pb.js 和 HelloWorldServer_pb.js两个文件。</p>\n<h1 id=\"编写server-js文件\"><a href=\"#编写server-js文件\" class=\"headerlink\" title=\"编写server.js文件\"></a>编写server.js文件</h1><p>server.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> services = <span class=\"built_in\">require</span>(<span class=\"string\">'./HelloWorldService_grpc_pb.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> messages = <span class=\"built_in\">require</span>(<span class=\"string\">'./HelloWorldService_pb.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> grpc = <span class=\"built_in\">require</span>(<span class=\"string\">'grpc'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">call, callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> response = <span class=\"keyword\">new</span> messages.HelloResponse();</div><div class=\"line\">  response.setHellostring(<span class=\"string\">\"hello,\"</span> + call.request.getName());</div><div class=\"line\">  callback(<span class=\"literal\">null</span>, response);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> grpc.Server();</div><div class=\"line\">server.addService(</div><div class=\"line\">  services.HelloWorldServiceService,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">hello</span>:hello</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\">server.bind(<span class=\"string\">'0.0.0.0:50051'</span>, grpc.ServerCredentials.createInsecure());</div><div class=\"line\">server.start(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>运行node server.js启动server</p>\n<h1 id=\"编写client-js文件\"><a href=\"#编写client-js文件\" class=\"headerlink\" title=\"编写client.js文件\"></a>编写client.js文件</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> grpc = <span class=\"built_in\">require</span>(<span class=\"string\">'grpc'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> messages = <span class=\"built_in\">require</span>(<span class=\"string\">'./HelloWorldService_pb.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> services = <span class=\"built_in\">require</span>(<span class=\"string\">'./HelloWorldService_grpc_pb.js'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> messages.HelloRequest();</div><div class=\"line\">request.setName(<span class=\"string\">'world'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> services.HelloWorldServiceClient(</div><div class=\"line\">  <span class=\"string\">'localhost:50051'</span>,</div><div class=\"line\">  grpc.credentials.createInsecure()</div><div class=\"line\">);</div><div class=\"line\">client.hello(request, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data.getHellostring());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>运行node client.js ， 最后成功打印出hello,world</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1496797391474,
				"created_by": 2,
				"updated_at": 1496797472452,
				"updated_by": 2,
				"published_at": 1496797391474,
				"published_by": 2
			},
			{
				"id": "cj1od6kd700005wfc4wqu5kdf",
				"title": "dva中所用到的ES6知识点",
				"slug": "es6-dva-require",
				"markdown": "\n不知大家学 react 或 dva 时会不会有这样的疑惑：\n\n- es6 特性那么多，我需要全部学会吗?\n- react component 有 3 种写法，我需要全部学会吗?\n- reducer 的增删改应该怎么写?\n- 怎么做全局/局部的错误处理?\n- 怎么发异步请求?\n- 怎么处理复杂的异步业务逻辑?\n- 怎么配置路由?\n- ...\n\n这篇文档梳理了基于 [dva-cli](https://github.com/dvajs/dva-cli) 使用 [dva](https://github.com/dvajs/dva) 的最小知识集，让你可以用最少的时间掌握创建类似 [dva-hackernews](https://github.com/dvajs/dva-hackernews) 的全部知识，并且不需要掌握额外的冗余知识。\n<!--more-->\n## 目录\n\n* [JavaScript 语言](#javascript-语言)\n  * [变量声明](#变量声明)\n    * [const 和 let](#const-和-let)\n    * [模板字符串](#模板字符串)\n    * [默认参数](#默认参数)\n  * [箭头函数](#箭头函数)\n  * [模块的 Import 和 Export](#模块的-import-和-export)\n  * [ES6 对象和数组](#es6-对象和数组)\n    * [析构赋值](#析构赋值)\n    * [对象字面量改进](#对象字面量改进)\n    * [Spread Operator](#spread-operator)\n  * [Promises](#promises)\n  * [Generators](#generators)\n* [React Component](#react-component)\n  * [Stateless Functional Components](#stateless-functional-components)\n  * [JSX](#jsx)\n    * [Component 嵌套](#component-嵌套)\n    * [className](#classname)\n    * [JavaScript 表达式](#javascript-表达式)\n    * [Mapping Arrays to JSX](#mapping-arrays-to-jsx)\n    * [注释](#注释)\n    * [Spread Attributes](#spread-attributes)\n  * [Props](#props)\n    * [propTypes](#proptypes)\n    * [往下传数据](#往下传数据)\n    * [往上传数据](#往上传数据)\n  * [CSS Modules](#css-modules)\n    * [理解 CSS Modules](#理解-css-modules)\n    * [定义全局 CSS](#定义全局-css)\n    * [classnames Package](#classnames-package)\n* [Reducer](#reducer)\n  * [增删改](#增删改)\n  * [嵌套数据的增删改](#嵌套数据的增删改)\n* [Effect](#effect)\n  * [Effects](#effects)\n    * [put](#put)\n    * [call](#call)\n    * [select](#select)\n  * [错误处理](#错误处理)\n    * [全局错误处理](#全局错误处理)\n    * [本地错误处理](#本地错误处理)\n  * [异步请求](#异步请求)\n    * [GET 和 POST](#get-和-post)\n    * [统一错误处理](#统一错误处理)\n* [Subscription](#subscription)\n  * [异步数据初始化](#异步数据初始化)\n    * [path-to-regexp Package](#path-to-regexp-package)\n* [Router](#router)\n  * [Config with JSX Element (router.js)](#config-with-jsx-element-routerjs)\n  * [Route Components](#route-components)\n    * [通过 connect 绑定数据](#通过-connect-绑定数据)\n    * [Injected Props (e.g. location)](#injected-props-eg-location)\n  * [基于 action 进行页面跳转](#基于-action-进行页面跳转)\n* [dva 配置](#dva-配置)\n  * [Redux Middleware](#redux-middleware)\n  * [history](#history)\n    * [切换 history 为 browserHistory](#切换-history-为-browserhistory)\n    * [去除 hashHistory 下的 _k 查询参数](#去除-hashhistory-下的-_k-查询参数)\n* [工具](#工具)\n  * [通过 dva-cli 创建项目](#通过-dva-cli-创建项目)\n\n## JavaScript 语言\n\n### 变量声明\n\n#### const 和 let\n\n不要用 `var`，而是用 `const` 和 `let`，分别表示常量和变量。不同于 `var` 的函数作用域，`const` 和 `let` 都是块级作用域。\n\n```javascript\nconst DELAY = 1000;\n\nlet count = 0;\ncount = count + 1;\n```\n\n#### 模板字符串\n\n模板字符串提供了另一种做字符串组合的方法。\n\n```javascript\nconst user = 'world';\nconsole.log(`hello ${user}`);  // hello world\n\n// 多行\nconst content = `\n  Hello ${firstName},\n  Thanks for ordering ${qty} tickets to ${event}.\n`;\n```\n\n#### 默认参数\n\n```javascript\nfunction logActivity(activity = 'skiing') {\n  console.log(activity);\n}\n\nlogActivity();  // skiing\n```\n\n### 箭头函数\n\n函数的快捷写法，不需要通过 `function` 关键字创建函数，并且还可以省略 `return` 关键字。\n\n同时，箭头函数还会继承当前上下文的 `this` 关键字。\n\n比如：\n\n```javascript\n[1, 2, 3].map(x => x + 1);  // [2, 3, 4]\n```\n\n等同于：\n\n```javascript\n[1, 2, 3].map((function(x) {\n  return x + 1;\n}).bind(this));\n```\n\n### 模块的 Import 和 Export\n\n`import` 用于引入模块，`export` 用于导出模块。\n\n比如：\n\n```javascript\n// 引入全部\nimport dva from 'dva';\n\n// 引入部分\nimport { connect } from 'dva';\nimport { Link, Route } from 'dva/router';\n\n// 引入全部并作为 github 对象\nimport * as github from './services/github';\n\n// 导出默认\nexport default App;\n// 部分导出，需 import { App } from './file'; 引入\nexport class App extend Component {};\n```\n\n### ES6 对象和数组\n\n#### 析构赋值\n\n析构赋值让我们从 Object 或 Array 里取部分数据存为变量。\n\n```javascript\n// 对象\nconst user = { name: 'guanguan', age: 2 };\nconst { name, age } = user;\nconsole.log(`${name} : ${age}`);  // guanguan : 2\n\n// 数组\nconst arr = [1, 2];\nconst [foo, bar] = arr;\nconsole.log(foo);  // 1\n```\n\n我们也可以析构传入的函数参数。\n\n```javascript\nconst add = (state, { payload }) => {\n  return state.concat(payload);\n};\n```\n\n析构时还可以配 alias，让代码更具有语义。\n\n```javascript\nconst add = (state, { payload: todo }) => {\n  return state.concat(todo);\n};\n```\n\n#### 对象字面量改进\n\n这是析构的反向操作，用于重新组织一个 Object 。\n\n```javascript\nconst name = 'duoduo';\nconst age = 8;\n\nconst user = { name, age };  // { name: 'duoduo', age: 8 }\n```\n\n定义对象方法时，还可以省去 `function` 关键字。\n\n```javascript\napp.model({\n  reducers: {\n    add() {}  // 等同于 add: function() {}\n  },\n  effects: {\n    *addRemote() {}  // 等同于 addRemote: function*() {}\n  },\n});\n```\n\n#### Spread Operator\n\nSpread Operator 即 3 个点 `...`，有几种不同的使用方法。\n\n可用于组装数组。\n\n```javascript\nconst todos = ['Learn dva'];\n[...todos, 'Learn antd'];  // ['Learn dva', 'Learn antd']\n```\n\n也可用于获取数组的部分项。\n\n```javascript\nconst arr = ['a', 'b', 'c'];\nconst [first, ...rest] = arr;\nrest;  // ['b', 'c']\n\n// With ignore\nconst [first, , ...rest] = arr;\nrest;  // ['c']\n```\n\n还可收集函数参数为数组。\n\n```javascript\nfunction directions(first, ...rest) {\n  console.log(rest);\n}\ndirections('a', 'b', 'c');  // ['b', 'c'];\n```\n\n代替 apply。\n\n```javascript\nfunction foo(x, y, z) {}\nconst args = [1,2,3];\n\n// 下面两句效果相同\nfoo.apply(null, args);\nfoo(...args);\n```\n\n对于 Object 而言，用于组合成新的 Object 。(ES2017 stage-2 proposal)\n\n```javascript\nconst foo = {\n  a: 1,\n  b: 2,\n};\nconst bar = {\n  b: 3,\n  c: 2,\n};\nconst d = 4;\n\nconst ret = { ...foo, ...bar, d };  // { a:1, b:3, c:2, d:4 }\n```\n\n此外，在 JSX 中 Spread Operator 还可用于扩展 props，详见 [Spread Attributes](#spread-attributes)。\n\n### Promises\n\nPromise 用于更优雅地处理异步请求。比如发起异步请求：\n\n```javascript\nfetch('/api/todos')\n  .then(res => res.json())\n  .then(data => ({ data }))\n  .catch(err => ({ err }));\n```\n\n定义 Promise 。\n\n```javascript\nconst delay = (timeout) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n};\n\ndelay(1000).then(_ => {\n  console.log('executed');\n});\n```\n\n### Generators\n\ndva 的 effects 是通过 generator 组织的。Generator 返回的是迭代器，通过 `yield` 关键字实现暂停功能。\n\n这是一个典型的 dva effect，通过 `yield` 把异步逻辑通过同步的方式组织起来。\n\n```javascript\napp.model({\n  namespace: 'todos',\n  effects: {\n    *addRemote({ payload: todo }, { put, call }) {\n      yield call(addTodo, todo);\n      yield put({ type: 'add', payload: todo });\n    },\n  },\n});\n```\n\n## React Component\n\n###  Stateless Functional Components\n\nReact Component 有 3 种定义方式，分别是 `React.createClass`, `class` 和 `Stateless Functional Component`。推荐尽量使用最后一种，保持简洁和无状态。这是函数，不是 Object，没有 `this` 作用域，是 pure function。\n\n比如定义 App Component 。\n\n```javascript\nfunction App(props) {\n  function handleClick() {\n    props.dispatch({ type: 'app/create' });\n  }\n  return <div onClick={handleClick}>${props.name}</div>\n}\n```\n\n等同于：\n\n```javascript\nclass App extends React.Componnet {\n  handleClick() {\n    this.props.dispatch({ type: 'app/create' });\n  }\n  render() {\n    return <div onClick={this.handleClick.bind(this)}>${this.props.name}</div>\n  }\n}\n```\n\n### JSX\n\n#### Component 嵌套\n\n类似 HTML，JSX 里可以给组件添加子组件。\n\n```html\n<App>\n  <Header />\n  <MainContent />\n  <Footer />\n</App>\n```\n\n#### className\n\n`class` 是保留词，所以添加样式时，需用 `className` 代替 `class` 。\n\n```html\n<h1 className=\"fancy\">Hello dva</h1>\n```\n\n#### JavaScript 表达式\n\nJavaScript 表达式需要用 `{}` 括起来，会执行并返回结果。\n\n比如：\n\n```javascript\n<h1>{ this.props.title }</h1>\n```\n\n#### Mapping Arrays to JSX\n\n可以把数组映射为 JSX 元素列表。\n\n```javascript\n<ul>\n  { this.props.todos.map((todo, i) => <li key={i}>{todo}</li>) }\n</ul>\n```\n\n#### 注释\n\n尽量别用 `//` 做单行注释。\n\n```javascript\n<h1>\n  {/* multiline comment */}\n  {/*\n    multi\n    line\n    comment\n    */}\n  {\n    // single line\n  }\n  Hello\n</h1>\n```\n\n#### Spread Attributes\n\n这是 JSX 从 ECMAScript6 借鉴过来的很有用的特性，用于扩充组件 props 。\n\n比如：\n\n```javascript\nconst attrs = {\n  href: 'http://example.org',\n  target: '_blank',\n};\n<a {...attrs}>Hello</a>\n```\n\n等同于\n\n```javascript\nconst attrs = {\n  href: 'http://example.org',\n  target: '_blank',\n};\n<a href={attrs.href} target={attrs.target}>Hello</a>\n```\n\n### Props\n\n数据处理在 React 中是非常重要的概念之一，分别可以通过 props, state 和 context 来处理数据。而在 dva 应用里，你只需关心 props 。\n\n#### propTypes\n\nJavaScript 是弱类型语言，所以请尽量声明 propTypes 对 props 进行校验，以减少不必要的问题。\n\n```javascript\nfunction App(props) {\n  return <div>{props.name}</div>;\n}\nApp.propTypes = {\n  name: React.PropTypes.string.isRequired,\n};\n```\n\n内置的 prop type 有：\n\n- PropTypes.array\n- PropTypes.bool\n- PropTypes.func\n- PropTypes.number\n- PropTypes.object\n- PropTypes.string\n\n#### 往下传数据\n\n![](https://zos.alipayobjects.com/rmsportal/NAzeMyUoPMqxfRv.png)\n\n#### 往上传数据\n\n![](https://zos.alipayobjects.com/rmsportal/fiKKgDGuEJfSvxv.png)\n\n### CSS Modules\n\n<img src=\"https://zos.alipayobjects.com/rmsportal/mHVRpjNYhVuFdsS.png\" width=\"150\" style=\"background:#fff;\" />\n\n#### 理解 CSS Modules\n\n一张图理解 CSS Modules 的工作原理：\n\n![](https://zos.alipayobjects.com/rmsportal/SWBwWTbZKqxwEPq.png)\n\n`button` class 在构建之后会被重命名为 `ProductList_button_1FU0u` 。`button` 是 local name，而 `ProductList_button_1FU0u` 是 global name 。**你可以用简短的描述性名字，而不需要关心命名冲突问题。**\n\n然后你要做的全部事情就是在 css/less 文件里写 `.button {...}`，并在组件里通过 `styles.button` 来引用他。\n\n#### 定义全局 CSS\n\nCSS Modules 默认是局部作用域的，想要声明一个全局规则，可用 `:global` 语法。\n\n比如：\n\n```css\n.title {\n  color: red;\n}\n:global(.title) {\n  color: green;\n}\n```\n\n然后在引用的时候：\n\n```javascript\n<App className={styles.title} /> // red\n<App className=\"title\" />        // green\n```\n\n#### `classnames` Package\n\n在一些复杂的场景中，一个元素可能对应多个 className，而每个 className 又基于一些条件来决定是否出现。这时，[classnames](https://github.com/JedWatson/classnames) 这个库就非常有用。\n\n```javascript\nimport classnames from 'classnames';\nconst App = (props) => {\n  const cls = classnames({\n    btn: true,\n    btnLarge: props.type === 'submit',\n    btnSmall: props.type === 'edit',\n  });\n  return <div className={ cls } />;\n}\n```\n\n这样，传入不同的 type 给 App 组件，就会返回不同的 className 组合：\n\n```javascript\n<App type=\"submit\" /> // btn btnLarge\n<App type=\"edit\" />   // btn btnSmall\n```\n\n## Reducer\n\nreducer 是一个函数，接受 state 和 action，返回老的或新的 state 。即：`(state, action) => state`\n\n### 增删改\n\n以 todos 为例。\n\n```javascript\napp.model({\n  namespace: 'todos',\n  state: [],\n  reducers: {\n    add(state, { payload: todo }) {\n      return state.concat(todo);\n    },\n    remove(state, { payload: id }) {\n      return state.filter(todo => todo.id !== id);\n    },\n    update(state, { payload: updatedTodo }) {\n      return state.map(todo => {\n        if (todo.id === updatedTodo.id) {\n          return { ...todo, ...updatedTodo };\n        } else {\n          return todo;\n        }\n      });\n    },\n  },\n};\n```\n\n### 嵌套数据的增删改\n\n建议最多一层嵌套，以保持 state 的扁平化，深层嵌套会让 reducer 很难写和难以维护。\n\n```javascript\napp.model({\n  namespace: 'app',\n  state: {\n    todos: [],\n    loading: false,\n  },\n  reducers: {\n    add(state, { payload: todo }) {\n      const todos = state.todos.concat(todo);\n      return { ...state, todos };\n    },\n  },\n});\n```\n\n下面是深层嵌套的例子，应尽量避免。\n\n```javascript\napp.model({\n  namespace: 'app',\n  state: {\n    a: {\n      b: {\n        todos: [],\n        loading: false,\n      },\n    },\n  },\n  reducers: {\n    add(state, { payload: todo }) {\n      const todos = state.a.b.todos.concat(todo);\n      const b = { ...state.a.b, todos };\n      const a = { ...state.a, b };\n      return { ...state, a };\n    },\n  },\n});\n```\n\n## Effect\n\n示例：\n\n```javascript\napp.model({\n  namespace: 'todos',\n  effects: {\n    *addRemote({ payload: todo }, { put, call }) {\n      yield call(addTodo, todo);\n      yield put({ type: 'add', payload: todo });\n    },\n  },\n});\n```\n\n### Effects\n\n#### put\n\n用于触发 action 。\n\n```javascript\nyield put({ type: 'todos/add', payload: 'Learn Dva' });\n```\n\n#### call\n\n用于调用异步逻辑，支持 promise 。\n\n```javascript\nconst result = yield call(fetch, '/todos');\n```\n\n#### select\n\n用于从 state 里获取数据。\n\n```javascript\nconst todos = yield select(state => state.todos);\n```\n\n### 错误处理\n\n#### 全局错误处理\n\ndva 里，effects 和 subscriptions 的抛错全部会走 `onError` hook，所以可以在 `onError` 里统一处理错误。\n\n```javascript\nconst app = dva({\n  onError(e, dispatch) {\n    console.log(e.message);\n  },\n});\n```\n\n然后 effects 里的抛错和 reject 的 promise 就都会被捕获到了。\n\n#### 本地错误处理\n\n如果需要对某些 effects 的错误进行特殊处理，需要在 effect 内部加 `try catch` 。\n\n```javascript\napp.model({\n  effects: {\n    *addRemote() {\n      try {\n        // Your Code Here\n      } catch(e) {\n        console.log(e.message);\n      }\n    },\n  },\n});\n```\n\n### 异步请求\n\n异步请求基于 whatwg-fetch，API 详见：https://github.com/github/fetch\n\n#### GET 和 POST\n\n```javascript\nimport request from '../util/request';\n\n// GET\nrequest('/api/todos');\n\n// POST\nrequest('/api/todos', {\n  method: 'POST',\n  body: JSON.stringify({ a: 1 }),\n});\n```\n\n#### 统一错误处理\n\n加入约定后台返回以下格式时，做统一的错误处理。\n\n```javascript\n{\n  status: 'error',\n  message: '',\n}\n```\n\n编辑 `utils/request.js`，加入以下中间件：\n\n```javascript\nfunction parseErrorMessage({ data }) {\n  const { status, message } = data;\n  if (status === 'error') {\n    throw new Error(message);\n  }\n  return { data };\n}\n```\n\n然后，这类错误就会走到 `onError` hook 里。\n\n## Subscription\n\n`subscriptions` 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。格式为 `({ dispatch, history }) => unsubscribe` 。\n\n### 异步数据初始化\n\n比如：当用户进入 `/users` 页面时，触发 action `users/fetch` 加载用户数据。\n\n```javascript\napp.model({\n  subscriptions: {\n    setup({ dispatch, history }) {\n      history.listen(({ pathname }) => {\n        if (pathname === '/users') {\n          dispatch({\n            type: 'users/fetch',\n          });\n        }\n      });\n    },\n  },\n});\n```\n\n#### `path-to-regexp` Package\n\n如果 url 规则比较复杂，比如 `/users/:userId/search`，那么匹配和 userId 的获取都会比较麻烦。这是推荐用 [path-to-regexp](https://github.com/pillarjs/path-to-regexp) 简化这部分逻辑。\n\n```javascript\nimport pathToRegexp from 'path-to-regexp';\n\n// in subscription\nconst match = pathToRegexp('/users/:userId/search').exec(pathname);\nif (match) {\n  const userId = match[1];\n  // dispatch action with userId\n}\n```\n\n## Router\n\n### Config with JSX Element (router.js)\n\n```javascript\n<Route path=\"/\" component={App}>\n  <Route path=\"accounts\" component={Accounts}/>\n  <Route path=\"statements\" component={Statements}/>\n</Route>\n```\n\n详见：[react-router](https://github.com/reactjs/react-router/blob/master/docs/guides/RouteConfiguration.md)\n\n### Route Components\n\nRoute Components 是指 `./src/routes/` 目录下的文件，他们是 `./src/router.js` 里匹配的 Component。\n\n#### 通过 connect 绑定数据\n\n比如：\n\n```javascript\nimport { connect } from 'dva';\nfunction App() {}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    users: state.users,\n  };\n}\nexport default connect(mapStateToProps)(App);\n```\n\n然后在 App 里就有了 `dispatch` 和 `users` 两个属性。\n\n#### Injected Props (e.g. location)\n\nRoute Component 会有额外的 props 用以获取路由信息。\n\n- location\n- params\n- children\n\n更多详见：[react-router](https://github.com/reactjs/react-router/blob/master/docs/API.md#injected-props)\n\n### 基于 action 进行页面跳转\n\n```javascript\nimport { routerRedux } from 'dva/router';\n\n// Inside Effects\nyield put(routerRedux.push('/logout'));\n\n// Outside Effects\ndispatch(routerRedux.push('/logout'));\n\n// With query\nrouterRedux.push({\n  pathname: '/logout',\n  query: {\n    page: 2,\n  },\n});\n```\n\n除 `push(location)` 外还有更多方法，详见 [react-router-redux](https://github.com/reactjs/react-router-redux#pushlocation-replacelocation-gonumber-goback-goforward)\n\n## dva 配置\n\n### Redux Middleware\n\n比如要添加 redux-logger 中间件：\n\n```javascript\nimport createLogger from 'redux-logger';\nconst app = dva({\n  onAction: createLogger(),\n});\n```\n\n注：onAction 支持数组，可同时传入多个中间件。\n\n### history\n\n#### 切换 history 为 browserHistory\n\n```javascript\nimport { browserHistory } from 'dva/router';\nconst app = dva({\n  history: browserHistory,\n});\n```\n\n#### 去除 hashHistory 下的 _k 查询参数\n\n```javascript\nimport { useRouterHistory } from 'dva/router';\nimport { createHashHistory } from 'history';\nconst app = dva({\n  history: useRouterHistory(createHashHistory)({ queryKey: false }),\n});\n```\n\n## 工具\n\n### 通过 dva-cli 创建项目\n\n先安装 dva-cli 。\n\n```bash\n$ npm install dva-cli -g\n```\n\n然后创建项目。\n\n```bash\n$ dva new myapp\n```\n\n最后，进入目录并启动。\n\n```bash\n$ cd myapp\n$ npm start\n```\n",
				"html": "<p>不知大家学 react 或 dva 时会不会有这样的疑惑：</p>\n<ul>\n<li>es6 特性那么多，我需要全部学会吗?</li>\n<li>react component 有 3 种写法，我需要全部学会吗?</li>\n<li>reducer 的增删改应该怎么写?</li>\n<li>怎么做全局/局部的错误处理?</li>\n<li>怎么发异步请求?</li>\n<li>怎么处理复杂的异步业务逻辑?</li>\n<li>怎么配置路由?</li>\n<li>…</li>\n</ul>\n<p>这篇文档梳理了基于 <a href=\"https://github.com/dvajs/dva-cli\" target=\"_blank\" rel=\"external\">dva-cli</a> 使用 <a href=\"https://github.com/dvajs/dva\" target=\"_blank\" rel=\"external\">dva</a> 的最小知识集，让你可以用最少的时间掌握创建类似 <a href=\"https://github.com/dvajs/dva-hackernews\" target=\"_blank\" rel=\"external\">dva-hackernews</a> 的全部知识，并且不需要掌握额外的冗余知识。<br><a id=\"more\"></a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#javascript-语言\">JavaScript 语言</a><ul>\n<li><a href=\"#变量声明\">变量声明</a><ul>\n<li><a href=\"#const-和-let\">const 和 let</a></li>\n<li><a href=\"#模板字符串\">模板字符串</a></li>\n<li><a href=\"#默认参数\">默认参数</a></li>\n</ul>\n</li>\n<li><a href=\"#箭头函数\">箭头函数</a></li>\n<li><a href=\"#模块的-import-和-export\">模块的 Import 和 Export</a></li>\n<li><a href=\"#es6-对象和数组\">ES6 对象和数组</a><ul>\n<li><a href=\"#析构赋值\">析构赋值</a></li>\n<li><a href=\"#对象字面量改进\">对象字面量改进</a></li>\n<li><a href=\"#spread-operator\">Spread Operator</a></li>\n</ul>\n</li>\n<li><a href=\"#promises\">Promises</a></li>\n<li><a href=\"#generators\">Generators</a></li>\n</ul>\n</li>\n<li><a href=\"#react-component\">React Component</a><ul>\n<li><a href=\"#stateless-functional-components\">Stateless Functional Components</a></li>\n<li><a href=\"#jsx\">JSX</a><ul>\n<li><a href=\"#component-嵌套\">Component 嵌套</a></li>\n<li><a href=\"#classname\">className</a></li>\n<li><a href=\"#javascript-表达式\">JavaScript 表达式</a></li>\n<li><a href=\"#mapping-arrays-to-jsx\">Mapping Arrays to JSX</a></li>\n<li><a href=\"#注释\">注释</a></li>\n<li><a href=\"#spread-attributes\">Spread Attributes</a></li>\n</ul>\n</li>\n<li><a href=\"#props\">Props</a><ul>\n<li><a href=\"#proptypes\">propTypes</a></li>\n<li><a href=\"#往下传数据\">往下传数据</a></li>\n<li><a href=\"#往上传数据\">往上传数据</a></li>\n</ul>\n</li>\n<li><a href=\"#css-modules\">CSS Modules</a><ul>\n<li><a href=\"#理解-css-modules\">理解 CSS Modules</a></li>\n<li><a href=\"#定义全局-css\">定义全局 CSS</a></li>\n<li><a href=\"#classnames-package\">classnames Package</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reducer\">Reducer</a><ul>\n<li><a href=\"#增删改\">增删改</a></li>\n<li><a href=\"#嵌套数据的增删改\">嵌套数据的增删改</a></li>\n</ul>\n</li>\n<li><a href=\"#effect\">Effect</a><ul>\n<li><a href=\"#effects\">Effects</a><ul>\n<li><a href=\"#put\">put</a></li>\n<li><a href=\"#call\">call</a></li>\n<li><a href=\"#select\">select</a></li>\n</ul>\n</li>\n<li><a href=\"#错误处理\">错误处理</a><ul>\n<li><a href=\"#全局错误处理\">全局错误处理</a></li>\n<li><a href=\"#本地错误处理\">本地错误处理</a></li>\n</ul>\n</li>\n<li><a href=\"#异步请求\">异步请求</a><ul>\n<li><a href=\"#get-和-post\">GET 和 POST</a></li>\n<li><a href=\"#统一错误处理\">统一错误处理</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#subscription\">Subscription</a><ul>\n<li><a href=\"#异步数据初始化\">异步数据初始化</a><ul>\n<li><a href=\"#path-to-regexp-package\">path-to-regexp Package</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#router\">Router</a><ul>\n<li><a href=\"#config-with-jsx-element-routerjs\">Config with JSX Element (router.js)</a></li>\n<li><a href=\"#route-components\">Route Components</a><ul>\n<li><a href=\"#通过-connect-绑定数据\">通过 connect 绑定数据</a></li>\n<li><a href=\"#injected-props-eg-location\">Injected Props (e.g. location)</a></li>\n</ul>\n</li>\n<li><a href=\"#基于-action-进行页面跳转\">基于 action 进行页面跳转</a></li>\n</ul>\n</li>\n<li><a href=\"#dva-配置\">dva 配置</a><ul>\n<li><a href=\"#redux-middleware\">Redux Middleware</a></li>\n<li><a href=\"#history\">history</a><ul>\n<li><a href=\"#切换-history-为-browserhistory\">切换 history 为 browserHistory</a></li>\n<li><a href=\"#去除-hashhistory-下的-_k-查询参数\">去除 hashHistory 下的 _k 查询参数</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#工具\">工具</a><ul>\n<li><a href=\"#通过-dva-cli-创建项目\">通过 dva-cli 创建项目</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JavaScript-语言\"><a href=\"#JavaScript-语言\" class=\"headerlink\" title=\"JavaScript 语言\"></a>JavaScript 语言</h2><h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><h4 id=\"const-和-let\"><a href=\"#const-和-let\" class=\"headerlink\" title=\"const 和 let\"></a>const 和 let</h4><p>不要用 <code>var</code>，而是用 <code>const</code> 和 <code>let</code>，分别表示常量和变量。不同于 <code>var</code> 的函数作用域，<code>const</code> 和 <code>let</code> 都是块级作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> DELAY = <span class=\"number\">1000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">count = count + <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>模板字符串提供了另一种做字符串组合的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"string\">'world'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;user&#125;</span>`</span>);  <span class=\"comment\">// hello world</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多行</span></div><div class=\"line\"><span class=\"keyword\">const</span> content = <span class=\"string\">`</span></div><div class=\"line\">  Hello <span class=\"subst\">$&#123;firstName&#125;</span>,</div><div class=\"line\">  Thanks for ordering <span class=\"subst\">$&#123;qty&#125;</span> tickets to <span class=\"subst\">$&#123;event&#125;</span>.</div><div class=\"line\">`;</div></pre></td></tr></table></figure>\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logActivity</span>(<span class=\"params\">activity = <span class=\"string\">'skiing'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(activity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">logActivity();  <span class=\"comment\">// skiing</span></div></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>函数的快捷写法，不需要通过 <code>function</code> 关键字创建函数，并且还可以省略 <code>return</code> 关键字。</p>\n<p>同时，箭头函数还会继承当前上下文的 <code>this</code> 关键字。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);  <span class=\"comment\">// [2, 3, 4]</span></div></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;).bind(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"模块的-Import-和-Export\"><a href=\"#模块的-Import-和-Export\" class=\"headerlink\" title=\"模块的 Import 和 Export\"></a>模块的 Import 和 Export</h3><p><code>import</code> 用于引入模块，<code>export</code> 用于导出模块。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入全部</span></div><div class=\"line\"><span class=\"keyword\">import</span> dva <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 引入部分</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Link, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 引入全部并作为 github 对象</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> github <span class=\"keyword\">from</span> <span class=\"string\">'./services/github'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 导出默认</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</div><div class=\"line\"><span class=\"comment\">// 部分导出，需 import &#123; App &#125; from './file'; 引入</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"title\">extend</span> <span class=\"title\">Component</span> </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"ES6-对象和数组\"><a href=\"#ES6-对象和数组\" class=\"headerlink\" title=\"ES6 对象和数组\"></a>ES6 对象和数组</h3><h4 id=\"析构赋值\"><a href=\"#析构赋值\" class=\"headerlink\" title=\"析构赋值\"></a>析构赋值</h4><p>析构赋值让我们从 Object 或 Array 里取部分数据存为变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象</span></div><div class=\"line\"><span class=\"keyword\">const</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'guanguan'</span>, <span class=\"attr\">age</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; name, age &#125; = user;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> : <span class=\"subst\">$&#123;age&#125;</span>`</span>);  <span class=\"comment\">// guanguan : 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 数组</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> [foo, bar] = arr;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo);  <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>我们也可以析构传入的函数参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">state, &#123; payload &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> state.concat(payload);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>析构时还可以配 alias，让代码更具有语义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">state, &#123; payload: todo &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> state.concat(todo);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"对象字面量改进\"><a href=\"#对象字面量改进\" class=\"headerlink\" title=\"对象字面量改进\"></a>对象字面量改进</h4><p>这是析构的反向操作，用于重新组织一个 Object 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'duoduo'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">8</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> user = &#123; name, age &#125;;  <span class=\"comment\">// &#123; name: 'duoduo', age: 8 &#125;</span></div></pre></td></tr></table></figure>\n<p>定义对象方法时，还可以省去 <code>function</code> 关键字。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</div><div class=\"line\">    add() &#123;&#125;  <span class=\"comment\">// 等同于 add: function() &#123;&#125;</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">effects</span>: &#123;</div><div class=\"line\">    *addRemote() &#123;&#125;  <span class=\"comment\">// 等同于 addRemote: function*() &#123;&#125;</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"Spread-Operator\"><a href=\"#Spread-Operator\" class=\"headerlink\" title=\"Spread Operator\"></a>Spread Operator</h4><p>Spread Operator 即 3 个点 <code>...</code>，有几种不同的使用方法。</p>\n<p>可用于组装数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> todos = [<span class=\"string\">'Learn dva'</span>];</div><div class=\"line\">[...todos, <span class=\"string\">'Learn antd'</span>];  <span class=\"comment\">// ['Learn dva', 'Learn antd']</span></div></pre></td></tr></table></figure>\n<p>也可用于获取数组的部分项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = arr;</div><div class=\"line\">rest;  <span class=\"comment\">// ['b', 'c']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// With ignore</span></div><div class=\"line\"><span class=\"keyword\">const</span> [first, , ...rest] = arr;</div><div class=\"line\">rest;  <span class=\"comment\">// ['c']</span></div></pre></td></tr></table></figure>\n<p>还可收集函数参数为数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">directions</span>(<span class=\"params\">first, ...rest</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(rest);</div><div class=\"line\">&#125;</div><div class=\"line\">directions(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>);  <span class=\"comment\">// ['b', 'c'];</span></div></pre></td></tr></table></figure>\n<p>代替 apply。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x, y, z</span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面两句效果相同</span></div><div class=\"line\">foo.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">foo(...args);</div></pre></td></tr></table></figure>\n<p>对于 Object 而言，用于组合成新的 Object 。(ES2017 stage-2 proposal)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</div><div class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> bar = &#123;</div><div class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">3</span>,</div><div class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">2</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ret = &#123; ...foo, ...bar, d &#125;;  <span class=\"comment\">// &#123; a:1, b:3, c:2, d:4 &#125;</span></div></pre></td></tr></table></figure>\n<p>此外，在 JSX 中 Spread Operator 还可用于扩展 props，详见 <a href=\"#spread-attributes\">Spread Attributes</a>。</p>\n<h3 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h3><p>Promise 用于更优雅地处理异步请求。比如发起异步请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fetch(<span class=\"string\">'/api/todos'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> (&#123; data &#125;))</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> (&#123; err &#125;));</div></pre></td></tr></table></figure>\n<p>定义 Promise 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> delay = <span class=\"function\">(<span class=\"params\">timeout</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, timeout);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">delay(<span class=\"number\">1000</span>).then(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'executed'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h3><p>dva 的 effects 是通过 generator 组织的。Generator 返回的是迭代器，通过 <code>yield</code> 关键字实现暂停功能。</p>\n<p>这是一个典型的 dva effect，通过 <code>yield</code> 把异步逻辑通过同步的方式组织起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">namespace</span>: <span class=\"string\">'todos'</span>,</div><div class=\"line\">  <span class=\"attr\">effects</span>: &#123;</div><div class=\"line\">    *addRemote(&#123; <span class=\"attr\">payload</span>: todo &#125;, &#123; put, call &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">yield</span> call(addTodo, todo);</div><div class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'add'</span>, <span class=\"attr\">payload</span>: todo &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"React-Component\"><a href=\"#React-Component\" class=\"headerlink\" title=\"React Component\"></a>React Component</h2><h3 id=\"Stateless-Functional-Components\"><a href=\"#Stateless-Functional-Components\" class=\"headerlink\" title=\"Stateless Functional Components\"></a>Stateless Functional Components</h3><p>React Component 有 3 种定义方式，分别是 <code>React.createClass</code>, <code>class</code> 和 <code>Stateless Functional Component</code>。推荐尽量使用最后一种，保持简洁和无状态。这是函数，不是 Object，没有 <code>this</code> 作用域，是 pure function。</p>\n<p>比如定义 App Component 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleClick</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    props.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'app/create'</span> &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;div onClick=&#123;handleClick&#125;&gt;$&#123;props.name&#125;&lt;/div&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Componnet</span> </span>&#123;</div><div class=\"line\">  handleClick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'app/create'</span> &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;$&#123;this.props.name&#125;&lt;/div&gt;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h3><h4 id=\"Component-嵌套\"><a href=\"#Component-嵌套\" class=\"headerlink\" title=\"Component 嵌套\"></a>Component 嵌套</h4><p>类似 HTML，JSX 里可以给组件添加子组件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">App</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">MainContent</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">App</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"className\"><a href=\"#className\" class=\"headerlink\" title=\"className\"></a>className</h4><p><code>class</code> 是保留词，所以添加样式时，需用 <code>className</code> 代替 <code>class</code> 。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">className</span>=<span class=\"string\">\"fancy\"</span>&gt;</span>Hello dva<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"JavaScript-表达式\"><a href=\"#JavaScript-表达式\" class=\"headerlink\" title=\"JavaScript 表达式\"></a>JavaScript 表达式</h4><p>JavaScript 表达式需要用 <code>{}</code> 括起来，会执行并返回结果。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&#123; <span class=\"keyword\">this</span>.props.title &#125;&lt;<span class=\"regexp\">/h1&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Mapping-Arrays-to-JSX\"><a href=\"#Mapping-Arrays-to-JSX\" class=\"headerlink\" title=\"Mapping Arrays to JSX\"></a>Mapping Arrays to JSX</h4><p>可以把数组映射为 JSX 元素列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &#123; this.props.todos.map((todo, i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;todo&#125;&lt;/li&gt;) &#125;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>尽量别用 <code>//</code> 做单行注释。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;</div><div class=\"line\">  &#123;<span class=\"comment\">/* multiline comment */</span>&#125;</div><div class=\"line\">  &#123;<span class=\"comment\">/*</span></div><div class=\"line\">    multi</div><div class=\"line\">    line</div><div class=\"line\">    comment</div><div class=\"line\">    */&#125;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// single line</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  Hello</div><div class=\"line\">&lt;<span class=\"regexp\">/h1&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Spread-Attributes\"><a href=\"#Spread-Attributes\" class=\"headerlink\" title=\"Spread Attributes\"></a>Spread Attributes</h4><p>这是 JSX 从 ECMAScript6 借鉴过来的很有用的特性，用于扩充组件 props 。</p>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> attrs = &#123;</div><div class=\"line\">  <span class=\"attr\">href</span>: <span class=\"string\">'http://example.org'</span>,</div><div class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">'_blank'</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> &#123;<span class=\"attr\">...attrs</span>&#125;&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> attrs = &#123;</div><div class=\"line\">  <span class=\"attr\">href</span>: <span class=\"string\">'http://example.org'</span>,</div><div class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">'_blank'</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;attrs.href&#125;</span> <span class=\"attr\">target</span>=<span class=\"string\">&#123;attrs.target&#125;</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><p>数据处理在 React 中是非常重要的概念之一，分别可以通过 props, state 和 context 来处理数据。而在 dva 应用里，你只需关心 props 。</p>\n<h4 id=\"propTypes\"><a href=\"#propTypes\" class=\"headerlink\" title=\"propTypes\"></a>propTypes</h4><p>JavaScript 是弱类型语言，所以请尽量声明 propTypes 对 props 进行校验，以减少不必要的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\">props</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">App.propTypes = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: React.PropTypes.string.isRequired,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>内置的 prop type 有：</p>\n<ul>\n<li>PropTypes.array</li>\n<li>PropTypes.bool</li>\n<li>PropTypes.func</li>\n<li>PropTypes.number</li>\n<li>PropTypes.object</li>\n<li>PropTypes.string</li>\n</ul>\n<h4 id=\"往下传数据\"><a href=\"#往下传数据\" class=\"headerlink\" title=\"往下传数据\"></a>往下传数据</h4><p><img src=\"https://zos.alipayobjects.com/rmsportal/NAzeMyUoPMqxfRv.png\" alt=\"\"></p>\n<h4 id=\"往上传数据\"><a href=\"#往上传数据\" class=\"headerlink\" title=\"往上传数据\"></a>往上传数据</h4><p><img src=\"https://zos.alipayobjects.com/rmsportal/fiKKgDGuEJfSvxv.png\" alt=\"\"></p>\n<h3 id=\"CSS-Modules\"><a href=\"#CSS-Modules\" class=\"headerlink\" title=\"CSS Modules\"></a>CSS Modules</h3><p><img src=\"https://zos.alipayobjects.com/rmsportal/mHVRpjNYhVuFdsS.png\" width=\"150\" style=\"background:#fff;\"></p>\n<h4 id=\"理解-CSS-Modules\"><a href=\"#理解-CSS-Modules\" class=\"headerlink\" title=\"理解 CSS Modules\"></a>理解 CSS Modules</h4><p>一张图理解 CSS Modules 的工作原理：</p>\n<p><img src=\"https://zos.alipayobjects.com/rmsportal/SWBwWTbZKqxwEPq.png\" alt=\"\"></p>\n<p><code>button</code> class 在构建之后会被重命名为 <code>ProductList_button_1FU0u</code> 。<code>button</code> 是 local name，而 <code>ProductList_button_1FU0u</code> 是 global name 。<strong>你可以用简短的描述性名字，而不需要关心命名冲突问题。</strong></p>\n<p>然后你要做的全部事情就是在 css/less 文件里写 <code>.button {...}</code>，并在组件里通过 <code>styles.button</code> 来引用他。</p>\n<h4 id=\"定义全局-CSS\"><a href=\"#定义全局-CSS\" class=\"headerlink\" title=\"定义全局 CSS\"></a>定义全局 CSS</h4><p>CSS Modules 默认是局部作用域的，想要声明一个全局规则，可用 <code>:global</code> 语法。</p>\n<p>比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">:global(.title)</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在引用的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;App className=&#123;styles.title&#125; /&gt; <span class=\"comment\">// red</span></div><div class=\"line\">&lt;App className=<span class=\"string\">\"title\"</span> /&gt;        <span class=\"comment\">// green</span></div></pre></td></tr></table></figure>\n<h4 id=\"classnames-Package\"><a href=\"#classnames-Package\" class=\"headerlink\" title=\"classnames Package\"></a><code>classnames</code> Package</h4><p>在一些复杂的场景中，一个元素可能对应多个 className，而每个 className 又基于一些条件来决定是否出现。这时，<a href=\"https://github.com/JedWatson/classnames\" target=\"_blank\" rel=\"external\">classnames</a> 这个库就非常有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> classnames <span class=\"keyword\">from</span> <span class=\"string\">'classnames'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> cls = classnames(&#123;</div><div class=\"line\">    <span class=\"attr\">btn</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">btnLarge</span>: props.type === <span class=\"string\">'submit'</span>,</div><div class=\"line\">    <span class=\"attr\">btnSmall</span>: props.type === <span class=\"string\">'edit'</span>,</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">cls</span> &#125; /&gt;</span>;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，传入不同的 type 给 App 组件，就会返回不同的 className 组合：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;App type=<span class=\"string\">\"submit\"</span> /&gt; <span class=\"comment\">// btn btnLarge</span></div><div class=\"line\">&lt;App type=<span class=\"string\">\"edit\"</span> /&gt;   <span class=\"comment\">// btn btnSmall</span></div></pre></td></tr></table></figure>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><p>reducer 是一个函数，接受 state 和 action，返回老的或新的 state 。即：<code>(state, action) =&gt; state</code></p>\n<h3 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h3><p>以 todos 为例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">namespace</span>: <span class=\"string\">'todos'</span>,</div><div class=\"line\">  <span class=\"attr\">state</span>: [],</div><div class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</div><div class=\"line\">    add(state, &#123; <span class=\"attr\">payload</span>: todo &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> state.concat(todo);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    remove(state, &#123; <span class=\"attr\">payload</span>: id &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> state.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.id !== id);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    update(state, &#123; <span class=\"attr\">payload</span>: updatedTodo &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> state.map(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (todo.id === updatedTodo.id) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> &#123; ...todo, ...updatedTodo &#125;;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> todo;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"嵌套数据的增删改\"><a href=\"#嵌套数据的增删改\" class=\"headerlink\" title=\"嵌套数据的增删改\"></a>嵌套数据的增删改</h3><p>建议最多一层嵌套，以保持 state 的扁平化，深层嵌套会让 reducer 很难写和难以维护。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">namespace</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [],</div><div class=\"line\">    <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</div><div class=\"line\">    add(state, &#123; <span class=\"attr\">payload</span>: todo &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> todos = state.todos.concat(todo);</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, todos &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>下面是深层嵌套的例子，应尽量避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">namespace</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">  <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">b</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">todos</span>: [],</div><div class=\"line\">        <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">reducers</span>: &#123;</div><div class=\"line\">    add(state, &#123; <span class=\"attr\">payload</span>: todo &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> todos = state.a.b.todos.concat(todo);</div><div class=\"line\">      <span class=\"keyword\">const</span> b = &#123; ...state.a.b, todos &#125;;</div><div class=\"line\">      <span class=\"keyword\">const</span> a = &#123; ...state.a, b &#125;;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, a &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h2><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">namespace</span>: <span class=\"string\">'todos'</span>,</div><div class=\"line\">  <span class=\"attr\">effects</span>: &#123;</div><div class=\"line\">    *addRemote(&#123; <span class=\"attr\">payload</span>: todo &#125;, &#123; put, call &#125;) &#123;</div><div class=\"line\">      <span class=\"keyword\">yield</span> call(addTodo, todo);</div><div class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'add'</span>, <span class=\"attr\">payload</span>: todo &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a>Effects</h3><h4 id=\"put\"><a href=\"#put\" class=\"headerlink\" title=\"put\"></a>put</h4><p>用于触发 action 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'todos/add'</span>, <span class=\"attr\">payload</span>: <span class=\"string\">'Learn Dva'</span> &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p>用于调用异步逻辑，支持 promise 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">yield</span> call(fetch, <span class=\"string\">'/todos'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><p>用于从 state 里获取数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> todos = <span class=\"keyword\">yield</span> select(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.todos);</div></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><h4 id=\"全局错误处理\"><a href=\"#全局错误处理\" class=\"headerlink\" title=\"全局错误处理\"></a>全局错误处理</h4><p>dva 里，effects 和 subscriptions 的抛错全部会走 <code>onError</code> hook，所以可以在 <code>onError</code> 里统一处理错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> app = dva(&#123;</div><div class=\"line\">  onError(e, dispatch) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>然后 effects 里的抛错和 reject 的 promise 就都会被捕获到了。</p>\n<h4 id=\"本地错误处理\"><a href=\"#本地错误处理\" class=\"headerlink\" title=\"本地错误处理\"></a>本地错误处理</h4><p>如果需要对某些 effects 的错误进行特殊处理，需要在 effect 内部加 <code>try catch</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">effects</span>: &#123;</div><div class=\"line\">    *addRemote() &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Your Code Here</span></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"异步请求\"><a href=\"#异步请求\" class=\"headerlink\" title=\"异步请求\"></a>异步请求</h3><p>异步请求基于 whatwg-fetch，API 详见：<a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"external\">https://github.com/github/fetch</a></p>\n<h4 id=\"GET-和-POST\"><a href=\"#GET-和-POST\" class=\"headerlink\" title=\"GET 和 POST\"></a>GET 和 POST</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'../util/request'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// GET</span></div><div class=\"line\">request(<span class=\"string\">'/api/todos'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// POST</span></div><div class=\"line\">request(<span class=\"string\">'/api/todos'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">  <span class=\"attr\">body</span>: <span class=\"built_in\">JSON</span>.stringify(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"统一错误处理\"><a href=\"#统一错误处理\" class=\"headerlink\" title=\"统一错误处理\"></a>统一错误处理</h4><p>加入约定后台返回以下格式时，做统一的错误处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">status</span>: <span class=\"string\">'error'</span>,</div><div class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">''</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编辑 <code>utils/request.js</code>，加入以下中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseErrorMessage</span>(<span class=\"params\">&#123; data &#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123; status, message &#125; = data;</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'error'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; data &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后，这类错误就会走到 <code>onError</code> hook 里。</p>\n<h2 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h2><p><code>subscriptions</code> 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。格式为 <code>({ dispatch, history }) =&gt; unsubscribe</code> 。</p>\n<h3 id=\"异步数据初始化\"><a href=\"#异步数据初始化\" class=\"headerlink\" title=\"异步数据初始化\"></a>异步数据初始化</h3><p>比如：当用户进入 <code>/users</code> 页面时，触发 action <code>users/fetch</code> 加载用户数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.model(&#123;</div><div class=\"line\">  <span class=\"attr\">subscriptions</span>: &#123;</div><div class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;</div><div class=\"line\">      history.listen(<span class=\"function\">(<span class=\"params\">&#123; pathname &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/users'</span>) &#123;</div><div class=\"line\">          dispatch(&#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">'users/fetch'</span>,</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"path-to-regexp-Package\"><a href=\"#path-to-regexp-Package\" class=\"headerlink\" title=\"path-to-regexp Package\"></a><code>path-to-regexp</code> Package</h4><p>如果 url 规则比较复杂，比如 <code>/users/:userId/search</code>，那么匹配和 userId 的获取都会比较麻烦。这是推荐用 <a href=\"https://github.com/pillarjs/path-to-regexp\" target=\"_blank\" rel=\"external\">path-to-regexp</a> 简化这部分逻辑。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pathToRegexp <span class=\"keyword\">from</span> <span class=\"string\">'path-to-regexp'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in subscription</span></div><div class=\"line\"><span class=\"keyword\">const</span> match = pathToRegexp(<span class=\"string\">'/users/:userId/search'</span>).exec(pathname);</div><div class=\"line\"><span class=\"keyword\">if</span> (match) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> userId = match[<span class=\"number\">1</span>];</div><div class=\"line\">  <span class=\"comment\">// dispatch action with userId</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><h3 id=\"Config-with-JSX-Element-router-js\"><a href=\"#Config-with-JSX-Element-router-js\" class=\"headerlink\" title=\"Config with JSX Element (router.js)\"></a>Config with JSX Element (router.js)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;App&#125;&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"accounts\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Accounts&#125;/</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"statements\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Statements&#125;/</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>详见：<a href=\"https://github.com/reactjs/react-router/blob/master/docs/guides/RouteConfiguration.md\" target=\"_blank\" rel=\"external\">react-router</a></p>\n<h3 id=\"Route-Components\"><a href=\"#Route-Components\" class=\"headerlink\" title=\"Route Components\"></a>Route Components</h3><p>Route Components 是指 <code>./src/routes/</code> 目录下的文件，他们是 <code>./src/router.js</code> 里匹配的 Component。</p>\n<h4 id=\"通过-connect-绑定数据\"><a href=\"#通过-connect-绑定数据\" class=\"headerlink\" title=\"通过 connect 绑定数据\"></a>通过 connect 绑定数据</h4><p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state, ownProps</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">users</span>: state.users,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(App);</div></pre></td></tr></table></figure>\n<p>然后在 App 里就有了 <code>dispatch</code> 和 <code>users</code> 两个属性。</p>\n<h4 id=\"Injected-Props-e-g-location\"><a href=\"#Injected-Props-e-g-location\" class=\"headerlink\" title=\"Injected Props (e.g. location)\"></a>Injected Props (e.g. location)</h4><p>Route Component 会有额外的 props 用以获取路由信息。</p>\n<ul>\n<li>location</li>\n<li>params</li>\n<li>children</li>\n</ul>\n<p>更多详见：<a href=\"https://github.com/reactjs/react-router/blob/master/docs/API.md#injected-props\" target=\"_blank\" rel=\"external\">react-router</a></p>\n<h3 id=\"基于-action-进行页面跳转\"><a href=\"#基于-action-进行页面跳转\" class=\"headerlink\" title=\"基于 action 进行页面跳转\"></a>基于 action 进行页面跳转</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; routerRedux &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Inside Effects</span></div><div class=\"line\"><span class=\"keyword\">yield</span> put(routerRedux.push(<span class=\"string\">'/logout'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Outside Effects</span></div><div class=\"line\">dispatch(routerRedux.push(<span class=\"string\">'/logout'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// With query</span></div><div class=\"line\">routerRedux.push(&#123;</div><div class=\"line\">  <span class=\"attr\">pathname</span>: <span class=\"string\">'/logout'</span>,</div><div class=\"line\">  <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">page</span>: <span class=\"number\">2</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>除 <code>push(location)</code> 外还有更多方法，详见 <a href=\"https://github.com/reactjs/react-router-redux#pushlocation-replacelocation-gonumber-goback-goforward\" target=\"_blank\" rel=\"external\">react-router-redux</a></p>\n<h2 id=\"dva-配置\"><a href=\"#dva-配置\" class=\"headerlink\" title=\"dva 配置\"></a>dva 配置</h2><h3 id=\"Redux-Middleware\"><a href=\"#Redux-Middleware\" class=\"headerlink\" title=\"Redux Middleware\"></a>Redux Middleware</h3><p>比如要添加 redux-logger 中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> createLogger <span class=\"keyword\">from</span> <span class=\"string\">'redux-logger'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> app = dva(&#123;</div><div class=\"line\">  <span class=\"attr\">onAction</span>: createLogger(),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>注：onAction 支持数组，可同时传入多个中间件。</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><h4 id=\"切换-history-为-browserHistory\"><a href=\"#切换-history-为-browserHistory\" class=\"headerlink\" title=\"切换 history 为 browserHistory\"></a>切换 history 为 browserHistory</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> app = dva(&#123;</div><div class=\"line\">  <span class=\"attr\">history</span>: browserHistory,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"去除-hashHistory-下的-k-查询参数\"><a href=\"#去除-hashHistory-下的-k-查询参数\" class=\"headerlink\" title=\"去除 hashHistory 下的 _k 查询参数\"></a>去除 hashHistory 下的 _k 查询参数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; useRouterHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> app = dva(&#123;</div><div class=\"line\">  <span class=\"attr\">history</span>: useRouterHistory(createHashHistory)(&#123; <span class=\"attr\">queryKey</span>: <span class=\"literal\">false</span> &#125;),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"通过-dva-cli-创建项目\"><a href=\"#通过-dva-cli-创建项目\" class=\"headerlink\" title=\"通过 dva-cli 创建项目\"></a>通过 dva-cli 创建项目</h3><p>先安装 dva-cli 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install dva-cli -g</div></pre></td></tr></table></figure>\n<p>然后创建项目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ dva new myapp</div></pre></td></tr></table></figure>\n<p>最后，进入目录并启动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> myapp</div><div class=\"line\">$ npm start</div></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1492569156068,
				"created_by": 2,
				"updated_at": 1492569210635,
				"updated_by": 2,
				"published_at": 1492569156068,
				"published_by": 2
			},
			{
				"id": "cj17g17ho0006akfcpvawfcpl",
				"title": "js设计模式-中介模式",
				"slug": "js-design-pattern-observe",
				"markdown": "   先来理解这么一个问题，假如我们前端开发接的需求是需求方给我们需求，可能一个前端开发会和多个需求方打交道，所以会保持多个需求方的联系，那么在程序里面就意味着保持多个对象的引用，当程序的规模越大，对象会越来越多，他们之间的关系会越来越复杂，那现在假如现在有一个中介者(假如就是我们的主管)来对接多个需求方的需求，那么需求方只需要把所有的需求给我们主管就可以，主管会依次看我们的工作量来给我们分配任务，这样的话，我们前端开发就不需要和多个业务方联系，我们只需要和我们主管(也就是中介)联系即可，这样的好处就弱化了对象之间的耦合。\n<!--more-->\n日常生活中的列子：\n\n    中介者模式对于我们日常生活中经常会碰到，比如我们去房屋中介去租房，房屋中介人在租房者和房东出租者之间形成一条中介;租房者并不关心租谁的房，房东出租者也并不关心它租给谁，因为有中介，所以需要中介来完成这场交易。\n\n中介者模式的作用是解除对象与对象之间的耦合关系，增加一个中介对象后，所有的相关对象都通过中介者对象来通信，而不是相互引用，所以当一个对象发送改变时，只需要通知中介者对象即可。中介者使各个对象之间耦合松散，而且可以独立地改变它们之间的交互。\n\n实现中介者的列子如下：\n\n不知道大家有没有玩过英雄杀这个游戏，最早的时候，英雄杀有2个人(分别是敌人和自己)；我们针对这个游戏先使用普通的函数来实现如下：\n\n比如先定义一个函数，该函数有三个方法，分别是win(赢), lose(输)，和die(敌人死亡)这三个函数；只要一个玩家死亡该游戏就结束了，同时需要通知它的对手胜利了; 代码需要编写如下：\n\n```js\nfunction Hero(name) {\n    this.name = name;\n    this.enemy = null;\n}\nHero.prototype.win = function(){\n    console.log(this.name + 'Won');\n}\nHero.prototype.lose = function(){\n    console.log(this.name + 'lose');\n}\nHero.prototype.die = function(){\n    this.lose();\n    this.enemy.win();\n}\n// 初始化2个对象\nvar h1 = new Hero(\"朱元璋\");\nvar h2 = new Hero(\"刘伯温\");\n// 给玩家设置敌人\nh1.enemy = h2;\nh2.enemy = h1;\n// 朱元璋死了 也就输了\nh1.die();  // 输出 朱元璋lose 刘伯温Won\n```\n现在我们再来为游戏添加队友\n\n比如现在我们来为游戏添加队友，比如英雄杀有6人一组，那么这种情况下就有队友，敌人也有3个；因此我们需要区分是敌人还是队友需要队的颜色这个字段，如果队的颜色相同的话，那么就是同一个队的，否则的话就是敌人；\n\n我们可以先定义一个数组players来保存所有的玩家，在创建玩家之后，循环players来给每个玩家设置队友或者敌人;\n```js\nvar players = [];\n```\n接着我们再来编写Hero这个函数；代码如下：\n```js\n\nvar players = []; // 定义一个数组 保存所有的玩家\nfunction Hero(name,teamColor) {\n    this.friends = [];    //保存队友列表\n    this.enemies = [];    // 保存敌人列表\n    this.state = 'live';  // 玩家状态\n    this.name = name;     // 角色名字\n    this.teamColor = teamColor; // 队伍的颜色\n}\nHero.prototype.win = function(){\n    // 赢了\n    console.log(\"win:\" + this.name);\n};\nHero.prototype.lose = function(){\n    // 输了\n    console.log(\"lose:\" + this.name);\n};\nHero.prototype.die = function(){\n    // 所有队友死亡情况 默认都是活着的\n    var all_dead = true;\n    this.state = 'dead'; // 设置玩家状态为死亡\n    for(var i = 0,ilen = this.friends.length; i < ilen; i+=1) {\n        // 遍历，如果还有一个队友没有死亡的话，则游戏还未结束\n        if(this.friends[i].state !== 'dead') {\n            all_dead = false;\n            break;\n        }\n    }\n    if(all_dead) {\n        this.lose();  // 队友全部死亡，游戏结束\n        // 循环 通知所有的玩家 游戏失败\n        for(var j = 0,jlen = this.friends.length; j < jlen; j+=1) {\n            this.friends[j].lose();\n        }\n        // 通知所有敌人游戏胜利\n        for(var j = 0,jlen = this.enemies.length; j < jlen; j+=1) {\n            this.enemies[j].win();\n        }\n    }\n}\n// 定义一个工厂类来创建玩家\nvar heroFactory = function(name,teamColor) {\n    var newPlayer = new Hero(name,teamColor);\n    for(var i = 0,ilen = players.length; i < ilen; i+=1) {\n        // 如果是同一队的玩家\n        if(players[i].teamColor === newPlayer.teamColor) {\n            // 相互添加队友列表\n            players[i].friends.push(newPlayer);\n            newPlayer.friends.push(players[i]);\n        }else {\n            // 相互添加到敌人列表\n            players[i].enemies.push(newPlayer);\n            newPlayer.enemies.push(players[i]);\n        }\n    }\n    players.push(newPlayer);\n    return newPlayer;\n};\n        // 红队\nvar p1 = heroFactory(\"aa\",'red'),\n    p2 = heroFactory(\"bb\",'red'),\n    p3 = heroFactory(\"cc\",'red'),\n    p4 = heroFactory(\"dd\",'red');\n\n// 蓝队\nvar p5 = heroFactory(\"ee\",'blue'),\n    p6 = heroFactory(\"ff\",'blue'),\n    p7 = heroFactory(\"gg\",'blue'),\n    p8 = heroFactory(\"hh\",'blue');\n// 让红队玩家全部死亡\np1.die();\np2.die();\np3.die();\np4.die();\n// lose:dd lose:aa lose:bb lose:cc\n// win:ee win:ff win:gg win:hh\n```\n如上代码：Hero函数有2个参数，分别是name(玩家名字)和teamColor(队颜色)，\n\n首先我们可以根据队颜色来判断是队友还是敌人；同样也有三个方法win(赢)，lose(输)，和die(死亡)；如果每次死亡一个人的时候，循环下该死亡的队友有没有全部死亡，如果全部死亡了的话，就输了，因此需要循环他们的队友，分别告诉每个队友中的成员他们输了，同时需要循环他们的敌人，分别告诉他们的敌人他们赢了；因此每次死了一个人的时候，都需要循环一次判断他的队友是否都死亡了；因此每个玩家和其他的玩家都是紧紧耦合在一起了。\n\n下面我们可以使用中介者模式来改善上面的demo；\n\n首先我们仍然定义Hero构造函数和Hero对象原型的方法，在Hero对象的这些原型方法中，不再负责具体的执行的逻辑，而是把操作转交给中介者对象，中介者对象来负责做具体的事情，我们可以把中介者对象命名为playerDirector;\n\n在playerDirector开放一个对外暴露的接口ReceiveMessage，负责接收player对象发送的消息，而player对象发送消息的时候，总是把自身的this作为参数发送给playerDirector，以便playerDirector 识别消息来自于那个玩家对象。\n\n代码如下：\n\n```js\nvar players = []; // 定义一个数组 保存所有的玩家\nfunction Hero(name,teamColor) {\n    this.state = 'live';  // 玩家状态\n    this.name = name;     // 角色名字\n    this.teamColor = teamColor; // 队伍的颜色\n}\nHero.prototype.win = function(){\n    // 赢了\n    console.log(\"win:\" + this.name);\n};\nHero.prototype.lose = function(){\n    // 输了\n    console.log(\"lose:\" + this.name);\n};\n// 死亡\nHero.prototype.die = function(){\n    this.state = 'dead';\n    // 给中介者发送消息，玩家死亡\n    playerDirector.ReceiveMessage('playerDead',this);\n}\n// 移除玩家\nHero.prototype.remove = function(){\n    // 给中介者发送一个消息，移除一个玩家\n    playerDirector.ReceiveMessage('removePlayer',this);\n};\n// 玩家换队\nHero.prototype.changeTeam = function(color) {\n    // 给中介者发送一个消息，玩家换队\n    playerDirector.ReceiveMessage('changeTeam',this,color);\n};\n// 定义一个工厂类来创建玩家\nvar heroFactory = function(name,teamColor) {\n    // 创建一个新的玩家对象\n    var newHero = new Hero(name,teamColor);\n    // 给中介者发送消息，新增玩家\n    playerDirector.ReceiveMessage('addPlayer',newHero);\n    return newHero;\n};\nvar playerDirector = (function(){\n    var players = {},  // 保存所有的玩家\n        operations = {}; // 中介者可以执行的操作\n    // 新增一个玩家操作\n    operations.addPlayer = function(player) {\n        // 获取玩家队友的颜色\n        var teamColor = player.teamColor;\n        // 如果该颜色的玩家还没有队伍的话，则新成立一个队伍\n        players[teamColor] = players[teamColor] || [];\n        // 添加玩家进队伍\n        players[teamColor].push(player);\n     };\n    // 移除一个玩家\n    operations.removePlayer = function(player){\n        // 获取队伍的颜色\n        var teamColor = player.teamColor,\n        // 获取该队伍的所有成员\n        teamPlayers = players[teamColor] || [];\n        // 遍历\n        for(var i = teamPlayers.length - 1; i>=0; i--) {\n            if(teamPlayers[i] === player) {\n                teamPlayers.splice(i,1);\n            }\n        }\n    };\n    // 玩家换队\n    operations.changeTeam = function(player,newTeamColor){\n        // 首先从原队伍中删除\n        operations.removePlayer(player);\n        // 然后改变队伍的颜色\n        player.teamColor = newTeamColor;\n        // 增加到队伍中\n        operations.addPlayer(player);\n    };\n    // 玩家死亡\noperations.playerDead = function(player) {\n    var teamColor = player.teamColor,\n    // 玩家所在的队伍\n    teamPlayers = players[teamColor];\n\n    var all_dead = true;\n    //遍历\n    for(var i = 0,player; player = teamPlayers[i++]; ) {\n        if(player.state !== 'dead') {\n            all_dead = false;\n            break;\n        }\n    }\n    // 如果all_dead 为true的话 说明全部死亡\n    if(all_dead) {\n        for(var i = 0, player; player = teamPlayers[i++]; ) {\n            // 本队所有玩家lose\n            player.lose();\n        }\n        for(var color in players) {\n            if(color !== teamColor) {\n                // 说明这是另外一组队伍\n                // 获取该队伍的玩家\n                var teamPlayers = players[color];\n                for(var i = 0,player; player = teamPlayers[i++]; ) {\n                    player.win(); // 遍历通知其他玩家win了\n                }\n            }\n        }\n    }\n};\nvar ReceiveMessage = function(){\n    // arguments的第一个参数为消息名称 获取第一个参数\n    var message = Array.prototype.shift.call(arguments);\n    operations[message].apply(this,arguments);\n};\nreturn {\n    ReceiveMessage : ReceiveMessage\n};\n})();\n// 红队\nvar p1 = heroFactory(\"aa\",'red'),\n    p2 = heroFactory(\"bb\",'red'),\n    p3 = heroFactory(\"cc\",'red'),\n        p4 = heroFactory(\"dd\",'red');\n\n    // 蓝队\n    var p5 = heroFactory(\"ee\",'blue'),\n        p6 = heroFactory(\"ff\",'blue'),\n        p7 = heroFactory(\"gg\",'blue'),\n        p8 = heroFactory(\"hh\",'blue');\n    // 让红队玩家全部死亡\n    p1.die();\n    p2.die();\n    p3.die();\n    p4.die();\n    // lose:aa lose:bb lose:cc lose:dd\n   // win:ee win:ff win:gg win:hh\n```\n我们可以看到如上代码；玩家与玩家之间的耦合代码已经解除了，而把所有的逻辑操作放在中介者对象里面进去处理，某个玩家的任何操作不需要去遍历去通知其他玩家，而只是需要给中介者发送一个消息即可，中介者接受到该消息后进行处理，处理完消息之后会把处理结果反馈给其他的玩家对象。使用中介者模式解除了对象与对象之间的耦合代码; 使程序更加的灵活.\n\n中介者模式实现购买商品的列子\n\n下面的列子是书上的列子，比如在淘宝或者天猫的列子不是这样实现的，也没有关系，我们可以改动下即可，我们最主要来学习下使用中介者模式来实现的思路。\n\n首先先介绍一下业务：在购买流程中，可以选择手机的颜色以及输入购买的数量，同时页面中有2个展示区域，分别显示用户刚刚选择好的颜色和数量。还有一个按钮动态显示下一步的操作，我们需要查询该颜色手机对应的库存，如果库存数量小于这次的购买数量，按钮则被禁用并且显示库存不足的文案，反之按钮高亮且可以点击并且显示假如购物车。\n\nHTML代码如下：\n\n```html\n选择颜色:\n    <select id=\"colorSelect\">\n        <option value=\"\">请选择</option>\n        <option value=\"red\">红色</option>\n        <option value=\"blue\">蓝色</option>\n    </select>\n    <p>输入购买的数量: <input type=\"text\" id=\"numberInput\"/></p>\n    你选择了的颜色：<div id=\"colorInfo\"></div>\n    <p>你输入的数量: <div id=\"numberInfo\"></div> </p>\n    <button id=\"nextBtn\" disabled=\"true\">请选择手机颜色和购买数量</button>\n```\n首先页面上有一个select选择框，然后有输入的购买数量输入框，还有2个展示区域，分别是选择的颜色和输入的数量的显示的区域，还有下一步的按钮操作；\n\n我们先定义一下：\n\n假设我们提前从后台获取到所有颜色手机的库存量\n```js\nvar goods = {\n    // 手机库存\n    \"red\": 6,\n    \"blue\": 8\n};\n```\n接着 我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，然后在这两个事件中作出相应的处理\n\n常规的JS代码如下：\n\n```js\n// 假设我们提前从后台获取到所有颜色手机的库存量\nvar goods = {\n    // 手机库存\n    \"red\": 6,\n    \"blue\": 8\n};\n/*\n我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，\n然后在这两个事件中作出相应的处理\n*/\nvar colorSelect = document.getElementById(\"colorSelect\"),\n    numberInput = document.getElementById(\"numberInput\"),\n    colorInfo = document.getElementById(\"colorInfo\"),\n    numberInfo = document.getElementById(\"numberInfo\"),\n    nextBtn = document.getElementById(\"nextBtn\");\n\n// 监听change事件\ncolorSelect.onchange = function(e){\n    select();\n};\nnumberInput.oninput = function(){\n    select();\n};\nfunction select(){\n    var color = colorSelect.value,   // 颜色\n        number = numberInput.value,  // 数量\n        stock = goods[color];  // 该颜色手机对应的当前库存\n\n    colorInfo.innerHTML = color;\n    numberInfo.innerHTML = number;\n\n    // 如果用户没有选择颜色的话，禁用按钮\n    if(!color) {\n        nextBtn.disabled = true;\n        nextBtn.innerHTML = \"请选择手机颜色\";\n            return;\n    }\n    // 判断用户输入的购买数量是否是正整数\n    var reg = /^\\d+$/g;\n    if(!reg.test(number)) {\n        nextBtn.disabled = true;\n        nextBtn.innerHTML = \"请输入正确的购买数量\";\n        return;\n    }\n    // 如果当前选择的数量大于当前的库存的数量的话，显示库存不足\n    if(number > stock) {\n        nextBtn.disabled = true;\n        nextBtn.innerHTML = \"库存不足\";\n        return;\n    }\n    nextBtn.disabled = false;\n    nextBtn.innerHTML = \"放入购物车\";\n}\n```\n上面的代码虽然是完成了页面上的需求，但是我们的代码都耦合在一起了，目前虽然问题不是很多，假如随着以后需求的改变，SKU属性越来越多的话，比如页面增加一个或者多个下拉框的时候，代表选择手机内存，现在我们需要计算颜色，内存和购买数量，来判断nextBtn是显示库存不足还是放入购物车；代码如下：\n\nHTML代码如下：\n\n```html\n选择颜色:\n    <select id=\"colorSelect\">\n        <option value=\"\">请选择</option>\n        <option value=\"red\">红色</option>\n        <option value=\"blue\">蓝色</option>\n    </select>\n    <br/>\n    <br/>\n    选择内存：\n    <select id=\"memorySelect\">\n        <option value=\"\">请选择</option>\n        <option value=\"32G\">32G</option>\n        <option value=\"64G\">64G</option>\n    </select>\n    <p>输入购买的数量: <input type=\"text\" id=\"numberInput\"/></p>\n    你选择了的颜色：<div id=\"colorInfo\"></div>\n    你选择了内存：<div id=\"memoryInfo\"></div>\n    <p>你输入的数量: <div id=\"numberInfo\"></div> </p>\n    <button id=\"nextBtn\" disabled=\"true\">请选择手机颜色和购买数量</button>\n```\nJS代码变为如下：\n\n```js\n// 假设我们提前从后台获取到所有颜色手机的库存量\nvar goods = {\n    // 手机库存\n    \"red|32G\": 6,\n    \"red|64G\": 16,\n    \"blue|32G\": 8,\n    \"blue|64G\": 18\n};\n/*\n我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，\n然后在这两个事件中作出相应的处理\n */\nvar colorSelect = document.getElementById(\"colorSelect\"),\n    memorySelect = document.getElementById(\"memorySelect\"),\n    numberInput = document.getElementById(\"numberInput\"),\n    colorInfo = document.getElementById(\"colorInfo\"),\n    numberInfo = document.getElementById(\"numberInfo\"),\n    memoryInfo = document.getElementById(\"memoryInfo\"),\n    nextBtn = document.getElementById(\"nextBtn\");\n\n// 监听change事件\ncolorSelect.onchange = function(){\n    select();\n};\nnumberInput.oninput = function(){\n    select();\n};\nmemorySelect.onchange = function(){\n    select();\n};\nfunction select(){\n    var color = colorSelect.value,   // 颜色\n        number = numberInput.value,  // 数量\n        memory = memorySelect.value, // 内存\n        stock = goods[color + '|' +memory];  // 该颜色手机对应的当前库存\n\n    colorInfo.innerHTML = color;\n    numberInfo.innerHTML = number;\n    memoryInfo.innerHTML = memory;\n    // 如果用户没有选择颜色的话，禁用按钮\n    if(!color) {\n        nextBtn.disabled = true;\n        nextBtn.innerHTML = \"请选择手机颜色\";\n            return;\n        }\n        // 判断用户输入的购买数量是否是正整数\n        var reg = /^\\d+$/g;\n        if(!reg.test(number)) {\n            nextBtn.disabled = true;\n            nextBtn.innerHTML = \"请输入正确的购买数量\";\n            return;\n        }\n        // 如果当前选择的数量大于当前的库存的数量的话，显示库存不足\n        if(number > stock) {\n            nextBtn.disabled = true;\n            nextBtn.innerHTML = \"库存不足\";\n            return;\n        }\n        nextBtn.disabled = false;\n        nextBtn.innerHTML = \"放入购物车\";\n    }\n```\n一般的代码就是这样的，感觉使用中介者模式代码也类似，这里就不多介绍了，书上的代码说有优点，但是个人感觉没有什么很大的区别，因此这里就不再使用中介者模式来编写代码了。",
				"html": "<p>   先来理解这么一个问题，假如我们前端开发接的需求是需求方给我们需求，可能一个前端开发会和多个需求方打交道，所以会保持多个需求方的联系，那么在程序里面就意味着保持多个对象的引用，当程序的规模越大，对象会越来越多，他们之间的关系会越来越复杂，那现在假如现在有一个中介者(假如就是我们的主管)来对接多个需求方的需求，那么需求方只需要把所有的需求给我们主管就可以，主管会依次看我们的工作量来给我们分配任务，这样的话，我们前端开发就不需要和多个业务方联系，我们只需要和我们主管(也就是中介)联系即可，这样的好处就弱化了对象之间的耦合。<br><a id=\"more\"></a><br>日常生活中的列子：</p>\n<pre><code>中介者模式对于我们日常生活中经常会碰到，比如我们去房屋中介去租房，房屋中介人在租房者和房东出租者之间形成一条中介;租房者并不关心租谁的房，房东出租者也并不关心它租给谁，因为有中介，所以需要中介来完成这场交易。\n</code></pre><p>中介者模式的作用是解除对象与对象之间的耦合关系，增加一个中介对象后，所有的相关对象都通过中介者对象来通信，而不是相互引用，所以当一个对象发送改变时，只需要通知中介者对象即可。中介者使各个对象之间耦合松散，而且可以独立地改变它们之间的交互。</p>\n<p>实现中介者的列子如下：</p>\n<p>不知道大家有没有玩过英雄杀这个游戏，最早的时候，英雄杀有2个人(分别是敌人和自己)；我们针对这个游戏先使用普通的函数来实现如下：</p>\n<p>比如先定义一个函数，该函数有三个方法，分别是win(赢), lose(输)，和die(敌人死亡)这三个函数；只要一个玩家死亡该游戏就结束了，同时需要通知它的对手胜利了; 代码需要编写如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.enemy = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Hero.prototype.win = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'Won'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Hero.prototype.lose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'lose'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Hero.prototype.die = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lose();</div><div class=\"line\">    <span class=\"keyword\">this</span>.enemy.win();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 初始化2个对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> h1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">\"朱元璋\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> h2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">\"刘伯温\"</span>);</div><div class=\"line\"><span class=\"comment\">// 给玩家设置敌人</span></div><div class=\"line\">h1.enemy = h2;</div><div class=\"line\">h2.enemy = h1;</div><div class=\"line\"><span class=\"comment\">// 朱元璋死了 也就输了</span></div><div class=\"line\">h1.die();  <span class=\"comment\">// 输出 朱元璋lose 刘伯温Won</span></div></pre></td></tr></table></figure>\n<p>现在我们再来为游戏添加队友</p>\n<p>比如现在我们来为游戏添加队友，比如英雄杀有6人一组，那么这种情况下就有队友，敌人也有3个；因此我们需要区分是敌人还是队友需要队的颜色这个字段，如果队的颜色相同的话，那么就是同一个队的，否则的话就是敌人；</p>\n<p>我们可以先定义一个数组players来保存所有的玩家，在创建玩家之后，循环players来给每个玩家设置队友或者敌人;<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> players = [];</div></pre></td></tr></table></figure></p>\n<p>接着我们再来编写Hero这个函数；代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> players = []; <span class=\"comment\">// 定义一个数组 保存所有的玩家</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span>(<span class=\"params\">name,teamColor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.friends = [];    <span class=\"comment\">//保存队友列表</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.enemies = [];    <span class=\"comment\">// 保存敌人列表</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'live'</span>;  <span class=\"comment\">// 玩家状态</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;     <span class=\"comment\">// 角色名字</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.teamColor = teamColor; <span class=\"comment\">// 队伍的颜色</span></div><div class=\"line\">&#125;</div><div class=\"line\">Hero.prototype.win = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 赢了</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"win:\"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">Hero.prototype.lose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 输了</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"lose:\"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">Hero.prototype.die = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 所有队友死亡情况 默认都是活着的</span></div><div class=\"line\">    <span class=\"keyword\">var</span> all_dead = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'dead'</span>; <span class=\"comment\">// 设置玩家状态为死亡</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = <span class=\"keyword\">this</span>.friends.length; i &lt; ilen; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 遍历，如果还有一个队友没有死亡的话，则游戏还未结束</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.friends[i].state !== <span class=\"string\">'dead'</span>) &#123;</div><div class=\"line\">            all_dead = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(all_dead) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lose();  <span class=\"comment\">// 队友全部死亡，游戏结束</span></div><div class=\"line\">        <span class=\"comment\">// 循环 通知所有的玩家 游戏失败</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>,jlen = <span class=\"keyword\">this</span>.friends.length; j &lt; jlen; j+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.friends[j].lose();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 通知所有敌人游戏胜利</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>,jlen = <span class=\"keyword\">this</span>.enemies.length; j &lt; jlen; j+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.enemies[j].win();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 定义一个工厂类来创建玩家</span></div><div class=\"line\"><span class=\"keyword\">var</span> heroFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,teamColor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> newPlayer = <span class=\"keyword\">new</span> Hero(name,teamColor);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = players.length; i &lt; ilen; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果是同一队的玩家</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(players[i].teamColor === newPlayer.teamColor) &#123;</div><div class=\"line\">            <span class=\"comment\">// 相互添加队友列表</span></div><div class=\"line\">            players[i].friends.push(newPlayer);</div><div class=\"line\">            newPlayer.friends.push(players[i]);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 相互添加到敌人列表</span></div><div class=\"line\">            players[i].enemies.push(newPlayer);</div><div class=\"line\">            newPlayer.enemies.push(players[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    players.push(newPlayer);</div><div class=\"line\">    <span class=\"keyword\">return</span> newPlayer;</div><div class=\"line\">&#125;;</div><div class=\"line\">        <span class=\"comment\">// 红队</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = heroFactory(<span class=\"string\">\"aa\"</span>,<span class=\"string\">'red'</span>),</div><div class=\"line\">    p2 = heroFactory(<span class=\"string\">\"bb\"</span>,<span class=\"string\">'red'</span>),</div><div class=\"line\">    p3 = heroFactory(<span class=\"string\">\"cc\"</span>,<span class=\"string\">'red'</span>),</div><div class=\"line\">    p4 = heroFactory(<span class=\"string\">\"dd\"</span>,<span class=\"string\">'red'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 蓝队</span></div><div class=\"line\"><span class=\"keyword\">var</span> p5 = heroFactory(<span class=\"string\">\"ee\"</span>,<span class=\"string\">'blue'</span>),</div><div class=\"line\">    p6 = heroFactory(<span class=\"string\">\"ff\"</span>,<span class=\"string\">'blue'</span>),</div><div class=\"line\">    p7 = heroFactory(<span class=\"string\">\"gg\"</span>,<span class=\"string\">'blue'</span>),</div><div class=\"line\">    p8 = heroFactory(<span class=\"string\">\"hh\"</span>,<span class=\"string\">'blue'</span>);</div><div class=\"line\"><span class=\"comment\">// 让红队玩家全部死亡</span></div><div class=\"line\">p1.die();</div><div class=\"line\">p2.die();</div><div class=\"line\">p3.die();</div><div class=\"line\">p4.die();</div><div class=\"line\"><span class=\"comment\">// lose:dd lose:aa lose:bb lose:cc</span></div><div class=\"line\"><span class=\"comment\">// win:ee win:ff win:gg win:hh</span></div></pre></td></tr></table></figure></p>\n<p>如上代码：Hero函数有2个参数，分别是name(玩家名字)和teamColor(队颜色)，</p>\n<p>首先我们可以根据队颜色来判断是队友还是敌人；同样也有三个方法win(赢)，lose(输)，和die(死亡)；如果每次死亡一个人的时候，循环下该死亡的队友有没有全部死亡，如果全部死亡了的话，就输了，因此需要循环他们的队友，分别告诉每个队友中的成员他们输了，同时需要循环他们的敌人，分别告诉他们的敌人他们赢了；因此每次死了一个人的时候，都需要循环一次判断他的队友是否都死亡了；因此每个玩家和其他的玩家都是紧紧耦合在一起了。</p>\n<p>下面我们可以使用中介者模式来改善上面的demo；</p>\n<p>首先我们仍然定义Hero构造函数和Hero对象原型的方法，在Hero对象的这些原型方法中，不再负责具体的执行的逻辑，而是把操作转交给中介者对象，中介者对象来负责做具体的事情，我们可以把中介者对象命名为playerDirector;</p>\n<p>在playerDirector开放一个对外暴露的接口ReceiveMessage，负责接收player对象发送的消息，而player对象发送消息的时候，总是把自身的this作为参数发送给playerDirector，以便playerDirector 识别消息来自于那个玩家对象。</p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> players = []; <span class=\"comment\">// 定义一个数组 保存所有的玩家</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span>(<span class=\"params\">name,teamColor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'live'</span>;  <span class=\"comment\">// 玩家状态</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;     <span class=\"comment\">// 角色名字</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.teamColor = teamColor; <span class=\"comment\">// 队伍的颜色</span></div><div class=\"line\">&#125;</div><div class=\"line\">Hero.prototype.win = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 赢了</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"win:\"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">Hero.prototype.lose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 输了</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"lose:\"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 死亡</span></div><div class=\"line\">Hero.prototype.die = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'dead'</span>;</div><div class=\"line\">    <span class=\"comment\">// 给中介者发送消息，玩家死亡</span></div><div class=\"line\">    playerDirector.ReceiveMessage(<span class=\"string\">'playerDead'</span>,<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 移除玩家</span></div><div class=\"line\">Hero.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 给中介者发送一个消息，移除一个玩家</span></div><div class=\"line\">    playerDirector.ReceiveMessage(<span class=\"string\">'removePlayer'</span>,<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 玩家换队</span></div><div class=\"line\">Hero.prototype.changeTeam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">color</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 给中介者发送一个消息，玩家换队</span></div><div class=\"line\">    playerDirector.ReceiveMessage(<span class=\"string\">'changeTeam'</span>,<span class=\"keyword\">this</span>,color);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 定义一个工厂类来创建玩家</span></div><div class=\"line\"><span class=\"keyword\">var</span> heroFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,teamColor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建一个新的玩家对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> newHero = <span class=\"keyword\">new</span> Hero(name,teamColor);</div><div class=\"line\">    <span class=\"comment\">// 给中介者发送消息，新增玩家</span></div><div class=\"line\">    playerDirector.ReceiveMessage(<span class=\"string\">'addPlayer'</span>,newHero);</div><div class=\"line\">    <span class=\"keyword\">return</span> newHero;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> playerDirector = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> players = &#123;&#125;,  <span class=\"comment\">// 保存所有的玩家</span></div><div class=\"line\">        operations = &#123;&#125;; <span class=\"comment\">// 中介者可以执行的操作</span></div><div class=\"line\">    <span class=\"comment\">// 新增一个玩家操作</span></div><div class=\"line\">    operations.addPlayer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">player</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 获取玩家队友的颜色</span></div><div class=\"line\">        <span class=\"keyword\">var</span> teamColor = player.teamColor;</div><div class=\"line\">        <span class=\"comment\">// 如果该颜色的玩家还没有队伍的话，则新成立一个队伍</span></div><div class=\"line\">        players[teamColor] = players[teamColor] || [];</div><div class=\"line\">        <span class=\"comment\">// 添加玩家进队伍</span></div><div class=\"line\">        players[teamColor].push(player);</div><div class=\"line\">     &#125;;</div><div class=\"line\">    <span class=\"comment\">// 移除一个玩家</span></div><div class=\"line\">    operations.removePlayer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">player</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 获取队伍的颜色</span></div><div class=\"line\">        <span class=\"keyword\">var</span> teamColor = player.teamColor,</div><div class=\"line\">        <span class=\"comment\">// 获取该队伍的所有成员</span></div><div class=\"line\">        teamPlayers = players[teamColor] || [];</div><div class=\"line\">        <span class=\"comment\">// 遍历</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = teamPlayers.length - <span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(teamPlayers[i] === player) &#123;</div><div class=\"line\">                teamPlayers.splice(i,<span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 玩家换队</span></div><div class=\"line\">    operations.changeTeam = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">player,newTeamColor</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 首先从原队伍中删除</span></div><div class=\"line\">        operations.removePlayer(player);</div><div class=\"line\">        <span class=\"comment\">// 然后改变队伍的颜色</span></div><div class=\"line\">        player.teamColor = newTeamColor;</div><div class=\"line\">        <span class=\"comment\">// 增加到队伍中</span></div><div class=\"line\">        operations.addPlayer(player);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 玩家死亡</span></div><div class=\"line\">operations.playerDead = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">player</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> teamColor = player.teamColor,</div><div class=\"line\">    <span class=\"comment\">// 玩家所在的队伍</span></div><div class=\"line\">    teamPlayers = players[teamColor];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> all_dead = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"comment\">//遍历</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,player; player = teamPlayers[i++]; ) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(player.state !== <span class=\"string\">'dead'</span>) &#123;</div><div class=\"line\">            all_dead = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果all_dead 为true的话 说明全部死亡</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(all_dead) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, player; player = teamPlayers[i++]; ) &#123;</div><div class=\"line\">            <span class=\"comment\">// 本队所有玩家lose</span></div><div class=\"line\">            player.lose();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> color <span class=\"keyword\">in</span> players) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(color !== teamColor) &#123;</div><div class=\"line\">                <span class=\"comment\">// 说明这是另外一组队伍</span></div><div class=\"line\">                <span class=\"comment\">// 获取该队伍的玩家</span></div><div class=\"line\">                <span class=\"keyword\">var</span> teamPlayers = players[color];</div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,player; player = teamPlayers[i++]; ) &#123;</div><div class=\"line\">                    player.win(); <span class=\"comment\">// 遍历通知其他玩家win了</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> ReceiveMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// arguments的第一个参数为消息名称 获取第一个参数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    operations[message].apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">ReceiveMessage</span> : ReceiveMessage</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 红队</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = heroFactory(<span class=\"string\">\"aa\"</span>,<span class=\"string\">'red'</span>),</div><div class=\"line\">    p2 = heroFactory(<span class=\"string\">\"bb\"</span>,<span class=\"string\">'red'</span>),</div><div class=\"line\">    p3 = heroFactory(<span class=\"string\">\"cc\"</span>,<span class=\"string\">'red'</span>),</div><div class=\"line\">        p4 = heroFactory(<span class=\"string\">\"dd\"</span>,<span class=\"string\">'red'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 蓝队</span></div><div class=\"line\">    <span class=\"keyword\">var</span> p5 = heroFactory(<span class=\"string\">\"ee\"</span>,<span class=\"string\">'blue'</span>),</div><div class=\"line\">        p6 = heroFactory(<span class=\"string\">\"ff\"</span>,<span class=\"string\">'blue'</span>),</div><div class=\"line\">        p7 = heroFactory(<span class=\"string\">\"gg\"</span>,<span class=\"string\">'blue'</span>),</div><div class=\"line\">        p8 = heroFactory(<span class=\"string\">\"hh\"</span>,<span class=\"string\">'blue'</span>);</div><div class=\"line\">    <span class=\"comment\">// 让红队玩家全部死亡</span></div><div class=\"line\">    p1.die();</div><div class=\"line\">    p2.die();</div><div class=\"line\">    p3.die();</div><div class=\"line\">    p4.die();</div><div class=\"line\">    <span class=\"comment\">// lose:aa lose:bb lose:cc lose:dd</span></div><div class=\"line\">   <span class=\"comment\">// win:ee win:ff win:gg win:hh</span></div></pre></td></tr></table></figure>\n<p>我们可以看到如上代码；玩家与玩家之间的耦合代码已经解除了，而把所有的逻辑操作放在中介者对象里面进去处理，某个玩家的任何操作不需要去遍历去通知其他玩家，而只是需要给中介者发送一个消息即可，中介者接受到该消息后进行处理，处理完消息之后会把处理结果反馈给其他的玩家对象。使用中介者模式解除了对象与对象之间的耦合代码; 使程序更加的灵活.</p>\n<p>中介者模式实现购买商品的列子</p>\n<p>下面的列子是书上的列子，比如在淘宝或者天猫的列子不是这样实现的，也没有关系，我们可以改动下即可，我们最主要来学习下使用中介者模式来实现的思路。</p>\n<p>首先先介绍一下业务：在购买流程中，可以选择手机的颜色以及输入购买的数量，同时页面中有2个展示区域，分别显示用户刚刚选择好的颜色和数量。还有一个按钮动态显示下一步的操作，我们需要查询该颜色手机对应的库存，如果库存数量小于这次的购买数量，按钮则被禁用并且显示库存不足的文案，反之按钮高亮且可以点击并且显示假如购物车。</p>\n<p>HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">选择颜色:</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorSelect\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"red\"</span>&gt;</span>红色<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"blue\"</span>&gt;</span>蓝色<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入购买的数量: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"numberInput\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    你选择了的颜色：<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorInfo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你输入的数量: <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"numberInfo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nextBtn\"</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span>&gt;</span>请选择手机颜色和购买数量<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>首先页面上有一个select选择框，然后有输入的购买数量输入框，还有2个展示区域，分别是选择的颜色和输入的数量的显示的区域，还有下一步的按钮操作；</p>\n<p>我们先定义一下：</p>\n<p>假设我们提前从后台获取到所有颜色手机的库存量<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> goods = &#123;</div><div class=\"line\">    <span class=\"comment\">// 手机库存</span></div><div class=\"line\">    <span class=\"string\">\"red\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"string\">\"blue\"</span>: <span class=\"number\">8</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>接着 我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，然后在这两个事件中作出相应的处理</p>\n<p>常规的JS代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 假设我们提前从后台获取到所有颜色手机的库存量</span></div><div class=\"line\"><span class=\"keyword\">var</span> goods = &#123;</div><div class=\"line\">    <span class=\"comment\">// 手机库存</span></div><div class=\"line\">    <span class=\"string\">\"red\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"string\">\"blue\"</span>: <span class=\"number\">8</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，</div><div class=\"line\">然后在这两个事件中作出相应的处理</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">var</span> colorSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colorSelect\"</span>),</div><div class=\"line\">    numberInput = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"numberInput\"</span>),</div><div class=\"line\">    colorInfo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colorInfo\"</span>),</div><div class=\"line\">    numberInfo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"numberInfo\"</span>),</div><div class=\"line\">    nextBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"nextBtn\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 监听change事件</span></div><div class=\"line\">colorSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    select();</div><div class=\"line\">&#125;;</div><div class=\"line\">numberInput.oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    select();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> color = colorSelect.value,   <span class=\"comment\">// 颜色</span></div><div class=\"line\">        number = numberInput.value,  <span class=\"comment\">// 数量</span></div><div class=\"line\">        stock = goods[color];  <span class=\"comment\">// 该颜色手机对应的当前库存</span></div><div class=\"line\"></div><div class=\"line\">    colorInfo.innerHTML = color;</div><div class=\"line\">    numberInfo.innerHTML = number;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果用户没有选择颜色的话，禁用按钮</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!color) &#123;</div><div class=\"line\">        nextBtn.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">        nextBtn.innerHTML = <span class=\"string\">\"请选择手机颜色\"</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 判断用户输入的购买数量是否是正整数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d+$/g</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!reg.test(number)) &#123;</div><div class=\"line\">        nextBtn.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">        nextBtn.innerHTML = <span class=\"string\">\"请输入正确的购买数量\"</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果当前选择的数量大于当前的库存的数量的话，显示库存不足</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(number &gt; stock) &#123;</div><div class=\"line\">        nextBtn.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">        nextBtn.innerHTML = <span class=\"string\">\"库存不足\"</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    nextBtn.disabled = <span class=\"literal\">false</span>;</div><div class=\"line\">    nextBtn.innerHTML = <span class=\"string\">\"放入购物车\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码虽然是完成了页面上的需求，但是我们的代码都耦合在一起了，目前虽然问题不是很多，假如随着以后需求的改变，SKU属性越来越多的话，比如页面增加一个或者多个下拉框的时候，代表选择手机内存，现在我们需要计算颜色，内存和购买数量，来判断nextBtn是显示库存不足还是放入购物车；代码如下：</p>\n<p>HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">选择颜色:</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorSelect\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"red\"</span>&gt;</span>红色<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"blue\"</span>&gt;</span>蓝色<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">    选择内存：</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"memorySelect\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"32G\"</span>&gt;</span>32G<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"64G\"</span>&gt;</span>64G<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入购买的数量: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"numberInput\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    你选择了的颜色：<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"colorInfo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    你选择了内存：<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"memoryInfo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你输入的数量: <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"numberInfo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nextBtn\"</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span>&gt;</span>请选择手机颜色和购买数量<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>JS代码变为如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 假设我们提前从后台获取到所有颜色手机的库存量</span></div><div class=\"line\"><span class=\"keyword\">var</span> goods = &#123;</div><div class=\"line\">    <span class=\"comment\">// 手机库存</span></div><div class=\"line\">    <span class=\"string\">\"red|32G\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"string\">\"red|64G\"</span>: <span class=\"number\">16</span>,</div><div class=\"line\">    <span class=\"string\">\"blue|32G\"</span>: <span class=\"number\">8</span>,</div><div class=\"line\">    <span class=\"string\">\"blue|64G\"</span>: <span class=\"number\">18</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">我们下面分别来监听colorSelect的下拉框的onchange事件和numberInput输入框的oninput的事件，</div><div class=\"line\">然后在这两个事件中作出相应的处理</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> colorSelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colorSelect\"</span>),</div><div class=\"line\">    memorySelect = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"memorySelect\"</span>),</div><div class=\"line\">    numberInput = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"numberInput\"</span>),</div><div class=\"line\">    colorInfo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"colorInfo\"</span>),</div><div class=\"line\">    numberInfo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"numberInfo\"</span>),</div><div class=\"line\">    memoryInfo = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"memoryInfo\"</span>),</div><div class=\"line\">    nextBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"nextBtn\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 监听change事件</span></div><div class=\"line\">colorSelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    select();</div><div class=\"line\">&#125;;</div><div class=\"line\">numberInput.oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    select();</div><div class=\"line\">&#125;;</div><div class=\"line\">memorySelect.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    select();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> color = colorSelect.value,   <span class=\"comment\">// 颜色</span></div><div class=\"line\">        number = numberInput.value,  <span class=\"comment\">// 数量</span></div><div class=\"line\">        memory = memorySelect.value, <span class=\"comment\">// 内存</span></div><div class=\"line\">        stock = goods[color + <span class=\"string\">'|'</span> +memory];  <span class=\"comment\">// 该颜色手机对应的当前库存</span></div><div class=\"line\"></div><div class=\"line\">    colorInfo.innerHTML = color;</div><div class=\"line\">    numberInfo.innerHTML = number;</div><div class=\"line\">    memoryInfo.innerHTML = memory;</div><div class=\"line\">    <span class=\"comment\">// 如果用户没有选择颜色的话，禁用按钮</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!color) &#123;</div><div class=\"line\">        nextBtn.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">        nextBtn.innerHTML = <span class=\"string\">\"请选择手机颜色\"</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 判断用户输入的购买数量是否是正整数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d+$/g</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!reg.test(number)) &#123;</div><div class=\"line\">            nextBtn.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">            nextBtn.innerHTML = <span class=\"string\">\"请输入正确的购买数量\"</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 如果当前选择的数量大于当前的库存的数量的话，显示库存不足</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(number &gt; stock) &#123;</div><div class=\"line\">            nextBtn.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">            nextBtn.innerHTML = <span class=\"string\">\"库存不足\"</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        nextBtn.disabled = <span class=\"literal\">false</span>;</div><div class=\"line\">        nextBtn.innerHTML = <span class=\"string\">\"放入购物车\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>一般的代码就是这样的，感觉使用中介者模式代码也类似，这里就不多介绍了，书上的代码说有优点，但是个人感觉没有什么很大的区别，因此这里就不再使用中介者模式来编写代码了。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491546075515,
				"created_by": 2,
				"updated_at": 1491546171834,
				"updated_by": 2,
				"published_at": 1491546075515,
				"published_by": 2
			},
			{
				"id": "cj17g17fr0000akfca95shmu2",
				"title": "js设计模式-发布订阅模式",
				"slug": "js-design-pattern-book",
				"markdown": "# 发布订阅模式介绍\n\n   发布---订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。\n<!--more-->\n## 现实生活中的发布-订阅模式；\n\n比如小红最近在淘宝网上看上一双鞋子，但是呢 联系到卖家后，才发现这双鞋卖光了，但是小红对这双鞋又非常喜欢，所以呢联系卖家，问卖家什么时候有货，卖家告诉她，要等一个星期后才有货，卖家告诉小红，要是你喜欢的话，你可以收藏我们的店铺，等有货的时候再通知你，所以小红收藏了此店铺，但与此同时，小明，小花等也喜欢这双鞋，也收藏了该店铺；等来货的时候就依次会通知他们；\n\n在上面的故事中，可以看出是一个典型的发布订阅模式，卖家是属于发布者，小红，小明等属于订阅者，订阅该店铺，卖家作为发布者，当鞋子到了的时候，会依次通知小明，小红等，依次使用旺旺等工具给他们发布消息；\n\n## 发布订阅模式的优点：\n\n  1. 支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。\n\n比如上面的列子，小明，小红不需要天天逛淘宝网看鞋子到了没有，在合适的时间点，发布者(卖家)来货了的时候，会通知该订阅者(小红，小明等人)。\n\n  2. 发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；同理卖家（发布者）它只需要将鞋子来货的这件事告诉订阅者(买家)，他不管买家到底买还是不买，还是买其他卖家的。只要鞋子到货了就通知订阅者即可。\n\n 对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~\n\n## 发布订阅模式的缺点：\n\n  创建订阅者需要消耗一定的时间和内存。\n\n  虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。\n\n# 如何实现发布--订阅模式？\n\n   1. 首先要想好谁是发布者(比如上面的卖家)。\n\n   2. 然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(比如上面的买家收藏了卖家的店铺，卖家通过收藏了该店铺的一个列表名单)。\n\n   3. 最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。\n\n我们还可以在回调函数里面添加一点参数，比如鞋子的颜色，鞋子尺码等信息；\n\n我们先来实现下简单的发布-订阅模式；代码如下：\n\n```js\nvar shoeObj = {}; // 定义发布者\nshoeObj.list = []; // 缓存列表 存放订阅者回调函数\n\n// 增加订阅者\nshoeObj.listen = function(fn) {\n    shoeObj.list.push(fn);  // 订阅消息添加到缓存列表\n}\n\n// 发布消息\nshoeObj.trigger = function(){\n    for(var i = 0,fn; fn = this.list[i++];) {\n        fn.apply(this,arguments);\n    }\n}\n// 小红订阅如下消息\nshoeObj.listen(function(color,size){\n    console.log(\"颜色是：\"+color);\n    console.log(\"尺码是：\"+size);\n});\n\n// 小花订阅如下消息\nshoeObj.listen(function(color,size){\n    console.log(\"再次打印颜色是：\"+color);\n    console.log(\"再次打印尺码是：\"+size);\n});\nshoeObj.trigger(\"红色\",40);\nshoeObj.trigger(\"黑色\",42);\n```\n运行结果如下：\n![](http://images0.cnblogs.com/blog2015/561794/201507/300026322675388.png)\n\n\n打印如上截图，我们看到订阅者接收到发布者的每个消息，但是呢，对于小红来说，她只想接收颜色为红色的消息，不想接收颜色为黑色的消息，为此我们需要对代码进行如下改造下，我们可以先增加一个key，使订阅者只订阅自己感兴趣的消息。代码如下：\n\n```js\nvar shoeObj = {}; // 定义发布者\nshoeObj.list = []; // 缓存列表 存放订阅者回调函数\n\n// 增加订阅者\nshoeObj.listen = function(key,fn) {\n    if(!this.list[key]) {\n        // 如果还没有订阅过此类消息，给该类消息创建一个缓存列表\n        this.list[key] = [];\n    }\n    this.list[key].push(fn);  // 订阅消息添加到缓存列表\n}\n\n// 发布消息\nshoeObj.trigger = function(){\n    var key = Array.prototype.shift.call(arguments); // 取出消息类型名称\n    var fns = this.list[key];  // 取出该消息对应的回调函数的集合\n\n    // 如果没有订阅过该消息的话，则返回\n    if(!fns || fns.length === 0) {\n        return;\n    }\n    for(var i = 0,fn; fn = fns[i++]; ) {\n        fn.apply(this,arguments); // arguments 是发布消息时附送的参数\n    }\n};\n\n// 小红订阅如下消息\nshoeObj.listen('red',function(size){\n    console.log(\"尺码是：\"+size);\n});\n\n// 小花订阅如下消息\nshoeObj.listen('block',function(size){\n    console.log(\"再次打印尺码是：\"+size);\n});\nshoeObj.trigger(\"red\",40);\nshoeObj.trigger(\"block\",42);\n```\n上面的代码，我们再来运行打印下 如下：\n![](http://images0.cnblogs.com/blog2015/561794/201507/300027129237602.png)\n\n\n可以看到，订阅者只订阅自己感兴趣的消息了；\n\n# 发布---订阅模式的代码封装\n\n我们知道，对于上面的代码，小红去买鞋这么一个对象shoeObj 进行订阅，但是如果以后我们需要对买房子或者其他的对象进行订阅呢，我们需要复制上面的代码，再重新改下里面的对象代码；为此我们需要进行代码封装；\n\n如下代码封装：\n\n```js\nvar event = {\n    list: [],\n    listen: function(key,fn) {\n        if(!this.list[key]) {\n            this.list[key] = [];\n        }\n        // 订阅的消息添加到缓存列表中\n        this.list[key].push(fn);\n    },\n    trigger: function(){\n        var key = Array.prototype.shift.call(arguments);\n        var fns = this.list[key];\n        // 如果没有订阅过该消息的话，则返回\n        if(!fns || fns.length === 0) {\n            return;\n        }\n        for(var i = 0,fn; fn = fns[i++];) {\n            fn.apply(this,arguments);\n        }\n    }\n};\n```\n我们再定义一个initEvent函数，这个函数使所有的普通对象都具有发布订阅功能，如下代码：\n\n```js\nvar initEvent = function(obj) {\n    for(var i in event) {\n        obj[i] = event[i];\n    }\n};\n// 我们再来测试下，我们还是给shoeObj这个对象添加发布-订阅功能；\nvar shoeObj = {};\ninitEvent(shoeObj);\n\n// 小红订阅如下消息\nshoeObj.listen('red',function(size){\n    console.log(\"尺码是：\"+size);\n});\n\n// 小花订阅如下消息\nshoeObj.listen('block',function(size){\n    console.log(\"再次打印尺码是：\"+size);\n});\nshoeObj.trigger(\"red\",40);\nshoeObj.trigger(\"block\",42);\n```\n# 如何取消订阅事件？\n\n比如上面的列子，小红她突然不想买鞋子了，那么对于卖家的店铺他不想再接受该店铺的消息，那么小红可以取消该店铺的订阅。\n\n如下代码：\n\n```js\nevent.remove = function(key,fn){\n    var fns = this.list[key];\n    // 如果key对应的消息没有订阅过的话，则返回\n    if(!fns) {\n        return false;\n    }\n    // 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅\n    if(!fn) {\n        fn && (fns.length = 0);\n    }else {\n        for(var i = fns.length - 1; i >= 0; i--) {\n            var _fn = fns[i];\n            if(_fn === fn) {\n                fns.splice(i,1); // 删除订阅者的回调函数\n            }\n        }\n    }\n};\n// 测试代码如下：\nvar initEvent = function(obj) {\n    for(var i in event) {\n        obj[i] = event[i];\n    }\n};\nvar shoeObj = {};\ninitEvent(shoeObj);\n\n// 小红订阅如下消息\nshoeObj.listen('red',fn1 = function(size){\n    console.log(\"尺码是：\"+size);\n});\n\n// 小花订阅如下消息\nshoeObj.listen('red',fn2 = function(size){\n    console.log(\"再次打印尺码是：\"+size);\n});\nshoeObj.remove(\"red\",fn1);\nshoeObj.trigger(\"red\",42);\n```\n运行结果如下：\n![](http://images0.cnblogs.com/blog2015/561794/201507/300029313607541.png)\n\n\n# 全局--发布订阅对象代码封装\n\n我们再来看看我们传统的ajax请求吧，比如我们传统的ajax请求，请求成功后需要做如下事情：\n\n 1. 渲染数据。\n\n 2. 使用数据来做一个动画。\n\n那么我们以前肯定是如下写代码：\n```js\n$.ajax(“http://127.0.0.1/index.php”,function(data){\n    rendedData(data);  // 渲染数据\n    doAnimate(data);  // 实现动画\n});\n```\n假如以后还需要做点事情的话，我们还需要在里面写调用的方法；这样代码就耦合性很高，那么我们现在使用发布-订阅模式来看如何重构上面的业务需求代码；\n\n```js\n$.ajax(“http://127.0.0.1/index.php”,function(data){\n    Obj.trigger(‘success’,data);  // 发布请求成功后的消息\n});\n// 下面我们来订阅此消息，比如我现在订阅渲染数据这个消息；\nObj.listen(“success”,function(data){\n   renderData(data);\n});\n// 订阅动画这个消息\nObj.listen(“success”,function(data){\n   doAnimate(data);\n});\n```\n为此我们可以封装一个全局发布-订阅模式对象；如下代码：\n\n```js\nvar Event = (function(){\n    var list = {},\n          listen,\n          trigger,\n          remove;\n          listen = function(key,fn){\n            if(!list[key]) {\n                list[key] = [];\n            }\n            list[key].push(fn);\n        };\n        trigger = function(){\n            var key = Array.prototype.shift.call(arguments),\n                 fns = list[key];\n            if(!fns || fns.length === 0) {\n                return false;\n            }\n            for(var i = 0, fn; fn = fns[i++];) {\n                fn.apply(this,arguments);\n            }\n        };\n        remove = function(key,fn){\n            var fns = list[key];\n            if(!fns) {\n                return false;\n            }\n            if(!fn) {\n                fns && (fns.length = 0);\n            }else {\n                for(var i = fns.length - 1; i >= 0; i--){\n                    var _fn = fns[i];\n                    if(_fn === fn) {\n                        fns.splice(i,1);\n                    }\n                }\n            }\n        };\n        return {\n            listen: listen,\n            trigger: trigger,\n            remove: remove\n        }\n})();\n// 测试代码如下：\nEvent.listen(\"color\",function(size) {\n    console.log(\"尺码为:\"+size); // 打印出尺码为42\n});\nEvent.trigger(\"color\",42);\n```\n# 理解模块间通信\n\n我们使用上面封装的全局的发布-订阅对象来实现两个模块之间的通信问题；比如现在有一个页面有一个按钮，每次点击此按钮后，div中会显示此按钮被点击的总次数；如下代码：\n```html\n<button id=\"count\">点将我</button>\n\n<div id=\"showcount\"></div>\n```\n我们中的a.js 负责处理点击操作 及发布消息；如下JS代码：\n\n```js\nvar a = (function(){\n    var count = 0;\n    var button = document.getElementById(\"count\");\n    button.onclick = function(){\n        Event.trigger(\"add\",count++);\n    }\n})();\n```\nb.js 负责监听add这个消息，并把点击的总次数显示到页面上来；如下代码：\n\n```js\nvar b = (function(){\n    var div = document.getElementById(\"showcount\");\n    Event.listen('add',function(count){\n        div.innerHTML = count;\n    });\n})();\n```\n下面是html代码如下，JS应用如下引用即可：\n\n```html\n<!doctype html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"global.js\"></script>\n </head>\n <body>\n    <button id=\"count\">点将我</button>\n    <div id=\"showcount\"></div>\n    <script src = \"a.js\"></script>\n    <script src = \"b.js\"></script>\n </body>\n</html>\n```\n如上代码，当点击一次按钮后，showcount的div会自动加1，如上演示的是2个模块之间如何使用发布-订阅模式之间的通信问题；\n\n其中global.js 就是我们上面封装的全局-发布订阅模式对象的封装代码；",
				"html": "<h1 id=\"发布订阅模式介绍\"><a href=\"#发布订阅模式介绍\" class=\"headerlink\" title=\"发布订阅模式介绍\"></a>发布订阅模式介绍</h1><p>   发布—订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。<br><a id=\"more\"></a></p>\n<h2 id=\"现实生活中的发布-订阅模式；\"><a href=\"#现实生活中的发布-订阅模式；\" class=\"headerlink\" title=\"现实生活中的发布-订阅模式；\"></a>现实生活中的发布-订阅模式；</h2><p>比如小红最近在淘宝网上看上一双鞋子，但是呢 联系到卖家后，才发现这双鞋卖光了，但是小红对这双鞋又非常喜欢，所以呢联系卖家，问卖家什么时候有货，卖家告诉她，要等一个星期后才有货，卖家告诉小红，要是你喜欢的话，你可以收藏我们的店铺，等有货的时候再通知你，所以小红收藏了此店铺，但与此同时，小明，小花等也喜欢这双鞋，也收藏了该店铺；等来货的时候就依次会通知他们；</p>\n<p>在上面的故事中，可以看出是一个典型的发布订阅模式，卖家是属于发布者，小红，小明等属于订阅者，订阅该店铺，卖家作为发布者，当鞋子到了的时候，会依次通知小明，小红等，依次使用旺旺等工具给他们发布消息；</p>\n<h2 id=\"发布订阅模式的优点：\"><a href=\"#发布订阅模式的优点：\" class=\"headerlink\" title=\"发布订阅模式的优点：\"></a>发布订阅模式的优点：</h2><ol>\n<li>支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。</li>\n</ol>\n<p>比如上面的列子，小明，小红不需要天天逛淘宝网看鞋子到了没有，在合适的时间点，发布者(卖家)来货了的时候，会通知该订阅者(小红，小明等人)。</p>\n<ol>\n<li><p>发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；同理卖家（发布者）它只需要将鞋子来货的这件事告诉订阅者(买家)，他不管买家到底买还是不买，还是买其他卖家的。只要鞋子到货了就通知订阅者即可。</p>\n<p>对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~</p>\n</li>\n</ol>\n<h2 id=\"发布订阅模式的缺点：\"><a href=\"#发布订阅模式的缺点：\" class=\"headerlink\" title=\"发布订阅模式的缺点：\"></a>发布订阅模式的缺点：</h2><p>  创建订阅者需要消耗一定的时间和内存。</p>\n<p>  虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。</p>\n<h1 id=\"如何实现发布–订阅模式？\"><a href=\"#如何实现发布–订阅模式？\" class=\"headerlink\" title=\"如何实现发布–订阅模式？\"></a>如何实现发布–订阅模式？</h1><ol>\n<li><p>首先要想好谁是发布者(比如上面的卖家)。</p>\n</li>\n<li><p>然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(比如上面的买家收藏了卖家的店铺，卖家通过收藏了该店铺的一个列表名单)。</p>\n</li>\n<li><p>最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。</p>\n</li>\n</ol>\n<p>我们还可以在回调函数里面添加一点参数，比如鞋子的颜色，鞋子尺码等信息；</p>\n<p>我们先来实现下简单的发布-订阅模式；代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoeObj = &#123;&#125;; <span class=\"comment\">// 定义发布者</span></div><div class=\"line\">shoeObj.list = []; <span class=\"comment\">// 缓存列表 存放订阅者回调函数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 增加订阅者</span></div><div class=\"line\">shoeObj.listen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    shoeObj.list.push(fn);  <span class=\"comment\">// 订阅消息添加到缓存列表</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发布消息</span></div><div class=\"line\">shoeObj.trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,fn; fn = <span class=\"keyword\">this</span>.list[i++];) &#123;</div><div class=\"line\">        fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 小红订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">color,size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"颜色是：\"</span>+color);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小花订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">color,size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"再次打印颜色是：\"</span>+color);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"再次打印尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"红色\"</span>,<span class=\"number\">40</span>);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"黑色\"</span>,<span class=\"number\">42</span>);</div></pre></td></tr></table></figure>\n<p>运行结果如下：<br><img src=\"http://images0.cnblogs.com/blog2015/561794/201507/300026322675388.png\" alt=\"\"></p>\n<p>打印如上截图，我们看到订阅者接收到发布者的每个消息，但是呢，对于小红来说，她只想接收颜色为红色的消息，不想接收颜色为黑色的消息，为此我们需要对代码进行如下改造下，我们可以先增加一个key，使订阅者只订阅自己感兴趣的消息。代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoeObj = &#123;&#125;; <span class=\"comment\">// 定义发布者</span></div><div class=\"line\">shoeObj.list = []; <span class=\"comment\">// 缓存列表 存放订阅者回调函数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 增加订阅者</span></div><div class=\"line\">shoeObj.listen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.list[key]) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.list[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.list[key].push(fn);  <span class=\"comment\">// 订阅消息添加到缓存列表</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发布消息</span></div><div class=\"line\">shoeObj.trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>); <span class=\"comment\">// 取出消息类型名称</span></div><div class=\"line\">    <span class=\"keyword\">var</span> fns = <span class=\"keyword\">this</span>.list[key];  <span class=\"comment\">// 取出该消息对应的回调函数的集合</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果没有订阅过该消息的话，则返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!fns || fns.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,fn; fn = fns[i++]; ) &#123;</div><div class=\"line\">        fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>); <span class=\"comment\">// arguments 是发布消息时附送的参数</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小红订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"string\">'red'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小花订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"string\">'block'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"再次打印尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"red\"</span>,<span class=\"number\">40</span>);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"block\"</span>,<span class=\"number\">42</span>);</div></pre></td></tr></table></figure>\n<p>上面的代码，我们再来运行打印下 如下：<br><img src=\"http://images0.cnblogs.com/blog2015/561794/201507/300027129237602.png\" alt=\"\"></p>\n<p>可以看到，订阅者只订阅自己感兴趣的消息了；</p>\n<h1 id=\"发布—订阅模式的代码封装\"><a href=\"#发布—订阅模式的代码封装\" class=\"headerlink\" title=\"发布—订阅模式的代码封装\"></a>发布—订阅模式的代码封装</h1><p>我们知道，对于上面的代码，小红去买鞋这么一个对象shoeObj 进行订阅，但是如果以后我们需要对买房子或者其他的对象进行订阅呢，我们需要复制上面的代码，再重新改下里面的对象代码；为此我们需要进行代码封装；</p>\n<p>如下代码封装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> event = &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [],</div><div class=\"line\">    <span class=\"attr\">listen</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.list[key]) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list[key] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 订阅的消息添加到缓存列表中</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.list[key].push(fn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">trigger</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> fns = <span class=\"keyword\">this</span>.list[key];</div><div class=\"line\">        <span class=\"comment\">// 如果没有订阅过该消息的话，则返回</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!fns || fns.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,fn; fn = fns[i++];) &#123;</div><div class=\"line\">            fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们再定义一个initEvent函数，这个函数使所有的普通对象都具有发布订阅功能，如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> initEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> event) &#123;</div><div class=\"line\">        obj[i] = event[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 我们再来测试下，我们还是给shoeObj这个对象添加发布-订阅功能；</span></div><div class=\"line\"><span class=\"keyword\">var</span> shoeObj = &#123;&#125;;</div><div class=\"line\">initEvent(shoeObj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小红订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"string\">'red'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小花订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"string\">'block'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"再次打印尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"red\"</span>,<span class=\"number\">40</span>);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"block\"</span>,<span class=\"number\">42</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"如何取消订阅事件？\"><a href=\"#如何取消订阅事件？\" class=\"headerlink\" title=\"如何取消订阅事件？\"></a>如何取消订阅事件？</h1><p>比如上面的列子，小红她突然不想买鞋子了，那么对于卖家的店铺他不想再接受该店铺的消息，那么小红可以取消该店铺的订阅。</p>\n<p>如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">event.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,fn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fns = <span class=\"keyword\">this</span>.list[key];</div><div class=\"line\">    <span class=\"comment\">// 如果key对应的消息没有订阅过的话，则返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!fns) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!fn) &#123;</div><div class=\"line\">        fn &amp;&amp; (fns.length = <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> _fn = fns[i];</div><div class=\"line\">            <span class=\"keyword\">if</span>(_fn === fn) &#123;</div><div class=\"line\">                fns.splice(i,<span class=\"number\">1</span>); <span class=\"comment\">// 删除订阅者的回调函数</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 测试代码如下：</span></div><div class=\"line\"><span class=\"keyword\">var</span> initEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> event) &#123;</div><div class=\"line\">        obj[i] = event[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> shoeObj = &#123;&#125;;</div><div class=\"line\">initEvent(shoeObj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小红订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"string\">'red'</span>,fn1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小花订阅如下消息</span></div><div class=\"line\">shoeObj.listen(<span class=\"string\">'red'</span>,fn2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"再次打印尺码是：\"</span>+size);</div><div class=\"line\">&#125;);</div><div class=\"line\">shoeObj.remove(<span class=\"string\">\"red\"</span>,fn1);</div><div class=\"line\">shoeObj.trigger(<span class=\"string\">\"red\"</span>,<span class=\"number\">42</span>);</div></pre></td></tr></table></figure>\n<p>运行结果如下：<br><img src=\"http://images0.cnblogs.com/blog2015/561794/201507/300029313607541.png\" alt=\"\"></p>\n<h1 id=\"全局–发布订阅对象代码封装\"><a href=\"#全局–发布订阅对象代码封装\" class=\"headerlink\" title=\"全局–发布订阅对象代码封装\"></a>全局–发布订阅对象代码封装</h1><p>我们再来看看我们传统的ajax请求吧，比如我们传统的ajax请求，请求成功后需要做如下事情：</p>\n<ol>\n<li><p>渲染数据。</p>\n</li>\n<li><p>使用数据来做一个动画。</p>\n</li>\n</ol>\n<p>那么我们以前肯定是如下写代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(“http:<span class=\"comment\">//127.0.0.1/index.php”,function(data)&#123;</span></div><div class=\"line\">    rendedData(data);  <span class=\"comment\">// 渲染数据</span></div><div class=\"line\">    doAnimate(data);  <span class=\"comment\">// 实现动画</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>假如以后还需要做点事情的话，我们还需要在里面写调用的方法；这样代码就耦合性很高，那么我们现在使用发布-订阅模式来看如何重构上面的业务需求代码；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(“http:<span class=\"comment\">//127.0.0.1/index.php”,function(data)&#123;</span></div><div class=\"line\">    Obj.trigger(‘success’,data);  <span class=\"comment\">// 发布请求成功后的消息</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 下面我们来订阅此消息，比如我现在订阅渲染数据这个消息；</span></div><div class=\"line\">Obj.listen(“success”,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">   renderData(data);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 订阅动画这个消息</span></div><div class=\"line\">Obj.listen(“success”,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">   doAnimate(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>为此我们可以封装一个全局发布-订阅模式对象；如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Event = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = &#123;&#125;,</div><div class=\"line\">          listen,</div><div class=\"line\">          trigger,</div><div class=\"line\">          remove;</div><div class=\"line\">          listen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,fn</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!list[key]) &#123;</div><div class=\"line\">                list[key] = [];</div><div class=\"line\">            &#125;</div><div class=\"line\">            list[key].push(fn);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        trigger = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>),</div><div class=\"line\">                 fns = list[key];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!fns || fns.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, fn; fn = fns[i++];) &#123;</div><div class=\"line\">                fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,fn</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> fns = list[key];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!fns) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(!fn) &#123;</div><div class=\"line\">                fns &amp;&amp; (fns.length = <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> _fn = fns[i];</div><div class=\"line\">                    <span class=\"keyword\">if</span>(_fn === fn) &#123;</div><div class=\"line\">                        fns.splice(i,<span class=\"number\">1</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">listen</span>: listen,</div><div class=\"line\">            <span class=\"attr\">trigger</span>: trigger,</div><div class=\"line\">            <span class=\"attr\">remove</span>: remove</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 测试代码如下：</span></div><div class=\"line\">Event.listen(<span class=\"string\">\"color\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"尺码为:\"</span>+size); <span class=\"comment\">// 打印出尺码为42</span></div><div class=\"line\">&#125;);</div><div class=\"line\">Event.trigger(<span class=\"string\">\"color\"</span>,<span class=\"number\">42</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"理解模块间通信\"><a href=\"#理解模块间通信\" class=\"headerlink\" title=\"理解模块间通信\"></a>理解模块间通信</h1><p>我们使用上面封装的全局的发布-订阅对象来实现两个模块之间的通信问题；比如现在有一个页面有一个按钮，每次点击此按钮后，div中会显示此按钮被点击的总次数；如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span>&gt;</span>点将我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"showcount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们中的a.js 负责处理点击操作 及发布消息；如下JS代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"count\"</span>);</div><div class=\"line\">    button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        Event.trigger(<span class=\"string\">\"add\"</span>,count++);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>b.js 负责监听add这个消息，并把点击的总次数显示到页面上来；如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> b = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"showcount\"</span>);</div><div class=\"line\">    Event.listen(<span class=\"string\">'add'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>)</span>&#123;</div><div class=\"line\">        div.innerHTML = count;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>下面是html代码如下，JS应用如下引用即可：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"global.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span>&gt;</span>点将我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"showcount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span> = <span class=\"string\">\"a.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span> = <span class=\"string\">\"b.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如上代码，当点击一次按钮后，showcount的div会自动加1，如上演示的是2个模块之间如何使用发布-订阅模式之间的通信问题；</p>\n<p>其中global.js 就是我们上面封装的全局-发布订阅模式对象的封装代码；</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491545899386,
				"created_by": 2,
				"updated_at": 1491545900428,
				"updated_by": 2,
				"published_at": 1491545899386,
				"published_by": 2
			},
			{
				"id": "cj17g17ib000lakfcbggwnvdm",
				"title": "js设计模式-策略模式",
				"slug": "js-design-pattern-strategy",
				"markdown": "\n\n策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。\n\n使用策略模式的优点如下：\n\n优点：\n1. 策略模式利用组合，委托等技术和思想，有效的避免很多if条件语句。\n\n2. 策略模式提供了开放-封闭原则，使代码更容易理解和扩展。\n\n3. 策略模式中的代码可以复用。\n<!--more-->\n# 理解javascript中的策略模式\n## 使用策略模式计算奖金\n\n下面的demo是我在书上看到的，但是没有关系，我们只是来理解下策略模式的使用而已，我们可以使用策略模式来计算奖金问题；\n\n比如公司的年终奖是根据员工的工资和绩效来考核的，绩效为A的人，年终奖为工资的4倍，绩效为B的人，年终奖为工资的3倍，绩效为C的人，年终奖为工资的2倍；现在我们使用一般的编码方式会如下这样编写代码：\n\n```js\nvar calculateBouns = function(salary,level) {\n    if(level === 'A') {\n        return salary * 4;\n    }\n    if(level === 'B') {\n        return salary * 3;\n    }\n    if(level === 'C') {\n        return salary * 2;\n    }\n};\n// 调用如下：\nconsole.log(calculateBouns(4000,'A')); // 16000\nconsole.log(calculateBouns(2500,'B')); // 7500\n```\n第一个参数为薪资，第二个参数为等级；\n\n代码缺点如下：\n\ncalculateBouns 函数包含了很多if-else语句。\n\ncalculateBouns 函数缺乏弹性，假如还有D等级的话，那么我们需要在calculateBouns 函数内添加判断等级D的if语句；\n\n算法复用性差，如果在其他的地方也有类似这样的算法的话，但是规则不一样，我们这些代码不能通用。\n\n## 使用组合函数重构代码\n\n组合函数是把各种算法封装到一个个的小函数里面，比如等级A的话，封装一个小函数，等级为B的话，也封装一个小函数，以此类推；如下代码：\n\n```js\nvar performanceA = function(salary) {\n    return salary * 4;\n};\nvar performanceB = function(salary) {\n    return salary * 3;\n};\n\nvar performanceC = function(salary) {\n    return salary * 2\n};\nvar calculateBouns = function(level,salary) {\n    if(level === 'A') {\n        return performanceA(salary);\n    }\n    if(level === 'B') {\n        return performanceB(salary);\n    }\n    if(level === 'C') {\n        return performanceC(salary);\n    }\n};\n// 调用如下\nconsole.log(calculateBouns('A',4500)); // 18000\n```\n代码看起来有点改善，但是还是有如下缺点：\n\ncalculateBouns 函数有可能会越来越大，比如增加D等级的时候，而且缺乏弹性。\n\n## 使用策略模式重构代码\n\n策略模式指的是 定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，实际就是将算法的使用和实现分离出来；算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数，而算法的实现是根据绩效对应不同的绩效规则；\n\n一个基于策略模式的程序至少由2部分组成，第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类。我们先使用传统面向对象来实现；\n\n如下代码：\n\n```js\nvar performanceA = function(){};\nperformanceA.prototype.calculate = function(salary) {\n    return salary * 4;\n};\nvar performanceB = function(){};\nperformanceB.prototype.calculate = function(salary) {\n    return salary * 3;\n};\nvar performanceC = function(){};\nperformanceC.prototype.calculate = function(salary) {\n    return salary * 2;\n};\n// 奖金类\nvar Bouns = function(){\n    this.salary = null;    // 原始工资\n    this.levelObj = null;  // 绩效等级对应的策略对象\n};\nBouns.prototype.setSalary = function(salary) {\n    this.salary = salary;  // 保存员工的原始工资\n};\nBouns.prototype.setlevelObj = function(levelObj){\n    this.levelObj = levelObj;  // 设置员工绩效等级对应的策略对象\n};\n// 取得奖金数\nBouns.prototype.getBouns = function(){\n    // 把计算奖金的操作委托给对应的策略对象\n    return this.levelObj.calculate(this.salary);\n};\nvar bouns = new Bouns();\nbouns.setSalary(10000);\nbouns.setlevelObj(new performanceA()); // 设置策略对象\nconsole.log(bouns.getBouns());  // 40000\n\nbouns.setlevelObj(new performanceB()); // 设置策略对象\nconsole.log(bouns.getBouns());  // 30000\n```\n如上代码使用策略模式重构代码，可以看到代码职责更新分明，代码变得更加清晰。\n\n## Javascript版本的策略模式\n\n```js\n//代码如下：\nvar obj = {\n        \"A\": function(salary) {\n            return salary * 4;\n        },\n        \"B\" : function(salary) {\n            return salary * 3;\n        },\n        \"C\" : function(salary) {\n            return salary * 2;\n        }\n};\nvar calculateBouns =function(level,salary) {\n    return obj[level](salary);\n};\nconsole.log(calculateBouns('A',10000)); // 40000\n```\n可以看到代码更加简单明了；\n\n策略模式指的是定义一系列的算法，并且把它们封装起来，但是策略模式不仅仅只封装算法，我们还可以对用来封装一系列的业务规则，只要这些业务规则目标一致，我们就可以使用策略模式来封装它们；\n\n# 表单效验\n\n比如我们经常来进行表单验证，比如注册登录对话框，我们登录之前要进行验证操作：比如有以下几条逻辑：\n\n用户名不能为空\n\n密码长度不能小于6位。\n\n手机号码必须符合格式。\n\n比如HTML代码如下：\n\n```html\n<form action = \"http://www.baidu.com\" id=\"registerForm\" method = \"post\">\n        <p>\n            <label>请输入用户名：</label>\n            <input type=\"text\" name=\"userName\"/>\n        </p>\n        <p>\n            <label>请输入密码：</label>\n            <input type=\"text\" name=\"password\"/>\n        </p>\n        <p>\n            <label>请输入手机号码：</label>\n            <input type=\"text\" name=\"phoneNumber\"/>\n        </p>\n</form>\n```\n我们正常的编写表单验证代码如下：\n\n```js\nvar registerForm = document.getElementById(\"registerForm\");\nregisterForm.onsubmit = function(){\n    if(registerForm.userName.value === '') {\n        alert('用户名不能为空');\n        return;\n    }\n    if(registerForm.password.value.length < 6) {\n        alert(\"密码的长度不能小于6位\");\n        return;\n    }\n    if(!/(^1[3|5|8][0-9]{9}$)/.test(registerForm.phoneNumber.value)) {\n        alert(\"手机号码格式不正确\");\n        return;\n    }\n}\n```\n但是这样编写代码有如下缺点：\n\n1.registerForm.onsubmit 函数比较大，代码中包含了很多if语句；\n\n2.registerForm.onsubmit 函数缺乏弹性，如果增加了一种新的效验规则，或者想把密码的长度效验从6改成8，我们必须改registerForm.onsubmit 函数内部的代码。违反了开放-封闭原则。\n\n3. 算法的复用性差，如果在程序中增加了另外一个表单，这个表单也需要进行一些类似的效验，那么我们可能又需要复制代码了；\n\n下面我们可以使用策略模式来重构表单效验；\n\n第一步我们先来封装策略对象；如下代码：\n\n```js\nvar strategy = {\n    isNotEmpty: function(value,errorMsg) {\n        if(value === '') {\n            return errorMsg;\n        }\n    },\n    // 限制最小长度\n    minLength: function(value,length,errorMsg) {\n        if(value.length < length) {\n            return errorMsg;\n        }\n    },\n    // 手机号码格式\n    mobileFormat: function(value,errorMsg) {\n        if(!/(^1[3|5|8][0-9]{9}$)/.test(value)) {\n            return errorMsg;\n        }\n    }\n};\n```\n接下来我们准备实现Validator类，Validator类在这里作为Context，负责接收用户的请求并委托给strategy 对象，如下代码：\n\n```js\nvar Validator = function(){\n    this.cache = [];  // 保存效验规则\n};\nValidator.prototype.add = function(dom,rule,errorMsg) {\n    var str = rule.split(\":\");\n    this.cache.push(function(){\n        // str 返回的是 minLength:6\n        var strategy = str.shift();\n        str.unshift(dom.value); // 把input的value添加进参数列表\n        str.push(errorMsg);  // 把errorMsg添加进参数列表\n        return strategys[strategy].apply(dom,str);\n    });\n};\nValidator.prototype.start = function(){\n    for(var i = 0, validatorFunc; validatorFunc = this.cache[i++]; ) {\n        var msg = validatorFunc(); // 开始效验 并取得效验后的返回信息\n        if(msg) {\n            return msg;\n        }\n    }\n};\n```\nValidator类在这里作为Context，负责接收用户的请求并委托给strategys对象。上面的代码中，我们先创建一个Validator对象，然后通过validator.add方法往validator对象中添加一些效验规则，validator.add方法接收3个参数，如下代码：\n```js\nvalidator.add(registerForm.password,'minLength:6','密码长度不能小于6位');\n```\nregisterForm.password 为效验的input输入框dom节点；\n\nminLength:6： 是以一个冒号隔开的字符串，冒号前面的minLength代表客户挑选的strategys对象，冒号后面的数字6表示在效验过程中所必须验证的参数，minLength:6的意思是效验 registerForm.password 这个文本输入框的value最小长度为6位；如果字符串中不包含冒号，说明效验过程中不需要额外的效验信息；\n\n第三个参数是当效验未通过时返回的错误信息；\n\n当我们往validator对象里添加完一系列的效验规则之后，会调用validator.start()方法来启动效验。如果validator.start()返回了一个errorMsg字符串作为返回值，说明该次效验没有通过，此时需要registerForm.onsubmit方法返回false来阻止表单提交。下面我们来看看初始化代码如下：\n\n```js\nvar validateFunc = function(){\n    var validator = new Validator(); // 创建一个Validator对象\n    /* 添加一些效验规则 */\n    validator.add(registerForm.userName,'isNotEmpty','用户名不能为空');\n    validator.add(registerForm.password,'minLength:6','密码长度不能小于6位');\n    validator.add(registerForm.userName,'mobileFormat','手机号码格式不正确');\n\n    var errorMsg = validator.start(); // 获得效验结果\n    return errorMsg; // 返回效验结果\n};\nvar registerForm = document.getElementById(\"registerForm\");\nregisterForm.onsubmit = function(){\n    var errorMsg = validateFunc();\n    if(errorMsg){\n        alert(errorMsg);\n        return false;\n    }\n}\n```\n下面是所有的代码如下：\n\n```js\nvar strategys = {\n    isNotEmpty: function(value,errorMsg) {\n        if(value === '') {\n            return errorMsg;\n        }\n    },\n    // 限制最小长度\n    minLength: function(value,length,errorMsg) {\n        if(value.length < length) {\n            return errorMsg;\n        }\n    },\n    // 手机号码格式\n    mobileFormat: function(value,errorMsg) {\n        if(!/(^1[3|5|8][0-9]{9}$)/.test(value)) {\n            return errorMsg;\n        }\n    }\n};\nvar Validator = function(){\n    this.cache = [];  // 保存效验规则\n};\nValidator.prototype.add = function(dom,rule,errorMsg) {\n    var str = rule.split(\":\");\n    this.cache.push(function(){\n        // str 返回的是 minLength:6\n        var strategy = str.shift();\n        str.unshift(dom.value); // 把input的value添加进参数列表\n        str.push(errorMsg);  // 把errorMsg添加进参数列表\n        return strategys[strategy].apply(dom,str);\n    });\n};\nValidator.prototype.start = function(){\n    for(var i = 0, validatorFunc; validatorFunc = this.cache[i++]; ) {\n        var msg = validatorFunc(); // 开始效验 并取得效验后的返回信息\n        if(msg) {\n            return msg;\n        }\n    }\n};\n\nvar validateFunc = function(){\n    var validator = new Validator(); // 创建一个Validator对象\n    /* 添加一些效验规则 */\n    validator.add(registerForm.userName,'isNotEmpty','用户名不能为空');\n    validator.add(registerForm.password,'minLength:6','密码长度不能小于6位');\n    validator.add(registerForm.userName,'mobileFormat','手机号码格式不正确');\n\n    var errorMsg = validator.start(); // 获得效验结果\n    return errorMsg; // 返回效验结果\n};\nvar registerForm = document.getElementById(\"registerForm\");\nregisterForm.onsubmit = function(){\n    var errorMsg = validateFunc();\n    if(errorMsg){\n        alert(errorMsg);\n        return false;\n    }\n};\n```\n如上使用策略模式来编写表单验证代码可以看到好处了，我们通过add配置的方式就完成了一个表单的效验；这样的话，那么代码可以当做一个组件来使用，并且可以随时调用，在修改表单验证规则的时候，也非常方便，通过传递参数即可调用；\n\n给某个文本输入框添加多种效验规则，上面的代码我们可以看到，我们只是给输入框只能对应一种效验规则，比如上面的我们只能效验输入框是否为空，validator.add(registerForm.userName,'isNotEmpty','用户名不能为空');但是如果我们既要效验输入框是否为空，还要效验输入框的长度不要小于10位的话，那么我们期望需要像如下传递参数：\n```js\nvalidator.add(registerForm.userName,[{strategy:’isNotEmpty’,errorMsg:’用户名不能为空’}，{strategy: 'minLength:6',errorMsg:'用户名长度不能小于6位'}])\n```\n我们可以编写代码如下：\n\n```js\n// 策略对象\nvar strategys = {\n    isNotEmpty: function(value,errorMsg) {\n        if(value === '') {\n            return errorMsg;\n        }\n    },\n    // 限制最小长度\n    minLength: function(value,length,errorMsg) {\n        if(value.length < length) {\n            return errorMsg;\n        }\n    },\n    // 手机号码格式\n    mobileFormat: function(value,errorMsg) {\n        if(!/(^1[3|5|8][0-9]{9}$)/.test(value)) {\n            return errorMsg;\n        }\n    }\n};\nvar Validator = function(){\n    this.cache = [];  // 保存效验规则\n};\nValidator.prototype.add = function(dom,rules) {\n    var self = this;\n    for(var i = 0, rule; rule = rules[i++]; ){\n        (function(rule){\n            var strategyAry = rule.strategy.split(\":\");\n            var errorMsg = rule.errorMsg;\n            self.cache.push(function(){\n                var strategy = strategyAry.shift();\n                strategyAry.unshift(dom.value);\n                strategyAry.push(errorMsg);\n                return strategys[strategy].apply(dom,strategyAry);\n            });\n        })(rule);\n    }\n};\nValidator.prototype.start = function(){\n    for(var i = 0, validatorFunc; validatorFunc = this.cache[i++]; ) {\n    var msg = validatorFunc(); // 开始效验 并取得效验后的返回信息\n    if(msg) {\n        return msg;\n    }\n    }\n};\n// 代码调用\nvar registerForm = document.getElementById(\"registerForm\");\nvar validateFunc = function(){\n    var validator = new Validator(); // 创建一个Validator对象\n    /* 添加一些效验规则 */\n    validator.add(registerForm.userName,[\n        {strategy: 'isNotEmpty',errorMsg:'用户名不能为空'},\n        {strategy: 'minLength:6',errorMsg:'用户名长度不能小于6位'}\n    ]);\n    validator.add(registerForm.password,[\n        {strategy: 'minLength:6',errorMsg:'密码长度不能小于6位'},\n    ]);\n    validator.add(registerForm.phoneNumber,[\n        {strategy: 'mobileFormat',errorMsg:'手机号格式不正确'},\n    ]);\n    var errorMsg = validator.start(); // 获得效验结果\n    return errorMsg; // 返回效验结果\n};\n// 点击确定提交\nregisterForm.onsubmit = function(){\n    var errorMsg = validateFunc();\n    if(errorMsg){\n        alert(errorMsg);\n        return false;\n    }\n}\n```\n注意：如上代码都是按照书上来做的，都是看到书的代码，最主要我们理解策略模式实现，比如上面的表单验证功能是这样封装的代码，我们平时使用jquery插件表单验证代码原来是这样封装的，为此我们以后也可以使用这种方式来封装表单等学习；",
				"html": "<p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>\n<p>使用策略模式的优点如下：</p>\n<p>优点：</p>\n<ol>\n<li><p>策略模式利用组合，委托等技术和思想，有效的避免很多if条件语句。</p>\n</li>\n<li><p>策略模式提供了开放-封闭原则，使代码更容易理解和扩展。</p>\n</li>\n<li><p>策略模式中的代码可以复用。</p>\n<a id=\"more\"></a>\n<h1 id=\"理解javascript中的策略模式\"><a href=\"#理解javascript中的策略模式\" class=\"headerlink\" title=\"理解javascript中的策略模式\"></a>理解javascript中的策略模式</h1><h2 id=\"使用策略模式计算奖金\"><a href=\"#使用策略模式计算奖金\" class=\"headerlink\" title=\"使用策略模式计算奖金\"></a>使用策略模式计算奖金</h2></li>\n</ol>\n<p>下面的demo是我在书上看到的，但是没有关系，我们只是来理解下策略模式的使用而已，我们可以使用策略模式来计算奖金问题；</p>\n<p>比如公司的年终奖是根据员工的工资和绩效来考核的，绩效为A的人，年终奖为工资的4倍，绩效为B的人，年终奖为工资的3倍，绩效为C的人，年终奖为工资的2倍；现在我们使用一般的编码方式会如下这样编写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> calculateBouns = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary,level</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'A'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">4</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'B'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'C'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary * <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 调用如下：</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(calculateBouns(<span class=\"number\">4000</span>,<span class=\"string\">'A'</span>)); <span class=\"comment\">// 16000</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(calculateBouns(<span class=\"number\">2500</span>,<span class=\"string\">'B'</span>)); <span class=\"comment\">// 7500</span></div></pre></td></tr></table></figure>\n<p>第一个参数为薪资，第二个参数为等级；</p>\n<p>代码缺点如下：</p>\n<p>calculateBouns 函数包含了很多if-else语句。</p>\n<p>calculateBouns 函数缺乏弹性，假如还有D等级的话，那么我们需要在calculateBouns 函数内添加判断等级D的if语句；</p>\n<p>算法复用性差，如果在其他的地方也有类似这样的算法的话，但是规则不一样，我们这些代码不能通用。</p>\n<h2 id=\"使用组合函数重构代码\"><a href=\"#使用组合函数重构代码\" class=\"headerlink\" title=\"使用组合函数重构代码\"></a>使用组合函数重构代码</h2><p>组合函数是把各种算法封装到一个个的小函数里面，比如等级A的话，封装一个小函数，等级为B的话，也封装一个小函数，以此类推；如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> performanceA = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> salary * <span class=\"number\">4</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> performanceB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> salary * <span class=\"number\">3</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> performanceC = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> salary * <span class=\"number\">2</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> calculateBouns = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'A'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> performanceA(salary);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'B'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> performanceB(salary);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'C'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> performanceC(salary);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 调用如下</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(calculateBouns(<span class=\"string\">'A'</span>,<span class=\"number\">4500</span>)); <span class=\"comment\">// 18000</span></div></pre></td></tr></table></figure>\n<p>代码看起来有点改善，但是还是有如下缺点：</p>\n<p>calculateBouns 函数有可能会越来越大，比如增加D等级的时候，而且缺乏弹性。</p>\n<h2 id=\"使用策略模式重构代码\"><a href=\"#使用策略模式重构代码\" class=\"headerlink\" title=\"使用策略模式重构代码\"></a>使用策略模式重构代码</h2><p>策略模式指的是 定义一系列的算法，把它们一个个封装起来，将不变的部分和变化的部分隔开，实际就是将算法的使用和实现分离出来；算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数，而算法的实现是根据绩效对应不同的绩效规则；</p>\n<p>一个基于策略模式的程序至少由2部分组成，第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类。我们先使用传统面向对象来实现；</p>\n<p>如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> performanceA = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">performanceA.prototype.calculate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> salary * <span class=\"number\">4</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> performanceB = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">performanceB.prototype.calculate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> salary * <span class=\"number\">3</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> performanceC = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">performanceC.prototype.calculate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> salary * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 奖金类</span></div><div class=\"line\"><span class=\"keyword\">var</span> Bouns = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = <span class=\"literal\">null</span>;    <span class=\"comment\">// 原始工资</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.levelObj = <span class=\"literal\">null</span>;  <span class=\"comment\">// 绩效等级对应的策略对象</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Bouns.prototype.setSalary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;  <span class=\"comment\">// 保存员工的原始工资</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Bouns.prototype.setlevelObj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">levelObj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.levelObj = levelObj;  <span class=\"comment\">// 设置员工绩效等级对应的策略对象</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 取得奖金数</span></div><div class=\"line\">Bouns.prototype.getBouns = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 把计算奖金的操作委托给对应的策略对象</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.levelObj.calculate(<span class=\"keyword\">this</span>.salary);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> bouns = <span class=\"keyword\">new</span> Bouns();</div><div class=\"line\">bouns.setSalary(<span class=\"number\">10000</span>);</div><div class=\"line\">bouns.setlevelObj(<span class=\"keyword\">new</span> performanceA()); <span class=\"comment\">// 设置策略对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bouns.getBouns());  <span class=\"comment\">// 40000</span></div><div class=\"line\"></div><div class=\"line\">bouns.setlevelObj(<span class=\"keyword\">new</span> performanceB()); <span class=\"comment\">// 设置策略对象</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bouns.getBouns());  <span class=\"comment\">// 30000</span></div></pre></td></tr></table></figure>\n<p>如上代码使用策略模式重构代码，可以看到代码职责更新分明，代码变得更加清晰。</p>\n<h2 id=\"Javascript版本的策略模式\"><a href=\"#Javascript版本的策略模式\" class=\"headerlink\" title=\"Javascript版本的策略模式\"></a>Javascript版本的策略模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//代码如下：</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">        <span class=\"string\">\"A\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> salary * <span class=\"number\">4</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"B\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> salary * <span class=\"number\">3</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"C\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> salary * <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> calculateBouns =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,salary</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj[level](salary);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(calculateBouns(<span class=\"string\">'A'</span>,<span class=\"number\">10000</span>)); <span class=\"comment\">// 40000</span></div></pre></td></tr></table></figure>\n<p>可以看到代码更加简单明了；</p>\n<p>策略模式指的是定义一系列的算法，并且把它们封装起来，但是策略模式不仅仅只封装算法，我们还可以对用来封装一系列的业务规则，只要这些业务规则目标一致，我们就可以使用策略模式来封装它们；</p>\n<h1 id=\"表单效验\"><a href=\"#表单效验\" class=\"headerlink\" title=\"表单效验\"></a>表单效验</h1><p>比如我们经常来进行表单验证，比如注册登录对话框，我们登录之前要进行验证操作：比如有以下几条逻辑：</p>\n<p>用户名不能为空</p>\n<p>密码长度不能小于6位。</p>\n<p>手机号码必须符合格式。</p>\n<p>比如HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span> = <span class=\"string\">\"http://www.baidu.com\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"registerForm\"</span> <span class=\"attr\">method</span> = <span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>请输入用户名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userName\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>请输入密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>请输入手机号码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"phoneNumber\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们正常的编写表单验证代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> registerForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"registerForm\"</span>);</div><div class=\"line\">registerForm.onsubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(registerForm.userName.value === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        alert(<span class=\"string\">'用户名不能为空'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(registerForm.password.value.length &lt; <span class=\"number\">6</span>) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"密码的长度不能小于6位\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"regexp\">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(registerForm.phoneNumber.value)) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"手机号码格式不正确\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是这样编写代码有如下缺点：</p>\n<p>1.registerForm.onsubmit 函数比较大，代码中包含了很多if语句；</p>\n<p>2.registerForm.onsubmit 函数缺乏弹性，如果增加了一种新的效验规则，或者想把密码的长度效验从6改成8，我们必须改registerForm.onsubmit 函数内部的代码。违反了开放-封闭原则。</p>\n<ol>\n<li>算法的复用性差，如果在程序中增加了另外一个表单，这个表单也需要进行一些类似的效验，那么我们可能又需要复制代码了；</li>\n</ol>\n<p>下面我们可以使用策略模式来重构表单效验；</p>\n<p>第一步我们先来封装策略对象；如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> strategy = &#123;</div><div class=\"line\">    <span class=\"attr\">isNotEmpty</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 限制最小长度</span></div><div class=\"line\">    minLength: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,length,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value.length &lt; length) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 手机号码格式</span></div><div class=\"line\">    mobileFormat: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"regexp\">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>接下来我们准备实现Validator类，Validator类在这里作为Context，负责接收用户的请求并委托给strategy 对象，如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Validator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cache = [];  <span class=\"comment\">// 保存效验规则</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Validator.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,rule,errorMsg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> str = rule.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.cache.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// str 返回的是 minLength:6</span></div><div class=\"line\">        <span class=\"keyword\">var</span> strategy = str.shift();</div><div class=\"line\">        str.unshift(dom.value); <span class=\"comment\">// 把input的value添加进参数列表</span></div><div class=\"line\">        str.push(errorMsg);  <span class=\"comment\">// 把errorMsg添加进参数列表</span></div><div class=\"line\">        <span class=\"keyword\">return</span> strategys[strategy].apply(dom,str);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Validator.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, validatorFunc; validatorFunc = <span class=\"keyword\">this</span>.cache[i++]; ) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> msg = validatorFunc(); <span class=\"comment\">// 开始效验 并取得效验后的返回信息</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(msg) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> msg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Validator类在这里作为Context，负责接收用户的请求并委托给strategys对象。上面的代码中，我们先创建一个Validator对象，然后通过validator.add方法往validator对象中添加一些效验规则，validator.add方法接收3个参数，如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validator.add(registerForm.password,<span class=\"string\">'minLength:6'</span>,<span class=\"string\">'密码长度不能小于6位'</span>);</div></pre></td></tr></table></figure></p>\n<p>registerForm.password 为效验的input输入框dom节点；</p>\n<p>minLength:6： 是以一个冒号隔开的字符串，冒号前面的minLength代表客户挑选的strategys对象，冒号后面的数字6表示在效验过程中所必须验证的参数，minLength:6的意思是效验 registerForm.password 这个文本输入框的value最小长度为6位；如果字符串中不包含冒号，说明效验过程中不需要额外的效验信息；</p>\n<p>第三个参数是当效验未通过时返回的错误信息；</p>\n<p>当我们往validator对象里添加完一系列的效验规则之后，会调用validator.start()方法来启动效验。如果validator.start()返回了一个errorMsg字符串作为返回值，说明该次效验没有通过，此时需要registerForm.onsubmit方法返回false来阻止表单提交。下面我们来看看初始化代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validateFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> validator = <span class=\"keyword\">new</span> Validator(); <span class=\"comment\">// 创建一个Validator对象</span></div><div class=\"line\">    <span class=\"comment\">/* 添加一些效验规则 */</span></div><div class=\"line\">    validator.add(registerForm.userName,<span class=\"string\">'isNotEmpty'</span>,<span class=\"string\">'用户名不能为空'</span>);</div><div class=\"line\">    validator.add(registerForm.password,<span class=\"string\">'minLength:6'</span>,<span class=\"string\">'密码长度不能小于6位'</span>);</div><div class=\"line\">    validator.add(registerForm.userName,<span class=\"string\">'mobileFormat'</span>,<span class=\"string\">'手机号码格式不正确'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> errorMsg = validator.start(); <span class=\"comment\">// 获得效验结果</span></div><div class=\"line\">    <span class=\"keyword\">return</span> errorMsg; <span class=\"comment\">// 返回效验结果</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> registerForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"registerForm\"</span>);</div><div class=\"line\">registerForm.onsubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> errorMsg = validateFunc();</div><div class=\"line\">    <span class=\"keyword\">if</span>(errorMsg)&#123;</div><div class=\"line\">        alert(errorMsg);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是所有的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> strategys = &#123;</div><div class=\"line\">    <span class=\"attr\">isNotEmpty</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 限制最小长度</span></div><div class=\"line\">    minLength: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,length,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value.length &lt; length) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 手机号码格式</span></div><div class=\"line\">    mobileFormat: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"regexp\">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> Validator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cache = [];  <span class=\"comment\">// 保存效验规则</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Validator.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,rule,errorMsg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> str = rule.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.cache.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// str 返回的是 minLength:6</span></div><div class=\"line\">        <span class=\"keyword\">var</span> strategy = str.shift();</div><div class=\"line\">        str.unshift(dom.value); <span class=\"comment\">// 把input的value添加进参数列表</span></div><div class=\"line\">        str.push(errorMsg);  <span class=\"comment\">// 把errorMsg添加进参数列表</span></div><div class=\"line\">        <span class=\"keyword\">return</span> strategys[strategy].apply(dom,str);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Validator.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, validatorFunc; validatorFunc = <span class=\"keyword\">this</span>.cache[i++]; ) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> msg = validatorFunc(); <span class=\"comment\">// 开始效验 并取得效验后的返回信息</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(msg) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> msg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> validateFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> validator = <span class=\"keyword\">new</span> Validator(); <span class=\"comment\">// 创建一个Validator对象</span></div><div class=\"line\">    <span class=\"comment\">/* 添加一些效验规则 */</span></div><div class=\"line\">    validator.add(registerForm.userName,<span class=\"string\">'isNotEmpty'</span>,<span class=\"string\">'用户名不能为空'</span>);</div><div class=\"line\">    validator.add(registerForm.password,<span class=\"string\">'minLength:6'</span>,<span class=\"string\">'密码长度不能小于6位'</span>);</div><div class=\"line\">    validator.add(registerForm.userName,<span class=\"string\">'mobileFormat'</span>,<span class=\"string\">'手机号码格式不正确'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> errorMsg = validator.start(); <span class=\"comment\">// 获得效验结果</span></div><div class=\"line\">    <span class=\"keyword\">return</span> errorMsg; <span class=\"comment\">// 返回效验结果</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> registerForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"registerForm\"</span>);</div><div class=\"line\">registerForm.onsubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> errorMsg = validateFunc();</div><div class=\"line\">    <span class=\"keyword\">if</span>(errorMsg)&#123;</div><div class=\"line\">        alert(errorMsg);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如上使用策略模式来编写表单验证代码可以看到好处了，我们通过add配置的方式就完成了一个表单的效验；这样的话，那么代码可以当做一个组件来使用，并且可以随时调用，在修改表单验证规则的时候，也非常方便，通过传递参数即可调用；</p>\n<p>给某个文本输入框添加多种效验规则，上面的代码我们可以看到，我们只是给输入框只能对应一种效验规则，比如上面的我们只能效验输入框是否为空，validator.add(registerForm.userName,’isNotEmpty’,’用户名不能为空’);但是如果我们既要效验输入框是否为空，还要效验输入框的长度不要小于10位的话，那么我们期望需要像如下传递参数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validator.add(registerForm.userName,[&#123;<span class=\"attr\">strategy</span>:’isNotEmpty’,<span class=\"attr\">errorMsg</span>:’用户名不能为空’&#125;，&#123;<span class=\"attr\">strategy</span>: <span class=\"string\">'minLength:6'</span>,<span class=\"attr\">errorMsg</span>:<span class=\"string\">'用户名长度不能小于6位'</span>&#125;])</div></pre></td></tr></table></figure></p>\n<p>我们可以编写代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 策略对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> strategys = &#123;</div><div class=\"line\">    <span class=\"attr\">isNotEmpty</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 限制最小长度</span></div><div class=\"line\">    minLength: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,length,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value.length &lt; length) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 手机号码格式</span></div><div class=\"line\">    mobileFormat: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,errorMsg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"regexp\">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> errorMsg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> Validator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cache = [];  <span class=\"comment\">// 保存效验规则</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Validator.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom,rules</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, rule; rule = rules[i++]; )&#123;</div><div class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rule</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> strategyAry = rule.strategy.split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> errorMsg = rule.errorMsg;</div><div class=\"line\">            self.cache.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> strategy = strategyAry.shift();</div><div class=\"line\">                strategyAry.unshift(dom.value);</div><div class=\"line\">                strategyAry.push(errorMsg);</div><div class=\"line\">                <span class=\"keyword\">return</span> strategys[strategy].apply(dom,strategyAry);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;)(rule);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">Validator.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, validatorFunc; validatorFunc = <span class=\"keyword\">this</span>.cache[i++]; ) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> msg = validatorFunc(); <span class=\"comment\">// 开始效验 并取得效验后的返回信息</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(msg) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> msg;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 代码调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> registerForm = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"registerForm\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> validateFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> validator = <span class=\"keyword\">new</span> Validator(); <span class=\"comment\">// 创建一个Validator对象</span></div><div class=\"line\">    <span class=\"comment\">/* 添加一些效验规则 */</span></div><div class=\"line\">    validator.add(registerForm.userName,[</div><div class=\"line\">        &#123;<span class=\"attr\">strategy</span>: <span class=\"string\">'isNotEmpty'</span>,<span class=\"attr\">errorMsg</span>:<span class=\"string\">'用户名不能为空'</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"attr\">strategy</span>: <span class=\"string\">'minLength:6'</span>,<span class=\"attr\">errorMsg</span>:<span class=\"string\">'用户名长度不能小于6位'</span>&#125;</div><div class=\"line\">    ]);</div><div class=\"line\">    validator.add(registerForm.password,[</div><div class=\"line\">        &#123;<span class=\"attr\">strategy</span>: <span class=\"string\">'minLength:6'</span>,<span class=\"attr\">errorMsg</span>:<span class=\"string\">'密码长度不能小于6位'</span>&#125;,</div><div class=\"line\">    ]);</div><div class=\"line\">    validator.add(registerForm.phoneNumber,[</div><div class=\"line\">        &#123;<span class=\"attr\">strategy</span>: <span class=\"string\">'mobileFormat'</span>,<span class=\"attr\">errorMsg</span>:<span class=\"string\">'手机号格式不正确'</span>&#125;,</div><div class=\"line\">    ]);</div><div class=\"line\">    <span class=\"keyword\">var</span> errorMsg = validator.start(); <span class=\"comment\">// 获得效验结果</span></div><div class=\"line\">    <span class=\"keyword\">return</span> errorMsg; <span class=\"comment\">// 返回效验结果</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 点击确定提交</span></div><div class=\"line\">registerForm.onsubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> errorMsg = validateFunc();</div><div class=\"line\">    <span class=\"keyword\">if</span>(errorMsg)&#123;</div><div class=\"line\">        alert(errorMsg);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：如上代码都是按照书上来做的，都是看到书的代码，最主要我们理解策略模式实现，比如上面的表单验证功能是这样封装的代码，我们平时使用jquery插件表单验证代码原来是这样封装的，为此我们以后也可以使用这种方式来封装表单等学习；</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491545619313,
				"created_by": 2,
				"updated_at": 1491546322462,
				"updated_by": 2,
				"published_at": 1491545619313,
				"published_by": 2
			},
			{
				"id": "cj17g17ik000oakfc34lfk5gg",
				"title": "js设计模式-模板模式",
				"slug": "js-design-pattern-template",
				"markdown": "模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。\n<!--more-->\n比如说我们要实现一个JS功能，比如表单验证等js，那么如果我们没有使用上一章讲的使用javascript中的策略模式来解决表单验证封装代码，而是自己写的临时表单验证功能，肯定是没有进行任何封装的，那么这个时候我们是针对两个值是否相等给用户弹出一个提示，如果再另外一个页面也有一个表单验证，他们判断的方式及业务逻辑基本相同的，只是比较的参数不同而已，我们是不是又要考虑写一个表单验证代码呢？那么现在我们可以考虑使用模板方法模式来解决这个问题；公用的方法提取出来，不同的方法由具体的子类是实现。这样设计代码也可扩展性更强，代码更优等优点~\n\n我们不急着写代码，我们可以先来看一个列子，比如最近经常在qq群里面有很多前端招聘的信息，自己也接到很多公司或者猎头问我是否需要找工作等电话，当然我现在是没有打算找工作的，因为现在有更多的业余时间可以处理自己的事情，所以也觉得蛮不错的~ 我们先来看看招聘中面试这个流程；面试流程对于很多大型公司，比如BAT，面试过程其实很类似；因此我们可以总结面试过程中如下：\n\n1. 笔试：(不同的公司有不同的笔试题目)。\n\n2. 技术面试(一般情况下分为二轮)：第一轮面试你的有可能是你未来直接主管或者未来同事问你前端的一些专业方面的技能及以前做过的项目，在项目中遇到哪些问题及当时是如何解决问题的，还有根据你的简历上的基本信息来交流的，比如说你简历说精通JS，那么人家肯定得问哦~ 第二轮面试一般都是公司的牛人或者架构师来问的，比如问你计算机基本原理，或者问一些数据结构与算法等信息；第二轮面试可能会更深入的去了解你这个人的技术。\n\n3. HR和总监或者总经理面试；那么这一轮的话，HR可能会问下你一些个人基本信息等情况，及问下你今后有什么打算的个人规划什么的，总监或者总经理可能会问下你对他们的网站及产品有了解过没有？及现在他们的产品有什么问题，有没有更好的建议或者如何改善的地方等信息；\n\n4. 最后就是HR和你谈薪资及一般几个工作日可以得到通知，拿到offer(当然不符合的肯定是没有通知的哦)；及自己有没有需要了解公司的情况等等信息；\n\n一般的面试过程都是如上四点下来的，对于不同的公司都差不多的流程的，当然有些公司可能没有上面的详细流程的，我这边这边讲一般的情况下，好了，这边就不扯了，这边也不是讲如何面试的哦，这边只是通过这个列子让我们更加的理解javascript中模板方法模式；所以我们现在回到正题上来；\n\n我们先来分析下上面的流程；我们可以总结如下：\n\n首先我们看一下百度的面试；因此我们可以先定义一个构造函数。\n\nvar BaiDuInterview = function(){};\n\n那么下面就有百度面试的流程哦~\n\n1. 笔试\n\n那么我们可以封装一个笔试的方法，代码如下：\n```js\n// baidu 笔试\n\nBaiDuInterview.prototype.writtenTest = function(){\n\n    console.log(\"我终于看到百度的笔试题了~\");\n\n};\n```\n2. 技术面试：\n```js\n// 技术面试\n\nBaiDuInterview.prototype.technicalInterview = function(){\n\n    console.log(\"我是百度的技术负责人\");\n\n};\n```\n 3.  HR和总监或者总经理面试，我们可以称之为leader面试；代码如下：\n```js\n // 领导面试\n\nBaiDuInterview.prototype.leader = function(){\n\n    console.log(\"百度leader来面试了\");\n\n};\n```\n4. 和HR谈期望的薪资待遇及HR会告诉你什么时候会有通知，因此我们这边可以称之为这个方法为 是否拿到offer(当然不符合要求肯定是没有通知的哦)；\n```js\n// 等通知\n\nBaiDuInterview.prototype.waitNotice = function(){\n\n    console.log(\"百度的人力资源太不给力了，到现在都不给我通知\");\n\n};\n```\n如上看到代码的基本结构，但是我们还需要一个初始化方法；代码如下：\n```js\n// 代码初始化\n\nBaiDuInterview.prototype.init = function(){\n\n    this.writtenTest();\n\n    this.technicalInterview();\n\n    this.leader();\n\n    this.waitNotice();\n\n};\n\nvar baiDuInterview = new BaiDuInterview();\n\nbaiDuInterview.init();\n```\n综合所述：所有的代码如下：\n```js\nvar BaiDuInterview = function(){};\n\n\n\n// baidu 笔试\n\nBaiDuInterview.prototype.writtenTest = function(){\n\n    console.log(\"我终于看到百度的题目笔试题了~\");\n\n};\n\n// 技术面试\n\nBaiDuInterview.prototype.technicalInterview = function(){\n\n    console.log(\"我是百度的技术负责人\");\n\n};\n\n// 领导面试\n\nBaiDuInterview.prototype.leader = function(){\n\n    console.log(\"百度leader来面试了\");\n\n};\n\n// 等通知\n\nBaiDuInterview.prototype.waitNotice = function(){\n\n    console.log(\"百度的人力资源太不给力了，到现在都不给我通知\");\n\n};\n\n// 代码初始化\n\nBaiDuInterview.prototype.init = function(){\n\n    this.writtenTest();\n\n    this.technicalInterview();\n\n    this.leader();\n\n    this.waitNotice();\n\n};\n\nvar baiDuInterview = new BaiDuInterview();\n\nbaiDuInterview.init();\n```\n\n# 业务模型\n上面我们可以看到百度面试的基本流程如上面的代码，那么阿里和腾讯的也和上面的代码类似(这里就不一一贴一样的代码哦)，因此我们可以把公用代码提取出来；我们首先定义一个类，叫面试Interview\n\n那么代码改成如下：\n```js\nvar Interview = function(){};\n```\n1. 笔试：\n\n我不管你是百度的笔试还是阿里或者腾讯的笔试题，我这边统称为笔试(WrittenTest)，那么你们公司有不同的笔试题，都交给子类去具体实现，父类方法不管具体如何实现，笔试题具体是什么样的 我都不管。代码变为如下：\n```js\n// 笔试\n\nInterview.prototype.writtenTest = function(){\n\n    console.log(\"我终于看到笔试题了~\");\n\n};\n```\n2. 技术面试，技术面试原理也一样，这里就不多说，直接贴代码：\n```js\n// 技术面试\n\nInterview.prototype.technicalInterview = function(){\n\n    console.log(\"我是技术负责人负责技术面试\");\n\n};\n```\n3. 领导面试\n```js\n// 领导面试\n\nInterview.prototype.leader = function(){\n\n    console.log(\"leader来面试了\");\n\n};\n```\n4. 等通知\n```js\n// 等通知\n\nInterview.prototype.waitNotice = function(){\n\n    console.log(\"人力资源太不给力了，到现在都不给我通知\");\n\n};\n```\n代码初始化方法如下：\n```js\n// 代码初始化\n\nInterview.prototype.init = function(){\n\n    this.writtenTest();\n\n    this.technicalInterview();\n\n    this.leader();\n\n    this.waitNotice();\n\n};\n```\n# 创建子类\n\n现在我们来创建一个百度的子类来继承上面的父类；代码如下：\n```js\nvar BaiDuInterview = function(){};\n\nBaiDuInterview.prototype = new Interview();\n```\n现在我们可以在子类BaiDuInterview 重写父类Interview中的方法；代码如下：\n```js\n// 子类重写方法 实现自己的业务逻辑\n\nBaiDuInterview.prototype.writtenTest = function(){\n\n    console.log(\"我终于看到百度的笔试题了\");\n\n}\n\nBaiDuInterview.prototype.technicalInterview = function(){\n\n    console.log(\"我是百度的技术负责人，想面试找我\");\n\n}\n\nBaiDuInterview.prototype.leader = function(){\n\n    console.log(\"我是百度的leader，不想加班的或者业绩提不上去的给我滚蛋\");\n\n}\n\nBaiDuInterview.prototype.waitNotice = function(){\n\n    console.log(\"百度的人力资源太不给力了，我等的花儿都谢了！！\");\n\n}\n\nvar baiDuInterview = new BaiDuInterview();\n\nbaiDuInterview.init();\n```\n如上看到，我们直接调用子类baiDuInterview.init()方法，由于我们子类baiDuInterview没有init方法，但是它继承了父类，所以会到父类中查找对应的init方法；所以会迎着原型链到父类中查找；对于其他子类，比如阿里类代码也是一样的，这里就不多介绍了，对于父类这个方法 Interview.prototype.init() 是模板方法，因为他封装了子类中算法框架，它作为一个算法的模板，指导子类以什么样的顺序去执行代码。\n\n# Javascript中的模板模式使用场景\n\n虽然在java中也有子类实现父类的接口，但是我认为javascript中可以和java中不同的，java中可能父类就是一个空的类，子类去实现这个父类的接口，在javascript中我认为完全把公用的代码写在父函数内，如果将来业务逻辑需要更改的话，或者说添加新的业务逻辑，我们完全可以使用子类去重写这个父类，这样的话代码可扩展性强，更容易维护。由于本人不是专业java的，所以描述java中的知识点有误的话，请理解~~",
				"html": "<p>模板方法模式由二部分组成，第一部分是抽象父类，第二部分是具体实现的子类，一般的情况下是抽象父类封装了子类的算法框架，包括实现一些公共方法及封装子类中所有方法的执行顺序，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑。<br><a id=\"more\"></a><br>比如说我们要实现一个JS功能，比如表单验证等js，那么如果我们没有使用上一章讲的使用javascript中的策略模式来解决表单验证封装代码，而是自己写的临时表单验证功能，肯定是没有进行任何封装的，那么这个时候我们是针对两个值是否相等给用户弹出一个提示，如果再另外一个页面也有一个表单验证，他们判断的方式及业务逻辑基本相同的，只是比较的参数不同而已，我们是不是又要考虑写一个表单验证代码呢？那么现在我们可以考虑使用模板方法模式来解决这个问题；公用的方法提取出来，不同的方法由具体的子类是实现。这样设计代码也可扩展性更强，代码更优等优点~</p>\n<p>我们不急着写代码，我们可以先来看一个列子，比如最近经常在qq群里面有很多前端招聘的信息，自己也接到很多公司或者猎头问我是否需要找工作等电话，当然我现在是没有打算找工作的，因为现在有更多的业余时间可以处理自己的事情，所以也觉得蛮不错的~ 我们先来看看招聘中面试这个流程；面试流程对于很多大型公司，比如BAT，面试过程其实很类似；因此我们可以总结面试过程中如下：</p>\n<ol>\n<li><p>笔试：(不同的公司有不同的笔试题目)。</p>\n</li>\n<li><p>技术面试(一般情况下分为二轮)：第一轮面试你的有可能是你未来直接主管或者未来同事问你前端的一些专业方面的技能及以前做过的项目，在项目中遇到哪些问题及当时是如何解决问题的，还有根据你的简历上的基本信息来交流的，比如说你简历说精通JS，那么人家肯定得问哦~ 第二轮面试一般都是公司的牛人或者架构师来问的，比如问你计算机基本原理，或者问一些数据结构与算法等信息；第二轮面试可能会更深入的去了解你这个人的技术。</p>\n</li>\n<li><p>HR和总监或者总经理面试；那么这一轮的话，HR可能会问下你一些个人基本信息等情况，及问下你今后有什么打算的个人规划什么的，总监或者总经理可能会问下你对他们的网站及产品有了解过没有？及现在他们的产品有什么问题，有没有更好的建议或者如何改善的地方等信息；</p>\n</li>\n<li><p>最后就是HR和你谈薪资及一般几个工作日可以得到通知，拿到offer(当然不符合的肯定是没有通知的哦)；及自己有没有需要了解公司的情况等等信息；</p>\n</li>\n</ol>\n<p>一般的面试过程都是如上四点下来的，对于不同的公司都差不多的流程的，当然有些公司可能没有上面的详细流程的，我这边这边讲一般的情况下，好了，这边就不扯了，这边也不是讲如何面试的哦，这边只是通过这个列子让我们更加的理解javascript中模板方法模式；所以我们现在回到正题上来；</p>\n<p>我们先来分析下上面的流程；我们可以总结如下：</p>\n<p>首先我们看一下百度的面试；因此我们可以先定义一个构造函数。</p>\n<p>var BaiDuInterview = function(){};</p>\n<p>那么下面就有百度面试的流程哦~</p>\n<ol>\n<li>笔试</li>\n</ol>\n<p>那么我们可以封装一个笔试的方法，代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// baidu 笔试</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.writtenTest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我终于看到百度的笔试题了~\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>技术面试：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 技术面试</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.technicalInterview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是百度的技术负责人\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>HR和总监或者总经理面试，我们可以称之为leader面试；代码如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// 领导面试</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.leader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"百度leader来面试了\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>和HR谈期望的薪资待遇及HR会告诉你什么时候会有通知，因此我们这边可以称之为这个方法为 是否拿到offer(当然不符合要求肯定是没有通知的哦)；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 等通知</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.waitNotice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"百度的人力资源太不给力了，到现在都不给我通知\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如上看到代码的基本结构，但是我们还需要一个初始化方法；代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 代码初始化</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.writtenTest();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.technicalInterview();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.leader();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.waitNotice();</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baiDuInterview = <span class=\"keyword\">new</span> BaiDuInterview();</div><div class=\"line\"></div><div class=\"line\">baiDuInterview.init();</div></pre></td></tr></table></figure></p>\n<p>综合所述：所有的代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> BaiDuInterview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// baidu 笔试</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.writtenTest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我终于看到百度的题目笔试题了~\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 技术面试</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.technicalInterview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是百度的技术负责人\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 领导面试</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.leader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"百度leader来面试了\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等通知</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.waitNotice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"百度的人力资源太不给力了，到现在都不给我通知\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 代码初始化</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.writtenTest();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.technicalInterview();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.leader();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.waitNotice();</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baiDuInterview = <span class=\"keyword\">new</span> BaiDuInterview();</div><div class=\"line\"></div><div class=\"line\">baiDuInterview.init();</div></pre></td></tr></table></figure></p>\n<h1 id=\"业务模型\"><a href=\"#业务模型\" class=\"headerlink\" title=\"业务模型\"></a>业务模型</h1><p>上面我们可以看到百度面试的基本流程如上面的代码，那么阿里和腾讯的也和上面的代码类似(这里就不一一贴一样的代码哦)，因此我们可以把公用代码提取出来；我们首先定义一个类，叫面试Interview</p>\n<p>那么代码改成如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Interview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>笔试：</li>\n</ol>\n<p>我不管你是百度的笔试还是阿里或者腾讯的笔试题，我这边统称为笔试(WrittenTest)，那么你们公司有不同的笔试题，都交给子类去具体实现，父类方法不管具体如何实现，笔试题具体是什么样的 我都不管。代码变为如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 笔试</span></div><div class=\"line\"></div><div class=\"line\">Interview.prototype.writtenTest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我终于看到笔试题了~\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>技术面试，技术面试原理也一样，这里就不多说，直接贴代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 技术面试</span></div><div class=\"line\"></div><div class=\"line\">Interview.prototype.technicalInterview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是技术负责人负责技术面试\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>领导面试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 领导面试</span></div><div class=\"line\"></div><div class=\"line\">Interview.prototype.leader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"leader来面试了\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>等通知</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 等通知</span></div><div class=\"line\"></div><div class=\"line\">Interview.prototype.waitNotice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"人力资源太不给力了，到现在都不给我通知\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>代码初始化方法如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 代码初始化</span></div><div class=\"line\"></div><div class=\"line\">Interview.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.writtenTest();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.technicalInterview();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.leader();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.waitNotice();</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"创建子类\"><a href=\"#创建子类\" class=\"headerlink\" title=\"创建子类\"></a>创建子类</h1><p>现在我们来创建一个百度的子类来继承上面的父类；代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> BaiDuInterview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype = <span class=\"keyword\">new</span> Interview();</div></pre></td></tr></table></figure></p>\n<p>现在我们可以在子类BaiDuInterview 重写父类Interview中的方法；代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 子类重写方法 实现自己的业务逻辑</span></div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.writtenTest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我终于看到百度的笔试题了\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.technicalInterview = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是百度的技术负责人，想面试找我\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.leader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是百度的leader，不想加班的或者业绩提不上去的给我滚蛋\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BaiDuInterview.prototype.waitNotice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"百度的人力资源太不给力了，我等的花儿都谢了！！\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> baiDuInterview = <span class=\"keyword\">new</span> BaiDuInterview();</div><div class=\"line\"></div><div class=\"line\">baiDuInterview.init();</div></pre></td></tr></table></figure></p>\n<p>如上看到，我们直接调用子类baiDuInterview.init()方法，由于我们子类baiDuInterview没有init方法，但是它继承了父类，所以会到父类中查找对应的init方法；所以会迎着原型链到父类中查找；对于其他子类，比如阿里类代码也是一样的，这里就不多介绍了，对于父类这个方法 Interview.prototype.init() 是模板方法，因为他封装了子类中算法框架，它作为一个算法的模板，指导子类以什么样的顺序去执行代码。</p>\n<h1 id=\"Javascript中的模板模式使用场景\"><a href=\"#Javascript中的模板模式使用场景\" class=\"headerlink\" title=\"Javascript中的模板模式使用场景\"></a>Javascript中的模板模式使用场景</h1><p>虽然在java中也有子类实现父类的接口，但是我认为javascript中可以和java中不同的，java中可能父类就是一个空的类，子类去实现这个父类的接口，在javascript中我认为完全把公用的代码写在父函数内，如果将来业务逻辑需要更改的话，或者说添加新的业务逻辑，我们完全可以使用子类去重写这个父类，这样的话代码可扩展性强，更容易维护。由于本人不是专业java的，所以描述java中的知识点有误的话，请理解~~</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491545342564,
				"created_by": 2,
				"updated_at": 1491545343724,
				"updated_by": 2,
				"published_at": 1491545342564,
				"published_by": 2
			},
			{
				"id": "cj17g17hh0004akfcu21ckavb",
				"title": "js设计模式-命令模式",
				"slug": "js-design-pattern-command",
				"markdown": " 命令模式中的命令指的是一个执行某些特定事情的指令。\n\n   命令模式使用的场景有：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道请求的操作是什么，此时希望用一种松耦合的方式来设计程序代码;使得请求发送者和请求接受者消除彼此代码中的耦合关系。\n<!--more-->\n我们先来列举生活中的一个列子来说明下命令模式：比如我们经常会在天猫上购买东西，然后下订单，下单后我就想收到货，并且希望货物是真的，对于用户来讲它并关心下单后卖家怎么发货，当然卖家发货也有时间的，比如24小时内发货等，用户更不关心快递是给谁派送，当然有的人会关心是什么快递送货的; 对于用户来说，只要在规定的时间内发货，且一般能在相当的时间内收到货就可以，当然命令模式也有撤销命令和重做命令，比如我们下单后，我突然不想买了，我在发货之前可以取消订单，也可以重新下单（也就是重做命令）;比如我的衣服尺码拍错了，我取消该订单，重新拍一个大码的。\n\n# 命令模式的列子\n\n   记得我以前刚做前端的那会儿，也就是刚毕业进的第一家公司，进的是做外包项目的公司，该公司一般外包淘宝活动页面及腾讯的游戏页面，我们那会儿应该叫切页面的前端，负责做一些html和css的工作，所以那会儿做腾讯的游戏页面，经常会帮他们做静态页面，比如在页面放几个按钮，我们只是按照设计稿帮腾讯游戏哪方面的把样式弄好，比如说页面上的按钮等事情，比如说具体说明的按钮要怎么操作，点击按钮后会发生什么事情，我们并不知道，我们不知道他们的业务是什么，当然我们知道的肯定会有点击事件，具体要处理什么业务我们并不知道，这里我们就可以使用命令模式来处理了：点击按钮之后，必须向某些负责具体行为的对象发送请求，这些对象就是请求的接收者。但是目前我们并不知道接收者是什么对象，也不知道接受者究竟会做什么事情，这时候我们可以使用命令模式来消除发送者与接收者的代码耦合关系。\n\n我们先使用传统的面向对象模式来设计代码：\n\n假设html结构如下：\n```html\n<button id=\"button1\">刷新菜单目录</button>\n<button id=\"button2\">增加子菜单</button>\n<button id=\"button3\">删除子菜单</button>\n```\nJS代码如下：\n\n```js\nvar b1 = document.getElementById(\"button1\"),\n     b2 = document.getElementById(\"button2\"),\n     b3 = document.getElementById(\"button3\");\n```\n // 定义setCommand 函数，该函数负责往按钮上面安装命令。点击按钮后会执行command对象的execute()方法。\n```js\n var setCommand = function(button,command){\n    button.onclick = function(){\n        command.execute();\n    }\n };\n // 下面我们自己来定义各个对象来完成自己的业务操作\n var MenuBar = {\n    refersh: function(){\n        alert(\"刷新菜单目录\");\n    }\n };\n var SubMenu = {\n    add: function(){\n        alert(\"增加子菜单\");\n    },\n    del: function(){\n        alert(\"删除子菜单\");\n    }\n };\n // 下面是编写命令类\n var RefreshMenuBarCommand = function(receiver){\n    this.receiver = receiver;\n };\n RefreshMenuBarCommand.prototype.execute = function(){\n    this.receiver.refersh();\n }\n // 增加命令操作\n var AddSubMenuCommand = function(receiver) {\n    this.receiver = receiver;\n };\n AddSubMenuCommand.prototype.execute = function() {\n    this.receiver.add();\n }\n // 删除命令操作\n var DelSubMenuCommand = function(receiver) {\n    this.receiver = receiver;\n };\n DelSubMenuCommand.prototype.execute = function(){\n    this.receiver.del();\n }\n // 最后把命令接收者传入到command对象中，并且把command对象安装到button上面\n var refershBtn = new RefreshMenuBarCommand(MenuBar);\n var addBtn = new AddSubMenuCommand(SubMenu);\n var delBtn = new DelSubMenuCommand(SubMenu);\n\n setCommand(b1,refershBtn);\n setCommand(b2,addBtn);\n setCommand(b3,delBtn);\n```\n从上面的命令类代码我们可以看到，任何一个操作都有一个execute这个方法来执行操作;上面的代码是使用传统的面向对象编程来实现命令模式的，命令模式过程式的请求调用封装在command对象的execute方法里。我们有没有发现上面的编写代码有点繁琐呢，我们可以使用javascript中的回调函数来做这些事情的，在面向对象中，命令模式的接收者被当成command对象的属性保存起来，同时约定执行命令的操作调用command.execute方法，但是如果我们使用回调函数的话，那么接收者被封闭在回调函数产生的环境中，执行操作将会更加简单，仅仅执行回调函数即可，下面我们来看看代码如下：\n\n代码如下：\n\n```js\nvar setCommand = function(button,func) {\n    button.onclick = function(){\n        func();\n    }\n };\n var MenuBar = {\n    refersh: function(){\n        alert(\"刷新菜单界面\");\n    }\n };\n var SubMenu = {\n    add: function(){\n        alert(\"增加菜单\");\n    }\n };\n // 刷新菜单\n var RefreshMenuBarCommand = function(receiver) {\n    return function(){\n        receiver.refersh();\n    };\n };\n // 增加菜单\n var AddSubMenuCommand = function(receiver) {\n    return function(){\n        receiver.add();\n    };\n };\n var refershMenuBarCommand = RefreshMenuBarCommand(MenuBar);\n // 增加菜单\n var addSubMenuCommand = AddSubMenuCommand(SubMenu);\n setCommand(b1,refershMenuBarCommand);\n\n setCommand(b2,addSubMenuCommand);\n```\n我们还可以如下使用javascript回调函数如下编码：\n\n复制代码\n```js\n// 如下代码上的四个按钮 点击事件\nvar b1 = document.getElementById(\"button1\"),\n    b2 = document.getElementById(\"button2\"),\n    b3 = document.getElementById(\"button3\"),\n    b4 = document.getElementById(\"button4\");\n/*\n bindEnv函数负责往按钮上面安装点击命令。点击按钮后，会调用\n 函数\n */\nvar bindEnv = function(button,func) {\n    button.onclick = function(){\n        func();\n    }\n};\n// 现在我们来编写具体处理业务逻辑代码\nvar Todo1 = {\n    test1: function(){\n        alert(\"我是来做第一个测试的\");\n    }\n};\n// 实现业务中的增删改操作\nvar Menu = {\n    add: function(){\n        alert(\"我是来处理一些增加操作的\");\n    },\n    del: function(){\n        alert(\"我是来处理一些删除操作的\");\n    },\n    update: function(){\n        alert(\"我是来处理一些更新操作的\");\n    }\n};\n// 调用函数\nbindEnv(b1,Todo1.test1);\n// 增加按钮\nbindEnv(b2,Menu.add);\n// 删除按钮\nbindEnv(b3,Menu.del);\n// 更改按钮\nbindEnv(b4,Menu.update);\n```\n# 理解宏命令：\n\n   宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。\n\n其实类似把页面的所有函数方法放在一个数组里面去，然后遍历这个数组，依次\n\n执行该方法的。\n\n代码如下：\n\n```js\nvar command1 = {\n    execute: function(){\n        console.log(1);\n    }\n};\nvar command2 = {\n    execute: function(){\n        console.log(2);\n    }\n};\nvar command3 = {\n    execute: function(){\n        console.log(3);\n    }\n};\n// 定义宏命令，command.add方法把子命令添加进宏命令对象，\n// 当调用宏命令对象的execute方法时，会迭代这一组命令对象，\n// 并且依次执行他们的execute方法。\nvar command = function(){\n    return {\n        commandsList: [],\n        add: function(command){\n            this.commandsList.push(command);\n        },\n        execute: function(){\n            for(var i = 0,commands = this.commandsList.length; i < commands; i+=1) {\n                this.commandsList[i].execute();\n            }\n        }\n    }\n};\n// 初始化宏命令\nvar c = command();\nc.add(command1);\nc.add(command2);\nc.add(command3);\nc.execute();  // 1,2,3\n```",
				"html": "<p> 命令模式中的命令指的是一个执行某些特定事情的指令。</p>\n<p>   命令模式使用的场景有：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道请求的操作是什么，此时希望用一种松耦合的方式来设计程序代码;使得请求发送者和请求接受者消除彼此代码中的耦合关系。<br><a id=\"more\"></a><br>我们先来列举生活中的一个列子来说明下命令模式：比如我们经常会在天猫上购买东西，然后下订单，下单后我就想收到货，并且希望货物是真的，对于用户来讲它并关心下单后卖家怎么发货，当然卖家发货也有时间的，比如24小时内发货等，用户更不关心快递是给谁派送，当然有的人会关心是什么快递送货的; 对于用户来说，只要在规定的时间内发货，且一般能在相当的时间内收到货就可以，当然命令模式也有撤销命令和重做命令，比如我们下单后，我突然不想买了，我在发货之前可以取消订单，也可以重新下单（也就是重做命令）;比如我的衣服尺码拍错了，我取消该订单，重新拍一个大码的。</p>\n<h1 id=\"命令模式的列子\"><a href=\"#命令模式的列子\" class=\"headerlink\" title=\"命令模式的列子\"></a>命令模式的列子</h1><p>   记得我以前刚做前端的那会儿，也就是刚毕业进的第一家公司，进的是做外包项目的公司，该公司一般外包淘宝活动页面及腾讯的游戏页面，我们那会儿应该叫切页面的前端，负责做一些html和css的工作，所以那会儿做腾讯的游戏页面，经常会帮他们做静态页面，比如在页面放几个按钮，我们只是按照设计稿帮腾讯游戏哪方面的把样式弄好，比如说页面上的按钮等事情，比如说具体说明的按钮要怎么操作，点击按钮后会发生什么事情，我们并不知道，我们不知道他们的业务是什么，当然我们知道的肯定会有点击事件，具体要处理什么业务我们并不知道，这里我们就可以使用命令模式来处理了：点击按钮之后，必须向某些负责具体行为的对象发送请求，这些对象就是请求的接收者。但是目前我们并不知道接收者是什么对象，也不知道接受者究竟会做什么事情，这时候我们可以使用命令模式来消除发送者与接收者的代码耦合关系。</p>\n<p>我们先使用传统的面向对象模式来设计代码：</p>\n<p>假设html结构如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button1\"</span>&gt;</span>刷新菜单目录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button2\"</span>&gt;</span>增加子菜单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button3\"</span>&gt;</span>删除子菜单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>JS代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button1\"</span>),</div><div class=\"line\">     b2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button2\"</span>),</div><div class=\"line\">     b3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button3\"</span>);</div></pre></td></tr></table></figure>\n<p> // 定义setCommand 函数，该函数负责往按钮上面安装命令。点击按钮后会执行command对象的execute()方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> setCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">button,command</span>)</span>&#123;</div><div class=\"line\">   button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       command.execute();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 下面我们自己来定义各个对象来完成自己的业务操作</span></div><div class=\"line\"><span class=\"keyword\">var</span> MenuBar = &#123;</div><div class=\"line\">   <span class=\"attr\">refersh</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       alert(<span class=\"string\">\"刷新菜单目录\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> SubMenu = &#123;</div><div class=\"line\">   <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       alert(<span class=\"string\">\"增加子菜单\"</span>);</div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">del</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       alert(<span class=\"string\">\"删除子菜单\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 下面是编写命令类</span></div><div class=\"line\"><span class=\"keyword\">var</span> RefreshMenuBarCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">receiver</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">&#125;;</div><div class=\"line\">RefreshMenuBarCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.receiver.refersh();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 增加命令操作</span></div><div class=\"line\"><span class=\"keyword\">var</span> AddSubMenuCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">receiver</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">&#125;;</div><div class=\"line\">AddSubMenuCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.receiver.add();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 删除命令操作</span></div><div class=\"line\"><span class=\"keyword\">var</span> DelSubMenuCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">receiver</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">&#125;;</div><div class=\"line\">DelSubMenuCommand.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.receiver.del();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 最后把命令接收者传入到command对象中，并且把command对象安装到button上面</span></div><div class=\"line\"><span class=\"keyword\">var</span> refershBtn = <span class=\"keyword\">new</span> RefreshMenuBarCommand(MenuBar);</div><div class=\"line\"><span class=\"keyword\">var</span> addBtn = <span class=\"keyword\">new</span> AddSubMenuCommand(SubMenu);</div><div class=\"line\"><span class=\"keyword\">var</span> delBtn = <span class=\"keyword\">new</span> DelSubMenuCommand(SubMenu);</div><div class=\"line\"></div><div class=\"line\">setCommand(b1,refershBtn);</div><div class=\"line\">setCommand(b2,addBtn);</div><div class=\"line\">setCommand(b3,delBtn);</div></pre></td></tr></table></figure></p>\n<p>从上面的命令类代码我们可以看到，任何一个操作都有一个execute这个方法来执行操作;上面的代码是使用传统的面向对象编程来实现命令模式的，命令模式过程式的请求调用封装在command对象的execute方法里。我们有没有发现上面的编写代码有点繁琐呢，我们可以使用javascript中的回调函数来做这些事情的，在面向对象中，命令模式的接收者被当成command对象的属性保存起来，同时约定执行命令的操作调用command.execute方法，但是如果我们使用回调函数的话，那么接收者被封闭在回调函数产生的环境中，执行操作将会更加简单，仅仅执行回调函数即可，下面我们来看看代码如下：</p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> setCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">button,func</span>) </span>&#123;</div><div class=\"line\">    button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        func();</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"keyword\">var</span> MenuBar = &#123;</div><div class=\"line\">    <span class=\"attr\">refersh</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"刷新菜单界面\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"keyword\">var</span> SubMenu = &#123;</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"增加菜单\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"comment\">// 刷新菜单</span></div><div class=\"line\"> <span class=\"keyword\">var</span> RefreshMenuBarCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">receiver</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        receiver.refersh();</div><div class=\"line\">    &#125;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"comment\">// 增加菜单</span></div><div class=\"line\"> <span class=\"keyword\">var</span> AddSubMenuCommand = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">receiver</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        receiver.add();</div><div class=\"line\">    &#125;;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"keyword\">var</span> refershMenuBarCommand = RefreshMenuBarCommand(MenuBar);</div><div class=\"line\"> <span class=\"comment\">// 增加菜单</span></div><div class=\"line\"> <span class=\"keyword\">var</span> addSubMenuCommand = AddSubMenuCommand(SubMenu);</div><div class=\"line\"> setCommand(b1,refershMenuBarCommand);</div><div class=\"line\"></div><div class=\"line\"> setCommand(b2,addSubMenuCommand);</div></pre></td></tr></table></figure>\n<p>我们还可以如下使用javascript回调函数如下编码：</p>\n<p>复制代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如下代码上的四个按钮 点击事件</span></div><div class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button1\"</span>),</div><div class=\"line\">    b2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button2\"</span>),</div><div class=\"line\">    b3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button3\"</span>),</div><div class=\"line\">    b4 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button4\"</span>);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> bindEnv函数负责往按钮上面安装点击命令。点击按钮后，会调用</div><div class=\"line\"> 函数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> bindEnv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">button,func</span>) </span>&#123;</div><div class=\"line\">    button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        func();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 现在我们来编写具体处理业务逻辑代码</span></div><div class=\"line\"><span class=\"keyword\">var</span> Todo1 = &#123;</div><div class=\"line\">    <span class=\"attr\">test1</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"我是来做第一个测试的\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 实现业务中的增删改操作</span></div><div class=\"line\"><span class=\"keyword\">var</span> Menu = &#123;</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"我是来处理一些增加操作的\"</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">del</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"我是来处理一些删除操作的\"</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"我是来处理一些更新操作的\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 调用函数</span></div><div class=\"line\">bindEnv(b1,Todo1.test1);</div><div class=\"line\"><span class=\"comment\">// 增加按钮</span></div><div class=\"line\">bindEnv(b2,Menu.add);</div><div class=\"line\"><span class=\"comment\">// 删除按钮</span></div><div class=\"line\">bindEnv(b3,Menu.del);</div><div class=\"line\"><span class=\"comment\">// 更改按钮</span></div><div class=\"line\">bindEnv(b4,Menu.update);</div></pre></td></tr></table></figure></p>\n<h1 id=\"理解宏命令：\"><a href=\"#理解宏命令：\" class=\"headerlink\" title=\"理解宏命令：\"></a>理解宏命令：</h1><p>   宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。</p>\n<p>其实类似把页面的所有函数方法放在一个数组里面去，然后遍历这个数组，依次</p>\n<p>执行该方法的。</p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> command1 = &#123;</div><div class=\"line\">    <span class=\"attr\">execute</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> command2 = &#123;</div><div class=\"line\">    <span class=\"attr\">execute</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> command3 = &#123;</div><div class=\"line\">    <span class=\"attr\">execute</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 定义宏命令，command.add方法把子命令添加进宏命令对象，</span></div><div class=\"line\"><span class=\"comment\">// 当调用宏命令对象的execute方法时，会迭代这一组命令对象，</span></div><div class=\"line\"><span class=\"comment\">// 并且依次执行他们的execute方法。</span></div><div class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">commandsList</span>: [],</div><div class=\"line\">        <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">command</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commandsList.push(command);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">execute</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,commands = <span class=\"keyword\">this</span>.commandsList.length; i &lt; commands; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.commandsList[i].execute();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 初始化宏命令</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = command();</div><div class=\"line\">c.add(command1);</div><div class=\"line\">c.add(command2);</div><div class=\"line\">c.add(command3);</div><div class=\"line\">c.execute();  <span class=\"comment\">// 1,2,3</span></div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491545123667,
				"created_by": 2,
				"updated_at": 1491545125250,
				"updated_by": 2,
				"published_at": 1491545123667,
				"published_by": 2
			},
			{
				"id": "cj17g17g20001akfcs1e0nvfz",
				"title": "js设计模式-职责连模式",
				"slug": "js-design-pattern-chain",
				"markdown": "优点是：消除请求的发送者与接收者之间的耦合。\n\n    职责连是由多个不同的对象组成的，发送者是发送请求的对象，而接收者则是链中那些接收这种请求并且对其进行处理或传递的对象。请求本身有时候也可以是一个对象，它封装了和操作有关的所有数据，基本实现流程如下：\n\n1. 发送者知道链中的第一个接收者，它向这个接收者发送该请求。\n\n2. 每一个接收者都对请求进行分析，然后要么处理它，要么它往下传递。\n\n3. 每一个接收者知道其他的对象只有一个，即它在链中的下家(successor)。\n\n4. 如果没有任何接收者处理请求，那么请求会从链中离开。\n\n<!--more-->\n\n   我们可以理解职责链模式是处理请求组成的一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象称为链中的节点。比如对象A给对象B发请求，如果B对象不处理，它就会把请求交给C，如果C对象不处理的话，它就会把请求交给D，依次类推，直到有一个对象能处理该请求为止，当然没有任何对象处理该请求的话，那么请求就会从链中离开。\n\n   比如常见的一些外包公司接到一个项目，那么接到项目有可能是公司的负责项目的人或者经理级别的人，经理接到项目后自己不开发，直接把它交到项目经理来开发，项目经理自己肯定不乐意自己动手开发哦，它就把项目交给下面的码农来做，所以码农来处理它，如果码农也不处理的话，那么这个项目可能会直接挂掉了，但是最后完成后，外包公司它并不知道这些项目中的那一部分具体有哪些人开发的，它并不知道，也并不关心的，它关心的是这个项目已交给外包公司已经开发完成了且没有任何bug就可以了；所以职责链模式的优点就在这里：\n\n消除请求的发送者(需要外包项目的公司)与接收者(外包公司)之间的耦合。\n\n下面列举个列子来说明职责链的好处：\n\n天猫每年双11都会做抽奖活动的，比如阿里巴巴想提高大家使用支付宝来支付的话，每一位用户充值500元到支付宝的话，那么可以100%中奖100元红包，\n\n充值200元到支付宝的话，那么可以100%中奖20元的红包，当然如果不充值的话，也可以抽奖，但是概率非常低，基本上是抽不到的，当然也有可能抽到的。\n\n我们下面可以分析下代码中的几个字段值需要来判断：\n\n1. orderType(充值类型)，如果值为1的话，说明是充值500元的用户，如果为2的话，说明是充值200元的用户，如果是3的话，说明是没有充值的用户。\n\n2. isPay(是否已经成功充值了): 如果该值为true的话，说明已经成功充值了，否则的话 说明没有充值成功；就当作普通用户来购买。\n\n3. count(表示数量)；普通用户抽奖，如果数量有的话，就可以拿到优惠卷，否则的话，不能拿到优惠卷。\n\n```js\n// 我们一般写代码如下处理操作\nvar order =  function(orderType,isPay,count) {\n    if(orderType == 1) {  // 用户充值500元到支付宝去\n        if(isPay == true) { // 如果充值成功的话，100%中奖\n            console.log(\"亲爱的用户，您中奖了100元红包了\");\n        }else {\n            // 充值失败，就当作普通用户来处理中奖信息\n            if(count > 0) {\n                console.log(\"亲爱的用户，您已抽到10元优惠卷\");\n            }else {\n                console.log(\"亲爱的用户，请再接再厉哦\");\n            }\n        }\n    }else if(orderType == 2) {  // 用户充值200元到支付宝去\n        if(isPay == true) {     // 如果充值成功的话，100%中奖\n            console.log(\"亲爱的用户，您中奖了20元红包了\");\n        }else {\n            // 充值失败，就当作普通用户来处理中奖信息\n            if(count > 0) {\n                console.log(\"亲爱的用户，您已抽到10元优惠卷\");\n            }else {\n                console.log(\"亲爱的用户，请再接再厉哦\");\n            }\n        }\n    }else if(orderType == 3) {\n        // 普通用户来处理中奖信息\n        if(count > 0) {\n            console.log(\"亲爱的用户，您已抽到10元优惠卷\");\n        }else {\n            console.log(\"亲爱的用户，请再接再厉哦\");\n        }\n    }\n};\n```\n上面的代码虽然可以实现需求，但是代码不容易扩展且难以阅读，假如以后我想一两个条件，我想充值300元成功的话，可以中奖150元红包，那么这时候又要改动里面的代码,这样业务逻辑与代码耦合性相对比较高，一不小心就改错了代码；这时候我们试着使用职责链模式来依次传递对象来实现；\n\n如下代码：\n\n```js\nfunction order500(orderType,isPay,count){\n    if(orderType == 1 && isPay == true)    {\n        console.log(\"亲爱的用户，您中奖了100元红包了\");\n    }else {\n        // 自己不处理，传递给下一个对象order200去处理\n        order200(orderType,isPay,count);\n    }\n};\nfunction order200(orderType,isPay,count) {\n    if(orderType == 2 && isPay == true) {\n        console.log(\"亲爱的用户，您中奖了20元红包了\");\n    }else {\n        // 自己不处理，传递给下一个对象普通用户去处理\n        orderNormal(orderType,isPay,count);\n    }\n};\nfunction orderNormal(orderType,isPay,count){\n    // 普通用户来处理中奖信息\n    if(count > 0) {\n        console.log(\"亲爱的用户，您已抽到10元优惠卷\");\n    }else {\n        console.log(\"亲爱的用户，请再接再厉哦\");\n    }\n}\n```\n如上代码我们分别使用了三个函数order500，order200，orderNormal来分别处理自己的业务逻辑，如果目前的自己函数不能处理的事情，我们传递给下面的函数去处理，依次类推，直到有一个函数能处理他，否则的话，该职责链模式直接从链中离开，告诉不能处理，抛出错误提示，上面的代码虽然可以当作职责链模式，但是我们看上面的代码可以看到order500函数内依赖了order200这样的函数，这样就必须有这个函数，也违反了面向对象中的 开放-封闭原则。下面我们继续来理解编写 灵活可拆分的职责链节点。\n\n```js\nfunction order500(orderType,isPay,count){\n    if(orderType == 1 && isPay == true)    {\n        console.log(\"亲爱的用户，您中奖了100元红包了\");\n    }else {\n        //我不知道下一个节点是谁,反正把请求往后面传递\n        return \"nextSuccessor\";\n    }\n};\nfunction order200(orderType,isPay,count) {\n    if(orderType == 2 && isPay == true) {\n        console.log(\"亲爱的用户，您中奖了20元红包了\");\n    }else {\n        //我不知道下一个节点是谁,反正把请求往后面传递\n        return \"nextSuccessor\";\n    }\n};\nfunction orderNormal(orderType,isPay,count){\n    // 普通用户来处理中奖信息\n    if(count > 0) {\n        console.log(\"亲爱的用户，您已抽到10元优惠卷\");\n    }else {\n        console.log(\"亲爱的用户，请再接再厉哦\");\n    }\n}\n// 下面需要编写职责链模式的封装构造函数方法\nvar Chain = function(fn){\n    this.fn = fn;\n    this.successor = null;\n};\nChain.prototype.setNextSuccessor = function(successor){\n    return this.successor = successor;\n}\n// 把请求往下传递\nChain.prototype.passRequest = function(){\n    var ret = this.fn.apply(this,arguments);\n    if(ret === 'nextSuccessor') {\n        return this.successor && this.successor.passRequest.apply(this.successor,arguments);\n    }\n    return ret;\n}\n//现在我们把3个函数分别包装成职责链节点：\nvar chainOrder500 = new Chain(order500);\nvar chainOrder200 = new Chain(order200);\nvar chainOrderNormal = new Chain(orderNormal);\n\n// 然后指定节点在职责链中的顺序\nchainOrder500.setNextSuccessor(chainOrder200);\nchainOrder200.setNextSuccessor(chainOrderNormal);\n\n//最后把请求传递给第一个节点：\nchainOrder500.passRequest(1,true,500);  // 亲爱的用户，您中奖了100元红包了\nchainOrder500.passRequest(2,true,500);  // 亲爱的用户，您中奖了20元红包了\nchainOrder500.passRequest(3,true,500);  // 亲爱的用户，您已抽到10元优惠卷\nchainOrder500.passRequest(1,false,0);   // 亲爱的用户，请再接再厉哦\n```\n如上代码;分别编写order500，order200，orderNormal三个函数，在函数内分别处理自己的业务逻辑，如果自己的函数不能处理的话，就返回字符串nextSuccessor 往后面传递，然后封装Chain这个构造函数，传递一个fn这个对象实列进来，且有自己的一个属性successor，原型上有2个方法 setNextSuccessor 和 passRequest;setNextSuccessor 这个方法是指定节点在职责链中的顺序的，把相对应的方法保存到this.successor这个属性上，chainOrder500.setNextSuccessor(chainOrder200);chainOrder200.setNextSuccessor(chainOrderNormal);指定链中的顺序，因此this.successor引用了order200这个方法和orderNormal这个方法，因此第一次chainOrder500.passRequest(1,true,500)调用的话，调用order500这个方法，直接输出，第二次调用chainOrder500.passRequest(2,true,500);这个方法从链中首节点order500开始不符合，就返回successor字符串，然后this.successor && this.successor.passRequest.apply(this.successor,arguments);就执行这句代码；上面我们说过this.successor这个属性引用了2个方法 分别为order200和orderNormal，因此调用order200该方法，所以就返回了值，依次类推都是这个原理。那如果以后我们想充值300元的红包的话，我们可以编写order300这个函数，然后实列一下链chain包装起来，指定一下职责链中的顺序即可，里面的业务逻辑不需要做任何处理;\n\n# 理解异步的职责链\n\n上面的只是同步职责链，我们让每个节点函数同步返回一个特定的值”nextSuccessor”，来表示是否把请求传递给下一个节点，在我们开发中会经常碰到ajax异步请求，请求成功后，需要做某某事情，那么这时候如果我们再套用上面的同步请求的话，就不生效了，下面我们来理解下使用异步的职责链来解决这个问题;我们给Chain类再增加一个原型方法Chain.prototype.next，表示手动传递请求给职责链中的一下个节点。\n\n如下代码：\n\n```js\nfunction Fn1() {\n    console.log(1);\n    return \"nextSuccessor\";\n}\nfunction Fn2() {\n    console.log(2);\n    var self = this;\n    setTimeout(function(){\n        self.next();\n    },1000);\n}\nfunction Fn3() {\n    console.log(3);\n}\n// 下面需要编写职责链模式的封装构造函数方法\nvar Chain = function(fn){\n    this.fn = fn;\n    this.successor = null;\n};\nChain.prototype.setNextSuccessor = function(successor){\n    return this.successor = successor;\n}\n// 把请求往下传递\nChain.prototype.passRequest = function(){\n    var ret = this.fn.apply(this,arguments);\n    if(ret === 'nextSuccessor') {\n        return this.successor && this.successor.passRequest.apply(this.successor,arguments);\n    }\n    return ret;\n}\nChain.prototype.next = function(){\n    return this.successor && this.successor.passRequest.apply(this.successor,arguments);\n}\n//现在我们把3个函数分别包装成职责链节点：\nvar chainFn1 = new Chain(Fn1);\nvar chainFn2 = new Chain(Fn2);\nvar chainFn3 = new Chain(Fn3);\n\n// 然后指定节点在职责链中的顺序\nchainFn1.setNextSuccessor(chainFn2);\nchainFn2.setNextSuccessor(chainFn3);\n\nchainFn1.passRequest();  // 打印出1，2 过1秒后 会打印出3\n```\n调用函数 chainFn1.passRequest();后，会先执行发送者Fn1这个函数 打印出1，然后返回字符串 nextSuccessor;\n\n 接着就执行return this.successor && this.successor.passRequest.apply(this.successor,arguments);这个函数到Fn2，打印2，接着里面有一个setTimeout定时器异步函数，需要把请求给职责链中的下一个节点，因此过一秒后会打印出3;\n\n职责链模式的优点是：\n\n 1. 解耦了请求发送者和N个接收者之间的复杂关系，不需要知道链中那个节点能处理你的请求，所以你\n\n    只需要把请求传递到第一个节点即可。\n\n 2. 链中的节点对象可以灵活地拆分重组，增加或删除一个节点，或者改变节点的位置都是很简单的事情。\n\n 3. 我们还可以手动指定节点的起始位置，并不是说非得要从其实节点开始传递的.\n\n 缺点：职责链模式中多了一点节点对象，可能在某一次请求过程中，大部分节点没有起到实质性作用，他们的作用只是让\n\n 请求传递下去，从性能方面考虑，避免过长的职责链提高性能。",
				"html": "<p>优点是：消除请求的发送者与接收者之间的耦合。</p>\n<pre><code>职责连是由多个不同的对象组成的，发送者是发送请求的对象，而接收者则是链中那些接收这种请求并且对其进行处理或传递的对象。请求本身有时候也可以是一个对象，它封装了和操作有关的所有数据，基本实现流程如下：\n</code></pre><ol>\n<li><p>发送者知道链中的第一个接收者，它向这个接收者发送该请求。</p>\n</li>\n<li><p>每一个接收者都对请求进行分析，然后要么处理它，要么它往下传递。</p>\n</li>\n<li><p>每一个接收者知道其他的对象只有一个，即它在链中的下家(successor)。</p>\n</li>\n<li><p>如果没有任何接收者处理请求，那么请求会从链中离开。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p>   我们可以理解职责链模式是处理请求组成的一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，我们把这些对象称为链中的节点。比如对象A给对象B发请求，如果B对象不处理，它就会把请求交给C，如果C对象不处理的话，它就会把请求交给D，依次类推，直到有一个对象能处理该请求为止，当然没有任何对象处理该请求的话，那么请求就会从链中离开。</p>\n<p>   比如常见的一些外包公司接到一个项目，那么接到项目有可能是公司的负责项目的人或者经理级别的人，经理接到项目后自己不开发，直接把它交到项目经理来开发，项目经理自己肯定不乐意自己动手开发哦，它就把项目交给下面的码农来做，所以码农来处理它，如果码农也不处理的话，那么这个项目可能会直接挂掉了，但是最后完成后，外包公司它并不知道这些项目中的那一部分具体有哪些人开发的，它并不知道，也并不关心的，它关心的是这个项目已交给外包公司已经开发完成了且没有任何bug就可以了；所以职责链模式的优点就在这里：</p>\n<p>消除请求的发送者(需要外包项目的公司)与接收者(外包公司)之间的耦合。</p>\n<p>下面列举个列子来说明职责链的好处：</p>\n<p>天猫每年双11都会做抽奖活动的，比如阿里巴巴想提高大家使用支付宝来支付的话，每一位用户充值500元到支付宝的话，那么可以100%中奖100元红包，</p>\n<p>充值200元到支付宝的话，那么可以100%中奖20元的红包，当然如果不充值的话，也可以抽奖，但是概率非常低，基本上是抽不到的，当然也有可能抽到的。</p>\n<p>我们下面可以分析下代码中的几个字段值需要来判断：</p>\n<ol>\n<li><p>orderType(充值类型)，如果值为1的话，说明是充值500元的用户，如果为2的话，说明是充值200元的用户，如果是3的话，说明是没有充值的用户。</p>\n</li>\n<li><p>isPay(是否已经成功充值了): 如果该值为true的话，说明已经成功充值了，否则的话 说明没有充值成功；就当作普通用户来购买。</p>\n</li>\n<li><p>count(表示数量)；普通用户抽奖，如果数量有的话，就可以拿到优惠卷，否则的话，不能拿到优惠卷。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 我们一般写代码如下处理操作</span></div><div class=\"line\"><span class=\"keyword\">var</span> order =  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">orderType,isPay,count</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(orderType == <span class=\"number\">1</span>) &#123;  <span class=\"comment\">// 用户充值500元到支付宝去</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(isPay == <span class=\"literal\">true</span>) &#123; <span class=\"comment\">// 如果充值成功的话，100%中奖</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您中奖了100元红包了\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 充值失败，就当作普通用户来处理中奖信息</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您已抽到10元优惠卷\"</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，请再接再厉哦\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(orderType == <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// 用户充值200元到支付宝去</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(isPay == <span class=\"literal\">true</span>) &#123;     <span class=\"comment\">// 如果充值成功的话，100%中奖</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您中奖了20元红包了\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 充值失败，就当作普通用户来处理中奖信息</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您已抽到10元优惠卷\"</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，请再接再厉哦\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(orderType == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 普通用户来处理中奖信息</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您已抽到10元优惠卷\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，请再接再厉哦\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的代码虽然可以实现需求，但是代码不容易扩展且难以阅读，假如以后我想一两个条件，我想充值300元成功的话，可以中奖150元红包，那么这时候又要改动里面的代码,这样业务逻辑与代码耦合性相对比较高，一不小心就改错了代码；这时候我们试着使用职责链模式来依次传递对象来实现；</p>\n<p>如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">order500</span>(<span class=\"params\">orderType,isPay,count</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(orderType == <span class=\"number\">1</span> &amp;&amp; isPay == <span class=\"literal\">true</span>)    &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您中奖了100元红包了\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 自己不处理，传递给下一个对象order200去处理</span></div><div class=\"line\">        order200(orderType,isPay,count);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">order200</span>(<span class=\"params\">orderType,isPay,count</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(orderType == <span class=\"number\">2</span> &amp;&amp; isPay == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您中奖了20元红包了\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 自己不处理，传递给下一个对象普通用户去处理</span></div><div class=\"line\">        orderNormal(orderType,isPay,count);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">orderNormal</span>(<span class=\"params\">orderType,isPay,count</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 普通用户来处理中奖信息</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您已抽到10元优惠卷\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，请再接再厉哦\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上代码我们分别使用了三个函数order500，order200，orderNormal来分别处理自己的业务逻辑，如果目前的自己函数不能处理的事情，我们传递给下面的函数去处理，依次类推，直到有一个函数能处理他，否则的话，该职责链模式直接从链中离开，告诉不能处理，抛出错误提示，上面的代码虽然可以当作职责链模式，但是我们看上面的代码可以看到order500函数内依赖了order200这样的函数，这样就必须有这个函数，也违反了面向对象中的 开放-封闭原则。下面我们继续来理解编写 灵活可拆分的职责链节点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">order500</span>(<span class=\"params\">orderType,isPay,count</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(orderType == <span class=\"number\">1</span> &amp;&amp; isPay == <span class=\"literal\">true</span>)    &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您中奖了100元红包了\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//我不知道下一个节点是谁,反正把请求往后面传递</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"nextSuccessor\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">order200</span>(<span class=\"params\">orderType,isPay,count</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(orderType == <span class=\"number\">2</span> &amp;&amp; isPay == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您中奖了20元红包了\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//我不知道下一个节点是谁,反正把请求往后面传递</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"nextSuccessor\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">orderNormal</span>(<span class=\"params\">orderType,isPay,count</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 普通用户来处理中奖信息</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，您已抽到10元优惠卷\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"亲爱的用户，请再接再厉哦\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 下面需要编写职责链模式的封装构造函数方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> Chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.fn = fn;</div><div class=\"line\">    <span class=\"keyword\">this</span>.successor = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Chain.prototype.setNextSuccessor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">successor</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor = successor;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 把请求往下传递</span></div><div class=\"line\">Chain.prototype.passRequest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"keyword\">this</span>.fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(ret === <span class=\"string\">'nextSuccessor'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor &amp;&amp; <span class=\"keyword\">this</span>.successor.passRequest.apply(<span class=\"keyword\">this</span>.successor,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//现在我们把3个函数分别包装成职责链节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> chainOrder500 = <span class=\"keyword\">new</span> Chain(order500);</div><div class=\"line\"><span class=\"keyword\">var</span> chainOrder200 = <span class=\"keyword\">new</span> Chain(order200);</div><div class=\"line\"><span class=\"keyword\">var</span> chainOrderNormal = <span class=\"keyword\">new</span> Chain(orderNormal);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 然后指定节点在职责链中的顺序</span></div><div class=\"line\">chainOrder500.setNextSuccessor(chainOrder200);</div><div class=\"line\">chainOrder200.setNextSuccessor(chainOrderNormal);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//最后把请求传递给第一个节点：</span></div><div class=\"line\">chainOrder500.passRequest(<span class=\"number\">1</span>,<span class=\"literal\">true</span>,<span class=\"number\">500</span>);  <span class=\"comment\">// 亲爱的用户，您中奖了100元红包了</span></div><div class=\"line\">chainOrder500.passRequest(<span class=\"number\">2</span>,<span class=\"literal\">true</span>,<span class=\"number\">500</span>);  <span class=\"comment\">// 亲爱的用户，您中奖了20元红包了</span></div><div class=\"line\">chainOrder500.passRequest(<span class=\"number\">3</span>,<span class=\"literal\">true</span>,<span class=\"number\">500</span>);  <span class=\"comment\">// 亲爱的用户，您已抽到10元优惠卷</span></div><div class=\"line\">chainOrder500.passRequest(<span class=\"number\">1</span>,<span class=\"literal\">false</span>,<span class=\"number\">0</span>);   <span class=\"comment\">// 亲爱的用户，请再接再厉哦</span></div></pre></td></tr></table></figure>\n<p>如上代码;分别编写order500，order200，orderNormal三个函数，在函数内分别处理自己的业务逻辑，如果自己的函数不能处理的话，就返回字符串nextSuccessor 往后面传递，然后封装Chain这个构造函数，传递一个fn这个对象实列进来，且有自己的一个属性successor，原型上有2个方法 setNextSuccessor 和 passRequest;setNextSuccessor 这个方法是指定节点在职责链中的顺序的，把相对应的方法保存到this.successor这个属性上，chainOrder500.setNextSuccessor(chainOrder200);chainOrder200.setNextSuccessor(chainOrderNormal);指定链中的顺序，因此this.successor引用了order200这个方法和orderNormal这个方法，因此第一次chainOrder500.passRequest(1,true,500)调用的话，调用order500这个方法，直接输出，第二次调用chainOrder500.passRequest(2,true,500);这个方法从链中首节点order500开始不符合，就返回successor字符串，然后this.successor &amp;&amp; this.successor.passRequest.apply(this.successor,arguments);就执行这句代码；上面我们说过this.successor这个属性引用了2个方法 分别为order200和orderNormal，因此调用order200该方法，所以就返回了值，依次类推都是这个原理。那如果以后我们想充值300元的红包的话，我们可以编写order300这个函数，然后实列一下链chain包装起来，指定一下职责链中的顺序即可，里面的业务逻辑不需要做任何处理;</p>\n<h1 id=\"理解异步的职责链\"><a href=\"#理解异步的职责链\" class=\"headerlink\" title=\"理解异步的职责链\"></a>理解异步的职责链</h1><p>上面的只是同步职责链，我们让每个节点函数同步返回一个特定的值”nextSuccessor”，来表示是否把请求传递给下一个节点，在我们开发中会经常碰到ajax异步请求，请求成功后，需要做某某事情，那么这时候如果我们再套用上面的同步请求的话，就不生效了，下面我们来理解下使用异步的职责链来解决这个问题;我们给Chain类再增加一个原型方法Chain.prototype.next，表示手动传递请求给职责链中的一下个节点。</p>\n<p>如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"nextSuccessor\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.next();</div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn3</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 下面需要编写职责链模式的封装构造函数方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> Chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.fn = fn;</div><div class=\"line\">    <span class=\"keyword\">this</span>.successor = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Chain.prototype.setNextSuccessor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">successor</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor = successor;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 把请求往下传递</span></div><div class=\"line\">Chain.prototype.passRequest = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"keyword\">this</span>.fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(ret === <span class=\"string\">'nextSuccessor'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor &amp;&amp; <span class=\"keyword\">this</span>.successor.passRequest.apply(<span class=\"keyword\">this</span>.successor,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\">Chain.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.successor &amp;&amp; <span class=\"keyword\">this</span>.successor.passRequest.apply(<span class=\"keyword\">this</span>.successor,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//现在我们把3个函数分别包装成职责链节点：</span></div><div class=\"line\"><span class=\"keyword\">var</span> chainFn1 = <span class=\"keyword\">new</span> Chain(Fn1);</div><div class=\"line\"><span class=\"keyword\">var</span> chainFn2 = <span class=\"keyword\">new</span> Chain(Fn2);</div><div class=\"line\"><span class=\"keyword\">var</span> chainFn3 = <span class=\"keyword\">new</span> Chain(Fn3);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 然后指定节点在职责链中的顺序</span></div><div class=\"line\">chainFn1.setNextSuccessor(chainFn2);</div><div class=\"line\">chainFn2.setNextSuccessor(chainFn3);</div><div class=\"line\"></div><div class=\"line\">chainFn1.passRequest();  <span class=\"comment\">// 打印出1，2 过1秒后 会打印出3</span></div></pre></td></tr></table></figure>\n<p>调用函数 chainFn1.passRequest();后，会先执行发送者Fn1这个函数 打印出1，然后返回字符串 nextSuccessor;</p>\n<p> 接着就执行return this.successor &amp;&amp; this.successor.passRequest.apply(this.successor,arguments);这个函数到Fn2，打印2，接着里面有一个setTimeout定时器异步函数，需要把请求给职责链中的下一个节点，因此过一秒后会打印出3;</p>\n<p>职责链模式的优点是：</p>\n<ol>\n<li><p>解耦了请求发送者和N个接收者之间的复杂关系，不需要知道链中那个节点能处理你的请求，所以你</p>\n<p>只需要把请求传递到第一个节点即可。</p>\n</li>\n<li><p>链中的节点对象可以灵活地拆分重组，增加或删除一个节点，或者改变节点的位置都是很简单的事情。</p>\n</li>\n<li><p>我们还可以手动指定节点的起始位置，并不是说非得要从其实节点开始传递的.</p>\n<p>缺点：职责链模式中多了一点节点对象，可能在某一次请求过程中，大部分节点没有起到实质性作用，他们的作用只是让</p>\n<p>请求传递下去，从性能方面考虑，避免过长的职责链提高性能。</p>\n</li>\n</ol>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491544979070,
				"created_by": 2,
				"updated_at": 1491544980388,
				"updated_by": 2,
				"published_at": 1491544979070,
				"published_by": 2
			},
			{
				"id": "cj17g17i6000iakfcu7re47y3",
				"title": "js设计模式-代理模式",
				"slug": "js-design-pattern-proxy",
				"markdown": "代理是一个对象，它可以用来控制对本体对象的访问，它与本体对象实现了同样的接口，代理对象会把所有的调用方法传递给本体对象的；代理模式最基本的形式是对访问进行控制，而本体对象则负责执行所分派的那个对象的函数或者类，简单的来讲本地对象注重的去执行页面上的代码，代理则控制本地对象何时被实例化，何时被使用；我们在上面的单体模式中使用过一些代理模式，就是使用代理模式实现单体模式的实例化，其他的事情就交给本体对象去处理；\n<!--more-->\n代理的优点：\n\n代理对象可以代替本体被实例化，并使其可以被远程访问；\n它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象；\n我们先来理解代理对象代替本体对象被实例化的列子；比如现在京东ceo想送给奶茶妹一个礼物，但是呢假如该ceo不好意思送，或者由于工作忙没有时间送，那么这个时候他就想委托他的经纪人去做这件事，于是我们可以使用代理模式来编写如下代码：\n\n```js\n// 先申明一个奶茶妹对象\nvar TeaAndMilkGirl = function(name) {\n    this.name = name;\n};\n// 这是京东ceo先生\nvar Ceo = function(girl) {\n    this.girl = girl;\n    // 送结婚礼物 给奶茶妹\n    this.sendMarriageRing = function(ring) {\n        console.log(\"Hi \" + this.girl.name + \", ceo送你一个礼物：\" + ring);\n    }\n};\n// 京东ceo的经纪人是代理，来代替送\nvar ProxyObj = function(girl){\n    this.girl = girl;\n    // 经纪人代理送礼物给奶茶妹\n    this.sendGift = function(gift) {\n        // 代理模式负责本体对象实例化\n        (new Ceo(this.girl)).sendMarriageRing(gift);\n    }\n};\n// 初始化\nvar proxy = new ProxyObj(new TeaAndMilkGirl(\"奶茶妹\"));\nproxy.sendGift(\"结婚戒\"); // Hi 奶茶妹, ceo送你一个礼物：结婚戒\n```\n\n代码如上的基本结构，TeaAndMilkGirl 是一个被送的对象(这里是奶茶妹)；Ceo 是送礼物的对象，他保存了奶茶妹这个属性，及有一个自己的特权方法sendMarriageRing 就是送礼物给奶茶妹这么一个方法；然后呢他是想通过他的经纪人去把这件事完成，于是需要创建一个经济人的代理模式，名字叫ProxyObj ；他的主要做的事情是，把ceo交给他的礼物送给ceo的情人，因此该对象同样需要保存ceo情人的对象作为自己的属性，同时也需要一个特权方法sendGift ，该方法是送礼物，因此在该方法内可以实例化本体对象，这里的本体对象是ceo送花这件事情，因此需要实例化该本体对象后及调用本体对象的方法(sendMarriageRing).\n\n最后我们初始化是需要代理对象ProxyObj；调用ProxyObj 对象的送花这个方法(sendGift)即可；\n\n对于我们提到的优点，第二点的话，我们下面可以来理解下虚拟代理，虚拟代理用于控制对那种创建开销很大的本体访问，它会把本体的实例化推迟到有方法被调用的时候；比如说现在有一个对象的实例化很慢的话，不能在网页加载的时候立即完成，我们可以为其创建一个虚拟代理，让他把该对象的实例推迟到需要的时候。\n\n# 理解使用虚拟代理实现图片的预加载\n\n在网页开发中，图片的预加载是一种比较常用的技术，如果直接给img标签节点设置src属性的话，如果图片比较大的话，或者网速相对比较慢的话，那么在图片未加载完之前，图片会有一段时间是空白的场景，这样对于用户体验来讲并不好，那么这个时候我们可以在图片未加载完之前我们可以使用一个loading加载图片来作为一个占位符，来提示用户该图片正在加载，等图片加载完后我们可以对该图片直接进行赋值即可；下面我们先不用代理模式来实现图片的预加载的情况下代码如下：\n\n## 第一种方案：不使用代理的预加载图片函数如下\n\n```js\n// 不使用代理的预加载图片函数如下\nvar myImage = (function(){\n    var imgNode = document.createElement(\"img\");\n    document.body.appendChild(imgNode);\n    var img = new Image();\n    img.onload = function(){\n        imgNode.src = this.src;\n    };\n    return {\n        setSrc: function(src) {\n            imgNode.src = \"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif\";\n            img.src = src;\n        }\n    }\n})();\n// 调用方式\nmyImage.setSrc(\"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png\");\n```\n如上代码是不使用代理模式来实现的代码；\n\n## 第二种方案：使用代理模式来编写预加载图片的代码如下：\n\n```js\nvar myImage = (function(){\n    var imgNode = document.createElement(\"img\");\n    document.body.appendChild(imgNode);\n    return {\n        setSrc: function(src) {\n            imgNode.src = src;\n        }\n    }\n})();\n// 代理模式\nvar ProxyImage = (function(){\n    var img = new Image();\n    img.onload = function(){\n        myImage.setSrc(this.src);\n    };\n    return {\n        setSrc: function(src) {\n                         myImage.setSrc(\"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif\");\n        img.src = src;\n        }\n    }\n})();\n// 调用方式\nProxyImage.setSrc(\"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png\");\n```\n第一种方案是使用一般的编码方式实现图片的预加载技术，首先创建imgNode元素，然后调用myImage.setSrc该方法的时候，先给图片一个预加载图片，当图片加载完的时候，再给img元素赋值，第二种方案是使用代理模式来实现的，myImage 函数只负责创建img元素，代理函数ProxyImage 负责给图片设置loading图片，当图片真正加载完后的话，调用myImage中的myImage.setSrc方法设置图片的路径；他们之间的优缺点如下：\n\n第一种方案一般的方法代码的耦合性太高，一个函数内负责做了几件事情，比如创建img元素，和实现给未加载图片完成之前设置loading加载状态等多项事情，未满足面向对象设计原则中单一职责原则；并且当某个时候不需要代理的时候，需要从myImage 函数内把代码删掉，这样代码耦合性太高。\n第二种方案使用代理模式，其中myImage 函数只负责做一件事，创建img元素加入到页面中，其中的加载loading图片交给代理函数ProxyImage 去做，当图片加载成功后，代理函数ProxyImage 会通知及执行myImage 函数的方法，同时当以后不需要代理对象的话，我们直接可以调用本体对象的方法即可；\n从上面代理模式我们可以看到，代理模式和本体对象中有相同的方法setSrc,这样设置的话有如下2个优点：\n\n用户可以放心地请求代理，他们只关心是否能得到想要的结果。假如我门不需要代理对象的话，直接可以换成本体对象调用该方法即可。\n在任何使用本体对象的地方都可以替换成使用代理。\n当然如果代理对象和本体对象都返回一个匿名函数的话，那么也可以认为他们也具有一直的接口；比如如下代码：\n\n```js\nvar myImage = (function(){\n    var imgNode = document.createElement(\"img\");\n    document.body.appendChild(imgNode);\n    return function(src){\n        imgNode.src = src;\n    }\n})();\n// 代理模式\nvar ProxyImage = (function(){\n    var img = new Image();\n    img.onload = function(){\n        myImage(this.src);\n    };\n    return function(src) {\n                myImage(\"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif\");\n        img.src = src;\n    }\n})();\n// 调用方式\nProxyImage(\"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png\");\n```\n虚拟代理合并http请求的理解：\n\n   比如在做后端系统中，有表格数据，每一条数据前面有复选框按钮，当点击复选框按钮时候，需要获取该id后需要传递给给服务器发送ajax请求，服务器端需要记录这条数据，去请求，如果我们每当点击一下向服务器发送一个http请求的话，对于服务器来说压力比较大，网络请求比较频繁，但是如果现在该系统的实时数据不是很高的话，我们可以通过一个代理函数收集一段时间内(比如说2-3秒)的所有id，一次性发ajax请求给服务器，相对来说网络请求降低了, 服务器压力减少了;\n\n```html\n// 首先html结构如下：\n<p>\n    <label>选择框</label>\n    <input type=\"checkbox\" class=\"j-input\" data-id=\"1\"/>\n</p>\n<p>\n    <label>选择框</label>\n    <input type=\"checkbox\" class=\"j-input\" data-id = \"2\"/>\n</p>\n<p>\n    <label>选择框</label>\n    <input type=\"checkbox\" class=\"j-input\" data-id=\"3\"/>\n</p>\n<p>\n    <label>选择框</label>\n    <input type=\"checkbox\" class=\"j-input\" data-id = \"4\"/>\n</p>\n```\n一般的情况下 JS如下编写\n\n```html\n<script>\n    var checkboxs = document.getElementsByClassName(\"j-input\");\n    for(var i = 0,ilen = checkboxs.length; i < ilen; i+=1) {\n        (function(i){\n            checkboxs[i].onclick = function(){\n                if(this.checked) {\n                    var id = this.getAttribute(\"data-id\");\n                    // 如下是ajax请求\n                }\n            }\n        })(i);\n    }\n</script>\n```\n下面我们通过虚拟代理的方式，延迟2秒，在2秒后获取所有被选中的复选框的按钮id，一次性给服务器发请求。\n\n  通过点击页面的复选框，选中的时候增加一个属性isflag，没有选中的时候删除该属性isflag，然后延迟个2秒，在2秒后重新判断页面上所有复选框中有isflag的属性上的id，存入数组，然后代理函数调用本体函数的方法，把延迟2秒后的所有id一次性发给本体方法，本体方法可以获取所有的id，可以向服务器端发送ajax请求，这样的话，服务器的请求压力相对来说减少了。\n\n代码如下：\n\n```js\n// 本体函数\nvar mainFunc = function(ids) {\n    console.log(ids); // 即可打印被选中的所有的id\n    // 再把所有的id一次性发ajax请求给服务器端\n};\n// 代理函数 通过代理函数获取所有的id 传给本体函数去执行\nvar proxyFunc = (function(){\n    var cache = [],  // 保存一段时间内的id\n        timer = null; // 定时器\n    return function(checkboxs) {\n        // 判断如果定时器有的话，不进行覆盖操作\n        if(timer) {\n            return;\n        }\n        timer = setTimeout(function(){\n            // 在2秒内获取所有被选中的id，通过属性isflag判断是否被选中\n            for(var i = 0,ilen = checkboxs.length; i < ilen; i++) {\n                if(checkboxs[i].hasAttribute(\"isflag\")) {\n                    var id = checkboxs[i].getAttribute(\"data-id\");\n                    cache[cache.length] = id;\n                }\n            }\n            mainFunc(cache.join(',')); // 2秒后需要给本体函数传递所有的id\n            // 清空定时器\n            clearTimeout(timer);\n            timer = null;\n            cache = [];\n        },2000);\n    }\n})();\nvar checkboxs = document.getElementsByClassName(\"j-input\");\nfor(var i = 0,ilen = checkboxs.length; i < ilen; i+=1) {\n    (function(i){\n        checkboxs[i].onclick = function(){\n            if(this.checked) {\n                // 给当前增加一个属性\n                this.setAttribute(\"isflag\",1);\n            }else {\n                this.removeAttribute('isflag');\n            }\n            // 调用代理函数\n            proxyFunc(checkboxs);\n        }\n    })(i);\n}\n```\n# 理解缓存代理：\n\n   缓存代理的含义就是对第一次运行时候进行缓存，当再一次运行相同的时候，直接从缓存里面取，这样做的好处是避免重复一次运算功能，如果运算非常复杂的话，对性能很耗费，那么使用缓存对象可以提高性能;我们可以先来理解一个简单的缓存列子，就是网上常见的加法和乘法的运算。代码如下：\n\n```js\n// 计算乘法\nvar mult = function(){\n    var a = 1;\n    for(var i = 0,ilen = arguments.length; i < ilen; i+=1) {\n        a = a*arguments[i];\n    }\n    return a;\n};\n// 计算加法\nvar plus = function(){\n    var a = 0;\n    for(var i = 0,ilen = arguments.length; i < ilen; i+=1) {\n        a += arguments[i];\n    }\n    return a;\n}\n// 代理函数\nvar proxyFunc = function(fn) {\n    var cache = {};  // 缓存对象\n    return function(){\n        var args = Array.prototype.join.call(arguments,',');\n        if(args in cache) {\n            return cache[args];   // 使用缓存代理\n        }\n        return cache[args] = fn.apply(this,arguments);\n    }\n};\nvar proxyMult = proxyFunc(mult);\nconsole.log(proxyMult(1,2,3,4)); // 24\nconsole.log(proxyMult(1,2,3,4)); // 缓存取 24\n\nvar proxyPlus = proxyFunc(plus);\nconsole.log(proxyPlus(1,2,3,4));  // 10\nconsole.log(proxyPlus(1,2,3,4));  // 缓存取 10\n```",
				"html": "<p>代理是一个对象，它可以用来控制对本体对象的访问，它与本体对象实现了同样的接口，代理对象会把所有的调用方法传递给本体对象的；代理模式最基本的形式是对访问进行控制，而本体对象则负责执行所分派的那个对象的函数或者类，简单的来讲本地对象注重的去执行页面上的代码，代理则控制本地对象何时被实例化，何时被使用；我们在上面的单体模式中使用过一些代理模式，就是使用代理模式实现单体模式的实例化，其他的事情就交给本体对象去处理；<br><a id=\"more\"></a><br>代理的优点：</p>\n<p>代理对象可以代替本体被实例化，并使其可以被远程访问；<br>它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象；<br>我们先来理解代理对象代替本体对象被实例化的列子；比如现在京东ceo想送给奶茶妹一个礼物，但是呢假如该ceo不好意思送，或者由于工作忙没有时间送，那么这个时候他就想委托他的经纪人去做这件事，于是我们可以使用代理模式来编写如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先申明一个奶茶妹对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> TeaAndMilkGirl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 这是京东ceo先生</span></div><div class=\"line\"><span class=\"keyword\">var</span> Ceo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">girl</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.girl = girl;</div><div class=\"line\">    <span class=\"comment\">// 送结婚礼物 给奶茶妹</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sendMarriageRing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ring</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hi \"</span> + <span class=\"keyword\">this</span>.girl.name + <span class=\"string\">\", ceo送你一个礼物：\"</span> + ring);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 京东ceo的经纪人是代理，来代替送</span></div><div class=\"line\"><span class=\"keyword\">var</span> ProxyObj = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">girl</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.girl = girl;</div><div class=\"line\">    <span class=\"comment\">// 经纪人代理送礼物给奶茶妹</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sendGift = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">gift</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 代理模式负责本体对象实例化</span></div><div class=\"line\">        (<span class=\"keyword\">new</span> Ceo(<span class=\"keyword\">this</span>.girl)).sendMarriageRing(gift);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 初始化</span></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> ProxyObj(<span class=\"keyword\">new</span> TeaAndMilkGirl(<span class=\"string\">\"奶茶妹\"</span>));</div><div class=\"line\">proxy.sendGift(<span class=\"string\">\"结婚戒\"</span>); <span class=\"comment\">// Hi 奶茶妹, ceo送你一个礼物：结婚戒</span></div></pre></td></tr></table></figure>\n<p>代码如上的基本结构，TeaAndMilkGirl 是一个被送的对象(这里是奶茶妹)；Ceo 是送礼物的对象，他保存了奶茶妹这个属性，及有一个自己的特权方法sendMarriageRing 就是送礼物给奶茶妹这么一个方法；然后呢他是想通过他的经纪人去把这件事完成，于是需要创建一个经济人的代理模式，名字叫ProxyObj ；他的主要做的事情是，把ceo交给他的礼物送给ceo的情人，因此该对象同样需要保存ceo情人的对象作为自己的属性，同时也需要一个特权方法sendGift ，该方法是送礼物，因此在该方法内可以实例化本体对象，这里的本体对象是ceo送花这件事情，因此需要实例化该本体对象后及调用本体对象的方法(sendMarriageRing).</p>\n<p>最后我们初始化是需要代理对象ProxyObj；调用ProxyObj 对象的送花这个方法(sendGift)即可；</p>\n<p>对于我们提到的优点，第二点的话，我们下面可以来理解下虚拟代理，虚拟代理用于控制对那种创建开销很大的本体访问，它会把本体的实例化推迟到有方法被调用的时候；比如说现在有一个对象的实例化很慢的话，不能在网页加载的时候立即完成，我们可以为其创建一个虚拟代理，让他把该对象的实例推迟到需要的时候。</p>\n<h1 id=\"理解使用虚拟代理实现图片的预加载\"><a href=\"#理解使用虚拟代理实现图片的预加载\" class=\"headerlink\" title=\"理解使用虚拟代理实现图片的预加载\"></a>理解使用虚拟代理实现图片的预加载</h1><p>在网页开发中，图片的预加载是一种比较常用的技术，如果直接给img标签节点设置src属性的话，如果图片比较大的话，或者网速相对比较慢的话，那么在图片未加载完之前，图片会有一段时间是空白的场景，这样对于用户体验来讲并不好，那么这个时候我们可以在图片未加载完之前我们可以使用一个loading加载图片来作为一个占位符，来提示用户该图片正在加载，等图片加载完后我们可以对该图片直接进行赋值即可；下面我们先不用代理模式来实现图片的预加载的情况下代码如下：</p>\n<h2 id=\"第一种方案：不使用代理的预加载图片函数如下\"><a href=\"#第一种方案：不使用代理的预加载图片函数如下\" class=\"headerlink\" title=\"第一种方案：不使用代理的预加载图片函数如下\"></a>第一种方案：不使用代理的预加载图片函数如下</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 不使用代理的预加载图片函数如下</span></div><div class=\"line\"><span class=\"keyword\">var</span> myImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> imgNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(imgNode);</div><div class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        imgNode.src = <span class=\"keyword\">this</span>.src;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">setSrc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">            imgNode.src = <span class=\"string\">\"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif\"</span>;</div><div class=\"line\">            img.src = src;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 调用方式</span></div><div class=\"line\">myImage.setSrc(<span class=\"string\">\"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png\"</span>);</div></pre></td></tr></table></figure>\n<p>如上代码是不使用代理模式来实现的代码；</p>\n<h2 id=\"第二种方案：使用代理模式来编写预加载图片的代码如下：\"><a href=\"#第二种方案：使用代理模式来编写预加载图片的代码如下：\" class=\"headerlink\" title=\"第二种方案：使用代理模式来编写预加载图片的代码如下：\"></a>第二种方案：使用代理模式来编写预加载图片的代码如下：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> imgNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(imgNode);</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">setSrc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">            imgNode.src = src;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 代理模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> ProxyImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        myImage.setSrc(<span class=\"keyword\">this</span>.src);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">setSrc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">                         myImage.setSrc(<span class=\"string\">\"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif\"</span>);</div><div class=\"line\">        img.src = src;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 调用方式</span></div><div class=\"line\">ProxyImage.setSrc(<span class=\"string\">\"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png\"</span>);</div></pre></td></tr></table></figure>\n<p>第一种方案是使用一般的编码方式实现图片的预加载技术，首先创建imgNode元素，然后调用myImage.setSrc该方法的时候，先给图片一个预加载图片，当图片加载完的时候，再给img元素赋值，第二种方案是使用代理模式来实现的，myImage 函数只负责创建img元素，代理函数ProxyImage 负责给图片设置loading图片，当图片真正加载完后的话，调用myImage中的myImage.setSrc方法设置图片的路径；他们之间的优缺点如下：</p>\n<p>第一种方案一般的方法代码的耦合性太高，一个函数内负责做了几件事情，比如创建img元素，和实现给未加载图片完成之前设置loading加载状态等多项事情，未满足面向对象设计原则中单一职责原则；并且当某个时候不需要代理的时候，需要从myImage 函数内把代码删掉，这样代码耦合性太高。<br>第二种方案使用代理模式，其中myImage 函数只负责做一件事，创建img元素加入到页面中，其中的加载loading图片交给代理函数ProxyImage 去做，当图片加载成功后，代理函数ProxyImage 会通知及执行myImage 函数的方法，同时当以后不需要代理对象的话，我们直接可以调用本体对象的方法即可；<br>从上面代理模式我们可以看到，代理模式和本体对象中有相同的方法setSrc,这样设置的话有如下2个优点：</p>\n<p>用户可以放心地请求代理，他们只关心是否能得到想要的结果。假如我门不需要代理对象的话，直接可以换成本体对象调用该方法即可。<br>在任何使用本体对象的地方都可以替换成使用代理。<br>当然如果代理对象和本体对象都返回一个匿名函数的话，那么也可以认为他们也具有一直的接口；比如如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> imgNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(imgNode);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>)</span>&#123;</div><div class=\"line\">        imgNode.src = src;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 代理模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> ProxyImage = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        myImage(<span class=\"keyword\">this</span>.src);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">                myImage(<span class=\"string\">\"http://img.lanrentuku.com/img/allimg/1212/5-121204193Q9-50.gif\"</span>);</div><div class=\"line\">        img.src = src;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 调用方式</span></div><div class=\"line\">ProxyImage(<span class=\"string\">\"https://img.alicdn.com/tps/i4/TB1b_neLXXXXXcoXFXXc8PZ9XXX-130-200.png\"</span>);</div></pre></td></tr></table></figure>\n<p>虚拟代理合并http请求的理解：</p>\n<p>   比如在做后端系统中，有表格数据，每一条数据前面有复选框按钮，当点击复选框按钮时候，需要获取该id后需要传递给给服务器发送ajax请求，服务器端需要记录这条数据，去请求，如果我们每当点击一下向服务器发送一个http请求的话，对于服务器来说压力比较大，网络请求比较频繁，但是如果现在该系统的实时数据不是很高的话，我们可以通过一个代理函数收集一段时间内(比如说2-3秒)的所有id，一次性发ajax请求给服务器，相对来说网络请求降低了, 服务器压力减少了;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 首先html结构如下：</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"j-input\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"1\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"j-input\"</span> <span class=\"attr\">data-id</span> = <span class=\"string\">\"2\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"j-input\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"3\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"j-input\"</span> <span class=\"attr\">data-id</span> = <span class=\"string\">\"4\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>一般的情况下 JS如下编写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> checkboxs = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"j-input\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = checkboxs.length; i &lt; ilen; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">            checkboxs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.checked) &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> id = <span class=\"keyword\">this</span>.getAttribute(<span class=\"string\">\"data-id\"</span>);</div><div class=\"line\">                    <span class=\"comment\">// 如下是ajax请求</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>下面我们通过虚拟代理的方式，延迟2秒，在2秒后获取所有被选中的复选框的按钮id，一次性给服务器发请求。</p>\n<p>  通过点击页面的复选框，选中的时候增加一个属性isflag，没有选中的时候删除该属性isflag，然后延迟个2秒，在2秒后重新判断页面上所有复选框中有isflag的属性上的id，存入数组，然后代理函数调用本体函数的方法，把延迟2秒后的所有id一次性发给本体方法，本体方法可以获取所有的id，可以向服务器端发送ajax请求，这样的话，服务器的请求压力相对来说减少了。</p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 本体函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> mainFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ids</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(ids); <span class=\"comment\">// 即可打印被选中的所有的id</span></div><div class=\"line\">    <span class=\"comment\">// 再把所有的id一次性发ajax请求给服务器端</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 代理函数 通过代理函数获取所有的id 传给本体函数去执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> proxyFunc = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = [],  <span class=\"comment\">// 保存一段时间内的id</span></div><div class=\"line\">        timer = <span class=\"literal\">null</span>; <span class=\"comment\">// 定时器</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">checkboxs</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 判断如果定时器有的话，不进行覆盖操作</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 在2秒内获取所有被选中的id，通过属性isflag判断是否被选中</span></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = checkboxs.length; i &lt; ilen; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(checkboxs[i].hasAttribute(<span class=\"string\">\"isflag\"</span>)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> id = checkboxs[i].getAttribute(<span class=\"string\">\"data-id\"</span>);</div><div class=\"line\">                    cache[cache.length] = id;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mainFunc(cache.join(<span class=\"string\">','</span>)); <span class=\"comment\">// 2秒后需要给本体函数传递所有的id</span></div><div class=\"line\">            <span class=\"comment\">// 清空定时器</span></div><div class=\"line\">            clearTimeout(timer);</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            cache = [];</div><div class=\"line\">        &#125;,<span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"keyword\">var</span> checkboxs = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"j-input\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = checkboxs.length; i &lt; ilen; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">        checkboxs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.checked) &#123;</div><div class=\"line\">                <span class=\"comment\">// 给当前增加一个属性</span></div><div class=\"line\">                <span class=\"keyword\">this</span>.setAttribute(<span class=\"string\">\"isflag\"</span>,<span class=\"number\">1</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.removeAttribute(<span class=\"string\">'isflag'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 调用代理函数</span></div><div class=\"line\">            proxyFunc(checkboxs);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"理解缓存代理：\"><a href=\"#理解缓存代理：\" class=\"headerlink\" title=\"理解缓存代理：\"></a>理解缓存代理：</h1><p>   缓存代理的含义就是对第一次运行时候进行缓存，当再一次运行相同的时候，直接从缓存里面取，这样做的好处是避免重复一次运算功能，如果运算非常复杂的话，对性能很耗费，那么使用缓存对象可以提高性能;我们可以先来理解一个简单的缓存列子，就是网上常见的加法和乘法的运算。代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 计算乘法</span></div><div class=\"line\"><span class=\"keyword\">var</span> mult = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = <span class=\"built_in\">arguments</span>.length; i &lt; ilen; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        a = a*<span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 计算加法</span></div><div class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,ilen = <span class=\"built_in\">arguments</span>.length; i &lt; ilen; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        a += <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 代理函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> proxyFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;  <span class=\"comment\">// 缓存对象</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"built_in\">arguments</span>,<span class=\"string\">','</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(args <span class=\"keyword\">in</span> cache) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[args];   <span class=\"comment\">// 使用缓存代理</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> cache[args] = fn.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> proxyMult = proxyFunc(mult);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(proxyMult(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)); <span class=\"comment\">// 24</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(proxyMult(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)); <span class=\"comment\">// 缓存取 24</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxyPlus = proxyFunc(plus);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(proxyPlus(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));  <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(proxyPlus(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));  <span class=\"comment\">// 缓存取 10</span></div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491544851552,
				"created_by": 2,
				"updated_at": 1491544852737,
				"updated_by": 2,
				"published_at": 1491544851552,
				"published_by": 2
			},
			{
				"id": "cj17g17hv000aakfcx3m2aa1i",
				"title": "js设计模式-模块模式",
				"slug": "js-design-pattern-model",
				"markdown": " 我们通过单体模式理解了是以对象字面量的方式来创建单体模式的；比如如下的对象字面量的方式代码如下：\n\n```js\nvar singleMode = {\n    name: value,\n    method: function(){\n\n    }\n};\n```\n<!--more-->\n模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用；如下就是一个模块模式的代码结构：\n\n```js\nvar singleMode = (function(){\n    // 创建私有变量\n    var privateNum = 112;\n    // 创建私有函数\n    function privateFunc(){\n        // 实现自己的业务逻辑代码\n    }\n    // 返回一个对象包含公有方法和属性\n    return {\n        publicMethod1: publicMethod1,\n        publicMethod2: publicMethod1\n    };\n})();\n```\n   模块模式使用了一个返回对象的匿名函数。在这个匿名函数内部，先定义了私有变量和函数，供内部函数使用，然后将一个对象字面量作为函数的值返回，返回的对象字面量中只包含可以公开的属性和方法。这样的话，可以提供外部使用该方法；由于该返回对象中的公有方法是在匿名函数内部定义的，因此它可以访问内部的私有变量和函数。\n\n我们什么时候使用模块模式？\n\n如果我们必须创建一个对象并以某些数据进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么我们这个时候就可以使用模块模式了。\n\n# 理解增强的模块模式\n\n增强的模块模式的使用场合是：适合那些单列必须是某种类型的实例，同时还必须添加某些属性或方法对其加以增强的情况。比如如下代码：\n\n```js\nfunction CustomType() {\n    this.name = \"tugenhua\";\n};\nCustomType.prototype.getName = function(){\n    return this.name;\n}\nvar application = (function(){\n    // 定义私有\n    var privateA = \"aa\";\n    // 定义私有函数\n    function A(){};\n\n    // 实例化一个对象后，返回该实例，然后为该实例增加一些公有属性和方法\n    var object = new CustomType();\n\n    // 添加公有属性\n    object.A = \"aa\";\n    // 添加公有方法\n    object.B = function(){\n        return privateA;\n    }\n    // 返回该对象\n    return object;\n})();\n```\n下面我们来打印下application该对象；如下：\n```js\nconsole.log(application);\n```\n\n\n继续打印该公有属性和方法如下：\n```js\nconsole.log(application.A);// aa\n\nconsole.log(application.B()); // aa\n\nconsole.log(application.name); // tugenhua\n\nconsole.log(application.getName());// tugenhua\n```",
				"html": "<p> 我们通过单体模式理解了是以对象字面量的方式来创建单体模式的；比如如下的对象字面量的方式代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> singleMode = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: value,</div><div class=\"line\">    <span class=\"attr\">method</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用；如下就是一个模块模式的代码结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> singleMode = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建私有变量</span></div><div class=\"line\">    <span class=\"keyword\">var</span> privateNum = <span class=\"number\">112</span>;</div><div class=\"line\">    <span class=\"comment\">// 创建私有函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 实现自己的业务逻辑代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 返回一个对象包含公有方法和属性</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">publicMethod1</span>: publicMethod1,</div><div class=\"line\">        <span class=\"attr\">publicMethod2</span>: publicMethod1</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>   模块模式使用了一个返回对象的匿名函数。在这个匿名函数内部，先定义了私有变量和函数，供内部函数使用，然后将一个对象字面量作为函数的值返回，返回的对象字面量中只包含可以公开的属性和方法。这样的话，可以提供外部使用该方法；由于该返回对象中的公有方法是在匿名函数内部定义的，因此它可以访问内部的私有变量和函数。</p>\n<p>我们什么时候使用模块模式？</p>\n<p>如果我们必须创建一个对象并以某些数据进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么我们这个时候就可以使用模块模式了。</p>\n<h1 id=\"理解增强的模块模式\"><a href=\"#理解增强的模块模式\" class=\"headerlink\" title=\"理解增强的模块模式\"></a>理解增强的模块模式</h1><p>增强的模块模式的使用场合是：适合那些单列必须是某种类型的实例，同时还必须添加某些属性或方法对其加以增强的情况。比如如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CustomType</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tugenhua\"</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">CustomType.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> application = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义私有</span></div><div class=\"line\">    <span class=\"keyword\">var</span> privateA = <span class=\"string\">\"aa\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 定义私有函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 实例化一个对象后，返回该实例，然后为该实例增加一些公有属性和方法</span></div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"keyword\">new</span> CustomType();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 添加公有属性</span></div><div class=\"line\">    object.A = <span class=\"string\">\"aa\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 添加公有方法</span></div><div class=\"line\">    object.B = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> privateA;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 返回该对象</span></div><div class=\"line\">    <span class=\"keyword\">return</span> object;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>下面我们来打印下application该对象；如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(application);</div></pre></td></tr></table></figure></p>\n<p>继续打印该公有属性和方法如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(application.A);<span class=\"comment\">// aa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(application.B()); <span class=\"comment\">// aa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(application.name); <span class=\"comment\">// tugenhua</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(application.getName());<span class=\"comment\">// tugenhua</span></div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491544659990,
				"created_by": 2,
				"updated_at": 1491546203096,
				"updated_by": 2,
				"published_at": 1491544659990,
				"published_by": 2
			},
			{
				"id": "cj17g17i1000dakfcgcufmneu",
				"title": "js设计模式-单体模式",
				"slug": "js-design-pattern-singleton",
				"markdown": "  单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。\n<!--more-->\n单体模式的优点是：\n\n-可以用来划分命名空间，减少全局变量的数量。\n-使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。\n-可以被实例化，且实例化一次。\n什么是单体模式？单体模式是一个用来划分命名空间并将一批属性和方法组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。\n\n但是并非所有的对象字面量都是单体，比如说模拟数组或容纳数据的话，那么它就不是单体，但是如果是组织一批相关的属性和方法在一起的话，那么它有可能是单体模式，所以这需要看开发者编写代码的意图；\n\n下面我们来看看定义一个对象字面量(结构类似于单体模式)的基本结构如下：\n\n```js\n// 对象字面量\nvar Singleton = {\n    attr1: 1,\n    attr2: 2,\n    method1: function(){\n        return this.attr1;\n    },\n    method2: function(){\n        return this.attr2;\n    }\n};\n```\n如上面只是简单的字面量结构，上面的所有成员变量都是通过Singleton来访问的，但是它并不是单体模式；因为单体模式还有一个更重要的特点，就是可以仅被实例化一次，上面的只是不能被实例化的一个类，因此不是单体模式；对象字面量是用来创建单体模式的方法之一；\n\n使用单体模式的结构如下demo\n\n我们明白的是单体模式如果有实例化的话，那么只实例化一次，要实现一个单体模式的话，我们无非就是使用一个变量来标识该类是否被实例化，如果未被实例化的话，那么我们可以实例化一次，否则的话，直接返回已经被实例化的对象。\n\n如下代码是单体模式的基本结构：\n\n```js\n// 单体模式\nvar Singleton = function(name){\n    this.name = name;\n    this.instance = null;\n};\nSingleton.prototype.getName = function(){\n    return this.name;\n}\n// 获取实例对象\nfunction getInstance(name) {\n    if(!this.instance) {\n        this.instance = new Singleton(name);\n    }\n    return this.instance;\n}\n// 测试单体模式的实例\nvar a = getInstance(\"aa\");\nvar b = getInstance(\"bb\");\n\n// 因为单体模式是只实例化一次，所以下面的实例是相等的\n\nconsole.log(a === b); // true\n```\n由于单体模式只实例化一次，因此第一次调用，返回的是a实例对象，当我们继续调用的时候，b的实例就是a的实例，因此下面都是打印的是aa；\n```js\nconsole.log(a.getName());// aa\n\nconsole.log(b.getName());// aa\n```\n上面的封装单体模式也可以改成如下结构写法：\n\n```js\n// 单体模式\nvar Singleton = function(name){\n    this.name = name;\n};\nSingleton.prototype.getName = function(){\n    return this.name;\n}\n// 获取实例对象\nvar getInstance = (function() {\n    var instance = null;\n    return function(name) {\n        if(!instance) {\n            instance = new Singleton(name);\n        }\n        return instance;\n    }\n})();\n// 测试单体模式的实例\nvar a = getInstance(\"aa\");\nvar b = getInstance(\"bb\");\n```\n// 因为单体模式是只实例化一次，所以下面的实例是相等的\n```js\nconsole.log(a === b); // true\n\nconsole.log(a.getName());// aa\n\nconsole.log(b.getName());// aa\n```\n# 理解使用代理实现单列模式的好处\n    比如我现在页面上需要创建一个div的元素，那么我们肯定需要有一个创建div的函数，而现在我只需要这个函数只负责创建div元素，其他的它不想管，也就是想实现单一职责原则，就好比淘宝的kissy一样，一开始的时候他们定义kissy只做一件事，并且把这件事做好，具体的单体模式中的实例化类的事情交给代理函数去处理，这样做的好处是具体的业务逻辑分开了，代理只管代理的业务逻辑，在这里代理的作用是实例化对象，并且只实例化一次; 创建div代码只管创建div，其他的不管；如下代码：\n\n```js\n// 单体模式\nvar CreateDiv = function(html) {\n    this.html = html;\n    this.init();\n}\nCreateDiv.prototype.init = function(){\n    var div = document.createElement(\"div\");\n    div.innerHTML = this.html;\n    document.body.appendChild(div);\n};\n// 代理实现单体模式\nvar ProxyMode = (function(){\n    var instance;\n    return function(html) {\n        if(!instance) {\n            instance = new CreateDiv(\"我来测试下\");\n        }\n        return instance;\n    }\n})();\nvar a = new ProxyMode(\"aaa\");\nvar b = new ProxyMode(\"bbb\");\nconsole.log(a===b);// true\n```\n# 理解使用单体模式来实现弹窗的基本原理\n\n下面我们继续来使用单体模式来实现一个弹窗的demo；我们先不讨论使用单体模式来实现，我们想下我们平时是怎么编写代码来实现弹窗效果的; 比如我们有一个弹窗，默认的情况下肯定是隐藏的，当我点击的时候，它需要显示出来；如下编写代码：\n\n```js\n// 实现弹窗\nvar createWindow = function(){\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"我是弹窗内容\";\n    div.style.display = 'none';\n    document.body.appendChild('div');\n    return div;\n};\ndocument.getElementById(\"Id\").onclick = function(){\n    // 点击后先创建一个div元素\n    var win = createWindow();\n    win.style.display = \"block\";\n}\n```\n如上的代码；大家可以看看，有明显的缺点，比如我点击一个元素需要创建一个div，我点击第二个元素又会创建一次div，我们频繁的点击某某元素，他们会频繁的创建div的元素，虽然当我们点击关闭的时候可以移除弹出代码，但是呢我们频繁的创建和删除并不好，特别对于性能会有很大的影响，对DOM频繁的操作会引起重绘等，从而影响性能；因此这是非常不好的习惯；我们现在可以使用单体模式来实现弹窗效果，我们只实例化一次就可以了；如下代码：\n\n```js\n// 实现单体模式弹窗\nvar createWindow = (function(){\n    var div;\n    return function(){\n        if(!div) {\n            div = document.createElement(\"div\");\n            div.innerHTML = \"我是弹窗内容\";\n            div.style.display = 'none';\n            document.body.appendChild(div);\n        }\n        return div;\n    }\n})();\ndocument.getElementById(\"Id\").onclick = function(){\n    // 点击后先创建一个div元素\n    var win = createWindow();\n    win.style.display = \"block\";\n}\n```\n# 理解编写通用的单体模式\n\n上面的弹窗的代码虽然完成了使用单体模式创建弹窗效果，但是代码并不通用，比如上面是完成弹窗的代码，假如我们以后需要在页面中一个iframe呢？我们是不是需要重新写一套创建iframe的代码呢？比如如下创建iframe：\n\n```js\nvar createIframe = (function(){\n    var iframe;\n    return function(){\n        if(!iframe) {\n            iframe = document.createElement(\"iframe\");\n            iframe.style.display = 'none';\n            document.body.appendChild(iframe);\n        }\n        return iframe;\n    };\n})();\n```\n我们看到如上代码，创建div的代码和创建iframe代码很类似，我们现在可以考虑把通用的代码分离出来，使代码变成完全抽象，我们现在可以编写一套代码封装在getInstance函数内，如下代码：\n\n```js\nvar getInstance = function(fn) {\n    var result;\n    return function(){\n        return result || (result = fn.call(this,arguments));\n    }\n};\n```\n如上代码：我们使用一个参数fn传递进去，如果有result这个实例的话，直接返回，否则的话，当前的getInstance函数调用fn这个函数，是this指针指向与这个fn这个函数；之后返回被保存在result里面；现在我们可以传递一个函数进去，不管他是创建div也好，还是创建iframe也好，总之如果是这种的话，都可以使用getInstance来获取他们的实例对象；\n\n如下测试创建iframe和创建div的代码如下：\n\n```js\n// 创建div\nvar createWindow = function(){\n    var div = document.createElement(\"div\");\n    div.innerHTML = \"我是弹窗内容\";\n    div.style.display = 'none';\n    document.body.appendChild(div);\n    return div;\n};\n// 创建iframe\nvar createIframe = function(){\n    var iframe = document.createElement(\"iframe\");\n    document.body.appendChild(iframe);\n    return iframe;\n};\n// 获取实例的封装代码\nvar getInstance = function(fn) {\n    var result;\n    return function(){\n        return result || (result = fn.call(this,arguments));\n    }\n};\n// 测试创建div\nvar createSingleDiv = getInstance(createWindow);\ndocument.getElementById(\"Id\").onclick = function(){\n    var win = createSingleDiv();\n    win.style.display = \"block\";\n};\n// 测试创建iframe\nvar createSingleIframe = getInstance(createIframe);\ndocument.getElementById(\"Id\").onclick = function(){\n    var win = createSingleIframe();\n    win.src = \"http://cnblogs.com\";\n};\n```",
				"html": "<p>  单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。<br><a id=\"more\"></a><br>单体模式的优点是：</p>\n<p>-可以用来划分命名空间，减少全局变量的数量。<br>-使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。<br>-可以被实例化，且实例化一次。<br>什么是单体模式？单体模式是一个用来划分命名空间并将一批属性和方法组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。</p>\n<p>但是并非所有的对象字面量都是单体，比如说模拟数组或容纳数据的话，那么它就不是单体，但是如果是组织一批相关的属性和方法在一起的话，那么它有可能是单体模式，所以这需要看开发者编写代码的意图；</p>\n<p>下面我们来看看定义一个对象字面量(结构类似于单体模式)的基本结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> Singleton = &#123;</div><div class=\"line\">    <span class=\"attr\">attr1</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">attr2</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">method1</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.attr1;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">method2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.attr2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如上面只是简单的字面量结构，上面的所有成员变量都是通过Singleton来访问的，但是它并不是单体模式；因为单体模式还有一个更重要的特点，就是可以仅被实例化一次，上面的只是不能被实例化的一个类，因此不是单体模式；对象字面量是用来创建单体模式的方法之一；</p>\n<p>使用单体模式的结构如下demo</p>\n<p>我们明白的是单体模式如果有实例化的话，那么只实例化一次，要实现一个单体模式的话，我们无非就是使用一个变量来标识该类是否被实例化，如果未被实例化的话，那么我们可以实例化一次，否则的话，直接返回已经被实例化的对象。</p>\n<p>如下代码是单体模式的基本结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单体模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> Singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.instance = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Singleton.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 获取实例对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.instance) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> Singleton(name);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 测试单体模式的实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = getInstance(<span class=\"string\">\"aa\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = getInstance(<span class=\"string\">\"bb\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 因为单体模式是只实例化一次，所以下面的实例是相等的</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>由于单体模式只实例化一次，因此第一次调用，返回的是a实例对象，当我们继续调用的时候，b的实例就是a的实例，因此下面都是打印的是aa；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(a.getName());<span class=\"comment\">// aa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.getName());<span class=\"comment\">// aa</span></div></pre></td></tr></table></figure></p>\n<p>上面的封装单体模式也可以改成如下结构写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单体模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> Singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\">Singleton.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 获取实例对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> getInstance = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> instance = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!instance) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton(name);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"comment\">// 测试单体模式的实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = getInstance(<span class=\"string\">\"aa\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = getInstance(<span class=\"string\">\"bb\"</span>);</div></pre></td></tr></table></figure>\n<p>// 因为单体模式是只实例化一次，所以下面的实例是相等的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.getName());<span class=\"comment\">// aa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.getName());<span class=\"comment\">// aa</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"理解使用代理实现单列模式的好处\"><a href=\"#理解使用代理实现单列模式的好处\" class=\"headerlink\" title=\"理解使用代理实现单列模式的好处\"></a>理解使用代理实现单列模式的好处</h1><pre><code>比如我现在页面上需要创建一个div的元素，那么我们肯定需要有一个创建div的函数，而现在我只需要这个函数只负责创建div元素，其他的它不想管，也就是想实现单一职责原则，就好比淘宝的kissy一样，一开始的时候他们定义kissy只做一件事，并且把这件事做好，具体的单体模式中的实例化类的事情交给代理函数去处理，这样做的好处是具体的业务逻辑分开了，代理只管代理的业务逻辑，在这里代理的作用是实例化对象，并且只实例化一次; 创建div代码只管创建div，其他的不管；如下代码：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单体模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> CreateDiv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.html = html;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init();</div><div class=\"line\">&#125;</div><div class=\"line\">CreateDiv.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">    div.innerHTML = <span class=\"keyword\">this</span>.html;</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 代理实现单体模式</span></div><div class=\"line\"><span class=\"keyword\">var</span> ProxyMode = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> instance;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!instance) &#123;</div><div class=\"line\">            instance = <span class=\"keyword\">new</span> CreateDiv(<span class=\"string\">\"我来测试下\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ProxyMode(<span class=\"string\">\"aaa\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> ProxyMode(<span class=\"string\">\"bbb\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a===b);<span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<h1 id=\"理解使用单体模式来实现弹窗的基本原理\"><a href=\"#理解使用单体模式来实现弹窗的基本原理\" class=\"headerlink\" title=\"理解使用单体模式来实现弹窗的基本原理\"></a>理解使用单体模式来实现弹窗的基本原理</h1><p>下面我们继续来使用单体模式来实现一个弹窗的demo；我们先不讨论使用单体模式来实现，我们想下我们平时是怎么编写代码来实现弹窗效果的; 比如我们有一个弹窗，默认的情况下肯定是隐藏的，当我点击的时候，它需要显示出来；如下编写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现弹窗</span></div><div class=\"line\"><span class=\"keyword\">var</span> createWindow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">    div.innerHTML = <span class=\"string\">\"我是弹窗内容\"</span>;</div><div class=\"line\">    div.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(<span class=\"string\">'div'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> div;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"Id\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 点击后先创建一个div元素</span></div><div class=\"line\">    <span class=\"keyword\">var</span> win = createWindow();</div><div class=\"line\">    win.style.display = <span class=\"string\">\"block\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上的代码；大家可以看看，有明显的缺点，比如我点击一个元素需要创建一个div，我点击第二个元素又会创建一次div，我们频繁的点击某某元素，他们会频繁的创建div的元素，虽然当我们点击关闭的时候可以移除弹出代码，但是呢我们频繁的创建和删除并不好，特别对于性能会有很大的影响，对DOM频繁的操作会引起重绘等，从而影响性能；因此这是非常不好的习惯；我们现在可以使用单体模式来实现弹窗效果，我们只实例化一次就可以了；如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现单体模式弹窗</span></div><div class=\"line\"><span class=\"keyword\">var</span> createWindow = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!div) &#123;</div><div class=\"line\">            div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">            div.innerHTML = <span class=\"string\">\"我是弹窗内容\"</span>;</div><div class=\"line\">            div.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(div);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> div;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"Id\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 点击后先创建一个div元素</span></div><div class=\"line\">    <span class=\"keyword\">var</span> win = createWindow();</div><div class=\"line\">    win.style.display = <span class=\"string\">\"block\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"理解编写通用的单体模式\"><a href=\"#理解编写通用的单体模式\" class=\"headerlink\" title=\"理解编写通用的单体模式\"></a>理解编写通用的单体模式</h1><p>上面的弹窗的代码虽然完成了使用单体模式创建弹窗效果，但是代码并不通用，比如上面是完成弹窗的代码，假如我们以后需要在页面中一个iframe呢？我们是不是需要重新写一套创建iframe的代码呢？比如如下创建iframe：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> createIframe = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> iframe;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!iframe) &#123;</div><div class=\"line\">            iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</div><div class=\"line\">            iframe.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(iframe);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> iframe;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>我们看到如上代码，创建div的代码和创建iframe代码很类似，我们现在可以考虑把通用的代码分离出来，使代码变成完全抽象，我们现在可以编写一套代码封装在getInstance函数内，如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getInstance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result || (result = fn.call(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如上代码：我们使用一个参数fn传递进去，如果有result这个实例的话，直接返回，否则的话，当前的getInstance函数调用fn这个函数，是this指针指向与这个fn这个函数；之后返回被保存在result里面；现在我们可以传递一个函数进去，不管他是创建div也好，还是创建iframe也好，总之如果是这种的话，都可以使用getInstance来获取他们的实例对象；</p>\n<p>如下测试创建iframe和创建div的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建div</span></div><div class=\"line\"><span class=\"keyword\">var</span> createWindow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">    div.innerHTML = <span class=\"string\">\"我是弹窗内容\"</span>;</div><div class=\"line\">    div.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</div><div class=\"line\">    <span class=\"keyword\">return</span> div;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 创建iframe</span></div><div class=\"line\"><span class=\"keyword\">var</span> createIframe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(iframe);</div><div class=\"line\">    <span class=\"keyword\">return</span> iframe;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 获取实例的封装代码</span></div><div class=\"line\"><span class=\"keyword\">var</span> getInstance = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result || (result = fn.call(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 测试创建div</span></div><div class=\"line\"><span class=\"keyword\">var</span> createSingleDiv = getInstance(createWindow);</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"Id\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> win = createSingleDiv();</div><div class=\"line\">    win.style.display = <span class=\"string\">\"block\"</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 测试创建iframe</span></div><div class=\"line\"><span class=\"keyword\">var</span> createSingleIframe = getInstance(createIframe);</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"Id\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> win = createSingleIframe();</div><div class=\"line\">    win.src = <span class=\"string\">\"http://cnblogs.com\"</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491544557714,
				"created_by": 2,
				"updated_at": 1491544559123,
				"updated_by": 2,
				"published_at": 1491544557714,
				"published_by": 2
			},
			{
				"id": "cj17g17hk0005akfclv2zkr55",
				"title": "js设计模式-工厂模式",
				"slug": "js-design-pattern-factory",
				"markdown": "\n   工厂模式类似于现实生活中的工厂可以产生大量相似的商品，去做同样的事情，实现同样的效果;这时候需要使用工厂模式。\n<!--more-->\n\n   简单的工厂模式可以理解为解决多个相似的问题;这也是她的优点;比如如下代码：\n\n```js\nfunction CreatePerson(name,age,sex) {\n    var obj = new Object();\n    obj.name = name;\n    obj.age = age;\n    obj.sex = sex;\n    obj.sayName = function(){\n        return this.name;\n    }\n    return obj;\n}\nvar p1 = new CreatePerson(\"longen\",'28','男');\nvar p2 = new CreatePerson(\"tugenhua\",'27','女');\nconsole.log(p1.name); // longen\nconsole.log(p1.age);  // 28\nconsole.log(p1.sex);  // 男\nconsole.log(p1.sayName()); // longen\n\nconsole.log(p2.name);  // tugenhua\nconsole.log(p2.age);   // 27\nconsole.log(p2.sex);   // 女\nconsole.log(p2.sayName()); // tugenhua\n\n// 返回都是object 无法识别对象的类型 不知道他们是哪个对象的实列\nconsole.log(typeof p1);  // object\nconsole.log(typeof p2);  // object\nconsole.log(p1 instanceof Object); // true\n```\n如上代码：函数CreatePerson能接受三个参数name,age,sex等参数，可以无数次调用这个函数，每次返回都会包含三个属性和一个方法的对象。\n\n工厂模式是为了解决多个类似对象声明的问题;也就是为了解决实列化对象产生重复的问题。\n\n优点：能解决多个相似的问题。\n\n缺点：不能知道对象识别的问题(对象的类型不知道)。\n\n复杂的工厂模式定义是：将其成员对象的实列化推迟到子类中，子类可以重写父类接口方法以便创建的时候指定自己的对象类型。\n\n 父类只对创建过程中的一般性问题进行处理，这些处理会被子类继承，子类之间是相互独立的，具体的业务逻辑会放在子类中进行编写。\n\n 父类就变成了一个抽象类，但是父类可以执行子类中相同类似的方法，具体的业务逻辑需要放在子类中去实现；比如我现在开几个自行车店，那么每个店都有几种型号的自行车出售。我们现在来使用工厂模式来编写这些代码;\n\n父类的构造函数如下：\n\n```js\n// 定义自行车的构造函数\nvar BicycleShop = function(){};\nBicycleShop.prototype = {\n    constructor: BicycleShop,\n    /*\n    * 买自行车这个方法\n    * @param {model} 自行车型号\n    */\n    sellBicycle: function(model){\n        var bicycle = this.createBicycle(mode);\n        // 执行A业务逻辑\n        bicycle.A();\n\n        // 执行B业务逻辑\n        bicycle.B();\n\n        return bicycle;\n    },\n    createBicycle: function(model){\n        throw new Error(\"父类是抽象类不能直接调用，需要子类重写该方法\");\n    }\n};\n```\n上面是定义一个自行车抽象类来编写工厂模式的实列，定义了createBicycle这个方法，但是如果直接实例化父类，调用父类中的这个createBicycle方法,会抛出一个error，因为父类是一个抽象类，他不能被实列化，只能通过子类来实现这个方法，实现自己的业务逻辑，下面我们来定义子类，我们学会如何使用工厂模式重新编写这个方法，首先我们需要继承父类中的成员，然后编写子类;如下代码：\n\n```js\n// 定义自行车的构造函数\nvar BicycleShop = function(name){\n    this.name = name;\n    this.method = function(){\n        return this.name;\n    }\n};\nBicycleShop.prototype = {\n    constructor: BicycleShop,\n    /*\n     * 买自行车这个方法\n     * @param {model} 自行车型号\n    */\n    sellBicycle: function(model){\n            var bicycle = this.createBicycle(model);\n            // 执行A业务逻辑\n            bicycle.A();\n\n            // 执行B业务逻辑\n            bicycle.B();\n\n            return bicycle;\n        },\n        createBicycle: function(model){\n            throw new Error(\"父类是抽象类不能直接调用，需要子类重写该方法\");\n        }\n    };\n    // 实现原型继承\n    function extend(Sub,Sup) {\n        //Sub表示子类，Sup表示超类\n        // 首先定义一个空函数\n        var F = function(){};\n\n        // 设置空函数的原型为超类的原型\n        F.prototype = Sup.prototype;\n\n        // 实例化空函数，并把超类原型引用传递给子类\n        Sub.prototype = new F();\n\n        // 重置子类原型的构造器为子类自身\n        Sub.prototype.constructor = Sub;\n\n        // 在子类中保存超类的原型,避免子类与超类耦合\n        Sub.sup = Sup.prototype;\n\n        if(Sup.prototype.constructor === Object.prototype.constructor) {\n            // 检测超类原型的构造器是否为原型自身\n            Sup.prototype.constructor = Sup;\n        }\n    }\n    var BicycleChild = function(name){\n        this.name = name;\n// 继承构造函数父类中的属性和方法\n        BicycleShop.call(this,name);\n    };\n    // 子类继承父类原型方法\n    extend(BicycleChild,BicycleShop);\n// BicycleChild 子类重写父类的方法\nBicycleChild.prototype.createBicycle = function(){\n    var A = function(){\n        console.log(\"执行A业务操作\");\n    };\n    var B = function(){\n        console.log(\"执行B业务操作\");\n    };\n    return {\n        A: A,\n        B: B\n    }\n}\nvar childClass = new BicycleChild(\"龙恩\");\nconsole.log(childClass);\n```\n实例化子类，然后打印出该实例, 如下截图所示：\n\n\n```js\nconsole.log(childClass.name);  // 龙恩\n\n// 下面是实例化后 执行父类中的sellBicycle这个方法后会依次调用父类中的A\n\n// 和B方法；A方法和B方法依次在子类中去编写具体的业务逻辑。\n\nchildClass.sellBicycle(\"mode\"); // 打印出  执行A业务操作和执行B业务操作\n```\n上面只是\"龙恩\"自行车这么一个型号的，如果需要生成其他型号的自行车的话，可以编写其他子类，工厂模式最重要的优点是：可以实现一些相同的方法，这些相同的方法我们可以放在父类中编写代码，那么需要实现具体的业务逻辑，那么可以放在子类中重写该父类的方法，去实现自己的业务逻辑；使用专业术语来讲的话有2点：第一：弱化对象间的耦合，防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。第二：重复性的代码可以放在父类去编写，子类继承于父类的所有成员属性和方法，子类只专注于实现自己的业务逻辑。",
				"html": "<p>   工厂模式类似于现实生活中的工厂可以产生大量相似的商品，去做同样的事情，实现同样的效果;这时候需要使用工厂模式。<br><a id=\"more\"></a></p>\n<p>   简单的工厂模式可以理解为解决多个相似的问题;这也是她的优点;比如如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age,sex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    obj.name = name;</div><div class=\"line\">    obj.age = age;</div><div class=\"line\">    obj.sex = sex;</div><div class=\"line\">    obj.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">\"longen\"</span>,<span class=\"string\">'28'</span>,<span class=\"string\">'男'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">\"tugenhua\"</span>,<span class=\"string\">'27'</span>,<span class=\"string\">'女'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1.name); <span class=\"comment\">// longen</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1.age);  <span class=\"comment\">// 28</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1.sex);  <span class=\"comment\">// 男</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayName()); <span class=\"comment\">// longen</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p2.name);  <span class=\"comment\">// tugenhua</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p2.age);   <span class=\"comment\">// 27</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p2.sex);   <span class=\"comment\">// 女</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p2.sayName()); <span class=\"comment\">// tugenhua</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回都是object 无法识别对象的类型 不知道他们是哪个对象的实列</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p1);  <span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p2);  <span class=\"comment\">// object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>如上代码：函数CreatePerson能接受三个参数name,age,sex等参数，可以无数次调用这个函数，每次返回都会包含三个属性和一个方法的对象。</p>\n<p>工厂模式是为了解决多个类似对象声明的问题;也就是为了解决实列化对象产生重复的问题。</p>\n<p>优点：能解决多个相似的问题。</p>\n<p>缺点：不能知道对象识别的问题(对象的类型不知道)。</p>\n<p>复杂的工厂模式定义是：将其成员对象的实列化推迟到子类中，子类可以重写父类接口方法以便创建的时候指定自己的对象类型。</p>\n<p> 父类只对创建过程中的一般性问题进行处理，这些处理会被子类继承，子类之间是相互独立的，具体的业务逻辑会放在子类中进行编写。</p>\n<p> 父类就变成了一个抽象类，但是父类可以执行子类中相同类似的方法，具体的业务逻辑需要放在子类中去实现；比如我现在开几个自行车店，那么每个店都有几种型号的自行车出售。我们现在来使用工厂模式来编写这些代码;</p>\n<p>父类的构造函数如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义自行车的构造函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> BicycleShop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">BicycleShop.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: BicycleShop,</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 买自行车这个方法</div><div class=\"line\">    * @param &#123;model&#125; 自行车型号</div><div class=\"line\">    */</div><div class=\"line\">    sellBicycle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">model</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> bicycle = <span class=\"keyword\">this</span>.createBicycle(mode);</div><div class=\"line\">        <span class=\"comment\">// 执行A业务逻辑</span></div><div class=\"line\">        bicycle.A();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 执行B业务逻辑</span></div><div class=\"line\">        bicycle.B();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> bicycle;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">createBicycle</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">model</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"父类是抽象类不能直接调用，需要子类重写该方法\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面是定义一个自行车抽象类来编写工厂模式的实列，定义了createBicycle这个方法，但是如果直接实例化父类，调用父类中的这个createBicycle方法,会抛出一个error，因为父类是一个抽象类，他不能被实列化，只能通过子类来实现这个方法，实现自己的业务逻辑，下面我们来定义子类，我们学会如何使用工厂模式重新编写这个方法，首先我们需要继承父类中的成员，然后编写子类;如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义自行车的构造函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> BicycleShop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.method = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">BicycleShop.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: BicycleShop,</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * 买自行车这个方法</div><div class=\"line\">     * @param &#123;model&#125; 自行车型号</div><div class=\"line\">    */</div><div class=\"line\">    sellBicycle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">model</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> bicycle = <span class=\"keyword\">this</span>.createBicycle(model);</div><div class=\"line\">            <span class=\"comment\">// 执行A业务逻辑</span></div><div class=\"line\">            bicycle.A();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 执行B业务逻辑</span></div><div class=\"line\">            bicycle.B();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> bicycle;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">createBicycle</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">model</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"父类是抽象类不能直接调用，需要子类重写该方法\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 实现原型继承</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Sub,Sup</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Sub表示子类，Sup表示超类</span></div><div class=\"line\">        <span class=\"comment\">// 首先定义一个空函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 设置空函数的原型为超类的原型</span></div><div class=\"line\">        F.prototype = Sup.prototype;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 实例化空函数，并把超类原型引用传递给子类</span></div><div class=\"line\">        Sub.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 重置子类原型的构造器为子类自身</span></div><div class=\"line\">        Sub.prototype.constructor = Sub;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 在子类中保存超类的原型,避免子类与超类耦合</span></div><div class=\"line\">        Sub.sup = Sup.prototype;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(Sup.prototype.constructor === <span class=\"built_in\">Object</span>.prototype.constructor) &#123;</div><div class=\"line\">            <span class=\"comment\">// 检测超类原型的构造器是否为原型自身</span></div><div class=\"line\">            Sup.prototype.constructor = Sup;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> BicycleChild = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\"><span class=\"comment\">// 继承构造函数父类中的属性和方法</span></div><div class=\"line\">        BicycleShop.call(<span class=\"keyword\">this</span>,name);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 子类继承父类原型方法</span></div><div class=\"line\">    extend(BicycleChild,BicycleShop);</div><div class=\"line\"><span class=\"comment\">// BicycleChild 子类重写父类的方法</span></div><div class=\"line\">BicycleChild.prototype.createBicycle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"执行A业务操作\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> B = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"执行B业务操作\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">A</span>: A,</div><div class=\"line\">        <span class=\"attr\">B</span>: B</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> childClass = <span class=\"keyword\">new</span> BicycleChild(<span class=\"string\">\"龙恩\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(childClass);</div></pre></td></tr></table></figure>\n<p>实例化子类，然后打印出该实例, 如下截图所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(childClass.name);  <span class=\"comment\">// 龙恩</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面是实例化后 执行父类中的sellBicycle这个方法后会依次调用父类中的A</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 和B方法；A方法和B方法依次在子类中去编写具体的业务逻辑。</span></div><div class=\"line\"></div><div class=\"line\">childClass.sellBicycle(<span class=\"string\">\"mode\"</span>); <span class=\"comment\">// 打印出  执行A业务操作和执行B业务操作</span></div></pre></td></tr></table></figure>\n<p>上面只是”龙恩”自行车这么一个型号的，如果需要生成其他型号的自行车的话，可以编写其他子类，工厂模式最重要的优点是：可以实现一些相同的方法，这些相同的方法我们可以放在父类中编写代码，那么需要实现具体的业务逻辑，那么可以放在子类中重写该父类的方法，去实现自己的业务逻辑；使用专业术语来讲的话有2点：第一：弱化对象间的耦合，防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。第二：重复性的代码可以放在父类去编写，子类继承于父类的所有成员属性和方法，子类只专注于实现自己的业务逻辑。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491544332554,
				"created_by": 2,
				"updated_at": 1491544334358,
				"updated_by": 2,
				"published_at": 1491544332554,
				"published_by": 2
			},
			{
				"id": "cj0m8sfw20000w4fchwe2iyj3",
				"title": "测试框架 Mocha 实例教程",
				"slug": "test_mocha_should",
				"markdown": "Mocha（发音\"摩卡\"）诞生于2011年，是现在最流行的JavaScript测试框架之一，在浏览器和Node环境都可以使用。\n所谓\"测试框架\"，就是运行测试的工具。通过它，可以为JavaScript应用添加测试，从而保证代码的质量。\n\n<!--more-->\n# 安装\n\n```bash\n$ git clone https://github.com/ruanyf/mocha-demos.git\n```\n如果你的电脑没装Git，可以直接下载zip压缩包，进行解压。\n然后，进入mocha-demos目录，安装依赖（你的电脑必须有Node）。\n```bash\n$ cd mocha-demos\n$ npm install\n```\n上面代码会在目录内部安装Mocha，为了操作的方便，请在全面环境也安装一下Mocha。\n```bash\n$ npm install --global mocha\n```\n# 测试脚本的写法\nMocha的作用是运行测试脚本，首先必须学会写测试脚本。所谓\"测试脚本\"，就是用来测试源码的脚本。\n下面是一个加法模块add.js的代码。\n```js\n// add.js\nfunction add(x, y) {\n  return x + y;\n}\n\nmodule.exports = add;\n```\n要测试这个加法模块是否正确，就要写测试脚本。\n通常，测试脚本与所要测试的源码脚本同名，但是后缀名为.test.js（表示测试）或者.spec.js（表示规格）。比如，add.js的测试脚本名字就是add.test.js。\n```js\n// add.test.js\nvar add = require('./add.js');\nvar expect = require('chai').expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n```\n上面这段代码，就是测试脚本，它可以独立执行。测试脚本里面应该包括一个或多个describe块，每个describe块应该包括一个或多个it块。\ndescribe块称为\"测试套件\"（test suite），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（\"加法函数的测试\"），第二个参数是一个实际执行的函数。\nit块称为\"测试用例\"（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数是测试用例的名称（\"1 加 1 应该等于 2\"），第二个参数是一个实际执行的函数。\n# 断言库的用法\n上面的测试脚本里面，有一句断言。\n```js\nexpect(add(1, 1)).to.be.equal(2);\n```\n所谓\"断言\"，就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。上面这句断言的意思是，调用add(1, 1)，结果应该等于2。\n所有的测试用例（it块）都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能由断言库来实现，Mocha本身不带断言库，所以必须先引入断言库。\n```js\nvar expect = require('chai').expect;\n```\n断言库有很多种，Mocha并不限制使用哪一种。上面代码引入的断言库是chai，并且指定使用它的expect断言风格。\nexpect断言的优点是很接近自然语言，下面是一些例子。\n```js\n// 相等或不相等\nexpect(4 + 5).to.be.equal(9);\nexpect(4 + 5).to.be.not.equal(10);\nexpect(foo).to.be.deep.equal({ bar: 'baz' });\n\n// 布尔值为true\nexpect('everthing').to.be.ok;\nexpect(false).to.not.be.ok;\n\n// typeof\nexpect('test').to.be.a('string');\nexpect({ foo: 'bar' }).to.be.an('object');\nexpect(foo).to.be.an.instanceof(Foo);\n\n// include\nexpect([1,2,3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n\n// empty\nexpect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;\n\n// match\nexpect('foobar').to.match(/^foo/);\n```\n基本上，expect断言的写法都是一样的。头部是expect方法，尾部是断言方法，比如equal、a/an、ok、match等。两者之间使用to或to.be连接。\n如果expect断言不成立，就会抛出一个错误。事实上，只要不抛出错误，测试用例就算通过。\n```js\nit('1 加 1 应该等于 2', function() {});\n```\n上面的这个测试用例，内部没有任何代码，由于没有抛出了错误，所以还是会通过。\n# Mocha的基本用法\n有了测试脚本以后，就可以用Mocha运行它。请进入demo01子目录，执行下面的命令。\n```bash\n$ mocha add.test.js\n\n  加法函数的测试\n    ✓ 1 加 1 应该等于 2\n\n  1 passing (8ms)\n```\n上面的运行结果表示，测试脚本通过了测试，一共只有1个测试用例，耗时是8毫秒。\nmocha命令后面紧跟测试脚本的路径和文件名，可以指定多个测试脚本。\n```js\n$ mocha file1 file2 file3\n```\nMocha默认运行test子目录里面的测试脚本。所以，一般都会把测试脚本放在test目录里面，然后执行mocha就不需要参数了。请进入demo02子目录，运行下面的命令。\n```bash\n$ mocha\n\n  加法函数的测试\n    ✓ 1 加 1 应该等于 2\n    ✓ 任何数加0应该等于自身\n\n  2 passing (9ms)\n```\n这时可以看到，test子目录里面的测试脚本执行了。但是，你打开test子目录，会发现下面还有一个test/dir子目录，里面还有一个测试脚本multiply.test.js，并没有得到执行。原来，Mocha默认只执行test子目录下面第一层的测试用例，不会执行更下层的用例。\n为了改变这种行为，就必须加上--recursive参数，这时test子目录下面所有的测试用例----不管在哪一层----都会执行。\n```bash\n$ mocha --recursive\n\n  加法函数的测试\n    ✓ 1 加 1 应该等于 2\n    ✓ 任何数加0应该等于自身\n\n  乘法函数的测试\n    ✓ 1 乘 1 应该等于 1\n\n  3 passing (9ms)\n```\n# 通配符\n命令行指定测试脚本时，可以使用通配符，同时指定多个文件。\n```bash\n$ mocha spec/{my,awesome}.js\n$ mocha test/unit/*.js\n```\n上面的第一行命令，指定执行spec目录下面的my.js和awesome.js。第二行命令，指定执行test/unit目录下面的所有js文件。\n除了使用Shell通配符，还可以使用Node通配符。\n```bash\n$ mocha 'test/**/*.@(js|jsx)'\n```\n上面代码指定运行test目录下面任何子目录中、文件后缀名为js或jsx的测试脚本。注意，Node的通配符要放在单引号之中，否则星号（*）会先被Shell解释。\n上面这行Node通配符，如果改用Shell通配符，要写成下面这样。\n```bash\n$ mocha test/{,**/}*.{js,jsx}\n```\n# 命令行参数\n除了前面介绍的--recursive，Mocha还可以加上其他命令行参数。请在demo02子目录里面，运行下面的命令，查看效果。\n## --help, -h\n--help或-h参数，用来查看Mocha的所有命令行参数。\n```bash\n$ mocha --help\n```\n## --reporter, -R\n--reporter参数用来指定测试报告的格式，默认是spec格式。\n```bash\n$ mocha\n# 等同于\n$ mocha --reporter spec\n```\n除了spec格式，官方网站还提供了其他许多报告格式。\n```bash\n$ mocha --reporter tap\n```\n```bash\n1..2\nok 1 加法函数的测试 1 加 1 应该等于 2\nok 2 加法函数的测试 任何数加0应该等于自身\n# tests 2\n# pass 2\n# fail 0\n```\n上面是tap格式报告的显示结果。\n--reporters参数可以显示所有内置的报告格式。\n```bash\n$ mocha --reporters\n```\n使用mochawesome模块，可以生成漂亮的HTML格式的报告。\n\n```bash\n$ npm install --save-dev mochawesome\n$ ../node_modules/.bin/mocha --reporter mochawesome\n```\n上面代码中，mocha命令使用了项目内安装的版本，而不是全局安装的版本，因为mochawesome模块是安装在项目内的。\n然后，测试结果报告就在mochaawesome-reports子目录生成。\n## --growl, -G\n打开--growl参数，就会将测试结果在桌面显示。\n```bash\n$ mocha --growl\n```\n## --watch，-w\n--watch参数用来监视指定的测试脚本。只要测试脚本有变化，就会自动运行Mocha。\n```bash\n$ mocha --watch\n```\n上面命令执行以后，并不会退出。你可以另外打开一个终端窗口，修改test目录下面的测试脚本add.test.js，比如删除一个测试用例，一旦保存，Mocha就会再次自动运行。\n## --bail, -b\n--bail参数指定只要有一个测试用例没有通过，就停止执行后面的测试用例。这对持续集成很有用。\n```bash\n$ mocha --bail\n```\n## --grep, -g\n--grep参数用于搜索测试用例的名称（即it块的第一个参数），然后只执行匹配的测试用例。\n```bash\n$ mocha --grep \"1 加 1\"\n```\n上面代码只测试名称中包含\"1 加 1\"的测试用例。\n## --invert, -i\n--invert参数表示只运行不符合条件的测试脚本，必须与--grep参数配合使用。\n```bash\n$ mocha --grep \"1 加 1\" --invert\n```\n# 配置文件mocha.opts\nMocha允许在test目录下面，放置配置文件mocha.opts，把命令行参数写在里面。请先进入demo03目录，运行下面的命令。\n```bash\n$ mocha --recursive --reporter tap --growl\n```\n上面这个命令有三个参数--recursive、--reporter tap、--growl。\n然后，把这三个参数写入test目录下的mocha.opts文件。\n```bash\n--reporter tap\n--recursive\n--growl\n```\n然后，执行mocha就能取得与第一行命令一样的效果。\n```bash\n$ mocha\n```\n如果测试用例不是存放在test子目录，可以在mocha.opts写入以下内容。\n```bash\nserver-tests\n--recursive\n```\n上面代码指定运行server-tests目录及其子目录之中的测试脚本。\n# ES6测试\n如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入demo04目录，打开test/add.test.js文件，可以看到这个测试用例是用ES6写的。\n```js\nimport add from '../src/add.js';\nimport chai from 'chai';\n\nlet expect = chai.expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n```\nES6转码，需要安装Babel。\n```bash\n$ npm install babel-core babel-preset-es2015 --save-dev\n```\n然后，在项目目录下面，新建一个.babelrc配置文件。\n```json\n{\n  \"presets\": [ \"es2015\" ]\n}\n```\n最后，使用--compilers参数指定测试脚本的转码器。\n```bash\n$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n```\n上面代码中，--compilers参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用babel-core/register模块，处理一下.js文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。\n下面是另外一个例子，使用Mocha测试CoffeeScript脚本。测试之前，先将.coffee文件转成.js文件。\n```bash\n$ mocha --compilers coffee:coffee-script/register\n```\n注意，Babel默认不会对Iterator、Generator、Promise、Map、Set等全局对象，以及一些全局对象的方法（比如Object.assign）转码。如果你想要对这些对象转码，就要安装babel-polyfill。\n```bash\n$ npm install babel-polyfill --save\n```\n然后，在你的脚本头部加上一行。\n```js\nimport 'babel-polyfill'\n```\n# 异步测试\nMocha默认每个测试用例最多执行2000毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用-t或--timeout参数指定超时门槛。\n进入demo05子目录，打开测试脚本timeout.test.js。\n```js\nit('测试应该5000毫秒后结束', function(done) {\n  var x = true;\n  var f = function() {\n    x = false;\n    expect(x).to.be.not.ok;\n    done(); // 通知Mocha测试结束\n  };\n  setTimeout(f, 4000);\n});\n```\n上面的测试用例，需要4000毫秒之后，才有运行结果。所以，需要用-t或--timeout参数，改变默认的超时设置。\n```bash\n$ mocha -t 5000 timeout.test.js\n```\n上面命令将测试的超时时限指定为5000毫秒。\n另外，上面的测试用例里面，有一个done函数。it块执行的时候，传入一个done参数，当测试结束的时候，必须显式调用这个函数，告诉Mocha测试结束了。否则，Mocha就无法知道，测试是否结束，会一直等到超时报错。你可以把这行删除试试看。\nMocha默认会高亮显示超过75毫秒的测试用例，可以用-s或--slow调整这个参数。\n```bash\n$ mocha -t 5000 -s 1000 timeout.test.js\n```\n上面命令指定高亮显示耗时超过1000毫秒的测试用例。\n下面是另外一个异步测试的例子async.test.js。\n```js\nit('异步请求应该返回一个对象', function(done){\n  request\n    .get('https://api.github.com')\n    .end(function(err, res){\n      expect(res).to.be.an('object');\n      done();\n    });\n});\n```\n运行下面命令，可以看到这个测试会通过。\n```bash\n$ mocha -t 10000 async.test.js\n```\n另外，Mocha内置对Promise的支持，允许直接返回Promise，等到它的状态改变，再执行断言，而不用显式调用done方法。请看promise.test.js。\n```js\nit('异步请求应该返回一个对象', function() {\n  return fetch('https://api.github.com')\n    .then(function(res) {\n      return res.json();\n    }).then(function(json) {\n      expect(json).to.be.an('object');\n    });\n});\n```\n# 测试用例的钩子\nMocha在describe块之中，提供测试用例的四个钩子：before()、after()、beforeEach()和afterEach()。它们会在指定时间执行。\n```js\ndescribe('hooks', function() {\n\n  before(function() {\n    // 在本区块的所有测试用例之前执行\n  });\n\n  after(function() {\n    // 在本区块的所有测试用例之后执行\n  });\n\n  beforeEach(function() {\n    // 在本区块的每个测试用例之前执行\n  });\n\n  afterEach(function() {\n    // 在本区块的每个测试用例之后执行\n  });\n\n  // test cases\n});\n```\n进入demo06子目录，可以看到下面两个例子。首先是beforeEach的例子beforeEach.test.js。\n```js\n// beforeEach.test.js\ndescribe('beforeEach示例', function() {\n  var foo = false;\n\n  beforeEach(function() {\n    foo = true;\n  });\n\n  it('修改全局变量应该成功', function() {\n    expect(foo).to.be.equal(true);\n  });\n});\n```\n上面代码中，beforeEach会在it之前执行，所以会修改全局变量。\n另一个例子beforeEach-async.test.js则是演示，如何在beforeEach之中使用异步操作。\n```js\n// beforeEach-async.test.js\ndescribe('异步 beforeEach 示例', function() {\n  var foo = false;\n\n  beforeEach(function(done) {\n    setTimeout(function() {\n      foo = true;\n      done();\n    }, 50);\n  });\n\n  it('全局变量异步修改应该成功', function() {\n    expect(foo).to.be.equal(true);\n  });\n});\n```\n# 测试用例管理\n大型项目有很多测试用例。有时，我们希望只运行其中的几个，这时可以用only方法。describe块和it块都允许调用only方法，表示只运行某个测试套件或测试用例。\n进入demo07子目录，测试脚本test/add.test.js就使用了only。\n```js\nit.only('1 加 1 应该等于 2', function() {\n  expect(add(1, 1)).to.be.equal(2);\n});\n\nit('任何数加0应该等于自身', function() {\n  expect(add(1, 0)).to.be.equal(1);\n});\n```\n上面代码中，只有带有only方法的测试用例会运行。\n```bash\n$ mocha test/add.test.js\n\n  加法函数的测试\n    ✓ 1 加 1 应该等于 2\n\n  1 passing (10ms)\n```\n此外，还有skip方法，表示跳过指定的测试套件或测试用例。\n```js\nit.skip('任何数加0应该等于自身', function() {\n  expect(add(1, 0)).to.be.equal(1);\n});\n```\n上面代码的这个测试用例不会执行。\n# 浏览器测试\n除了在命令行运行，Mocha还可以在浏览器运行。\n\n首先，使用mocha init命令在指定目录生成初始化文件。\n```bash\n$ mocha init demo08\n```\n运行上面命令，就会在demo08目录下生成index.html文件，以及配套的脚本和样式表。\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Unit.js tests in the browser with Mocha</h1>\n    <div id=\"mocha\"></div>\n    <script src=\"mocha.js\"></script>\n    <script>\n      mocha.setup('bdd');\n    </script>\n    <script src=\"tests.js\"></script>\n    <script>\n      mocha.run();\n    </script>\n  </body>\n</html>\n```\n然后，新建一个源码文件add.js。\n```js\n// add.js\nfunction add(x, y) {\n  return x + y;\n}\n```\n然后，把这个文件，以及断言库chai.js，加入index.html。\n```html\n<script>\n  mocha.setup('bdd');\n</script>\n<script src=\"add.js\"></script>\n<script src=\"http://chaijs.com/chai.js\"></script>\n<script src=\"tests.js\"></script>\n<script>\n  mocha.run();\n</script>\n```\n最后，在tests.js里面写入测试脚本。\n```js\nvar expect = chai.expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n\n  it('任何数加0等于自身', function() {\n    expect(add(1, 0)).to.be.equal(1);\n    expect(add(0, 0)).to.be.equal(0);\n  });\n});\n```\n现在，在浏览器里面打开index.html，就可以看到测试脚本的运行结果。\n# 生成规格文件\nMocha支持从测试用例生成规格文件。\n\n进入demo09子目录，运行下面的命令。\n```bash\n$ mocha --recursive -R markdown > spec.md\n```\n上面命令根据test目录的所有测试脚本，生成一个规格文件spec.md。-R markdown参数指定规格报告是markdown格式。\n如果想生成HTML格式的报告spec.html，使用下面的命令。\n```bash\n$ mocha --recursive -R doc > spec.html\n```",
				"html": "<p>Mocha（发音”摩卡”）诞生于2011年，是现在最流行的JavaScript测试框架之一，在浏览器和Node环境都可以使用。<br>所谓”测试框架”，就是运行测试的工具。通过它，可以为JavaScript应用添加测试，从而保证代码的质量。</p>\n<a id=\"more\"></a>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ruanyf/mocha-demos.git</div></pre></td></tr></table></figure>\n<p>如果你的电脑没装Git，可以直接下载zip压缩包，进行解压。<br>然后，进入mocha-demos目录，安装依赖（你的电脑必须有Node）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> mocha-demos</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>上面代码会在目录内部安装Mocha，为了操作的方便，请在全面环境也安装一下Mocha。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --global mocha</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试脚本的写法\"><a href=\"#测试脚本的写法\" class=\"headerlink\" title=\"测试脚本的写法\"></a>测试脚本的写法</h1><p>Mocha的作用是运行测试脚本，首先必须学会写测试脚本。所谓”测试脚本”，就是用来测试源码的脚本。<br>下面是一个加法模块add.js的代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// add.js</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = add;</div></pre></td></tr></table></figure></p>\n<p>要测试这个加法模块是否正确，就要写测试脚本。<br>通常，测试脚本与所要测试的源码脚本同名，但是后缀名为.test.js（表示测试）或者.spec.js（表示规格）。比如，add.js的测试脚本名字就是add.test.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// add.test.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'./add.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>).expect;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面这段代码，就是测试脚本，它可以独立执行。测试脚本里面应该包括一个或多个describe块，每个describe块应该包括一个或多个it块。<br>describe块称为”测试套件”（test suite），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（”加法函数的测试”），第二个参数是一个实际执行的函数。<br>it块称为”测试用例”（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数是测试用例的名称（”1 加 1 应该等于 2”），第二个参数是一个实际执行的函数。</p>\n<h1 id=\"断言库的用法\"><a href=\"#断言库的用法\" class=\"headerlink\" title=\"断言库的用法\"></a>断言库的用法</h1><p>上面的测试脚本里面，有一句断言。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>所谓”断言”，就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。上面这句断言的意思是，调用add(1, 1)，结果应该等于2。<br>所有的测试用例（it块）都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能由断言库来实现，Mocha本身不带断言库，所以必须先引入断言库。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>).expect;</div></pre></td></tr></table></figure></p>\n<p>断言库有很多种，Mocha并不限制使用哪一种。上面代码引入的断言库是chai，并且指定使用它的expect断言风格。<br>expect断言的优点是很接近自然语言，下面是一些例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 相等或不相等</span></div><div class=\"line\">expect(<span class=\"number\">4</span> + <span class=\"number\">5</span>).to.be.equal(<span class=\"number\">9</span>);</div><div class=\"line\">expect(<span class=\"number\">4</span> + <span class=\"number\">5</span>).to.be.not.equal(<span class=\"number\">10</span>);</div><div class=\"line\">expect(foo).to.be.deep.equal(&#123; <span class=\"attr\">bar</span>: <span class=\"string\">'baz'</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 布尔值为true</span></div><div class=\"line\">expect(<span class=\"string\">'everthing'</span>).to.be.ok;</div><div class=\"line\">expect(<span class=\"literal\">false</span>).to.not.be.ok;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// typeof</span></div><div class=\"line\">expect(<span class=\"string\">'test'</span>).to.be.a(<span class=\"string\">'string'</span>);</div><div class=\"line\">expect(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;).to.be.an(<span class=\"string\">'object'</span>);</div><div class=\"line\">expect(foo).to.be.an.instanceof(Foo);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// include</span></div><div class=\"line\">expect([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]).to.include(<span class=\"number\">2</span>);</div><div class=\"line\">expect(<span class=\"string\">'foobar'</span>).to.contain(<span class=\"string\">'foo'</span>);</div><div class=\"line\">expect(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">hello</span>: <span class=\"string\">'universe'</span> &#125;).to.include.keys(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// empty</span></div><div class=\"line\">expect([]).to.be.empty;</div><div class=\"line\">expect(<span class=\"string\">''</span>).to.be.empty;</div><div class=\"line\">expect(&#123;&#125;).to.be.empty;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// match</span></div><div class=\"line\">expect(<span class=\"string\">'foobar'</span>).to.match(<span class=\"regexp\">/^foo/</span>);</div></pre></td></tr></table></figure></p>\n<p>基本上，expect断言的写法都是一样的。头部是expect方法，尾部是断言方法，比如equal、a/an、ok、match等。两者之间使用to或to.be连接。<br>如果expect断言不成立，就会抛出一个错误。事实上，只要不抛出错误，测试用例就算通过。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的这个测试用例，内部没有任何代码，由于没有抛出了错误，所以还是会通过。</p>\n<h1 id=\"Mocha的基本用法\"><a href=\"#Mocha的基本用法\" class=\"headerlink\" title=\"Mocha的基本用法\"></a>Mocha的基本用法</h1><p>有了测试脚本以后，就可以用Mocha运行它。请进入demo01子目录，执行下面的命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha add.test.js</div><div class=\"line\"></div><div class=\"line\">  加法函数的测试</div><div class=\"line\">    ✓ 1 加 1 应该等于 2</div><div class=\"line\"></div><div class=\"line\">  1 passing (8ms)</div></pre></td></tr></table></figure></p>\n<p>上面的运行结果表示，测试脚本通过了测试，一共只有1个测试用例，耗时是8毫秒。<br>mocha命令后面紧跟测试脚本的路径和文件名，可以指定多个测试脚本。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha file1 file2 file3</div></pre></td></tr></table></figure></p>\n<p>Mocha默认运行test子目录里面的测试脚本。所以，一般都会把测试脚本放在test目录里面，然后执行mocha就不需要参数了。请进入demo02子目录，运行下面的命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha</div><div class=\"line\"></div><div class=\"line\">  加法函数的测试</div><div class=\"line\">    ✓ 1 加 1 应该等于 2</div><div class=\"line\">    ✓ 任何数加0应该等于自身</div><div class=\"line\"></div><div class=\"line\">  2 passing (9ms)</div></pre></td></tr></table></figure></p>\n<p>这时可以看到，test子目录里面的测试脚本执行了。但是，你打开test子目录，会发现下面还有一个test/dir子目录，里面还有一个测试脚本multiply.test.js，并没有得到执行。原来，Mocha默认只执行test子目录下面第一层的测试用例，不会执行更下层的用例。<br>为了改变这种行为，就必须加上–recursive参数，这时test子目录下面所有的测试用例—-不管在哪一层—-都会执行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --recursive</div><div class=\"line\"></div><div class=\"line\">  加法函数的测试</div><div class=\"line\">    ✓ 1 加 1 应该等于 2</div><div class=\"line\">    ✓ 任何数加0应该等于自身</div><div class=\"line\"></div><div class=\"line\">  乘法函数的测试</div><div class=\"line\">    ✓ 1 乘 1 应该等于 1</div><div class=\"line\"></div><div class=\"line\">  3 passing (9ms)</div></pre></td></tr></table></figure></p>\n<h1 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h1><p>命令行指定测试脚本时，可以使用通配符，同时指定多个文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha spec/&#123;my,awesome&#125;.js</div><div class=\"line\">$ mocha <span class=\"built_in\">test</span>/unit/*.js</div></pre></td></tr></table></figure></p>\n<p>上面的第一行命令，指定执行spec目录下面的my.js和awesome.js。第二行命令，指定执行test/unit目录下面的所有js文件。<br>除了使用Shell通配符，还可以使用Node通配符。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha <span class=\"string\">'test/**/*.@(js|jsx)'</span></div></pre></td></tr></table></figure></p>\n<p>上面代码指定运行test目录下面任何子目录中、文件后缀名为js或jsx的测试脚本。注意，Node的通配符要放在单引号之中，否则星号（*）会先被Shell解释。<br>上面这行Node通配符，如果改用Shell通配符，要写成下面这样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha <span class=\"built_in\">test</span>/&#123;,**/&#125;*.&#123;js,jsx&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h1><p>除了前面介绍的–recursive，Mocha还可以加上其他命令行参数。请在demo02子目录里面，运行下面的命令，查看效果。</p>\n<h2 id=\"–help-h\"><a href=\"#–help-h\" class=\"headerlink\" title=\"–help, -h\"></a>–help, -h</h2><p>–help或-h参数，用来查看Mocha的所有命令行参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --help</div></pre></td></tr></table></figure></p>\n<h2 id=\"–reporter-R\"><a href=\"#–reporter-R\" class=\"headerlink\" title=\"–reporter, -R\"></a>–reporter, -R</h2><p>–reporter参数用来指定测试报告的格式，默认是spec格式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha</div><div class=\"line\"><span class=\"comment\"># 等同于</span></div><div class=\"line\">$ mocha --reporter spec</div></pre></td></tr></table></figure></p>\n<p>除了spec格式，官方网站还提供了其他许多报告格式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --reporter tap</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">1..2</div><div class=\"line\">ok 1 加法函数的测试 1 加 1 应该等于 2</div><div class=\"line\">ok 2 加法函数的测试 任何数加0应该等于自身</div><div class=\"line\"><span class=\"comment\"># tests 2</span></div><div class=\"line\"><span class=\"comment\"># pass 2</span></div><div class=\"line\"><span class=\"comment\"># fail 0</span></div></pre></td></tr></table></figure>\n<p>上面是tap格式报告的显示结果。<br>–reporters参数可以显示所有内置的报告格式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --reporters</div></pre></td></tr></table></figure></p>\n<p>使用mochawesome模块，可以生成漂亮的HTML格式的报告。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save-dev mochawesome</div><div class=\"line\">$ ../node_modules/.bin/mocha --reporter mochawesome</div></pre></td></tr></table></figure>\n<p>上面代码中，mocha命令使用了项目内安装的版本，而不是全局安装的版本，因为mochawesome模块是安装在项目内的。<br>然后，测试结果报告就在mochaawesome-reports子目录生成。</p>\n<h2 id=\"–growl-G\"><a href=\"#–growl-G\" class=\"headerlink\" title=\"–growl, -G\"></a>–growl, -G</h2><p>打开–growl参数，就会将测试结果在桌面显示。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --growl</div></pre></td></tr></table></figure></p>\n<h2 id=\"–watch，-w\"><a href=\"#–watch，-w\" class=\"headerlink\" title=\"–watch，-w\"></a>–watch，-w</h2><p>–watch参数用来监视指定的测试脚本。只要测试脚本有变化，就会自动运行Mocha。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --watch</div></pre></td></tr></table></figure></p>\n<p>上面命令执行以后，并不会退出。你可以另外打开一个终端窗口，修改test目录下面的测试脚本add.test.js，比如删除一个测试用例，一旦保存，Mocha就会再次自动运行。</p>\n<h2 id=\"–bail-b\"><a href=\"#–bail-b\" class=\"headerlink\" title=\"–bail, -b\"></a>–bail, -b</h2><p>–bail参数指定只要有一个测试用例没有通过，就停止执行后面的测试用例。这对持续集成很有用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --bail</div></pre></td></tr></table></figure></p>\n<h2 id=\"–grep-g\"><a href=\"#–grep-g\" class=\"headerlink\" title=\"–grep, -g\"></a>–grep, -g</h2><p>–grep参数用于搜索测试用例的名称（即it块的第一个参数），然后只执行匹配的测试用例。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --grep <span class=\"string\">\"1 加 1\"</span></div></pre></td></tr></table></figure></p>\n<p>上面代码只测试名称中包含”1 加 1”的测试用例。</p>\n<h2 id=\"–invert-i\"><a href=\"#–invert-i\" class=\"headerlink\" title=\"–invert, -i\"></a>–invert, -i</h2><p>–invert参数表示只运行不符合条件的测试脚本，必须与–grep参数配合使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --grep <span class=\"string\">\"1 加 1\"</span> --invert</div></pre></td></tr></table></figure></p>\n<h1 id=\"配置文件mocha-opts\"><a href=\"#配置文件mocha-opts\" class=\"headerlink\" title=\"配置文件mocha.opts\"></a>配置文件mocha.opts</h1><p>Mocha允许在test目录下面，放置配置文件mocha.opts，把命令行参数写在里面。请先进入demo03目录，运行下面的命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --recursive --reporter tap --growl</div></pre></td></tr></table></figure></p>\n<p>上面这个命令有三个参数–recursive、–reporter tap、–growl。<br>然后，把这三个参数写入test目录下的mocha.opts文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">--reporter tap</div><div class=\"line\">--recursive</div><div class=\"line\">--growl</div></pre></td></tr></table></figure></p>\n<p>然后，执行mocha就能取得与第一行命令一样的效果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha</div></pre></td></tr></table></figure></p>\n<p>如果测试用例不是存放在test子目录，可以在mocha.opts写入以下内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server-tests</div><div class=\"line\">--recursive</div></pre></td></tr></table></figure></p>\n<p>上面代码指定运行server-tests目录及其子目录之中的测试脚本。</p>\n<h1 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h1><p>如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入demo04目录，打开test/add.test.js文件，可以看到这个测试用例是用ES6写的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> add <span class=\"keyword\">from</span> <span class=\"string\">'../src/add.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> expect = chai.expect;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>ES6转码，需要安装Babel。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install babel-core babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure></p>\n<p>然后，在项目目录下面，新建一个.babelrc配置文件。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [ <span class=\"string\">\"es2015\"</span> ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后，使用–compilers参数指定测试脚本的转码器。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register</div></pre></td></tr></table></figure></p>\n<p>上面代码中，–compilers参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用babel-core/register模块，处理一下.js文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。<br>下面是另外一个例子，使用Mocha测试CoffeeScript脚本。测试之前，先将.coffee文件转成.js文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --compilers coffee:coffee-script/register</div></pre></td></tr></table></figure></p>\n<p>注意，Babel默认不会对Iterator、Generator、Promise、Map、Set等全局对象，以及一些全局对象的方法（比如Object.assign）转码。如果你想要对这些对象转码，就要安装babel-polyfill。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install babel-polyfill --save</div></pre></td></tr></table></figure></p>\n<p>然后，在你的脚本头部加上一行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"异步测试\"><a href=\"#异步测试\" class=\"headerlink\" title=\"异步测试\"></a>异步测试</h1><p>Mocha默认每个测试用例最多执行2000毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用-t或–timeout参数指定超时门槛。<br>进入demo05子目录，打开测试脚本timeout.test.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'测试应该5000毫秒后结束'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    x = <span class=\"literal\">false</span>;</div><div class=\"line\">    expect(x).to.be.not.ok;</div><div class=\"line\">    done(); <span class=\"comment\">// 通知Mocha测试结束</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">  setTimeout(f, <span class=\"number\">4000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的测试用例，需要4000毫秒之后，才有运行结果。所以，需要用-t或–timeout参数，改变默认的超时设置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha -t 5000 timeout.test.js</div></pre></td></tr></table></figure></p>\n<p>上面命令将测试的超时时限指定为5000毫秒。<br>另外，上面的测试用例里面，有一个done函数。it块执行的时候，传入一个done参数，当测试结束的时候，必须显式调用这个函数，告诉Mocha测试结束了。否则，Mocha就无法知道，测试是否结束，会一直等到超时报错。你可以把这行删除试试看。<br>Mocha默认会高亮显示超过75毫秒的测试用例，可以用-s或–slow调整这个参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha -t 5000 <span class=\"_\">-s</span> 1000 timeout.test.js</div></pre></td></tr></table></figure></p>\n<p>上面命令指定高亮显示耗时超过1000毫秒的测试用例。<br>下面是另外一个异步测试的例子async.test.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'异步请求应该返回一个对象'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">  request</div><div class=\"line\">    .get(<span class=\"string\">'https://api.github.com'</span>)</div><div class=\"line\">    .end(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>)</span>&#123;</div><div class=\"line\">      expect(res).to.be.an(<span class=\"string\">'object'</span>);</div><div class=\"line\">      done();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>运行下面命令，可以看到这个测试会通过。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha -t 10000 async.test.js</div></pre></td></tr></table></figure></p>\n<p>另外，Mocha内置对Promise的支持，允许直接返回Promise，等到它的状态改变，再执行断言，而不用显式调用done方法。请看promise.test.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'异步请求应该返回一个对象'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fetch(<span class=\"string\">'https://api.github.com'</span>)</div><div class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> res.json();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</div><div class=\"line\">      expect(json).to.be.an(<span class=\"string\">'object'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试用例的钩子\"><a href=\"#测试用例的钩子\" class=\"headerlink\" title=\"测试用例的钩子\"></a>测试用例的钩子</h1><p>Mocha在describe块之中，提供测试用例的四个钩子：before()、after()、beforeEach()和afterEach()。它们会在指定时间执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'hooks'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在本区块的所有测试用例之前执行</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在本区块的所有测试用例之后执行</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在本区块的每个测试用例之前执行</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  afterEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在本区块的每个测试用例之后执行</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// test cases</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>进入demo06子目录，可以看到下面两个例子。首先是beforeEach的例子beforeEach.test.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// beforeEach.test.js</span></div><div class=\"line\">describe(<span class=\"string\">'beforeEach示例'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    foo = <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'修改全局变量应该成功'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(foo).to.be.equal(<span class=\"literal\">true</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，beforeEach会在it之前执行，所以会修改全局变量。<br>另一个例子beforeEach-async.test.js则是演示，如何在beforeEach之中使用异步操作。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// beforeEach-async.test.js</span></div><div class=\"line\">describe(<span class=\"string\">'异步 beforeEach 示例'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      foo = <span class=\"literal\">true</span>;</div><div class=\"line\">      done();</div><div class=\"line\">    &#125;, <span class=\"number\">50</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'全局变量异步修改应该成功'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(foo).to.be.equal(<span class=\"literal\">true</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试用例管理\"><a href=\"#测试用例管理\" class=\"headerlink\" title=\"测试用例管理\"></a>测试用例管理</h1><p>大型项目有很多测试用例。有时，我们希望只运行其中的几个，这时可以用only方法。describe块和it块都允许调用only方法，表示只运行某个测试套件或测试用例。<br>进入demo07子目录，测试脚本test/add.test.js就使用了only。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it.only(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">it(<span class=\"string\">'任何数加0应该等于自身'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(add(<span class=\"number\">1</span>, <span class=\"number\">0</span>)).to.be.equal(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，只有带有only方法的测试用例会运行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha <span class=\"built_in\">test</span>/add.test.js</div><div class=\"line\"></div><div class=\"line\">  加法函数的测试</div><div class=\"line\">    ✓ 1 加 1 应该等于 2</div><div class=\"line\"></div><div class=\"line\">  1 passing (10ms)</div></pre></td></tr></table></figure></p>\n<p>此外，还有skip方法，表示跳过指定的测试套件或测试用例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">it.skip(<span class=\"string\">'任何数加0应该等于自身'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(add(<span class=\"number\">1</span>, <span class=\"number\">0</span>)).to.be.equal(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码的这个测试用例不会执行。</p>\n<h1 id=\"浏览器测试\"><a href=\"#浏览器测试\" class=\"headerlink\" title=\"浏览器测试\"></a>浏览器测试</h1><p>除了在命令行运行，Mocha还可以在浏览器运行。</p>\n<p>首先，使用mocha init命令在指定目录生成初始化文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha init demo08</div></pre></td></tr></table></figure></p>\n<p>运行上面命令，就会在demo08目录下生成index.html文件，以及配套的脚本和样式表。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Unit.js tests in the browser with Mocha<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mocha\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"mocha.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      mocha.setup(<span class=\"string\">'bdd'</span>);</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"tests.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      mocha.run();</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后，新建一个源码文件add.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// add.js</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后，把这个文件，以及断言库chai.js，加入index.html。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  mocha.setup(<span class=\"string\">'bdd'</span>);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"add.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://chaijs.com/chai.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"tests.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">  mocha.run();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>最后，在tests.js里面写入测试脚本。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> expect = chai.expect;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  it(<span class=\"string\">'任何数加0等于自身'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">0</span>)).to.be.equal(<span class=\"number\">1</span>);</div><div class=\"line\">    expect(add(<span class=\"number\">0</span>, <span class=\"number\">0</span>)).to.be.equal(<span class=\"number\">0</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>现在，在浏览器里面打开index.html，就可以看到测试脚本的运行结果。</p>\n<h1 id=\"生成规格文件\"><a href=\"#生成规格文件\" class=\"headerlink\" title=\"生成规格文件\"></a>生成规格文件</h1><p>Mocha支持从测试用例生成规格文件。</p>\n<p>进入demo09子目录，运行下面的命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --recursive -R markdown &gt; spec.md</div></pre></td></tr></table></figure></p>\n<p>上面命令根据test目录的所有测试脚本，生成一个规格文件spec.md。-R markdown参数指定规格报告是markdown格式。<br>如果想生成HTML格式的报告spec.html，使用下面的命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mocha --recursive -R doc &gt; spec.html</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1490264089833,
				"created_by": 2,
				"updated_at": 1490264091379,
				"updated_by": 2,
				"published_at": 1490264089833,
				"published_by": 2
			},
			{
				"id": "cj0iv4on2000058fcoeutxvnu",
				"title": "karma & jasmine自动化测试",
				"slug": "test_karma_jasmine",
				"markdown": "\n前端包管理工具\n\n代码重用和复用是快捷开发的一种重要方式，但是原始的代码模块散布于各个平台上，不好寻找，程序员对其进行有效管理也成为了一大难题。此时，依赖（包、插件、工具都可以称呼，本质是他人写好封装后的代码模块）管理工具应需而生。依赖管理工具使用简单的命令即可提供 依赖的查找、安装、卸载等操作，深受广大程序员喜爱。\n前端 Node.js 最为常用的依赖管理工具 是npm，npm 之于Node.js，就如 pip 之于 Python，gem 之于 Ruby，pear 之于 PHP , maven 之于Java 。\n\n<!--more-->\n\n# Karma 环境的搭建\n\n安装 karma (karma用于run自动化测试脚本)\n```bash\nnpm install karma --save-dev\n```\n安装karma-jasmine (jasmine用于编写单元测试用例)\n```bash\nnpm install karma-jasmine --save-dev\nnpm install jasmine-core --save-dev\n```\n安装karma-chrome-launcher(用于启动chrome浏览器;如果是firefox可以使用karma-firefox-launcher;同理可得其他)\n```bash\nnpm install karma-chrome-launcher --save-dev\nnpm install karma-firefox-launcher --save-dev\n```\n安装coverage(测试代码覆盖率)\n```bash\nnpm install karma-coverage --save-dev\n```\n\n# Jasmine\n\njasmine有四种类型的函数:\n\n## 分组 describe\n```js\n// 声明一类测试用例\ndescribe('add algorithm',function(){\n    // 在里面可以定义一些变量，如\n    var a=1,b=2;\n});\n```\n## 用例 it\n```js\n// 声明一类测试用例\ndescribe('add algorithm',function(){\n    // 在里面可以定义一些变量，如\n    var a=1,b=2;\n    // 声明一种测试用例\n    it('test add one',function(){\n\n    });\n\n    it('test add two',function(){\n\n    });\n});\n```\n## 期望 expect\n\n## 匹配to****\n```js\n// 声明一类测试用例\ndescribe('add algorithm',function(){\n    // 可以定义一些变量，如\n    var a=1,b=2;\n    // 声明一种测试用例\n    it('test add one',function(){\n        // 期望 自定义的函数 addOne(1) 结果为 2, 反向读代码\n        expect(2).toEqual(addOne(a));\n        expect(3).toEqual(addOne(b));\n    });\n\n    it('test add two',function(){\n        expect(3).toEqual(addTwo(a));\n        expect(5).toEqual(addTwo(b));\n    });\n});\n```\n你可以在 github 或者 入门指导网站 了解到 jasmine 的详细信息\n\ngithub地址: https://github.com/jasmine/jasmine\n\nguide地址:  https://jasmine.github.io/2.0/introduction.html\n\n\n\n# Karma 配置文件\n\n读到这里，可能会有疑问：被测试函数 和 测试脚本应该放在哪里？\n\n下面来看 karma 配置文件\n\n在 karma.exe 所在目录下 或者 已将 karma 安装至 global\n\n命令行输入（当然你也可以 命名为 **.conf.js）\n```bash\nkarma init karma.conf.js\n```\n然后根据提示配置文件\n\n\n\n配置 被测试代码路径 和 测试脚本路径 ( ** / * 通配 文件路径/名称)\n\n\n\n省略省略省略…………\n\n出现以下提示表示配置完成\n\n\n\n如果想做一些个性化的处理，可以打开文件并 添加/修改 配置项\n```js\n\n/**\n * Created by lonelydawn on 2017-03-04.\n */\n\nmodule.exports = function (config) {\n    config.set({\n\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: '',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine'],\n\n\n        // list of files / patterns to load in the browser\n        files: [\n            'public/bower_components/angular/angular.js',\n            'app/javascripts/**/*.js',\n            'test/**/*.js'\n        ],\n\n\n        // list of files to exclude\n        exclude: [],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        //代码覆盖率测试 ,使用 karma-coverage\n        preprocessors: {\n            'app/javascripts/**/*.js': 'coverage'\n        },\n\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress','coverage'],\n        coverageReporter: {\n            type: 'html',\n            dir: 'coverage/'\n        },\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['Chrome'],\n\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: false\n\n    })\n};\n```\n之后 命令行执行 ,即可开始测试 ( 在配置和启动的时候一定要注意路径问题 )\n```bash\nkarma start karma.conf.js\n```\n\n# Gulp下 karma 的使用\n\ngulp 是一款非常简单好用的自动化构建工具，中文文档很详细。\n\ngulp 中文文档地址 : http://www.gulpjs.com.cn/\n\n\n\n在 gulp 中使用karma 不再需要安装 gulp-karma组件\n\ngithub原文:\n\nKarma integration into Gulp.js-based build.\n\n\n\n将 Karma 配置到项目 node_modules中并将配置文件建好之后\n\n在 gulpfile.js 中写入\n```js\nvar gulp=require('gulp');\nvar Karma=require('karma').Server;\n\n// 前端自动化测试\ngulp.task('test', function (done) {\n    new Karma({\n        // 配置文件所在路径\n        configFile: __dirname + '/karma.conf.js',\n        // 执行测试结束后退出\n        singleRun:true\n    }, done).start();\n});\n\ngulp.task('tdd', function (done) {\n    new Karma({\n        configFile: __dirname + '/karma.conf.js'\n    }, done).start();\n});\n```\n之后在命令行键入\n```bash\ngulp test\n```\n或\n```bash\ngulp tdd\n```\n执行测试即可.",
				"html": "<p>前端包管理工具</p>\n<p>代码重用和复用是快捷开发的一种重要方式，但是原始的代码模块散布于各个平台上，不好寻找，程序员对其进行有效管理也成为了一大难题。此时，依赖（包、插件、工具都可以称呼，本质是他人写好封装后的代码模块）管理工具应需而生。依赖管理工具使用简单的命令即可提供 依赖的查找、安装、卸载等操作，深受广大程序员喜爱。<br>前端 Node.js 最为常用的依赖管理工具 是npm，npm 之于Node.js，就如 pip 之于 Python，gem 之于 Ruby，pear 之于 PHP , maven 之于Java 。</p>\n<a id=\"more\"></a>\n<h1 id=\"Karma-环境的搭建\"><a href=\"#Karma-环境的搭建\" class=\"headerlink\" title=\"Karma 环境的搭建\"></a>Karma 环境的搭建</h1><p>安装 karma (karma用于run自动化测试脚本)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma-jasmine (jasmine用于编写单元测试用例)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-jasmine --save-dev</div><div class=\"line\">npm install jasmine-core --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装karma-chrome-launcher(用于启动chrome浏览器;如果是firefox可以使用karma-firefox-launcher;同理可得其他)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-chrome-launcher --save-dev</div><div class=\"line\">npm install karma-firefox-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装coverage(测试代码覆盖率)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-coverage --save-dev</div></pre></td></tr></table></figure></p>\n<h1 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h1><p>jasmine有四种类型的函数:</p>\n<h2 id=\"分组-describe\"><a href=\"#分组-describe\" class=\"headerlink\" title=\"分组 describe\"></a>分组 describe</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明一类测试用例</span></div><div class=\"line\">describe(<span class=\"string\">'add algorithm'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在里面可以定义一些变量，如</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"用例-it\"><a href=\"#用例-it\" class=\"headerlink\" title=\"用例 it\"></a>用例 it</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明一类测试用例</span></div><div class=\"line\">describe(<span class=\"string\">'add algorithm'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在里面可以定义一些变量，如</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"comment\">// 声明一种测试用例</span></div><div class=\"line\">    it(<span class=\"string\">'test add one'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">'test add two'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"期望-expect\"><a href=\"#期望-expect\" class=\"headerlink\" title=\"期望 expect\"></a>期望 expect</h2><h2 id=\"匹配to\"><a href=\"#匹配to\" class=\"headerlink\" title=\"匹配to**\"></a>匹配to<em>**</em></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 声明一类测试用例</span></div><div class=\"line\">describe(<span class=\"string\">'add algorithm'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 可以定义一些变量，如</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"comment\">// 声明一种测试用例</span></div><div class=\"line\">    it(<span class=\"string\">'test add one'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 期望 自定义的函数 addOne(1) 结果为 2, 反向读代码</span></div><div class=\"line\">        expect(<span class=\"number\">2</span>).toEqual(addOne(a));</div><div class=\"line\">        expect(<span class=\"number\">3</span>).toEqual(addOne(b));</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">'test add two'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        expect(<span class=\"number\">3</span>).toEqual(addTwo(a));</div><div class=\"line\">        expect(<span class=\"number\">5</span>).toEqual(addTwo(b));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>你可以在 github 或者 入门指导网站 了解到 jasmine 的详细信息</p>\n<p>github地址: <a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"external\">https://github.com/jasmine/jasmine</a></p>\n<p>guide地址:  <a href=\"https://jasmine.github.io/2.0/introduction.html\" target=\"_blank\" rel=\"external\">https://jasmine.github.io/2.0/introduction.html</a></p>\n<h1 id=\"Karma-配置文件\"><a href=\"#Karma-配置文件\" class=\"headerlink\" title=\"Karma 配置文件\"></a>Karma 配置文件</h1><p>读到这里，可能会有疑问：被测试函数 和 测试脚本应该放在哪里？</p>\n<p>下面来看 karma 配置文件</p>\n<p>在 karma.exe 所在目录下 或者 已将 karma 安装至 global</p>\n<p>命令行输入（当然你也可以 命名为 **.conf.js）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init karma.conf.js</div></pre></td></tr></table></figure></p>\n<p>然后根据提示配置文件</p>\n<p>配置 被测试代码路径 和 测试脚本路径 ( <em>* / </em> 通配 文件路径/名称)</p>\n<p>省略省略省略…………</p>\n<p>出现以下提示表示配置完成</p>\n<p>如果想做一些个性化的处理，可以打开文件并 添加/修改 配置项<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by lonelydawn on 2017-03-04.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    config.set(&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">        basePath: <span class=\"string\">''</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">        <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">        frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">        files: [</div><div class=\"line\">            <span class=\"string\">'public/bower_components/angular/angular.js'</span>,</div><div class=\"line\">            <span class=\"string\">'app/javascripts/**/*.js'</span>,</div><div class=\"line\">            <span class=\"string\">'test/**/*.js'</span></div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">        exclude: [],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">        <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">        <span class=\"comment\">//代码覆盖率测试 ,使用 karma-coverage</span></div><div class=\"line\">        preprocessors: &#123;</div><div class=\"line\">            <span class=\"string\">'app/javascripts/**/*.js'</span>: <span class=\"string\">'coverage'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">        <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">        <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">        reporters: [<span class=\"string\">'progress'</span>,<span class=\"string\">'coverage'</span>],</div><div class=\"line\">        <span class=\"attr\">coverageReporter</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">'html'</span>,</div><div class=\"line\">            <span class=\"attr\">dir</span>: <span class=\"string\">'coverage/'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// web server port</span></div><div class=\"line\">        port: <span class=\"number\">9876</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">        colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// level of logging</span></div><div class=\"line\">        <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">        logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">        autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// start these browsers</span></div><div class=\"line\">        <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">        browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">        <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">        singleRun: <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>之后 命令行执行 ,即可开始测试 ( 在配置和启动的时候一定要注意路径问题 )<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma start karma.conf.js</div></pre></td></tr></table></figure></p>\n<h1 id=\"Gulp下-karma-的使用\"><a href=\"#Gulp下-karma-的使用\" class=\"headerlink\" title=\"Gulp下 karma 的使用\"></a>Gulp下 karma 的使用</h1><p>gulp 是一款非常简单好用的自动化构建工具，中文文档很详细。</p>\n<p>gulp 中文文档地址 : <a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">http://www.gulpjs.com.cn/</a></p>\n<p>在 gulp 中使用karma 不再需要安装 gulp-karma组件</p>\n<p>github原文:</p>\n<p>Karma integration into Gulp.js-based build.</p>\n<p>将 Karma 配置到项目 node_modules中并将配置文件建好之后</p>\n<p>在 gulpfile.js 中写入<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Karma=<span class=\"built_in\">require</span>(<span class=\"string\">'karma'</span>).Server;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 前端自动化测试</span></div><div class=\"line\">gulp.task(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Karma(&#123;</div><div class=\"line\">        <span class=\"comment\">// 配置文件所在路径</span></div><div class=\"line\">        configFile: __dirname + <span class=\"string\">'/karma.conf.js'</span>,</div><div class=\"line\">        <span class=\"comment\">// 执行测试结束后退出</span></div><div class=\"line\">        singleRun:<span class=\"literal\">true</span></div><div class=\"line\">    &#125;, done).start();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'tdd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Karma(&#123;</div><div class=\"line\">        <span class=\"attr\">configFile</span>: __dirname + <span class=\"string\">'/karma.conf.js'</span></div><div class=\"line\">    &#125;, done).start();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>之后在命令行键入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp <span class=\"built_in\">test</span></div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp tdd</div></pre></td></tr></table></figure></p>\n<p>执行测试即可.</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1490059782100,
				"created_by": 2,
				"updated_at": 1490059783315,
				"updated_by": 2,
				"published_at": 1490059782100,
				"published_by": 2
			},
			{
				"id": "cj0hjqs1v0000jkfc3cihbvxd",
				"title": "webdriver-元素定位",
				"slug": "selenium_find_elemen",
				"markdown": "\nwebdriver提供了丰富的API，有多种定位策略：id,name,css选择器，xpath等，其中css选择器定位元素效率相比xpath要高些，使用id，name属性定位元素是最可靠，效率最高的一种办法。\n<!--more-->\n　　1、工具选择：在我们开发测试脚本的过程中各个浏览器给我们也提供了方便定位元素的工具，我比较喜欢使用firefox的firebug工具，也是目前很多开发测试人员比较热衷的选择，原因是firefox是唯一能够集成selenium IDE的浏览器，并且firebug给用户提供了丰富的扩展组件，我们可以根据自己的需要来选择，一般情况下，使用firebug+firefinder就足够使用了，firefinder支持xpath以及css选择器定位元素的功能，很方便帮助我们调试测试脚本\n　　2、元素定位的方法：findElement() 与 findElements()\n　　findElement() 该方法返回基于指定查询条件的webElement对象，或抛出不符合条件的异常  eg：driver.findElement(By.id(\"userID\"));\n　　findElements() 该方法返回指定查询条件的WebElement的对象集合，或返回null\n　　3、WebElement对象提供的各种定位元素策略\n```js\nID：driver.findElement(By.id(<elementID>))\nName：driver.findElement(By.name(<elementName>))\nclassName：driver.findElement(By.className(<elementClassName>))\ntagName：driver.findElement(By.tagName(<htmlTagName>))\nlinkText：driver.findElement(By.linkText(<linkText>))\npartialLinkText：driver.findElement(By.partialLinkText(<partialLinkText>))\ncss：driver.findElement(By.cssSelector(<cssSelector>))\nxpath：driver.findElement(By.xpath(<xpathQuery>))\n```\n　　4、webelement类提供了诸多方法，在我们开发脚本过程中如何选择最可靠，效率最高的方法，使用id，name是首选，因为他们在html标签中是唯一的，所以是最可靠的\n```js\n　　ID：driver.findElement(By.id(\"username\"))\n　　name：driver.findElement(By.name(\"username\"))\n　　class：driver.findElement(By.className(\"username\"))\n```\n　　多学一招：WebElement类支持查询子类元素，如果页面中存在重复元素，但在不同div中，我们可以先定位到其父元素，然后定位其子元素，方法如下：\n```js\nWebElement hello = driver.findElement(By.id(\"div1\")).findElement(By.lindText(\"hello\"));\n```\n　　5、使用WebElements定位多个相似的元素，比如页面中存在五个单选按钮,他们有相同的class属性，值为：myRadio，我们想对五个按钮循环操作，我们可以把它们全部取出来放到集合中，然后做循环操作，如下：\n```js\nList<WebElement> radios = driver.findElements(By.className(\"myRadio\"));\nfor(int i = 0;i<radios.size();i++){\nradios.get(i).click();\n}\n```\n　　其他定位方法与操作id，name类似，这里不再赘述，接下来我着重对css选择器与Xpath描述下\n# WebDriver By类\n1. 使用相对路径定位元素\n　　如，我们要定为DOM中的input元素，我们可以这样操作，不考虑其在DOM中的位置，但这样做存在一定弊端，当DOM中存在多个input元素时，该方法总返回DOM中的第一个元素，这并不是我们所期待的\n　　eg：WebElement username = driver.findElement(By.cssSelector(\"input\"));\n　　另外，为了使用这种方法更准确的定位元素，我们可以结合该元素的其他属性来实现精确定位的目的\n2. 结合id来定位\n    driver.findElement(By.cssSelector(\"input#username\"));\n在标签与id之间使用#连接，如果对css了解的朋友一看就知道为什么会这样写了，不了解也没关系，只要记住这种写法就OK了\n　　另外该方法也可简写为driver.findElement(By.cssSelector(\"#username\")); 有点儿类似于id选择器\n3. 使用元素的任何属性来定位元素\n```js\n　　driver.findElement(By.cssSelector(\"标签名[属性名='属性值']\"));\n```\n4. 匹配部分属性值\n^=\n```js\ndriver.findElement(By.cssSelector(\"标签名[属性名^='xxx']\"));\n```\n5. 匹配属性值以xxx开头的元素\n$=\n```js\ndriver.findElement(By.cssSelector(\"标签名[属性名$='xxx']\"));\n```\n6. 匹配属性值以xxx结尾的元素\n*=\n```js\ndriver.findElement(By.cssSelector(\"标签名[属性名^='xxx']\"));  匹配属性值包含xxx的元素\n```\n7. 使用相对+绝对路径方法\n```js\n　　driver.findElement(By.cssSelector(\"div#login>input\"))\n```\n该方法中“div#login>input” 首先通过相对路径定位到id为login的div元素，然后查找其子元素input（绝对路径）\n# 使用xpath\n相比cssSelector，xpath是我比较常用的一种定位元素的方式，因为它很方便，缺点是，消耗系统性能\n　　1、使用绝对路径定位元素\n```js\n　　driver.findElement(By.xpath(\"/html/body/div/form/input\"))\n```\n　　2、使用相对路径定位元素\n　　driver.findElement(By.xpath(\"//input\"))   返回查找到的第一个符合条件的元素\n　　3、使用索引定位元素，索引的初始值为1，注意与数组等区分开\n　　driver.findElement(By.xpath(\"//input[2]\"))   返回查找到的第二个符合条件的元素\n　　4、结合属性值来定位元素\n```js\n　　driver.findElement(By.xpath(\"//input[@id='username']\"));\n　　driver.findElement(By.xpath(\"//img[@alt='flowr']\"));\n```\n　　5、使用逻辑运算符，结合属性值定位元素,and与or\n```js\n　　driver.findElement(By.xpath(\"//input[@id='username' and @name='userID']\"));\n```\n　　6、使用属性名来定位元素\n```js\n　　driver.findElement(By.xpath(\"//input[@button]\"))\n```\n　　7、类似于cssSlector，使用部分属性值匹配元素\n```js\nstarts-with()    driver.findElement(By.xpath(\"//input[stars-with(@id,'user')]\"))\nends-with        driver.findElement(By.xpath(\"//input[ends-with(@id,'name')]\"))\ncontains()        driver.findElement(By.xpath(\"//input[contains(@id,\"ernam\")]\"))\n```\n　　8、使用任意属性值匹配元素\n```js\n　　driver.findElement(By.xpath(\"//input[@*='username']\"))\n```\n　　9、使用xpath轴来定位元素\n　　这里略了，详见w3school.com\n# 使用innerText\n　　1、使用cssSelector查找innerText定位元素\n```js\n　　driver.findElement(By.cssSelector(\"span[textContent='新闻']\"));\n```\n　　2、使用xpath的text函数\n```js\n　　driver.findElement(By.xpath(\"//span[contains(text(),'hello')]\"))  //包含匹配\n　　driver.findElement(By.xpath(\"//span[text()='新闻']\"))     //绝对匹配\n```",
				"html": "<p>webdriver提供了丰富的API，有多种定位策略：id,name,css选择器，xpath等，其中css选择器定位元素效率相比xpath要高些，使用id，name属性定位元素是最可靠，效率最高的一种办法。<br><a id=\"more\"></a><br>　　1、工具选择：在我们开发测试脚本的过程中各个浏览器给我们也提供了方便定位元素的工具，我比较喜欢使用firefox的firebug工具，也是目前很多开发测试人员比较热衷的选择，原因是firefox是唯一能够集成selenium IDE的浏览器，并且firebug给用户提供了丰富的扩展组件，我们可以根据自己的需要来选择，一般情况下，使用firebug+firefinder就足够使用了，firefinder支持xpath以及css选择器定位元素的功能，很方便帮助我们调试测试脚本<br>　　2、元素定位的方法：findElement() 与 findElements()<br>　　findElement() 该方法返回基于指定查询条件的webElement对象，或抛出不符合条件的异常  eg：driver.findElement(By.id(“userID”));<br>　　findElements() 该方法返回指定查询条件的WebElement的对象集合，或返回null<br>　　3、WebElement对象提供的各种定位元素策略<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ID：driver.findElement(By.id(&lt;elementID&gt;))</div><div class=\"line\">Name：driver.findElement(By.name(&lt;elementName&gt;))</div><div class=\"line\">className：driver.findElement(By.className(&lt;elementClassName&gt;))</div><div class=\"line\">tagName：driver.findElement(By.tagName(&lt;htmlTagName&gt;))</div><div class=\"line\">linkText：driver.findElement(By.linkText(&lt;linkText&gt;))</div><div class=\"line\">partialLinkText：driver.findElement(By.partialLinkText(&lt;partialLinkText&gt;))</div><div class=\"line\">css：driver.findElement(By.cssSelector(&lt;cssSelector&gt;))</div><div class=\"line\">xpath：driver.findElement(By.xpath(&lt;xpathQuery&gt;))</div></pre></td></tr></table></figure></p>\n<p>　　4、webelement类提供了诸多方法，在我们开发脚本过程中如何选择最可靠，效率最高的方法，使用id，name是首选，因为他们在html标签中是唯一的，所以是最可靠的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　ID：driver.findElement(By.id(\"username\"))</div><div class=\"line\">　　name：driver.findElement(By.name(\"username\"))</div><div class=\"line\">　　class：driver.findElement(By.className(\"username\"))</div></pre></td></tr></table></figure></p>\n<p>　　多学一招：WebElement类支持查询子类元素，如果页面中存在重复元素，但在不同div中，我们可以先定位到其父元素，然后定位其子元素，方法如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">WebElement hello = driver.findElement(By.id(<span class=\"string\">\"div1\"</span>)).findElement(By.lindText(<span class=\"string\">\"hello\"</span>));</div></pre></td></tr></table></figure></p>\n<p>　　5、使用WebElements定位多个相似的元素，比如页面中存在五个单选按钮,他们有相同的class属性，值为：myRadio，我们想对五个按钮循环操作，我们可以把它们全部取出来放到集合中，然后做循环操作，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;WebElement&gt; radios = driver.findElements(By.className(<span class=\"string\">\"myRadio\"</span>));</div><div class=\"line\"><span class=\"keyword\">for</span>(int i = <span class=\"number\">0</span>;i&lt;radios.size();i++)&#123;</div><div class=\"line\">radios.get(i).click();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　其他定位方法与操作id，name类似，这里不再赘述，接下来我着重对css选择器与Xpath描述下</p>\n<h1 id=\"WebDriver-By类\"><a href=\"#WebDriver-By类\" class=\"headerlink\" title=\"WebDriver By类\"></a>WebDriver By类</h1><ol>\n<li>使用相对路径定位元素<br>　　如，我们要定为DOM中的input元素，我们可以这样操作，不考虑其在DOM中的位置，但这样做存在一定弊端，当DOM中存在多个input元素时，该方法总返回DOM中的第一个元素，这并不是我们所期待的<br>　　eg：WebElement username = driver.findElement(By.cssSelector(“input”));<br>　　另外，为了使用这种方法更准确的定位元素，我们可以结合该元素的其他属性来实现精确定位的目的</li>\n<li>结合id来定位<br> driver.findElement(By.cssSelector(“input#username”));<br>在标签与id之间使用#连接，如果对css了解的朋友一看就知道为什么会这样写了，不了解也没关系，只要记住这种写法就OK了<br>　　另外该方法也可简写为driver.findElement(By.cssSelector(“#username”)); 有点儿类似于id选择器</li>\n<li><p>使用元素的任何属性来定位元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.cssSelector(<span class=\"string\">\"标签名[属性名='属性值']\"</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>匹配部分属性值<br>^=</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver.findElement(By.cssSelector(<span class=\"string\">\"标签名[属性名^='xxx']\"</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>匹配属性值以xxx开头的元素<br>$=</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver.findElement(By.cssSelector(<span class=\"string\">\"标签名[属性名$='xxx']\"</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>匹配属性值以xxx结尾的元素<br>*=</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver.findElement(By.cssSelector(<span class=\"string\">\"标签名[属性名^='xxx']\"</span>));  匹配属性值包含xxx的元素</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用相对+绝对路径方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.cssSelector(<span class=\"string\">\"div#login&gt;input\"</span>))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>该方法中“div#login&gt;input” 首先通过相对路径定位到id为login的div元素，然后查找其子元素input（绝对路径）</p>\n<h1 id=\"使用xpath\"><a href=\"#使用xpath\" class=\"headerlink\" title=\"使用xpath\"></a>使用xpath</h1><p>相比cssSelector，xpath是我比较常用的一种定位元素的方式，因为它很方便，缺点是，消耗系统性能<br>　　1、使用绝对路径定位元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"/html/body/div/form/input\"</span>))</div></pre></td></tr></table></figure></p>\n<p>　　2、使用相对路径定位元素<br>　　driver.findElement(By.xpath(“//input”))   返回查找到的第一个符合条件的元素<br>　　3、使用索引定位元素，索引的初始值为1，注意与数组等区分开<br>　　driver.findElement(By.xpath(“//input[2]”))   返回查找到的第二个符合条件的元素<br>　　4、结合属性值来定位元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//input[@id='username']\"</span>));</div><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//img[@alt='flowr']\"</span>));</div></pre></td></tr></table></figure></p>\n<p>　　5、使用逻辑运算符，结合属性值定位元素,and与or<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//input[@id='username' and @name='userID']\"</span>));</div></pre></td></tr></table></figure></p>\n<p>　　6、使用属性名来定位元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//input[@button]\"</span>))</div></pre></td></tr></table></figure></p>\n<p>　　7、类似于cssSlector，使用部分属性值匹配元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">starts-<span class=\"keyword\">with</span>()    driver.findElement(By.xpath(<span class=\"string\">\"//input[stars-with(@id,'user')]\"</span>))</div><div class=\"line\">ends-<span class=\"keyword\">with</span>        driver.findElement(By.xpath(<span class=\"string\">\"//input[ends-with(@id,'name')]\"</span>))</div><div class=\"line\">contains()        driver.findElement(By.xpath(<span class=\"string\">\"//input[contains(@id,\"</span>ernam<span class=\"string\">\")]\"</span>))</div></pre></td></tr></table></figure></p>\n<p>　　8、使用任意属性值匹配元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//input[@*='username']\"</span>))</div></pre></td></tr></table></figure></p>\n<p>　　9、使用xpath轴来定位元素<br>　　这里略了，详见w3school.com</p>\n<h1 id=\"使用innerText\"><a href=\"#使用innerText\" class=\"headerlink\" title=\"使用innerText\"></a>使用innerText</h1><p>　　1、使用cssSelector查找innerText定位元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.cssSelector(<span class=\"string\">\"span[textContent='新闻']\"</span>));</div></pre></td></tr></table></figure></p>\n<p>　　2、使用xpath的text函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//span[contains(text(),'hello')]\"</span>))  <span class=\"comment\">//包含匹配</span></div><div class=\"line\">　　driver.findElement(By.xpath(<span class=\"string\">\"//span[text()='新闻']\"</span>))     <span class=\"comment\">//绝对匹配</span></div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1489980204847,
				"created_by": 2,
				"updated_at": 1489980577869,
				"updated_by": 2,
				"published_at": 1489980204847,
				"published_by": 2
			},
			{
				"id": "cj0hirkoj00004cfcproq705h",
				"title": "webdriver的断言使用",
				"slug": "webdriver_assertion",
				"markdown": "\n操作(action)、辅助(accessors)和断言(assertion)：\n<!--more-->\n# 操作action\n\n模拟用户与 Web 应用程序的交互。一般用于操作应用程序的状态。\n\n如点击链接，选择选项的方式进行工作。如果一个动作执行失败，或是有错误，当前的测试将会停止执行。\n\n操作中常见命令有：\n```\nopen（打开页面）\n\nclick（点击）\n\nclickAndWait（点击并等待）\n\ntype（文本类型）\n\nselect（选择下拉菜单）\n\nselectWindow（选择弹出窗口）\n\npause（等待指定时间，以毫秒为单位，即要睡眠的时间）\n\nsetSpeed(设定执行速度。以毫秒延迟间隔长度。默认没有延迟，即为0)\n\nsetTimeout(指定等待动作完成的等待时间。默认为30秒。\n\n需要等待的动作包括了OPEN 和WAITFOR)\n\ngoBack（模拟用户点击其浏览器上的“back”按钮）\n\nclose（模拟用户点击弹出窗体或表单标题栏上的”关闭”按钮）\n```\n## click与clickAndWait的区别\n\n例如对比录制脚本：\n```\nComand       Target\n\nclick               css=input[type=submit]            //句一\n\nclickAndWait   css=input[type=submiit]           //句二\n```\n转成PHPUNIT后代码为：\n```\n$this->click(“css=input[type=submit]“);         //此句对应上面的 句一\n\n$this->click(“css=input[type=submit]“);         //此句和下一句，对应上面的\n```\n句二\n```\n$this->waitForPageToLoad(“30000″);\n```\n区别在于：clickAndWait后会有一个默认的页面等待时间为30秒；而click没有等待时间；\n\nAndwait这个后缀，告诉我们，该命令将使浏览器向服务器产生一个请求，使Selenium等待加载一个新的页面。\n\n\n\n# 辅助accessors\n\n这是辅助工具。用于检查应用程序的状态并将结果存储到变量中。\n\n如：storeElementPresent(locator,variableName)\n\n其中参数：locator 表示元素定位器；variableName 用于存储结果的变量名。\n\n即将locator定位到的状态存储到variableName变量中。\n\n如果该元素出现返回true，否则返回false\n\n可同断言一同使用。\n\n断言assertion：\n\n验证应用程序的状态是否同所期望的一致。\n\n常见的断言包括:验证页面内容，如标题是否为X或当前位置是否正确，或是验证该复选框是否被勾选。\n\n\n\n# 断言被用于三种模式: assert 、verify、waitfor\n\nAssert 失败时，该测试将终止。\n\nVerify 失败时，该测试将继续执行，并将错误记入日显示屏 。也就是说允许此单个 验证通过。确保应用程序在正确的页面上。\n\nWaitfor用于等待某些条件变为真。可用于AJAX应用程序的测试。\n\n如果该条件为真，他们将立即成功执行。如果该条件不为真，则将失败并暂停测试。直到超过当前所设定的超时时间。 一般跟setTimeout时间一起用\n\n\n\n断言常用的有：\n```\nassertLocation（判断当前是在正确的页面）、\n\nassertTitle（检查当前页面的title是否正确）、\n\nassertValue（检查input的值， checkbox或radio，有值为”on”无为”off”）、\n\nassertSelected（检查select的下拉菜单中选中是否正确）、\n\nassertSelectedOptions（检查下拉菜单中的选项的是否正确）、\n\nassertText（检查指定元素的文本）、\n\nassertTextPresent（检查在当前给用户显示的页面上是否有出现指定的文本）、\n\nassertTextNotPresent（检查在当前给用户显示的页面上是否没有出现指定的文本）、\n\nassertAttribute（检查当前指定元素的属性的值）、\n\nassertTable（检查table里的某个cell中的值）、\n\nassertEditable（检查指定的input是否可以编辑）、\n\nassertNotEditable（检查指定的input是否不可以编辑）、\n\nassertAlert（检查是否有产生带指定message的alert对话框）、\n\nwaitForElementPresent （等待检验某元素的存在。为真时，则执行。)\n```",
				"html": "<p>操作(action)、辅助(accessors)和断言(assertion)：<br><a id=\"more\"></a></p>\n<h1 id=\"操作action\"><a href=\"#操作action\" class=\"headerlink\" title=\"操作action\"></a>操作action</h1><p>模拟用户与 Web 应用程序的交互。一般用于操作应用程序的状态。</p>\n<p>如点击链接，选择选项的方式进行工作。如果一个动作执行失败，或是有错误，当前的测试将会停止执行。</p>\n<p>操作中常见命令有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">open（打开页面）</div><div class=\"line\"></div><div class=\"line\">click（点击）</div><div class=\"line\"></div><div class=\"line\">clickAndWait（点击并等待）</div><div class=\"line\"></div><div class=\"line\">type（文本类型）</div><div class=\"line\"></div><div class=\"line\">select（选择下拉菜单）</div><div class=\"line\"></div><div class=\"line\">selectWindow（选择弹出窗口）</div><div class=\"line\"></div><div class=\"line\">pause（等待指定时间，以毫秒为单位，即要睡眠的时间）</div><div class=\"line\"></div><div class=\"line\">setSpeed(设定执行速度。以毫秒延迟间隔长度。默认没有延迟，即为0)</div><div class=\"line\"></div><div class=\"line\">setTimeout(指定等待动作完成的等待时间。默认为30秒。</div><div class=\"line\"></div><div class=\"line\">需要等待的动作包括了OPEN 和WAITFOR)</div><div class=\"line\"></div><div class=\"line\">goBack（模拟用户点击其浏览器上的“back”按钮）</div><div class=\"line\"></div><div class=\"line\">close（模拟用户点击弹出窗体或表单标题栏上的”关闭”按钮）</div></pre></td></tr></table></figure></p>\n<h2 id=\"click与clickAndWait的区别\"><a href=\"#click与clickAndWait的区别\" class=\"headerlink\" title=\"click与clickAndWait的区别\"></a>click与clickAndWait的区别</h2><p>例如对比录制脚本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Comand       Target</div><div class=\"line\"></div><div class=\"line\">click               css=input[type=submit]            //句一</div><div class=\"line\"></div><div class=\"line\">clickAndWait   css=input[type=submiit]           //句二</div></pre></td></tr></table></figure></p>\n<p>转成PHPUNIT后代码为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this-&gt;click(“css=input[type=submit]“);         //此句对应上面的 句一</div><div class=\"line\"></div><div class=\"line\">$this-&gt;click(“css=input[type=submit]“);         //此句和下一句，对应上面的</div></pre></td></tr></table></figure></p>\n<p>句二<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$this-&gt;waitForPageToLoad(“30000″);</div></pre></td></tr></table></figure></p>\n<p>区别在于：clickAndWait后会有一个默认的页面等待时间为30秒；而click没有等待时间；</p>\n<p>Andwait这个后缀，告诉我们，该命令将使浏览器向服务器产生一个请求，使Selenium等待加载一个新的页面。</p>\n<h1 id=\"辅助accessors\"><a href=\"#辅助accessors\" class=\"headerlink\" title=\"辅助accessors\"></a>辅助accessors</h1><p>这是辅助工具。用于检查应用程序的状态并将结果存储到变量中。</p>\n<p>如：storeElementPresent(locator,variableName)</p>\n<p>其中参数：locator 表示元素定位器；variableName 用于存储结果的变量名。</p>\n<p>即将locator定位到的状态存储到variableName变量中。</p>\n<p>如果该元素出现返回true，否则返回false</p>\n<p>可同断言一同使用。</p>\n<p>断言assertion：</p>\n<p>验证应用程序的状态是否同所期望的一致。</p>\n<p>常见的断言包括:验证页面内容，如标题是否为X或当前位置是否正确，或是验证该复选框是否被勾选。</p>\n<h1 id=\"断言被用于三种模式-assert-、verify、waitfor\"><a href=\"#断言被用于三种模式-assert-、verify、waitfor\" class=\"headerlink\" title=\"断言被用于三种模式: assert 、verify、waitfor\"></a>断言被用于三种模式: assert 、verify、waitfor</h1><p>Assert 失败时，该测试将终止。</p>\n<p>Verify 失败时，该测试将继续执行，并将错误记入日显示屏 。也就是说允许此单个 验证通过。确保应用程序在正确的页面上。</p>\n<p>Waitfor用于等待某些条件变为真。可用于AJAX应用程序的测试。</p>\n<p>如果该条件为真，他们将立即成功执行。如果该条件不为真，则将失败并暂停测试。直到超过当前所设定的超时时间。 一般跟setTimeout时间一起用</p>\n<p>断言常用的有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">assertLocation（判断当前是在正确的页面）、</div><div class=\"line\"></div><div class=\"line\">assertTitle（检查当前页面的title是否正确）、</div><div class=\"line\"></div><div class=\"line\">assertValue（检查input的值， checkbox或radio，有值为”on”无为”off”）、</div><div class=\"line\"></div><div class=\"line\">assertSelected（检查select的下拉菜单中选中是否正确）、</div><div class=\"line\"></div><div class=\"line\">assertSelectedOptions（检查下拉菜单中的选项的是否正确）、</div><div class=\"line\"></div><div class=\"line\">assertText（检查指定元素的文本）、</div><div class=\"line\"></div><div class=\"line\">assertTextPresent（检查在当前给用户显示的页面上是否有出现指定的文本）、</div><div class=\"line\"></div><div class=\"line\">assertTextNotPresent（检查在当前给用户显示的页面上是否没有出现指定的文本）、</div><div class=\"line\"></div><div class=\"line\">assertAttribute（检查当前指定元素的属性的值）、</div><div class=\"line\"></div><div class=\"line\">assertTable（检查table里的某个cell中的值）、</div><div class=\"line\"></div><div class=\"line\">assertEditable（检查指定的input是否可以编辑）、</div><div class=\"line\"></div><div class=\"line\">assertNotEditable（检查指定的input是否不可以编辑）、</div><div class=\"line\"></div><div class=\"line\">assertAlert（检查是否有产生带指定message的alert对话框）、</div><div class=\"line\"></div><div class=\"line\">waitForElementPresent （等待检验某元素的存在。为真时，则执行。)</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1489978529305,
				"created_by": 2,
				"updated_at": 1489978774740,
				"updated_by": 2,
				"published_at": 1489978529305,
				"published_by": 2
			},
			{
				"id": "cj0dann7n0000lwfcamcbs7jl",
				"title": "PhantomJS入门",
				"slug": "PhantomJS_intr",
				"markdown": "\nPhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 PhantomJS 可以用于 页面自动化 ， 网络监测 ， 网页截屏 ，以及 无界面测试 等。\n<!--more-->\n# 安装\n安装包下载地址： http://phantomjs.org/download.html ，包括 Windows ，Mac OS，Linux版本，自行选择对应 版本下载解压即可（ 为方便使用，可自已为phantomjs设置环境变量 ），其中带有一个example文件夹，里面有很多已经写好的代码供使用。本文假设phantomjs已经安装好并已设置了环境变量。\n\n# 使用\nHello， World！\n新建一个包含下面两行脚本的文本文件：\n```js\nconsole.log('Hello, world!');\nphantom.exit();\n```\n将文件另存为 hello.js ,然后执行它：\n```js\nphantomjs hello.js\n```\n输出结果为：Hello, world!\n第一行将会在终端打印出字符串，第二行 phantom.exit 将退出运行。\n在该脚本中调用 phantom.exit 是非常重要的，否则 PhantomJS 将根本不会停止。\n\n# 脚本参数 – Script Arguments\nPhantomjs如何传递参数呢？如下所示 ：\n```js\nphantomjs examples/arguments.js foo bar baz\n```\n其中的foo, bar, baz就是要传递的参数，如何获取呢：\n```js\nvar system = require('system');\nif (system.args.length === 1) {\n    console.log('Try to pass some args when invoking this script!');\n} else {\n    system.args.forEach(function (arg, i) {\n            console.log(i + ': ' + arg);\n    });\n}\nphantom.exit();\n```\n它将输出 ：\n```bash\n0: foo\n1: bar\n2: baz\n```\n# 页面加载 – Page Loading\n通过创建一个网页对象，一个网页可以被加载，分析和渲染。\n\n下面的脚本将示例页面对象最简单的用法，它加载 example.com 并且将它保存为一张图片， example.png 。\n```js\nvar page = require('webpage').create();\npage.open('http://example.com', function () {\n    page.render('example.png');\n    phantom.exit();\n});\n```\n由于它的这个特性，PhantomJS 可以用来 网页截屏 ，截取一些内容的快照，比如将网页、SVG存成图片，PDF等，这个功能很牛X。\n\n接下来的 loadspeed.js 脚本加载一个特殊的URL (不要忘了http协议) 并且计量加载该页面的时间。\n```js\nvar page = require('webpage').create(),\n    system = require('system'),\n    t, address;\n\nif (system.args.length === 1) {\n    console.log('Usage: loadspeed.js <some URL>');\n    phantom.exit();\n}\n\nt = Date.now();\naddress = system.args[1];\npage.open(address, function (status) {\n    if (status !== 'success') {\n        console.log('FAIL to load the address');\n    } else {\n        t = Date.now() - t;\n        console.log('Loading time ' + t + ' msec');\n    }\n    phantom.exit();\n});\n```\n在命令行运行该脚本：\n```js\nphantomjs loadspeed.js http://www.google.com\n```\n它输出像下面的东西：\n```js\nLoading  http://www.google.com  Loading time 719 msec\n```\n# 代码运算 – Code Evaluation\n要想在网页的上下文中对JavaScript 或 CoffeeScript 进行运算，使用 evaluate() 方法。代码是在“沙箱”中运行的，它没有办法读取在其所属页面上下文之外的任何JavaScript对象和变量。 evaluate() 会返回一个对象，然而它仅限制于简单的对象并且不能包含方法或闭包。\n\n这有一个示例来显示网页标题：\n```js\nvar page = require('webpage').create();\npage.open(url, function (status) {\n    var title = page.evaluate(function () {\n        return document.title;\n    });\n    console.log('Page title is ' + title);\n});\n```\n任何来自于网页并且包括来自 evaluate() 内部代码的控制台信息，默认不会显示的。要重写这个行为，使用 onConsoleMessage 回调函数，前一个示例可以被改写成：\n```js\nvar page = require('webpage').create();\npage.onConsoleMessage = function (msg) {\n    console.log('Page title is ' + msg);\n};\npage.open(url, function (status) {\n    page.evaluate(function () {\n        console.log(document.title);\n    });\n});\n```\n# DOM操作 – DOM Manipulation\n由于脚本好像是一个Web浏览器上运行的一样，标准的DOM脚本和CSS选择器可以很好的工作。这使得PhantomJS适合支持各种 页面自动化任务 。\n\n下面的  useragent.js  将读取 id  为myagent的元素的  textContent  属性：\n```js\nvar page = require('webpage').create();\nconsole.log('The default user agent is ' + page.settings.userAgent);\npage.settings.userAgent = 'SpecialAgent';\npage.open('http://www.httpuseragent.org', function (status) {\n    if (status !== 'success') {\n        console.log('Unable to access network');\n    } else {\n        var ua = page.evaluate(function () {\n            return document.getElementById('myagent').textContent;\n        });\n        console.log(ua);\n    }\n    phantom.exit();\n});\n```\n上面示例同样提供了一种自定义 user agent 的方法。\n\n使用JQuery及其他类库：\n```js\nvar page = require('webpage').create();\npage.open('http://www.sample.com', function() {\n    page.includeJs(\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js\", function() {\n        page.evaluate(function() {\n            $(\"button\").click();\n        });\n        phantom.exit()\n    });\n});\n```\n# 网络请求及响应 – Network Requests and Responses\n将一个页面从一台远程服务器请求一个资源的时候，请求和响应均可以通过 onResourceRequested  和  onResourceReceived  回调方法追踪到。示例  netlog.js ：\n```js\nvar page = require('webpage').create();\npage.onResourceRequested = function (request) {\n    console.log('Request ' + JSON.stringify(request, undefined, 4));\n};\npage.onResourceReceived = function (response) {\n    console.log('Receive ' + JSON.stringify(response, undefined, 4));\n};\npage.open(url);\n```\n获取如何把该特性用于HAR 输出以及基于YSlow的性能分析的更多信息，请参阅 网络监控页面 。\n\nPhantomJs官网： http://phantomjs.org/\n\nGitHub: https://github.com/ariya/phantomjs/wiki/Quick-Start",
				"html": "<p>PhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 PhantomJS 可以用于 页面自动化 ， 网络监测 ， 网页截屏 ，以及 无界面测试 等。<br><a id=\"more\"></a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装包下载地址： <a href=\"http://phantomjs.org/download.html\" target=\"_blank\" rel=\"external\">http://phantomjs.org/download.html</a> ，包括 Windows ，Mac OS，Linux版本，自行选择对应 版本下载解压即可（ 为方便使用，可自已为phantomjs设置环境变量 ），其中带有一个example文件夹，里面有很多已经写好的代码供使用。本文假设phantomjs已经安装好并已设置了环境变量。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>Hello， World！<br>新建一个包含下面两行脚本的文本文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello, world!'</span>);</div><div class=\"line\">phantom.exit();</div></pre></td></tr></table></figure></p>\n<p>将文件另存为 hello.js ,然后执行它：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phantomjs hello.js</div></pre></td></tr></table></figure></p>\n<p>输出结果为：Hello, world!<br>第一行将会在终端打印出字符串，第二行 phantom.exit 将退出运行。<br>在该脚本中调用 phantom.exit 是非常重要的，否则 PhantomJS 将根本不会停止。</p>\n<h1 id=\"脚本参数-–-Script-Arguments\"><a href=\"#脚本参数-–-Script-Arguments\" class=\"headerlink\" title=\"脚本参数 – Script Arguments\"></a>脚本参数 – Script Arguments</h1><p>Phantomjs如何传递参数呢？如下所示 ：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phantomjs examples/<span class=\"built_in\">arguments</span>.js foo bar baz</div></pre></td></tr></table></figure></p>\n<p>其中的foo, bar, baz就是要传递的参数，如何获取呢：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (system.args.length === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Try to pass some args when invoking this script!'</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    system.args.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg, i</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(i + <span class=\"string\">': '</span> + arg);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">phantom.exit();</div></pre></td></tr></table></figure></p>\n<p>它将输出 ：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0: foo</div><div class=\"line\">1: bar</div><div class=\"line\">2: baz</div></pre></td></tr></table></figure></p>\n<h1 id=\"页面加载-–-Page-Loading\"><a href=\"#页面加载-–-Page-Loading\" class=\"headerlink\" title=\"页面加载 – Page Loading\"></a>页面加载 – Page Loading</h1><p>通过创建一个网页对象，一个网页可以被加载，分析和渲染。</p>\n<p>下面的脚本将示例页面对象最简单的用法，它加载 example.com 并且将它保存为一张图片， example.png 。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.open(<span class=\"string\">'http://example.com'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    page.render(<span class=\"string\">'example.png'</span>);</div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>由于它的这个特性，PhantomJS 可以用来 网页截屏 ，截取一些内容的快照，比如将网页、SVG存成图片，PDF等，这个功能很牛X。</p>\n<p>接下来的 loadspeed.js 脚本加载一个特殊的URL (不要忘了http协议) 并且计量加载该页面的时间。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create(),</div><div class=\"line\">    system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>),</div><div class=\"line\">    t, address;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (system.args.length === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Usage: loadspeed.js &lt;some URL&gt;'</span>);</div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">t = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">address = system.args[<span class=\"number\">1</span>];</div><div class=\"line\">page.open(address, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FAIL to load the address'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        t = <span class=\"built_in\">Date</span>.now() - t;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loading time '</span> + t + <span class=\"string\">' msec'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在命令行运行该脚本：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phantomjs loadspeed.js http:<span class=\"comment\">//www.google.com</span></div></pre></td></tr></table></figure></p>\n<p>它输出像下面的东西：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Loading  http:<span class=\"comment\">//www.google.com  Loading time 719 msec</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"代码运算-–-Code-Evaluation\"><a href=\"#代码运算-–-Code-Evaluation\" class=\"headerlink\" title=\"代码运算 – Code Evaluation\"></a>代码运算 – Code Evaluation</h1><p>要想在网页的上下文中对JavaScript 或 CoffeeScript 进行运算，使用 evaluate() 方法。代码是在“沙箱”中运行的，它没有办法读取在其所属页面上下文之外的任何JavaScript对象和变量。 evaluate() 会返回一个对象，然而它仅限制于简单的对象并且不能包含方法或闭包。</p>\n<p>这有一个示例来显示网页标题：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.open(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> title = page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.title;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Page title is '</span> + title);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>任何来自于网页并且包括来自 evaluate() 内部代码的控制台信息，默认不会显示的。要重写这个行为，使用 onConsoleMessage 回调函数，前一个示例可以被改写成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.onConsoleMessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Page title is '</span> + msg);</div><div class=\"line\">&#125;;</div><div class=\"line\">page.open(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.title);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"DOM操作-–-DOM-Manipulation\"><a href=\"#DOM操作-–-DOM-Manipulation\" class=\"headerlink\" title=\"DOM操作 – DOM Manipulation\"></a>DOM操作 – DOM Manipulation</h1><p>由于脚本好像是一个Web浏览器上运行的一样，标准的DOM脚本和CSS选择器可以很好的工作。这使得PhantomJS适合支持各种 页面自动化任务 。</p>\n<p>下面的  useragent.js  将读取 id  为myagent的元素的  textContent  属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The default user agent is '</span> + page.settings.userAgent);</div><div class=\"line\">page.settings.userAgent = <span class=\"string\">'SpecialAgent'</span>;</div><div class=\"line\">page.open(<span class=\"string\">'http://www.httpuseragent.org'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Unable to access network'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ua = page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myagent'</span>).textContent;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(ua);</div><div class=\"line\">    &#125;</div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面示例同样提供了一种自定义 user agent 的方法。</p>\n<p>使用JQuery及其他类库：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.open(<span class=\"string\">'http://www.sample.com'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    page.includeJs(<span class=\"string\">\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">\"button\"</span>).click();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        phantom.exit()</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"网络请求及响应-–-Network-Requests-and-Responses\"><a href=\"#网络请求及响应-–-Network-Requests-and-Responses\" class=\"headerlink\" title=\"网络请求及响应 – Network Requests and Responses\"></a>网络请求及响应 – Network Requests and Responses</h1><p>将一个页面从一台远程服务器请求一个资源的时候，请求和响应均可以通过 onResourceRequested  和  onResourceReceived  回调方法追踪到。示例  netlog.js ：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.onResourceRequested = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request '</span> + <span class=\"built_in\">JSON</span>.stringify(request, <span class=\"literal\">undefined</span>, <span class=\"number\">4</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\">page.onResourceReceived = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receive '</span> + <span class=\"built_in\">JSON</span>.stringify(response, <span class=\"literal\">undefined</span>, <span class=\"number\">4</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\">page.open(url);</div></pre></td></tr></table></figure></p>\n<p>获取如何把该特性用于HAR 输出以及基于YSlow的性能分析的更多信息，请参阅 网络监控页面 。</p>\n<p>PhantomJs官网： <a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"external\">http://phantomjs.org/</a></p>\n<p>GitHub: <a href=\"https://github.com/ariya/phantomjs/wiki/Quick-Start\" target=\"_blank\" rel=\"external\">https://github.com/ariya/phantomjs/wiki/Quick-Start</a></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1489723035140,
				"created_by": 2,
				"updated_at": 1489723109030,
				"updated_by": 2,
				"published_at": 1489723035140,
				"published_by": 2
			},
			{
				"id": "cj0d9dwmd0000ncfcj6u5qjx1",
				"title": "selenium-webdriver进行自动化测试",
				"slug": "selenium-webdriver",
				"markdown": "\n# 安装selenium-webdriver依赖包\n\n```bash\nnpm install selenium-webdriver --save\n```\n\n# 下载Chrome插件\n```\n#去 http://chromedriver.storage.googleapis.com/index.html?path=2.24/ 下载\nchromedriver_win32.zip\n#下载驱动，并存放到一个目录中，例如：D:/driver/\n#把这这个目录添加到系统环境变量PATH下面\n```\n\n<!--more-->\n# 初始化一个测试文件\n```js\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,//查询元素组件\n    until = webdriver.until;//等待事件\n\nvar driver = new webdriver.Builder()//初始化浏览器\n    .forBrowser('chrome')\n    .build();\n\nvar Mock = require('mockjs')//模拟数据\n\ndriver.get('https://www.baidu.com');//打开浏览器\ndriver.sleep(300)//等待300毫秒执行\ndriver.findElement(By.id('kw')).clear();//input元素清空\ndriver.findElement(By.id('kw')).sendKeys('webdriver');//查找id为kw的元素，赋值webdriver\ndriver.findElement(By.id('su')).click();//查找id为su的元素，点击\ndriver.wait(until.titleIs('webdriver_百度搜索'), 1000);//等待页面title成为‘xxxx’\ndriver.quit();//退出\n\n```\n\n# 常用API\n\n## driver\n```\ndriver.get('https://www.baidu.com');//打开浏览器\ndriver.sleep(300)//等待300毫秒执行\ndriver.findElement(By.id('kw')).clear();//input元素清空\ndriver.findElement(By.id('kw')).sendKeys('webdriver');//查找id为kw的元素，赋值webdriver\ndriver.findElement(By.id('su')).click();//查找id为su的元素，点击\ndriver.wait(until.titleIs('webdriver_百度搜索'), 1000);//等待页面title成为‘xxxx’\ndriver.quit();//退出\n\n```\n\n## By\n```\n# By.name(val) 获取name为val的元素\n# By.id(val) 获取id为val的元素\n# By.css(val) 获取css为val的元素,可以用样式查询\n# By.xpath(val) 获取xpath元素，这个用的多 eg://button[@type='button']\n```\n\n",
				"html": "<h1 id=\"安装selenium-webdriver依赖包\"><a href=\"#安装selenium-webdriver依赖包\" class=\"headerlink\" title=\"安装selenium-webdriver依赖包\"></a>安装selenium-webdriver依赖包</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install selenium-webdriver --save</div></pre></td></tr></table></figure>\n<h1 id=\"下载Chrome插件\"><a href=\"#下载Chrome插件\" class=\"headerlink\" title=\"下载Chrome插件\"></a>下载Chrome插件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#去 http://chromedriver.storage.googleapis.com/index.html?path=2.24/ 下载</div><div class=\"line\">chromedriver_win32.zip</div><div class=\"line\">#下载驱动，并存放到一个目录中，例如：D:/driver/</div><div class=\"line\">#把这这个目录添加到系统环境变量PATH下面</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"初始化一个测试文件\"><a href=\"#初始化一个测试文件\" class=\"headerlink\" title=\"初始化一个测试文件\"></a>初始化一个测试文件</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webdriver = <span class=\"built_in\">require</span>(<span class=\"string\">'selenium-webdriver'</span>),</div><div class=\"line\">    By = webdriver.By,<span class=\"comment\">//查询元素组件</span></div><div class=\"line\">    until = webdriver.until;<span class=\"comment\">//等待事件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> webdriver.Builder()<span class=\"comment\">//初始化浏览器</span></div><div class=\"line\">    .forBrowser(<span class=\"string\">'chrome'</span>)</div><div class=\"line\">    .build();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">'mockjs'</span>)<span class=\"comment\">//模拟数据</span></div><div class=\"line\"></div><div class=\"line\">driver.get(<span class=\"string\">'https://www.baidu.com'</span>);<span class=\"comment\">//打开浏览器</span></div><div class=\"line\">driver.sleep(<span class=\"number\">300</span>)<span class=\"comment\">//等待300毫秒执行</span></div><div class=\"line\">driver.findElement(By.id(<span class=\"string\">'kw'</span>)).clear();<span class=\"comment\">//input元素清空</span></div><div class=\"line\">driver.findElement(By.id(<span class=\"string\">'kw'</span>)).sendKeys(<span class=\"string\">'webdriver'</span>);<span class=\"comment\">//查找id为kw的元素，赋值webdriver</span></div><div class=\"line\">driver.findElement(By.id(<span class=\"string\">'su'</span>)).click();<span class=\"comment\">//查找id为su的元素，点击</span></div><div class=\"line\">driver.wait(until.titleIs(<span class=\"string\">'webdriver_百度搜索'</span>), <span class=\"number\">1000</span>);<span class=\"comment\">//等待页面title成为‘xxxx’</span></div><div class=\"line\">driver.quit();<span class=\"comment\">//退出</span></div></pre></td></tr></table></figure>\n<h1 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h1><h2 id=\"driver\"><a href=\"#driver\" class=\"headerlink\" title=\"driver\"></a>driver</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver.get(&apos;https://www.baidu.com&apos;);//打开浏览器</div><div class=\"line\">driver.sleep(300)//等待300毫秒执行</div><div class=\"line\">driver.findElement(By.id(&apos;kw&apos;)).clear();//input元素清空</div><div class=\"line\">driver.findElement(By.id(&apos;kw&apos;)).sendKeys(&apos;webdriver&apos;);//查找id为kw的元素，赋值webdriver</div><div class=\"line\">driver.findElement(By.id(&apos;su&apos;)).click();//查找id为su的元素，点击</div><div class=\"line\">driver.wait(until.titleIs(&apos;webdriver_百度搜索&apos;), 1000);//等待页面title成为‘xxxx’</div><div class=\"line\">driver.quit();//退出</div></pre></td></tr></table></figure>\n<h2 id=\"By\"><a href=\"#By\" class=\"headerlink\" title=\"By\"></a>By</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># By.name(val) 获取name为val的元素</div><div class=\"line\"># By.id(val) 获取id为val的元素</div><div class=\"line\"># By.css(val) 获取css为val的元素,可以用样式查询</div><div class=\"line\"># By.xpath(val) 获取xpath元素，这个用的多 eg://button[@type=&apos;button&apos;]</div></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1489720879495,
				"created_by": 2,
				"updated_at": 1489721129633,
				"updated_by": 2,
				"published_at": 1489720879495,
				"published_by": 2
			},
			{
				"id": "cj07wiysb0000tgfczpgybtmb",
				"title": "基于 Webpack 的应用包体尺寸优化",
				"slug": "webpack-size-analysas",
				"markdown": "\n最近我在构建一个基于 React 的单页应用，当我用Google TestMySite来检测自己的站点时，它的反馈是加载时间过长，因此我开始考虑如何优化初次下载的包体大小。优化应用包体的第一步就是检视当前的包体组成，判断其中哪些依赖时必须的，我们在 Webpack 的回显中可以看到当前的包体大小：\n<!--more-->\n```bash\n$ webpack -p --progress\nHash: dbce3735c9520e2dc682\nVersion: webpack 1.14.0\nTime: 54264ms\n            Asset     Size  Chunks             Chunk Names\n    dist/index.js  3.29 MB       0  [emitted]  main\ndist/index.js.map  13.7 MB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n    + 1374 hidden modules\n```\n# 分析包体依赖\n\n这里我们使用webpack-bundle-analyzer来分析 Webpack 生成的包体组成并且以可视化的方式反馈给开发者。我们可以使用npm来安装该插件：\n```js\n$ npm install --save-dev webpack-bundle-analyzer\n```\n然后我们需要修改webpack.config.js来引入该插件：\n```js\nvar BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\n// ...\nplugins: [new BundleAnalyzerPlugin()]\n// ...\n```阿达撒大声地\n然后我们照常使用 Webpack 编译之后，可视化的结果会被展示在http://localhost:8888/，你大概可以看到如下的交互界面：\n\n这个交互插件应该能帮你分析哪些依赖占据了主要的包体大小，这也提醒我们在引入某个功能的时候，应该只引入需要的模块，以 Lodash 为例：\n```js\n//1. Import the entire lodash library and add it to the bundle\nimport lodash from 'lodash'\nlodash.groupBy(rows, 'id')\n\n//2. Import only the required function from lodash\nimport groupBy from 'lodash/groupBy'\ngroupBy(rows, 'id')\n```\n# 设置合适的 Node 环境变量\n\n设置合适的环境变量能够帮助 Webpack 更好地去压缩处理依赖中的代码，我们需要在生产环境中将NODE_ENV设置为production:\n```js\nplugins: [...\n    new webpack.DefinePlugin({\n             'process.env.NODE_ENV': '\"production\"'\n    }),\n..]\n```\n# 使用最小化的 SourceMap\n\n当我们在生产环境下组合压缩 JavaScript 文件时，Webpack 会为我们生成某个 SourceMap 文件来映射源文件的内容。在开发环境中我们经常会将devtool设置为eval，这样会将大量的代码信息打包到输出包体中从而提升编译速度。而开发环境中我们可以将该项设置为eval-source-map或者cheap-module-source-map，详细介绍参考这里，我们比较切换前后的包体大小可以发现缩小了将近 1MB 的内容：\n```bash\n$ webpack -p --progress\nHash: 68a52fddbcc2898a5899\nVersion: webpack 1.14.0\nTime: 29757ms\n            Asset     Size  Chunks             Chunk Names\n    dist/index.js  1.71 MB       0  [emitted]  main\ndist/index.js.map  464 bytes       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n    + 1365 hidden modules\n```\n# 其他常用插件\n\n这里我列举几个常用的能够用于减少包体大小的插件，我们可以根据项目需求选择性的使用：\n\ncompression-webpack-plugin:该插件能够将资源文件压缩为.gz文件，并且根据客户端的需求按需加载。\n\ndedupeplugin:抽取出输出包体中的相同或者近似的文件或者代码，可能对于 Entry Chunk 有所负担，不过能有效地减少包体大小。\n\nuglifyjsplugin:压缩输出块的大小，可以参考官方文档。\n\nignoreplugin:用于忽略引入模块中并不需要的内容，譬如当我们引入moment.js时，我们并不需要引入该库中所有的区域设置，因此可以利用该插件忽略不必要的代码。\n```js\n...\nvar CompressionPlugin = require(\"compression-webpack-plugin\");\n...\nlet config = {\n  entry: path.join(__dirname, '../app/index'),\n  cache: false,\n  devtool: 'cheap-module-source-map',\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': '\"production\"'\n    }),\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.UglifyJsPlugin({\n      mangle: true,\n      compress: {\n        warnings: false, // Suppress uglification warnings\n        pure_getters: true,\n        unsafe: true,\n        unsafe_comps: true,\n        screw_ie8: true\n      },\n      output: {\n        comments: false,\n      },\n      exclude: [/\\.min\\.js$/gi] // skip pre-minified libs\n    }),\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, [/moment$/]),\n    new webpack.NoErrorsPlugin(),\n    new CompressionPlugin({\n      asset: \"[path].gz[query]\",\n      algorithm: \"gzip\",\n      test: /\\.js$|\\.css$|\\.html$/,\n      threshold: 10240,\n      minRatio: 0\n    })\n    ...\n  ],\n```\n引入该插件后包体的体积会受到进一步的压缩：\n\n```bash\n$ webpack -p --progress\nHash: 68a52fddbcc2898a5899\nVersion: webpack 1.14.0\nTime: 29757ms\n            Asset     Size  Chunks             Chunk Names\n    dist/index.js  1.54 MB       0  [emitted]  main\ndist/index.js.gz   390 KB        0  [emitted]  main\ndist/index.js.map  464 bytes     0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n    + 1365 hidden modules\n```",
				"html": "<p>最近我在构建一个基于 React 的单页应用，当我用Google TestMySite来检测自己的站点时，它的反馈是加载时间过长，因此我开始考虑如何优化初次下载的包体大小。优化应用包体的第一步就是检视当前的包体组成，判断其中哪些依赖时必须的，我们在 Webpack 的回显中可以看到当前的包体大小：<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack -p --progress</div><div class=\"line\">Hash: dbce3735c9520e2dc682</div><div class=\"line\">Version: webpack 1.14.0</div><div class=\"line\">Time: 54264ms</div><div class=\"line\">            Asset     Size  Chunks             Chunk Names</div><div class=\"line\">    dist/index.js  3.29 MB       0  [emitted]  main</div><div class=\"line\">dist/index.js.map  13.7 MB       0  [emitted]  main</div><div class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</div><div class=\"line\">    + 1374 hidden modules</div></pre></td></tr></table></figure></p>\n<h1 id=\"分析包体依赖\"><a href=\"#分析包体依赖\" class=\"headerlink\" title=\"分析包体依赖\"></a>分析包体依赖</h1><p>这里我们使用webpack-bundle-analyzer来分析 Webpack 生成的包体组成并且以可视化的方式反馈给开发者。我们可以使用npm来安装该插件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save-dev webpack-bundle-analyzer</div></pre></td></tr></table></figure></p>\n<p>然后我们需要修改webpack.config.js来引入该插件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> BundleAnalyzerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">plugins: [<span class=\"keyword\">new</span> BundleAnalyzerPlugin()]</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`阿达撒大声地</span></div><div class=\"line\">然后我们照常使用 Webpack 编译之后，可视化的结果会被展示在http://localhost:8888/，你大概可以看到如下的交互界面：</div><div class=\"line\"></div><div class=\"line\">这个交互插件应该能帮你分析哪些依赖占据了主要的包体大小，这也提醒我们在引入某个功能的时候，应该只引入需要的模块，以 Lodash 为例：</div><div class=\"line\">`<span class=\"string\">``</span>js</div><div class=\"line\"><span class=\"comment\">//1. Import the entire lodash library and add it to the bundle</span></div><div class=\"line\"><span class=\"keyword\">import</span> lodash <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\">lodash.groupBy(rows, <span class=\"string\">'id'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2. Import only the required function from lodash</span></div><div class=\"line\"><span class=\"keyword\">import</span> groupBy <span class=\"keyword\">from</span> <span class=\"string\">'lodash/groupBy'</span></div><div class=\"line\">groupBy(rows, <span class=\"string\">'id'</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"设置合适的-Node-环境变量\"><a href=\"#设置合适的-Node-环境变量\" class=\"headerlink\" title=\"设置合适的 Node 环境变量\"></a>设置合适的 Node 环境变量</h1><p>设置合适的环境变量能够帮助 Webpack 更好地去压缩处理依赖中的代码，我们需要在生产环境中将NODE_ENV设置为production:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [...</div><div class=\"line\">    new webpack.DefinePlugin(&#123;</div><div class=\"line\">             <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"string\">'\"production\"'</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">..]</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用最小化的-SourceMap\"><a href=\"#使用最小化的-SourceMap\" class=\"headerlink\" title=\"使用最小化的 SourceMap\"></a>使用最小化的 SourceMap</h1><p>当我们在生产环境下组合压缩 JavaScript 文件时，Webpack 会为我们生成某个 SourceMap 文件来映射源文件的内容。在开发环境中我们经常会将devtool设置为eval，这样会将大量的代码信息打包到输出包体中从而提升编译速度。而开发环境中我们可以将该项设置为eval-source-map或者cheap-module-source-map，详细介绍参考这里，我们比较切换前后的包体大小可以发现缩小了将近 1MB 的内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack -p --progress</div><div class=\"line\">Hash: 68a52fddbcc2898a5899</div><div class=\"line\">Version: webpack 1.14.0</div><div class=\"line\">Time: 29757ms</div><div class=\"line\">            Asset     Size  Chunks             Chunk Names</div><div class=\"line\">    dist/index.js  1.71 MB       0  [emitted]  main</div><div class=\"line\">dist/index.js.map  464 bytes       0  [emitted]  main</div><div class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</div><div class=\"line\">    + 1365 hidden modules</div></pre></td></tr></table></figure></p>\n<h1 id=\"其他常用插件\"><a href=\"#其他常用插件\" class=\"headerlink\" title=\"其他常用插件\"></a>其他常用插件</h1><p>这里我列举几个常用的能够用于减少包体大小的插件，我们可以根据项目需求选择性的使用：</p>\n<p>compression-webpack-plugin:该插件能够将资源文件压缩为.gz文件，并且根据客户端的需求按需加载。</p>\n<p>dedupeplugin:抽取出输出包体中的相同或者近似的文件或者代码，可能对于 Entry Chunk 有所负担，不过能有效地减少包体大小。</p>\n<p>uglifyjsplugin:压缩输出块的大小，可以参考官方文档。</p>\n<p>ignoreplugin:用于忽略引入模块中并不需要的内容，譬如当我们引入moment.js时，我们并不需要引入该库中所有的区域设置，因此可以利用该插件忽略不必要的代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">var CompressionPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"compression-webpack-plugin\"</span>);</div><div class=\"line\">...</div><div class=\"line\">let config = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: path.join(__dirname, <span class=\"string\">'../app/index'</span>),</div><div class=\"line\">  <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">'cheap-module-source-map'</span>,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">      <span class=\"string\">'process.env.NODE_ENV'</span>: <span class=\"string\">'\"production\"'</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.DedupePlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">mangle</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">compress</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// Suppress uglification warnings</span></div><div class=\"line\">        pure_getters: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">unsafe</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">unsafe_comps</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">screw_ie8</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">comments</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">exclude</span>: [<span class=\"regexp\">/\\.min\\.js$/gi</span>] <span class=\"comment\">// skip pre-minified libs</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/^\\.\\/locale$/</span>, [<span class=\"regexp\">/moment$/</span>]),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.NoErrorsPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> CompressionPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">asset</span>: <span class=\"string\">\"[path].gz[query]\"</span>,</div><div class=\"line\">      <span class=\"attr\">algorithm</span>: <span class=\"string\">\"gzip\"</span>,</div><div class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$|\\.css$|\\.html$/</span>,</div><div class=\"line\">      <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</div><div class=\"line\">      <span class=\"attr\">minRatio</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    ...</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>引入该插件后包体的体积会受到进一步的压缩：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack -p --progress</div><div class=\"line\">Hash: 68a52fddbcc2898a5899</div><div class=\"line\">Version: webpack 1.14.0</div><div class=\"line\">Time: 29757ms</div><div class=\"line\">            Asset     Size  Chunks             Chunk Names</div><div class=\"line\">    dist/index.js  1.54 MB       0  [emitted]  main</div><div class=\"line\">dist/index.js.gz   390 KB        0  [emitted]  main</div><div class=\"line\">dist/index.js.map  464 bytes     0  [emitted]  main</div><div class=\"line\">   [0] multi main 40 bytes &#123;0&#125; [built]</div><div class=\"line\">    + 1365 hidden modules</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1489396855574,
				"created_by": 2,
				"updated_at": 1489718723317,
				"updated_by": 2,
				"published_at": 1489396855574,
				"published_by": 2
			},
			{
				"id": "cj07ru3sw0000l8fc1aytobqg",
				"title": "Webpack按需打包Lodash的几种方式",
				"slug": "webpack_lodash",
				"markdown": "\n在数据操作时，Lodash 就是我的弹药库，不管遇到多复杂的数据结构都能用一些函数轻松拆解。\n\nES6 中也新增了诸多新的对象函数，一些简单的项目中 ES6 就足够使用了，但还是会有例外的情况引用了少数的 Lodash 函数。一个完整的 Lodash 库，即使是压缩后，现最新版本也有 71k 的体积。不能为了吃一口饭而买下一个饭店啊。\n\n针对这个问题，其实已经有很多可选方案了。\n<!--more-->\n\n# 函数模块\nLodash 中的每个函数在 NPM 都有一个单独的发布模块。 NPM: results for ‘lodash’\n\n假如你只需要使用 _.isEqual ，那么你只需要安装 lodash.isequal 模块，然后按以下方式引用。\n```js\nvar isEqual = require('lodash.isequal')\n// or ES6\nimport isEqual from 'lodash.isequal'\n\n\nisEqual([1, 2, 3], [1, 2, 3]) // true\n```\n# 全路径引用\n在你完整安装 Lodash 后，可以按 lodash/函数名 的格式单独引入需要的函数模块。\n```js\nvar difference = require('lodash/difference')\n// or ES6\nimport difference from 'lodash/difference'\n\ndifference([1, 2], [1, 3]) // [2]\n```\n# 使用插件优化\n在简单场景下，以上两种方式足以解决问题。\n\n而遇到复杂的数据对象时，我们不得不在一个文件中引入多个 Lodash 函数，这样就需要在文件中写多个 require 或 import 相关函数。\n```js\nimport remove from 'lodash/remove'\nimport uniq from 'lodash/uniq'\nimport invokeMap from 'lodash/invokeMap'\nimport sortBy from 'lodash/sortBy'\n// more...\n```\n正写到关键处却因为引入一个函数要拉到文件头部去定义引用而打乱了思路，很不爽！\n\n于是我机智的到 Github 去搜索了 webpack 和 lodash 两个关键词的组合，排在首位的 lodash-webpack-plugin 正是解决这个问题的插件。\n\n使用时需要以下模块，其实除了前两个剩下的一般都已安装了：\n```js\n$ npm i -S lodash-webpack-plugin babel-plugin-lodash babel-core babel-loader babel-preset-es2015 webpack\n```\n配置：\n```js\nwebpack.config.js\nvar LodashModuleReplacementPlugin = require('lodash-webpack-plugin');\nvar webpack = require('webpack');\n\nmodule.exports = {\n module: {\n loaders: [{\n loader: 'babel',\n test: /\\.js$/,\n exclude: /node_modules/,\n query: {\n plugins: ['transform-runtime', 'lodash'],\n presets: ['es2015']\n }\n }]\n },\n plugins: [\n new LodashModuleReplacementPlugin,\n new webpack.optimize.OccurrenceOrderPlugin,\n new webpack.optimize.UglifyJsPlugin\n ]\n}\n```\n其中 babel-plugin-lodash 的配置，也就是 plugins: ['lodash'] ，并不是一定要在 loaders 中，也可以单独定义 babel 。\n```js\nwebpack.config.js\nvar LodashModuleReplacementPlugin = require('lodash-webpack-plugin');\nvar webpack = require('webpack');\n\nmodule.exports = {\n module: {\n loaders: [{\n loader: 'babel',\n test: /\\.js$/,\n exclude: /node_modules/\n }]\n },\n babel: {\n presets: ['es2015'],\n plugins: ['transform-runtime', 'lodash']\n },\n plugins: [\n new LodashModuleReplacementPlugin,\n new webpack.optimize.OccurrenceOrderPlugin,\n new webpack.optimize.UglifyJsPlugin\n ]\n}\n```\n又或者是 .babelrc 文件中。\n\n以上工作完成了，在每个你需要使用 lodash 函数的文件中只需要引用一次 lodash，即可调用任意函数而不会造成完全打包。\n```js\nimport _ from 'lodash'\n\n_.add(1, 2) // 打包时只会引入这一个函数模块\n```",
				"html": "<p>在数据操作时，Lodash 就是我的弹药库，不管遇到多复杂的数据结构都能用一些函数轻松拆解。</p>\n<p>ES6 中也新增了诸多新的对象函数，一些简单的项目中 ES6 就足够使用了，但还是会有例外的情况引用了少数的 Lodash 函数。一个完整的 Lodash 库，即使是压缩后，现最新版本也有 71k 的体积。不能为了吃一口饭而买下一个饭店啊。</p>\n<p>针对这个问题，其实已经有很多可选方案了。<br><a id=\"more\"></a></p>\n<h1 id=\"函数模块\"><a href=\"#函数模块\" class=\"headerlink\" title=\"函数模块\"></a>函数模块</h1><p>Lodash 中的每个函数在 NPM 都有一个单独的发布模块。 NPM: results for ‘lodash’</p>\n<p>假如你只需要使用 _.isEqual ，那么你只需要安装 lodash.isequal 模块，然后按以下方式引用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isEqual = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash.isequal'</span>)</div><div class=\"line\"><span class=\"comment\">// or ES6</span></div><div class=\"line\"><span class=\"keyword\">import</span> isEqual <span class=\"keyword\">from</span> <span class=\"string\">'lodash.isequal'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">isEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"全路径引用\"><a href=\"#全路径引用\" class=\"headerlink\" title=\"全路径引用\"></a>全路径引用</h1><p>在你完整安装 Lodash 后，可以按 lodash/函数名 的格式单独引入需要的函数模块。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> difference = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash/difference'</span>)</div><div class=\"line\"><span class=\"comment\">// or ES6</span></div><div class=\"line\"><span class=\"keyword\">import</span> difference <span class=\"keyword\">from</span> <span class=\"string\">'lodash/difference'</span></div><div class=\"line\"></div><div class=\"line\">difference([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"使用插件优化\"><a href=\"#使用插件优化\" class=\"headerlink\" title=\"使用插件优化\"></a>使用插件优化</h1><p>在简单场景下，以上两种方式足以解决问题。</p>\n<p>而遇到复杂的数据对象时，我们不得不在一个文件中引入多个 Lodash 函数，这样就需要在文件中写多个 require 或 import 相关函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> remove <span class=\"keyword\">from</span> <span class=\"string\">'lodash/remove'</span></div><div class=\"line\"><span class=\"keyword\">import</span> uniq <span class=\"keyword\">from</span> <span class=\"string\">'lodash/uniq'</span></div><div class=\"line\"><span class=\"keyword\">import</span> invokeMap <span class=\"keyword\">from</span> <span class=\"string\">'lodash/invokeMap'</span></div><div class=\"line\"><span class=\"keyword\">import</span> sortBy <span class=\"keyword\">from</span> <span class=\"string\">'lodash/sortBy'</span></div><div class=\"line\"><span class=\"comment\">// more...</span></div></pre></td></tr></table></figure></p>\n<p>正写到关键处却因为引入一个函数要拉到文件头部去定义引用而打乱了思路，很不爽！</p>\n<p>于是我机智的到 Github 去搜索了 webpack 和 lodash 两个关键词的组合，排在首位的 lodash-webpack-plugin 正是解决这个问题的插件。</p>\n<p>使用时需要以下模块，其实除了前两个剩下的一般都已安装了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm i -S lodash-webpack-plugin babel-plugin-lodash babel-core babel-loader babel-preset-es2015 webpack</div></pre></td></tr></table></figure></p>\n<p>配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack.config.js</div><div class=\"line\"><span class=\"keyword\">var</span> LodashModuleReplacementPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\"> <span class=\"attr\">module</span>: &#123;</div><div class=\"line\"> <span class=\"attr\">loaders</span>: [&#123;</div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\"> <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\"> <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\"> <span class=\"attr\">query</span>: &#123;</div><div class=\"line\"> <span class=\"attr\">plugins</span>: [<span class=\"string\">'transform-runtime'</span>, <span class=\"string\">'lodash'</span>],</div><div class=\"line\"> <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>]</div><div class=\"line\"> &#125;</div><div class=\"line\"> &#125;]</div><div class=\"line\"> &#125;,</div><div class=\"line\"> <span class=\"attr\">plugins</span>: [</div><div class=\"line\"> <span class=\"keyword\">new</span> LodashModuleReplacementPlugin,</div><div class=\"line\"> <span class=\"keyword\">new</span> webpack.optimize.OccurrenceOrderPlugin,</div><div class=\"line\"> <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin</div><div class=\"line\"> ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中 babel-plugin-lodash 的配置，也就是 plugins: [‘lodash’] ，并不是一定要在 loaders 中，也可以单独定义 babel 。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack.config.js</div><div class=\"line\"><span class=\"keyword\">var</span> LodashModuleReplacementPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\"> <span class=\"attr\">module</span>: &#123;</div><div class=\"line\"> <span class=\"attr\">loaders</span>: [&#123;</div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\"> <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\"> <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></div><div class=\"line\"> &#125;]</div><div class=\"line\"> &#125;,</div><div class=\"line\"> <span class=\"attr\">babel</span>: &#123;</div><div class=\"line\"> <span class=\"attr\">presets</span>: [<span class=\"string\">'es2015'</span>],</div><div class=\"line\"> <span class=\"attr\">plugins</span>: [<span class=\"string\">'transform-runtime'</span>, <span class=\"string\">'lodash'</span>]</div><div class=\"line\"> &#125;,</div><div class=\"line\"> <span class=\"attr\">plugins</span>: [</div><div class=\"line\"> <span class=\"keyword\">new</span> LodashModuleReplacementPlugin,</div><div class=\"line\"> <span class=\"keyword\">new</span> webpack.optimize.OccurrenceOrderPlugin,</div><div class=\"line\"> <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin</div><div class=\"line\"> ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>又或者是 .babelrc 文件中。</p>\n<p>以上工作完成了，在每个你需要使用 lodash 函数的文件中只需要引用一次 lodash，即可调用任意函数而不会造成完全打包。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"></div><div class=\"line\">_.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 打包时只会引入这一个函数模块</span></div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1489389119866,
				"created_by": 2,
				"updated_at": 1489389339664,
				"updated_by": 2,
				"published_at": 1489389119866,
				"published_by": 2
			},
			{
				"id": "cizt7jzzs0000v8fcf1rodp42",
				"title": "Redux + React 应用程序架构的 3 条规范",
				"slug": "react-redux-jiegou",
				"markdown": "\n随着应用程序的增长，通常我们就会发现文件结构和组织对于应用程序代码的可维护性来说就会变得非常重要。\n\n在这篇文章里，我会介绍自己在项目中亲自实践的三条组织规则。通过遵循这些规则，你的应用程序代码将会变得更加易读，而且你会发现自己不用再把时间浪费在文件导航，频繁重构以及 Bug 修复上了。\n\n<!--more-->\n我希望这些建议，可以给那些想要改善应用结构却不知从何入手的开发者们提供帮助。\n\n# 项目结构的三条规则\n\n接下来的内容就是关于构建一个项目的一些基本规则。需要注意的是，这些规则本身是跟框架和语言无关的，所以你在所有的情况下都应该可以遵循这些规则。但在这里，我们是以 React 和 Redux 为例，熟悉这些框架将会很有帮助。\n\n## 规则 #1: 基于特性进行组织\n\n首先让我们来看看不该做什么，常见的一种方式就是根据对象角色来组织项目结构。\n\nRedux + React:\n```bash\nactions/\n  todos.js\ncomponents/\n  todos/\n    TodoItem.js\n    ...\nconstants/\n  actionTypes.js\nreducers/\n  todos.js\nindex.js\nrootReducer.js\nAngularJS:\n\ncontrollers/\ndirectives/\nservices/\ntemplates/\nindex.js\n```\nRuby on Rails:\n```bash\napp/\n  controllers/\n  models/\n  views/\n```\n将类似的对象（Controller 和 Controller，Component 和 Component）组织在一起，这看似合情合理，但伴随着应用的增长，这种结构将会不利于扩展。\n\n每当你添加或修改特性的时候，你就会开始注意到某些部分的对象倾向于同时发生改变。将这些对象归在一起可以共同构成一个特性模块。比如说，在一个 Todo 应用里，每当你改变 reducers/todos.js 文件，很可能你也会改变 actions/todos.js 和 components/todos/*.js。\n\n相反，为了不再把时间浪费在浏览目录去寻找跟 todos 有关的文件，还是将它们放到同一个地方会明显比较好。\n\n一种更好的 React + Redux 项目文件目录：\n```bash\ntodos/\n  components/\n  actions.js\n  actionTypes.js\n  constants.js\n  index.js\n  reducer.js\nindex.js\nrootReducer.js\n```\n注意：我将会在文章后面的部分详细描述这些文件的具体内容。\n\n在一个大型项目当中，根据特性组织文件可以让你专注于近在手边儿的特性，而不会不得已而去担心整个项目的导航。这就意味着，如果我需要修改 todos 相关的东西，我可以单独工作在这个模块而不用考虑应用的其他部分。从感觉上来说，这就像是在主应用程序里面创建了另外一个应用程序。\n\n从表面上来看，根据特性组织似乎看起来像是一种基于美学的考虑。但是，就如我们在接下来的两个规则中所看到的那样，这种构建项目的方式将会帮助简化你的应用程序代码。\n\n## 规则 #2: 设计严格的模块边界\n\nRich Hickey 在他的 Ruby Conf 2012 演讲 Simplicity Matters 中，将复杂度定义为一种编织（或交织）的东西。当你把模块耦合在一起，你将会从代码当中看到某种跟现实中的绳结或者辫子一样的形态。\n\n项目结构的复杂相关度就是，当你把一个对象靠近于另外一个对象，将其耦合到一起的障碍就会显著减少。\n\n作为示例，让我们来给 TODO 应用添加一个新特性：我们想要根据 project 来管理 TODO 列表。这就意味着我们将要创建一个名为 projects 的新模块。\n```bash\nprojects/\n  components/\n  actions.js\n  actionTypes.js\n  reducers.js\n  index.js\ntodos/\nindex.js\n```\n现在，projects 模块显然会依赖于 todos。在这种情况下，严格约束，以及仅耦合于由 todos/index.js 所暴露的「公共」接口就变得非常重要。\n```bash\n#BAD\nimport actions from '../todos/actions';\nimport TodoItem from '../todos/components/TodoItem';\n\n#GOOD\nimport todos from '../todos';\nconst { actions, TodoItem } = todos;\n```\n另外一件事就是避免跟其他模块的状态相耦合。比如说，在 projects 模块内部，我们需要从 todos 的状态里面获取信息从而渲染组件。那么 todos 模块就最好能给 projects 模块暴露一个接口用于查询信息，而不是让这个组件和 todos 状态交织在一起。\n```js\n//BAD\n\nconst ProjectTodos = ({ todos }) => (\n  <div>\n    {todos.map(t => <TodoItem todo={t}/>)}\n  </div>\n);\n\n// Connect to todos state\nconst ProjectTodosContainer = connect(\n  // state is Redux state, props is React component props.\n  (state, props) => {\n    const project = state.projects[props.projectID];\n\n    // This couples to the todos state. BAD!\n    const todos = state.todos.filter(\n      t => project.todoIDs.includes(t.id)\n    );\n\n    return { todos };\n  }\n)(ProjectTodos);\n\n//GOOD\n\nimport { createSelector } from 'reselect';\nimport todos from '../todos';\n\n// Same as before\nconst ProjectTodos = ({ todos }) => (\n  <div>\n    {todos.map(t => <TodoItem todo={t}/>)}\n  </div>\n);\n\nconst ProjectTodosContainer = connect(\n  createSelector(\n    (state, props) => state.projects[props.projectID],\n\n    // Let the todos module provide the implementation of the selector.\n    // GOOD!\n    todos.selectors.getAll,\n\n    // Combine previous selectors, and provides final props.\n    (project, todos) => {\n      return {\n        todos: todos.filter(t => project.todoIDs.includes(t.id))\n      };\n    }\n  )\n)(ProjectTodos);\n```\n在「GOOD」的例子当中，projects 模块并不用关心 todos 模块内部的状态。这是非常有用的，因为我们可以自由地改变 todos 状态的结构，而不用担心破坏其他依赖模块。当然，我们依旧需要维护我们的 selector 契约，但另一种选择则必须从一大堆不相干的组件中进行搜索并依次对其重构。\n\n通过人为地设计严格的模块边界，我们可以简化应用代码，并且反过来增加应用的可维护性。无需涉及其他模块的内部，我们应当思考模块之间契约的形式和维护。\n\n既然项目已经根据特性组织而成，并且在每个特性之间也有了清晰的边界，那么接下来就是我想要涉及的最后一件事：循环依赖。\n\n## 规则 #3: 避免循环依赖\n\n「循环依赖是很糟糕的」，这应该不用太费口舌就能让你相信我说的话。但是，如果没有适当的项目结构的话，还是会很容易就掉进了这个坑里。\n\n大多数时候，依赖在一开始的时候都是无害的。我们可能会认为 projects 模块需要根据 todos 的 actions 来 reduce 一些状态。如果我们没有根据特性分组的话，然后我们就会在一个全局的 actionTypes.js 文件当中看到一个包含所有 action 类型的清单，这对我们来说，就很容易找到并且无需考虑就可以获取我们所需要的（在当时）。\n\n假设，在 todos 内部我们又想要根据 projects 的 action 类型来 reduce 状态。如果我们已经有了一个全局的 actionTypes.js 文件的话，这应该已经足够简单了。但是很快我们就会明白，要是我们有了清晰的模块边界的话这些就不足挂齿了。为了说明原因，来看看以下的实例。\n\n循环依赖示例\n\nGiven:\n\na.js\n```js\nimport b from './b';\n\nexport const name = 'Alice';\n\nexport default () => console.log(b);\n```\nb.js\n```js\nimport { name } from './a';\n\nexport default `Hello ${name}!`;\n```\n那么接下来的代码会发生什么呢？\n```js\nimport a from './a';\n\na(); // ???\n```\n我们可能会期待 “Hello Alice!” 会被打印出来，但其实 a() 会输出 “Hello undefined!”。这是因为 a 的命名导出，在 a 是由 b 引入的时候并不可用（由于循环引用）。\n\n这里隐含的意思就是，我们不能同时让 projects 依赖于 todos 内部的 action 类型，并且 todos 又依赖于 projects 内部的 action 类型。你可以使用聪明的方式绕过这种限制，但要是你继续这样下去的话，我保证你会在将来的时候被坑的！\n\n不要制造毛团！\n\n换句话来说，制造循环依赖，你就是在用最糟糕的方式在打着绳子的结。想象一下一个模块就是一缕头发，然后模块之间相互依赖着形成了一个巨大的，混乱的毛团。\n\n不论什么时候，你想要使用这块毛团中的一个小模块，你都别无选择只能陷入这种巨大的混乱当中。而且更糟糕的是，当你需要修改毛团当中的某些东西，要想不破坏其他东西的话就变得很难了。\n\n遵循规则 #2，你就很难会制造出这种循环依赖了。不要与之对抗，而是用这份精力来适当地分解你的模块。\n\n# 深入的实例和规范推荐\n\n接下来我想要深入到 Redux 和 React 应用当中不同文件的具体内容。这部分将会特别针对这些框架，要是你不感兴趣的话可以随你便跳过去。:)\n\n让我们来重新看看我们的 TODO 应用。（我在示例当中添加了 constants，model，以及 selectors）\n```bash\ntodos/\n  components/\n  actions.js\n  actionTypes.js\n  constants.js\n  index.js\n  model.js\n  reducer.js\n  selectors.js\nindex.js\nrootReducer.js\n```\n我们将会根据他们的职责来拆分这些模块。\n\n## 模块 index 和 常量\n\n模块 index 就是负责维护模块的公共 API。这是模块和模块之间相互进行交互而暴露的地方。\n\n一个最小化的 Redux + React 应用应该就会如下所示。\n```js\n// todos/constants.js\n\n// This will be used later in our root reducer and selectors\nexport const NAME = 'todos';\n// todos/index.js\nimport * as actions from './actions';\nimport * as components from './components';\nimport * as constants from './constants';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nexport default { actions, components, constants, reducer, selectors };\n```\n注意：这跟 Ducks 架构有所类似。\n\n## Action 类型 & Action Creators\n\nAction 类型在 Redux 当中只是一些字符串常量。唯一修改的地方就是我给每个类型都加上了 todos/ 前缀，以便于给这个模块创造一个命名空间。这就避免了跟应用中其他模块的名字发生冲突。\n```js\n// todos/actionTypes.js\nexport const ADD = 'todos/ADD';\nexport const DELETE = 'todos/DELETE';\nexport const EDIT = 'todos/EDIT';\nexport const COMPLETE = 'todos/COMPLETE';\nexport const COMPLETE_ALL = 'todos/COMPLETE_ALL';;\nexport const CLEAR_COMPLETED = 'todos/CLEAR_COMPLETED';\n```\n至于 action creators，跟往常的 Redux 应用没什么太大改变。\n```js\n// todos/actions.js\nimport t from './actionTypes';\n\nexport const add = (text) => ({\n  type: t.ADD,\n  payload: { text }\n});\n\n// ...\n```\n注意到我并没有必要去使用 addTodo，因为我已经在这个 todos 模块里面了。在其他模块里我也就可以像下面这样使用一个 action creator。\n```js\nimport todos from 'todos';\n\n// ...\n\ntodos.actions.add('Do that thing');\n```\n## Model\n\n这个 model.js 文件是我想要存放一些跟模块的状态相关的东西的地方。\n\n如果你使用 TypeScript 或者 Flow 的话，这将会尤其有用。\n```js\n// todos/model.js\nexport type Todo = {\n  id?: number;\n  text: string;\n  completed: boolean;\n};\n\n// This is the model of our module state (e.g. return type of the reducer)\nexport type State = Todo[];\n\n// Some utility functions that operates on our model\nexport const filterCompleted = todos => todos.filter(t => t.completed);\n\nexport const filterActive = todos => todos.filter(t => !t.completed);\n```\n## Reducers\n\n对于 reducers 来说，每个模块都应该跟以前一样只维护自己的状态。但是这儿有一种特殊的耦合应当被解决，即一个模块的 reducer 通常不会去决定它在哪里被装载到整个应用状态原子当中。\n\n这是不确定的，因为它意味着我们的模块 selectors（我们接下来会涉及到）将会间接地耦合到根 reducer 当中。反过来，整个模块的组件也将会被耦合到根 reducer 中来。\n\n我们可以通过授权给 todos 模块来解决这个问题，让这个模块来决定应该在哪里被装载到状态原子。\n```js\n// rootReducer.js\nimport { combineReducers } from 'redux';\nimport todos from './todos';\n\nexport default combineReducers({\n  [todos.constants.NAME]: todos.reducer\n});\n```\n这就可以移除我们的 todos 模块和根 reducer 之间的耦合。当然，你也不一定要通过这种方式。其他的选择也包括依赖命名约定（比如，将 todos 模块状态装载到使用 todos 作为 key 的状态原子底下），或者你也可以使用模块工厂函数而不是依赖于静态 key。\n\n然后 reducer 就可能长得跟下面一样。\n```js\n// todos/reducer.js\nimport t from './actionTypes';\nimport { State } from './model';\n\nconst initialState: State = [{\n  text: 'Use Redux',\n  completed: false,\n  id: 0\n}];\n\nexport (state = initialState, action: any): State => {\n  switch (action.type) {\n    case t.ADD:\n      return [\n        // ...\n      ];\n    // ...\n  }\n};\n```\n## Selectors\n\nSelectors 提供了从模块状态中查询数据的一种方式。虽然它们不再像往常的 Redux 项目中所命名的那样，但是它们永远都是存在的。\n\nconnect 的第一个参数就是一个 selector，从状态原子当中选择想要的值，并且返回一个对象表示为一个组件的 props。\n\n我想要强烈建议将公共的 selectors 放到这个 selectors.js 文件当中，以便于它们既可以在这个模块里面被复用，也可能被应用的其他模块所用到。\n\n我非常推荐你去看看 reselect，因为它提供了一种方式，可以用来构建可组合的 selectors，并且能够自动 memoized。\n```js\n// todos/selectors.js\nimport { createSelector } from 'reselect';\nimport _ from 'lodash';\nimport { NAME } from './constants';\nimport { filterActive, filterCompleted } from './model';\n\nexport const getAll = state => state[NAME];\n\nexport const getCompleted = _.compose(filterCompleted, getAll);\n\nexport const getActive = _.compose(filterActive, getAll);\n\nexport const getCounts = createSelector(\n  getAll,\n  getCompleted,\n  getActive,\n  (allTodos, completedTodos, activeTodos) => ({\n    all: allTodos.length,\n    completed: completedTodos.length,\n    active: activeTodos.length\n  })\n);\n```\n## Components\n\n最后，我们有了自己的 React 组件。我建议你在组件当中尽可能地使用共享的 selectors。其中一个好处就是可以很轻松地对从 state 到 props 的 mapping 进行单元测试，而不用依赖于组件的测试。\n\n这儿就有一个 TODO 列表组件的例子：\n```js\nimport { createStructuredSelector } from 'reselect';\nimport { getAll } from '../selectors';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos }) => (\n  <div>\n    todos.map(t => <TodoItem todo={t}/>)\n  </div>\n);\n\nexport default connect(\n  createStructuredSelector({\n    todos: getAll\n  })\n)(TodoList);\n```\n这就是按照我所推荐规范的内容了。但是在我们结束之前，还有最后一个我想要讨论的主题：如何发现项目坏味道。\n\n# 项目结构的石蕊测试\n\n对我们来说，用于发现我们的代码坏味道的工具很重要。从经验上来看，仅仅因为一个项目从开始的时候很整洁，但这并不意味着它会一直如此。因此，我想要提出一种简单的方法用于发现项目结构的坏味道。\n\n每隔一段时间，从你的应用当中挑选一个模块，并且尝试将它抽取成一个外部模块（比如，一个 NodeJS 模块，Ruby gem 等等）。你不用实际这么去做，但至少像那样去思考。如果你不用花太多 efforts 就可以完成抽取，那么你就知道这个模块已经被很好得分解了。在这里的 “effort” 并没有被下定义，所以你还是需要自己去衡量（无论是主观或者客观）。\n\n在你的应用程序当中，跟其他模块一起试验一下。记下从实验当中所找到的任何问题：循环依赖，模块边界不清晰，等等。\n\n基于你的发现，无论你选择采取何种操作都取决于你。毕竟，软件行业就是一个与折衷息息相关的行业。但至少这应该会让你对自己的项目结构有更深入的了解。\n\n# 收尾\n\n项目结构并不是一个特别令人兴奋的话题讨论。然而，这又是非常重要的。\n\n这篇文章所描述的三条规则就是：\n\n基于特性组织\n设计严格的模块边界\n避免循环依赖\n无论你是否正在使用 Redux 和 Redux，我都非常推荐你在自己的软件项目当中遵循这些规则。\n\n​",
				"html": "<p>随着应用程序的增长，通常我们就会发现文件结构和组织对于应用程序代码的可维护性来说就会变得非常重要。</p>\n<p>在这篇文章里，我会介绍自己在项目中亲自实践的三条组织规则。通过遵循这些规则，你的应用程序代码将会变得更加易读，而且你会发现自己不用再把时间浪费在文件导航，频繁重构以及 Bug 修复上了。</p>\n<a id=\"more\"></a>\n<p>我希望这些建议，可以给那些想要改善应用结构却不知从何入手的开发者们提供帮助。</p>\n<h1 id=\"项目结构的三条规则\"><a href=\"#项目结构的三条规则\" class=\"headerlink\" title=\"项目结构的三条规则\"></a>项目结构的三条规则</h1><p>接下来的内容就是关于构建一个项目的一些基本规则。需要注意的是，这些规则本身是跟框架和语言无关的，所以你在所有的情况下都应该可以遵循这些规则。但在这里，我们是以 React 和 Redux 为例，熟悉这些框架将会很有帮助。</p>\n<h2 id=\"规则-1-基于特性进行组织\"><a href=\"#规则-1-基于特性进行组织\" class=\"headerlink\" title=\"规则 #1: 基于特性进行组织\"></a>规则 #1: 基于特性进行组织</h2><p>首先让我们来看看不该做什么，常见的一种方式就是根据对象角色来组织项目结构。</p>\n<p>Redux + React:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">actions/</div><div class=\"line\">  todos.js</div><div class=\"line\">components/</div><div class=\"line\">  todos/</div><div class=\"line\">    TodoItem.js</div><div class=\"line\">    ...</div><div class=\"line\">constants/</div><div class=\"line\">  actionTypes.js</div><div class=\"line\">reducers/</div><div class=\"line\">  todos.js</div><div class=\"line\">index.js</div><div class=\"line\">rootReducer.js</div><div class=\"line\">AngularJS:</div><div class=\"line\"></div><div class=\"line\">controllers/</div><div class=\"line\">directives/</div><div class=\"line\">services/</div><div class=\"line\">templates/</div><div class=\"line\">index.js</div></pre></td></tr></table></figure></p>\n<p>Ruby on Rails:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">  controllers/</div><div class=\"line\">  models/</div><div class=\"line\">  views/</div></pre></td></tr></table></figure></p>\n<p>将类似的对象（Controller 和 Controller，Component 和 Component）组织在一起，这看似合情合理，但伴随着应用的增长，这种结构将会不利于扩展。</p>\n<p>每当你添加或修改特性的时候，你就会开始注意到某些部分的对象倾向于同时发生改变。将这些对象归在一起可以共同构成一个特性模块。比如说，在一个 Todo 应用里，每当你改变 reducers/todos.js 文件，很可能你也会改变 actions/todos.js 和 components/todos/*.js。</p>\n<p>相反，为了不再把时间浪费在浏览目录去寻找跟 todos 有关的文件，还是将它们放到同一个地方会明显比较好。</p>\n<p>一种更好的 React + Redux 项目文件目录：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">todos/</div><div class=\"line\">  components/</div><div class=\"line\">  actions.js</div><div class=\"line\">  actionTypes.js</div><div class=\"line\">  constants.js</div><div class=\"line\">  index.js</div><div class=\"line\">  reducer.js</div><div class=\"line\">index.js</div><div class=\"line\">rootReducer.js</div></pre></td></tr></table></figure></p>\n<p>注意：我将会在文章后面的部分详细描述这些文件的具体内容。</p>\n<p>在一个大型项目当中，根据特性组织文件可以让你专注于近在手边儿的特性，而不会不得已而去担心整个项目的导航。这就意味着，如果我需要修改 todos 相关的东西，我可以单独工作在这个模块而不用考虑应用的其他部分。从感觉上来说，这就像是在主应用程序里面创建了另外一个应用程序。</p>\n<p>从表面上来看，根据特性组织似乎看起来像是一种基于美学的考虑。但是，就如我们在接下来的两个规则中所看到的那样，这种构建项目的方式将会帮助简化你的应用程序代码。</p>\n<h2 id=\"规则-2-设计严格的模块边界\"><a href=\"#规则-2-设计严格的模块边界\" class=\"headerlink\" title=\"规则 #2: 设计严格的模块边界\"></a>规则 #2: 设计严格的模块边界</h2><p>Rich Hickey 在他的 Ruby Conf 2012 演讲 Simplicity Matters 中，将复杂度定义为一种编织（或交织）的东西。当你把模块耦合在一起，你将会从代码当中看到某种跟现实中的绳结或者辫子一样的形态。</p>\n<p>项目结构的复杂相关度就是，当你把一个对象靠近于另外一个对象，将其耦合到一起的障碍就会显著减少。</p>\n<p>作为示例，让我们来给 TODO 应用添加一个新特性：我们想要根据 project 来管理 TODO 列表。这就意味着我们将要创建一个名为 projects 的新模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">projects/</div><div class=\"line\">  components/</div><div class=\"line\">  actions.js</div><div class=\"line\">  actionTypes.js</div><div class=\"line\">  reducers.js</div><div class=\"line\">  index.js</div><div class=\"line\">todos/</div><div class=\"line\">index.js</div></pre></td></tr></table></figure></p>\n<p>现在，projects 模块显然会依赖于 todos。在这种情况下，严格约束，以及仅耦合于由 todos/index.js 所暴露的「公共」接口就变得非常重要。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#BAD</span></div><div class=\"line\">import actions from <span class=\"string\">'../todos/actions'</span>;</div><div class=\"line\">import TodoItem from <span class=\"string\">'../todos/components/TodoItem'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#GOOD</span></div><div class=\"line\">import todos from <span class=\"string\">'../todos'</span>;</div><div class=\"line\">const &#123; actions, TodoItem &#125; = todos;</div></pre></td></tr></table></figure></p>\n<p>另外一件事就是避免跟其他模块的状态相耦合。比如说，在 projects 模块内部，我们需要从 todos 的状态里面获取信息从而渲染组件。那么 todos 模块就最好能给 projects 模块暴露一个接口用于查询信息，而不是让这个组件和 todos 状态交织在一起。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BAD</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ProjectTodos = <span class=\"function\">(<span class=\"params\">&#123; todos &#125;</span>) =&gt;</span> (</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &#123;todos.map(t =&gt; &lt;TodoItem todo=&#123;t&#125;/&gt;)&#125;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">// Connect to todos state</div><div class=\"line\">const ProjectTodosContainer = connect(</div><div class=\"line\">  // state is Redux state, props is React component props.</div><div class=\"line\">  (state, props) =&gt; &#123;</div><div class=\"line\">    const project = state.projects[props.projectID];</div><div class=\"line\"></div><div class=\"line\">    // This couples to the todos state. BAD!</div><div class=\"line\">    const todos = state.todos.filter(</div><div class=\"line\">      t =&gt; project.todoIDs.includes(t.id)</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    return &#123; todos &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">)(ProjectTodos);</div><div class=\"line\"></div><div class=\"line\">//GOOD</div><div class=\"line\"></div><div class=\"line\">import &#123; createSelector &#125; from 'reselect';</div><div class=\"line\">import todos from '../todos';</div><div class=\"line\"></div><div class=\"line\">// Same as before</div><div class=\"line\">const ProjectTodos = (&#123; todos &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &#123;todos.map(t =&gt; &lt;TodoItem todo=&#123;t&#125;/&gt;)&#125;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">const ProjectTodosContainer = connect(</div><div class=\"line\">  createSelector(</div><div class=\"line\">    (state, props) =&gt; state.projects[props.projectID],</div><div class=\"line\"></div><div class=\"line\">    // Let the todos module provide the implementation of the selector.</div><div class=\"line\">    // GOOD!</div><div class=\"line\">    todos.selectors.getAll,</div><div class=\"line\"></div><div class=\"line\">    // Combine previous selectors, and provides final props.</div><div class=\"line\">    (project, todos) =&gt; &#123;</div><div class=\"line\">      return &#123;</div><div class=\"line\">        todos: todos.filter(t =&gt; project.todoIDs.includes(t.id))</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">  )</div><div class=\"line\">)(ProjectTodos);</div></pre></td></tr></table></figure></p>\n<p>在「GOOD」的例子当中，projects 模块并不用关心 todos 模块内部的状态。这是非常有用的，因为我们可以自由地改变 todos 状态的结构，而不用担心破坏其他依赖模块。当然，我们依旧需要维护我们的 selector 契约，但另一种选择则必须从一大堆不相干的组件中进行搜索并依次对其重构。</p>\n<p>通过人为地设计严格的模块边界，我们可以简化应用代码，并且反过来增加应用的可维护性。无需涉及其他模块的内部，我们应当思考模块之间契约的形式和维护。</p>\n<p>既然项目已经根据特性组织而成，并且在每个特性之间也有了清晰的边界，那么接下来就是我想要涉及的最后一件事：循环依赖。</p>\n<h2 id=\"规则-3-避免循环依赖\"><a href=\"#规则-3-避免循环依赖\" class=\"headerlink\" title=\"规则 #3: 避免循环依赖\"></a>规则 #3: 避免循环依赖</h2><p>「循环依赖是很糟糕的」，这应该不用太费口舌就能让你相信我说的话。但是，如果没有适当的项目结构的话，还是会很容易就掉进了这个坑里。</p>\n<p>大多数时候，依赖在一开始的时候都是无害的。我们可能会认为 projects 模块需要根据 todos 的 actions 来 reduce 一些状态。如果我们没有根据特性分组的话，然后我们就会在一个全局的 actionTypes.js 文件当中看到一个包含所有 action 类型的清单，这对我们来说，就很容易找到并且无需考虑就可以获取我们所需要的（在当时）。</p>\n<p>假设，在 todos 内部我们又想要根据 projects 的 action 类型来 reduce 状态。如果我们已经有了一个全局的 actionTypes.js 文件的话，这应该已经足够简单了。但是很快我们就会明白，要是我们有了清晰的模块边界的话这些就不足挂齿了。为了说明原因，来看看以下的实例。</p>\n<p>循环依赖示例</p>\n<p>Given:</p>\n<p>a.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> b <span class=\"keyword\">from</span> <span class=\"string\">'./b'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'Alice'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; <span class=\"built_in\">console</span>.log(b);</div></pre></td></tr></table></figure></p>\n<p>b.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./a'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>;</div></pre></td></tr></table></figure></p>\n<p>那么接下来的代码会发生什么呢？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">'./a'</span>;</div><div class=\"line\"></div><div class=\"line\">a(); <span class=\"comment\">// ???</span></div></pre></td></tr></table></figure></p>\n<p>我们可能会期待 “Hello Alice!” 会被打印出来，但其实 a() 会输出 “Hello undefined!”。这是因为 a 的命名导出，在 a 是由 b 引入的时候并不可用（由于循环引用）。</p>\n<p>这里隐含的意思就是，我们不能同时让 projects 依赖于 todos 内部的 action 类型，并且 todos 又依赖于 projects 内部的 action 类型。你可以使用聪明的方式绕过这种限制，但要是你继续这样下去的话，我保证你会在将来的时候被坑的！</p>\n<p>不要制造毛团！</p>\n<p>换句话来说，制造循环依赖，你就是在用最糟糕的方式在打着绳子的结。想象一下一个模块就是一缕头发，然后模块之间相互依赖着形成了一个巨大的，混乱的毛团。</p>\n<p>不论什么时候，你想要使用这块毛团中的一个小模块，你都别无选择只能陷入这种巨大的混乱当中。而且更糟糕的是，当你需要修改毛团当中的某些东西，要想不破坏其他东西的话就变得很难了。</p>\n<p>遵循规则 #2，你就很难会制造出这种循环依赖了。不要与之对抗，而是用这份精力来适当地分解你的模块。</p>\n<h1 id=\"深入的实例和规范推荐\"><a href=\"#深入的实例和规范推荐\" class=\"headerlink\" title=\"深入的实例和规范推荐\"></a>深入的实例和规范推荐</h1><p>接下来我想要深入到 Redux 和 React 应用当中不同文件的具体内容。这部分将会特别针对这些框架，要是你不感兴趣的话可以随你便跳过去。:)</p>\n<p>让我们来重新看看我们的 TODO 应用。（我在示例当中添加了 constants，model，以及 selectors）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">todos/</div><div class=\"line\">  components/</div><div class=\"line\">  actions.js</div><div class=\"line\">  actionTypes.js</div><div class=\"line\">  constants.js</div><div class=\"line\">  index.js</div><div class=\"line\">  model.js</div><div class=\"line\">  reducer.js</div><div class=\"line\">  selectors.js</div><div class=\"line\">index.js</div><div class=\"line\">rootReducer.js</div></pre></td></tr></table></figure></p>\n<p>我们将会根据他们的职责来拆分这些模块。</p>\n<h2 id=\"模块-index-和-常量\"><a href=\"#模块-index-和-常量\" class=\"headerlink\" title=\"模块 index 和 常量\"></a>模块 index 和 常量</h2><p>模块 index 就是负责维护模块的公共 API。这是模块和模块之间相互进行交互而暴露的地方。</p>\n<p>一个最小化的 Redux + React 应用应该就会如下所示。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// todos/constants.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This will be used later in our root reducer and selectors</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> NAME = <span class=\"string\">'todos'</span>;</div><div class=\"line\"><span class=\"comment\">// todos/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> components <span class=\"keyword\">from</span> <span class=\"string\">'./components'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> selectors <span class=\"keyword\">from</span> <span class=\"string\">'./selectors'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; actions, components, constants, reducer, selectors &#125;;</div></pre></td></tr></table></figure></p>\n<p>注意：这跟 Ducks 架构有所类似。</p>\n<h2 id=\"Action-类型-amp-Action-Creators\"><a href=\"#Action-类型-amp-Action-Creators\" class=\"headerlink\" title=\"Action 类型 &amp; Action Creators\"></a>Action 类型 &amp; Action Creators</h2><p>Action 类型在 Redux 当中只是一些字符串常量。唯一修改的地方就是我给每个类型都加上了 todos/ 前缀，以便于给这个模块创造一个命名空间。这就避免了跟应用中其他模块的名字发生冲突。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// todos/actionTypes.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD = <span class=\"string\">'todos/ADD'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> DELETE = <span class=\"string\">'todos/DELETE'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> EDIT = <span class=\"string\">'todos/EDIT'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> COMPLETE = <span class=\"string\">'todos/COMPLETE'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> COMPLETE_ALL = <span class=\"string\">'todos/COMPLETE_ALL'</span>;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> CLEAR_COMPLETED = <span class=\"string\">'todos/CLEAR_COMPLETED'</span>;</div></pre></td></tr></table></figure></p>\n<p>至于 action creators，跟往常的 Redux 应用没什么太大改变。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// todos/actions.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> t <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">text</span>) =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: t.ADD,</div><div class=\"line\">  <span class=\"attr\">payload</span>: &#123; text &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>注意到我并没有必要去使用 addTodo，因为我已经在这个 todos 模块里面了。在其他模块里我也就可以像下面这样使用一个 action creator。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">'todos'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">todos.actions.add(<span class=\"string\">'Do that thing'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>这个 model.js 文件是我想要存放一些跟模块的状态相关的东西的地方。</p>\n<p>如果你使用 TypeScript 或者 Flow 的话，这将会尤其有用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// todos/model.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> type Todo = &#123;</div><div class=\"line\">  id?: number;</div><div class=\"line\">  text: string;</div><div class=\"line\">  completed: boolean;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is the model of our module state (e.g. return type of the reducer)</span></div><div class=\"line\"><span class=\"keyword\">export</span> type State = Todo[];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Some utility functions that operates on our model</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> filterCompleted = <span class=\"function\"><span class=\"params\">todos</span> =&gt;</span> todos.filter(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> t.completed);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> filterActive = <span class=\"function\"><span class=\"params\">todos</span> =&gt;</span> todos.filter(<span class=\"function\"><span class=\"params\">t</span> =&gt;</span> !t.completed);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h2><p>对于 reducers 来说，每个模块都应该跟以前一样只维护自己的状态。但是这儿有一种特殊的耦合应当被解决，即一个模块的 reducer 通常不会去决定它在哪里被装载到整个应用状态原子当中。</p>\n<p>这是不确定的，因为它意味着我们的模块 selectors（我们接下来会涉及到）将会间接地耦合到根 reducer 当中。反过来，整个模块的组件也将会被耦合到根 reducer 中来。</p>\n<p>我们可以通过授权给 todos 模块来解决这个问题，让这个模块来决定应该在哪里被装载到状态原子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// rootReducer.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">'./todos'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> combineReducers(&#123;</div><div class=\"line\">  [todos.constants.NAME]: todos.reducer</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这就可以移除我们的 todos 模块和根 reducer 之间的耦合。当然，你也不一定要通过这种方式。其他的选择也包括依赖命名约定（比如，将 todos 模块状态装载到使用 todos 作为 key 的状态原子底下），或者你也可以使用模块工厂函数而不是依赖于静态 key。</p>\n<p>然后 reducer 就可能长得跟下面一样。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// todos/reducer.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> t <span class=\"keyword\">from</span> <span class=\"string\">'./actionTypes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; State &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./model'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState: State = [&#123;</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">'Use Redux'</span>,</div><div class=\"line\">  <span class=\"attr\">completed</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> (state = initialState, <span class=\"attr\">action</span>: any): <span class=\"function\"><span class=\"params\">State</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> t.ADD:</div><div class=\"line\">      <span class=\"keyword\">return</span> [</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">      ];</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Selectors\"><a href=\"#Selectors\" class=\"headerlink\" title=\"Selectors\"></a>Selectors</h2><p>Selectors 提供了从模块状态中查询数据的一种方式。虽然它们不再像往常的 Redux 项目中所命名的那样，但是它们永远都是存在的。</p>\n<p>connect 的第一个参数就是一个 selector，从状态原子当中选择想要的值，并且返回一个对象表示为一个组件的 props。</p>\n<p>我想要强烈建议将公共的 selectors 放到这个 selectors.js 文件当中，以便于它们既可以在这个模块里面被复用，也可能被应用的其他模块所用到。</p>\n<p>我非常推荐你去看看 reselect，因为它提供了一种方式，可以用来构建可组合的 selectors，并且能够自动 memoized。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// todos/selectors.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'reselect'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NAME &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; filterActive, filterCompleted &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./model'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getAll = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state[NAME];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getCompleted = _.compose(filterCompleted, getAll);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getActive = _.compose(filterActive, getAll);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getCounts = createSelector(</div><div class=\"line\">  getAll,</div><div class=\"line\">  getCompleted,</div><div class=\"line\">  getActive,</div><div class=\"line\">  (allTodos, completedTodos, activeTodos) =&gt; (&#123;</div><div class=\"line\">    <span class=\"attr\">all</span>: allTodos.length,</div><div class=\"line\">    <span class=\"attr\">completed</span>: completedTodos.length,</div><div class=\"line\">    <span class=\"attr\">active</span>: activeTodos.length</div><div class=\"line\">  &#125;)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>最后，我们有了自己的 React 组件。我建议你在组件当中尽可能地使用共享的 selectors。其中一个好处就是可以很轻松地对从 state 到 props 的 mapping 进行单元测试，而不用依赖于组件的测试。</p>\n<p>这儿就有一个 TODO 列表组件的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStructuredSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">'reselect'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; getAll &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../selectors'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> TodoList = <span class=\"function\">(<span class=\"params\">&#123; todos &#125;</span>) =&gt;</span> (</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    todos.map(t =&gt; <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">todo</span>=<span class=\"string\">&#123;t&#125;/</span>&gt;</span>)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">export default connect(</div><div class=\"line\">  createStructuredSelector(&#123;</div><div class=\"line\">    todos: getAll</div><div class=\"line\">  &#125;)</div><div class=\"line\">)(TodoList);</div></pre></td></tr></table></figure></p>\n<p>这就是按照我所推荐规范的内容了。但是在我们结束之前，还有最后一个我想要讨论的主题：如何发现项目坏味道。</p>\n<h1 id=\"项目结构的石蕊测试\"><a href=\"#项目结构的石蕊测试\" class=\"headerlink\" title=\"项目结构的石蕊测试\"></a>项目结构的石蕊测试</h1><p>对我们来说，用于发现我们的代码坏味道的工具很重要。从经验上来看，仅仅因为一个项目从开始的时候很整洁，但这并不意味着它会一直如此。因此，我想要提出一种简单的方法用于发现项目结构的坏味道。</p>\n<p>每隔一段时间，从你的应用当中挑选一个模块，并且尝试将它抽取成一个外部模块（比如，一个 NodeJS 模块，Ruby gem 等等）。你不用实际这么去做，但至少像那样去思考。如果你不用花太多 efforts 就可以完成抽取，那么你就知道这个模块已经被很好得分解了。在这里的 “effort” 并没有被下定义，所以你还是需要自己去衡量（无论是主观或者客观）。</p>\n<p>在你的应用程序当中，跟其他模块一起试验一下。记下从实验当中所找到的任何问题：循环依赖，模块边界不清晰，等等。</p>\n<p>基于你的发现，无论你选择采取何种操作都取决于你。毕竟，软件行业就是一个与折衷息息相关的行业。但至少这应该会让你对自己的项目结构有更深入的了解。</p>\n<h1 id=\"收尾\"><a href=\"#收尾\" class=\"headerlink\" title=\"收尾\"></a>收尾</h1><p>项目结构并不是一个特别令人兴奋的话题讨论。然而，这又是非常重要的。</p>\n<p>这篇文章所描述的三条规则就是：</p>\n<p>基于特性组织<br>设计严格的模块边界<br>避免循环依赖<br>无论你是否正在使用 Redux 和 Redux，我都非常推荐你在自己的软件项目当中遵循这些规则。</p>\n<p>​</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1488508495470,
				"created_by": 2,
				"updated_at": 1488508530105,
				"updated_by": 2,
				"published_at": 1488508495470,
				"published_by": 2
			},
			{
				"id": "cizj4wypr000088fc6qcasflf",
				"title": "vue.js插件之vue-validator",
				"slug": "vue-validator",
				"markdown": "\n在线地址：\n```js\n<script src=\"https://cdn.jsdelivr.net/vue.validator/2.1.6/vue-validator.min.js\"></script>\n```\n<!--more-->\n# v-validate 指令\n用法如下:\n```bash\nv-validate[:field]=\"array literal | object literal | binding\"\n```\n(1).可以通过 field 属性来指定字段名。（即目标的id）\n(2).字面量（验证规则）\n1）数组\n```html\n<validator name=\"validation\">\n  <form novalidate>\n    Zip: <input type=\"text\" v-validate:zip=\"['required']\"><br />\n    <div>\n      <span v-if=\"$validation.zip.required\">Zip code is required.</span>\n    </div>\n  </form>\n</validator>\n```\n因为 required 验证器不要额外的参数，这样写更简洁。\n2）对象\n```html\n<validator name=\"validation\">\n  <form novalidate>\nID: <input type=\"text\" v-validate:id=\"{ required: true, minlength: 3, maxlength: 16 }\"><br />\n（或者使用严苛模式对象： ID: <input type=\"text\" v-validate:id=\"{ minlength: { rule: 3 }, maxlength: { rule: 16 } }\"><br />）\n    <div>\n      <span v-if=\"$validation.id.required\">ID is required</span>\n      <span v-if=\"$validation.id.minlength\">Your ID is too short.</span>\n      <span v-if=\"$validation.id.maxlength\">Your ID is too long.</span>\n    </div>\n  </form>\n</validator>\n```\n使用对象型字面量允许你为验证器指定额外的参数。\n3）绑定\n```js\nnew Vue({\n  el: '#app',\n  data: {\n    rules: {\n      minlength: 3,\n      maxlength: 16\n    }\n  }\n})\n<div id=\"app\">\n  <validator name=\"validation\">\n    <form novalidate>\n      ID: <input type=\"text\" v-validate:id=\"rules\"><br />\n      <div>\n        <span v-if=\"$validation.id.minlength\">Your ID is too short.</span>\n        <span v-if=\"$validation.id.maxlength\">Your ID is too long.</span>\n      </div>\n    </form>\n  </validator>\n</div>\n```\n除数据属性外，也可以使用计算属性或事例方法来指定验证规则。\n\n# 规则介绍\n```bash\nBuild-in validators\nYou can be used build-in validators of below:\n• required: whether the value has been specified\n• pattern: whether the pattern of the regular expression\n• minlength: whether the length of specified value is less than or equal minimum length\n• maxlength: whether the length of specified value is less more or equal maximum length\n• min: whether the specified numerical value is less than or equal minimum\n• max: whether the specified numerical value is more than or equal maximum\n\n• required: 是否是必须的\n• pattern: 正则表达式\n• minlength: 最小长度\n• maxlength: 最大长度\n• min: 最小值\n• max: 最小值\n```\n# 可验证的表单元素\n复选框 单选按钮 下拉列表\n\n# 验证结果\n字段验证结果\n```bash\n• valid: 字段有效时返回 true,否则返回 false。\n• invalid: valid 的逆.\n• touched: 字段获得过焦点时返回 true,否则返回 false。\n• untouched: touched 的逆.\n• modified: 字段值与初始值不同时返回 true,否则返回 false。\n• dirty: 字段值改变过至少一次时返回 true,否则返回 false。\n• pristine: dirty 的逆.\n• errors: 字段无效时返回存有错误信息的数据，否则返回 undefined。\n全局结果\n• valid: 所有字段都有效时返回 true,否则返回 false。\n• invalid: 只要存在无效字段就返回 true,否则返回 false。\n• touched: 只要存在获得过焦点的字段就返回 true,否则返回 false。\n• untouched: touched 的逆。\n• modified: 只要存在与初始值不同的字段就返回 true,否则返回 false。\n• dirty: 只要存在值改变过至少一次的字段就返回 true,否则返回 false。\n• pristine: 所有字段都没有发生过变化时返回 true,否则返回 false。\n• errors: 有无效字段时返回所有无效字段的错误信息，否则返回 undefined。\n```\n验证结果保存在如下结构中:\n```json\n{// top-level validation properties\n  valid: true,\n  invalid: false,\n  touched: false,\n  undefined: true,\n  dirty: false,\n  pristine: true,\n  modified: false,\n  errors: [{\n    field: 'field1', validator: 'required', message: 'required field1'\n  }, ... {\n    field: 'fieldX', validator: 'customValidator', message: 'invalid fieldX'\n  }],\n  // field1（id） validation\n  field1: {\n    required: false, // build-in validator, return `false` or `true`\n    email: true, // custom validator\n    url: 'invalid url format', // custom validator, if specify the error message in validation rule, set it\n    ...\n    customValidator1: false, // custom validator\n    // field validation properties\n    valid: false,\n    invalid: true,\n    touched: false,\n    undefined: true,\n    dirty: false,\n    pristine: true,\n    modified: false,\n    errors: [{\n      validator: 'required', message: 'required field1'\n    }]\n  },\n  ...\n  // fieldX validation\n  fieldX: {\n    min: false, // validator\n    ...\n    customValidator: true,\n    // fieldX validation properties\n    valid: false,\n    invalid: true,\n    touched: true,\n    undefined: false,\n    dirty: true,\n    pristine: false,\n    modified: true,\n    errors: [{\n      validator: 'customValidator', message: 'invalid fieldX'\n    }]\n  },\n}\n```\n验证结果会关联到验证器元素上。在上例中，验证结果保存在 $validation1 下，$validation1 是由 validator 元素的 name 属性值加 $ 前缀组成。支持把验证字段分组：\n```html\n<validator name=\"validation1\" :groups=\"['user', 'password']\">\n  username: <input type=\"text\" group=\"user\" v-validate:username=\"['required']\"><br />\n  password: <input type=\"password\" group=\"password\" v-validate:password1=\"{ minlength: 8, required: true }\"/><br />\npassword (confirm): <input     type=\"password\"     group=\"password\"     v-validate:password2=\"{ minlength: 8, required: true }\"/>\n  <div class=\"user\">\n    <span v-if=\"$validation1.user.invalid\">Invalid yourname !!</span>\n  </div>\n  <div class=\"password\">\n    <span v-if=\"$validation1.password.invalid\">Invalid password input !!</span>\n  </div>\n</validator>\n```\n# 指定错误消息\n有时候你只需要输出部分错误消息，此时你可以通过 group 或 field 属性来指定这部分验证结果。\n• group: 指定组的错误消息 (例如 $validation.group1.errors)\n• field: 指定字段的错误消息 (例如 $validation.field1.errors)\n错误消息\n错误消息可以直接在验证规则中指定，同时可以在 v-show 和 v-if 中使用错误消息：\n```html\n  <span v-if=\"$validation1.password.required\">{{ $validation1.password.required }}</span>\n <span v-if=\"$validation1.password.minlength\">{{ $validation1.password.minlength }}</span>\n```\n也可以在 v-for 指令中使用错误消息：\n```html\n<ul>\n      <li v-for=\"error in $validation1.errors\">\n        <p>{{error.field}}: {{error.message}}</p>\n      </li>\n</ul>\n```\n# 自定义验证器\n## 全局注册\n可以使用 Vue.validator 方法注册自定义验证器。\n提示: Vue.validator asset 继承自 Vue.js 的 asset 管理系统.\n通过下例中的 email 自定义验证器详细了解 Vue.validator 的使用方法：\n// Register email validator function.\n```js\nVue.validator('email', function (val) {\n  return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(val)\n})\nnew Vue({\n  el: '#app'\n  data: {\n    email: ''\n  }\n})\n<div id=\"app\">\n  <validator name=\"validation1\">\n    address: <input type=\"text\" v-validate:address=\"['email']\"><br />\n    <div>\n      <p v-show=\"$validation1.address.email\">Invalid your mail address format.</p>\n    </div>\n  <validator>\n</div>\n```\n## 局部注册\n可以通过组件的 validators 选项注册只能在组件内使用的自定义验证器。\n自定义验证器是通过在组件的 validators 下定义验证通过返回真不通过返回假的回调函数来实现。\n下例中注册了 numeric 和 url 两个自定义验证器：\n```js\nnew Vue({\n  el: '#app',\n  validators: { // `numeric` and `url` custom validator is local registration\n    numeric: function (val/*,rule*/) {\n      return /^[-+]?[0-9]+$/.test(val)\n    },\n    url: function (val) {\n      return /^(http\\:\\/\\/|https\\:\\/\\/)(.{4,})$/.test(val)\n    }\n  },\n  data: {\n    email: ''\n  }\n})\n<div id=\"app\">\n  <validator name=\"validation1\">\n    username: <input type=\"text\" v-validate:username=\"['required']\"><br />\n    email: <input type=\"text\" v-validate:address=\"['email']\"><br />\n    age: <input type=\"text\" v-validate:age=\"['numeric']\"><br />\n    site: <input type=\"text\" v-validate:site=\"['url']\"><br />\n    <div class=\"errors\">\n      <p v-if=\"$validation1.username.required\">required username</p>\n      <p v-if=\"$validation1.address.email\">invalid email address</p>\n      <p v-if=\"$validation1.age.numeric\">invalid age value</p>\n      <p v-if=\"$validation1.site.url\">invalid site uril format</p>\n    </div>\n  <validator>\n</div>\n```\n# 延迟初始化\n如果在 validator 元素上设置了 lazy 属性，那么验证器直到 $activateValidator() 被调用时才会进行初始化。这在待验证的数据需要异步加载时有用，避免了在得到数据前出现错误提示。下例中在得到评论内容后验证器才开始工作；如果不设置 lazy 属性，在得到评论内容前会显示错误提示。\n```html\n<!-- comment component -->\n<div>\n  <h1>Preview</h1>\n  <p>{{comment}}</p>\n  <validator lazy name=\"validation1\">\n    <input type=\"text\" :value=\"comment\" v-validate:comment=\"{ required: true, maxlength: 256 }\"/>\n    <span v-if=\"$validation1.comment.required\">Required your comment</span>\n    <span v-if=\"$validation1.comment.maxlength\">Too long comment !!</span>\n    <button type=\"button\" value=\"save\" @click=\"onSave\" v-if=\"valid\">\n  </validator>\n</div>\n```\n```js\nVue.component('comment', {\n  props: {\n    id: Number,\n  },\n  data: function () {\n    return { comment: '' }\n  },\n  activate: function (done) {\n    var resource = this.$resource('/comments/:id');\n    resource.get({ id: this.id }, function (comment, stat, req) {\n      this.comment =  comment.body\n      // activate validator\n      this.$activateValidator()\n      done()\n    }.bind(this)).error(function (data, stat, req) {\n      // handle error ...\n      done()\n    })\n  },\n  methods: {\n    onSave: function () {\n      var resource = this.$resource('/comments/:id');\n      resource.save({ id: this.id }, { body: this.comment }, function (data, stat, req) {\n        // handle success\n      }).error(function (data, sta, req) {\n        // handle error\n      })\n    }\n  }\n})\n```\n# 自定义验证时机\n默认情况下，vue-validator 会根据 validator 和 v-validate 指令自动进行验证。然而有时候我们需要关闭自动验证，在有需要时手动触发验证。\ninitial\n当 vue-validator 完成初始编译后，会根据每一条 v-validate 指令自动进行验证。如果你不需要自动验证，可以通过 initial 属性或 v-validate 验证规则来关闭自动验证。\n(1)initial\n```html\n<input id=\"username\" type=\"text\" initial=\"off\" v-validate:username=\"['required', 'exist']\">\n```\n(2) v-validate 验证规则\ndetect-blur and detect-change\nvue-validator 会在检测到表单元素(input, checkbox, select 等)上的 DOM 事件(input, blur, change)时自动验证。此时，可以使用 detect-change 和 detect-blur 属性：\n```html\n<input id=\"username\" type=\"text\"\n          detect-change=\"off\" detect-blur=\"off\" v-validate:username=\"{\n          required: { rule: true, message: 'required you name !!' }\n        }\" />\n```\n# 异步验证\n当在需要进行服务器端验证，可以使用异步验证，如下例：\n```html\n<template>\n  <validator name=\"validation\">\n    <form novalidate>\n      <h1>user registration</h1>\n      <div class=\"username\">\n        <label for=\"username\">username:</label>\n        <input id=\"username\" type=\"text\"\n          detect-change=\"off\" v-validate:username=\"{\n          required: { rule: true, message: 'required your name !!' },\n          exist: { rule: true, initial: 'off' }\n        }\" />\n        <span v-if=\"checking\">checking ...</span>\n      </div>\n      <div class=\"errors\">\n        <validator-errors :validation=\"$validation\"></validator-errors>\n      </div>\n      <input type=\"submit\" value=\"register\" :disabled=\"!$validation.valid\" />\n    </form>\n  </validator>\n</template>\n```\n```js\nfunction copyOwnFrom (target, source) {\n  Object.getOwnPropertyNames(source).forEach(function (propName) {\n    Object.defineProperty(target, propName, Object.getOwnPropertyDescriptor(source, propName))\n  })\n  return target\n}\nfunction ValidationError () {\n  copyOwnFrom(this, Error.apply(null, arguments))\n}\nValidationError.prototype = Object.create(Error.prototype)\nValidationError.prototype.constructor = ValidationError\n// exmpale with ES2015\nexport default {\n  validators: {\n    data () {\n      return { checking: false }\n    },\n    exist (val) {\n      this.vm.checking = true // spinner on\n      return fetch('/validations/exist', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: val\n        })\n      }).then((res) => {\n        this.vm.checking = false // spinner off\n        return res.json()\n      }).then((json) => {\n        return Object.keys(json).length > 0\n          ? Promise.reject(new ValidationError(json.message))\n          : Promise.resolve()\n      }).catch((error) => {\n        if (error instanceof ValidationError) {\n          return Promise.reject(error.message)\n        } else {\n          return Promise.reject('unexpected error')\n        }\n      })\n    }\n  }\n}\n```\n异步验证接口在异步验证时，可以使用如下两类接口：\n\n函数需要实现一个返回签名为 function (resolve, reject) 如同 promise 一样的函数的自定义验证器。函数参数解释如下：\n• 验证结果\no 成功时: resolve\no 失败时: reject\n\npromise需要实现一个返回 promise 的自定义验证器。根据验证结果来 resolve 或 reject。\n使用错误消息\n如上例所示，在服务器端验证错误发生时，可以使用服务器端返回的错误消息。\n验证器函数 context\n验证器函数 context 是绑定到 Validation 对象上的。Validation 对象提供了一些属性，这些属性在实现特定的验证器时有用。\nvm 属性\n暴露了当前验证所在的 vue 实例。\nthe following ES2015 example:\n```js\nnew Vue({\n  data () { return { checking: false } },\n  validators: {\n    exist (val) {\n      this.vm.checking = true // spinner on\n      return fetch('/validations/exist', {\n        // ...\n      }).then((res) => { // done\n        this.vm.checking = false // spinner off\n        return res.json()\n      }).then((json) => {\n        return Promise.resolve()\n      }).catch((error) => {\n        return Promise.reject(error.message)\n      })\n    }\n  }\n})\n```\nel 属性暴露了当前验证器的目标 DOM 元素。下面展示了结合 International Telephone Input jQuery 插件使用的例子：\n```js\nnew Vue({\n  validators: {\n    phone: function (val) {\n      return $(this.el).intlTelInput('isValidNumber')\n    }\n  }\n})\n```",
				"html": "<p>在线地址：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.jsdelivr.net/vue.validator/2.1.6/vue-validator.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"v-validate-指令\"><a href=\"#v-validate-指令\" class=\"headerlink\" title=\"v-validate 指令\"></a>v-validate 指令</h1><p>用法如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">v-validate[:field]=<span class=\"string\">\"array literal | object literal | binding\"</span></div></pre></td></tr></table></figure></p>\n<p>(1).可以通过 field 属性来指定字段名。（即目标的id）<br>(2).字面量（验证规则）<br>1）数组<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validation\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">novalidate</span>&gt;</span></div><div class=\"line\">    Zip: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-validate:zip</span>=<span class=\"string\">\"['required']\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation.zip.required\"</span>&gt;</span>Zip code is required.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>因为 required 验证器不要额外的参数，这样写更简洁。<br>2）对象<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validation\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">novalidate</span>&gt;</span></div><div class=\"line\">ID: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-validate:id</span>=<span class=\"string\">\"&#123; required: true, minlength: 3, maxlength: 16 &#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">（或者使用严苛模式对象： ID: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-validate:id</span>=<span class=\"string\">\"&#123; minlength: &#123; rule: 3 &#125;, maxlength: &#123; rule: 16 &#125; &#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>）</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation.id.required\"</span>&gt;</span>ID is required<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation.id.minlength\"</span>&gt;</span>Your ID is too short.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation.id.maxlength\"</span>&gt;</span>Your ID is too long.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>使用对象型字面量允许你为验证器指定额外的参数。<br>3）绑定<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">rules</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">minlength</span>: <span class=\"number\">3</span>,</div><div class=\"line\">      <span class=\"attr\">maxlength</span>: <span class=\"number\">16</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validation\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">novalidate</span>&gt;</span></div><div class=\"line\">      ID: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-validate:id</span>=<span class=\"string\">\"rules\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation.id.minlength\"</span>&gt;</span>Your ID is too short.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation.id.maxlength\"</span>&gt;</span>Your ID is too long.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>除数据属性外，也可以使用计算属性或事例方法来指定验证规则。</p>\n<h1 id=\"规则介绍\"><a href=\"#规则介绍\" class=\"headerlink\" title=\"规则介绍\"></a>规则介绍</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Build-in validators</div><div class=\"line\">You can be used build-in validators of below:</div><div class=\"line\">• required: whether the value has been specified</div><div class=\"line\">• pattern: whether the pattern of the regular expression</div><div class=\"line\">• minlength: whether the length of specified value is less than or equal minimum length</div><div class=\"line\">• maxlength: whether the length of specified value is less more or equal maximum length</div><div class=\"line\">• min: whether the specified numerical value is less than or equal minimum</div><div class=\"line\">• max: whether the specified numerical value is more than or equal maximum</div><div class=\"line\"></div><div class=\"line\">• required: 是否是必须的</div><div class=\"line\">• pattern: 正则表达式</div><div class=\"line\">• minlength: 最小长度</div><div class=\"line\">• maxlength: 最大长度</div><div class=\"line\">• min: 最小值</div><div class=\"line\">• max: 最小值</div></pre></td></tr></table></figure>\n<h1 id=\"可验证的表单元素\"><a href=\"#可验证的表单元素\" class=\"headerlink\" title=\"可验证的表单元素\"></a>可验证的表单元素</h1><p>复选框 单选按钮 下拉列表</p>\n<h1 id=\"验证结果\"><a href=\"#验证结果\" class=\"headerlink\" title=\"验证结果\"></a>验证结果</h1><p>字段验证结果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">• valid: 字段有效时返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• invalid: valid 的逆.</div><div class=\"line\">• touched: 字段获得过焦点时返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• untouched: touched 的逆.</div><div class=\"line\">• modified: 字段值与初始值不同时返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• dirty: 字段值改变过至少一次时返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• pristine: dirty 的逆.</div><div class=\"line\">• errors: 字段无效时返回存有错误信息的数据，否则返回 undefined。</div><div class=\"line\">全局结果</div><div class=\"line\">• valid: 所有字段都有效时返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• invalid: 只要存在无效字段就返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• touched: 只要存在获得过焦点的字段就返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• untouched: touched 的逆。</div><div class=\"line\">• modified: 只要存在与初始值不同的字段就返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• dirty: 只要存在值改变过至少一次的字段就返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• pristine: 所有字段都没有发生过变化时返回 <span class=\"literal\">true</span>,否则返回 <span class=\"literal\">false</span>。</div><div class=\"line\">• errors: 有无效字段时返回所有无效字段的错误信息，否则返回 undefined。</div></pre></td></tr></table></figure></p>\n<p>验证结果保存在如下结构中:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;// top-level validation properties</div><div class=\"line\">  valid: true,</div><div class=\"line\">  invalid: false,</div><div class=\"line\">  touched: false,</div><div class=\"line\">  undefined: true,</div><div class=\"line\">  dirty: false,</div><div class=\"line\">  pristine: true,</div><div class=\"line\">  modified: false,</div><div class=\"line\">  errors: [&#123;</div><div class=\"line\">    field: 'field1', validator: 'required', message: 'required field1'</div><div class=\"line\">  &#125;, ... &#123;</div><div class=\"line\">    field: 'fieldX', validator: 'customValidator', message: 'invalid fieldX'</div><div class=\"line\">  &#125;],</div><div class=\"line\">  // field1（id） validation</div><div class=\"line\">  field1: &#123;</div><div class=\"line\">    required: false, // build-in validator, return `false` or `true`</div><div class=\"line\">    email: true, // custom validator</div><div class=\"line\">    url: 'invalid url format', // custom validator, if specify the error message in validation rule, set it</div><div class=\"line\">    ...</div><div class=\"line\">    customValidator1: false, // custom validator</div><div class=\"line\">    // field validation properties</div><div class=\"line\">    valid: false,</div><div class=\"line\">    invalid: true,</div><div class=\"line\">    touched: false,</div><div class=\"line\">    undefined: true,</div><div class=\"line\">    dirty: false,</div><div class=\"line\">    pristine: true,</div><div class=\"line\">    modified: false,</div><div class=\"line\">    errors: [&#123;</div><div class=\"line\">      validator: 'required', message: 'required field1'</div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">  // fieldX validation</div><div class=\"line\">  fieldX: &#123;</div><div class=\"line\">    min: false, // validator</div><div class=\"line\">    ...</div><div class=\"line\">    customValidator: true,</div><div class=\"line\">    // fieldX validation properties</div><div class=\"line\">    valid: false,</div><div class=\"line\">    invalid: true,</div><div class=\"line\">    touched: true,</div><div class=\"line\">    undefined: false,</div><div class=\"line\">    dirty: true,</div><div class=\"line\">    pristine: false,</div><div class=\"line\">    modified: true,</div><div class=\"line\">    errors: [&#123;</div><div class=\"line\">      validator: 'customValidator', message: 'invalid fieldX'</div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>验证结果会关联到验证器元素上。在上例中，验证结果保存在 $validation1 下，$validation1 是由 validator 元素的 name 属性值加 $ 前缀组成。支持把验证字段分组：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validation1\"</span> <span class=\"attr\">:groups</span>=<span class=\"string\">\"['user', 'password']\"</span>&gt;</span></div><div class=\"line\">  username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">group</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">v-validate:username</span>=<span class=\"string\">\"['required']\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">  password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">group</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">v-validate:password1</span>=<span class=\"string\">\"&#123; minlength: 8, required: true &#125;\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">password (confirm): <span class=\"tag\">&lt;<span class=\"name\">input</span>     <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>     <span class=\"attr\">group</span>=<span class=\"string\">\"password\"</span>     <span class=\"attr\">v-validate:password2</span>=<span class=\"string\">\"&#123; minlength: 8, required: true &#125;\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation1.user.invalid\"</span>&gt;</span>Invalid yourname !!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation1.password.invalid\"</span>&gt;</span>Invalid password input !!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"指定错误消息\"><a href=\"#指定错误消息\" class=\"headerlink\" title=\"指定错误消息\"></a>指定错误消息</h1><p>有时候你只需要输出部分错误消息，此时你可以通过 group 或 field 属性来指定这部分验证结果。<br>• group: 指定组的错误消息 (例如 $validation.group1.errors)<br>• field: 指定字段的错误消息 (例如 $validation.field1.errors)<br>错误消息<br>错误消息可以直接在验证规则中指定，同时可以在 v-show 和 v-if 中使用错误消息：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation1.password.required\"</span>&gt;</span>&#123;&#123; $validation1.password.required &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation1.password.minlength\"</span>&gt;</span>&#123;&#123; $validation1.password.minlength &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>也可以在 v-for 指令中使用错误消息：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"error in $validation1.errors\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;error.field&#125;&#125;: &#123;&#123;error.message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"自定义验证器\"><a href=\"#自定义验证器\" class=\"headerlink\" title=\"自定义验证器\"></a>自定义验证器</h1><h2 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h2><p>可以使用 Vue.validator 方法注册自定义验证器。<br>提示: Vue.validator asset 继承自 Vue.js 的 asset 管理系统.<br>通过下例中的 email 自定义验证器详细了解 Vue.validator 的使用方法：<br>// Register email validator function.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.validator(<span class=\"string\">'email'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span>.test(val)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">  &lt;validator name=\"validation1\"&gt;</div><div class=\"line\">    address: &lt;input type=\"text\" v-validate:address=\"['email']\"&gt;&lt;br /&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;p v-show=\"$validation1.address.email\"&gt;Invalid your mail address format.&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;validator&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h2><p>可以通过组件的 validators 选项注册只能在组件内使用的自定义验证器。<br>自定义验证器是通过在组件的 validators 下定义验证通过返回真不通过返回假的回调函数来实现。<br>下例中注册了 numeric 和 url 两个自定义验证器：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">validators</span>: &#123; <span class=\"comment\">// `numeric` and `url` custom validator is local registration</span></div><div class=\"line\">    numeric: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val<span class=\"regexp\">/*,rule*/</span></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/^[-+]?[0-9]+$/</span>.test(val)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/^(http\\:\\/\\/|https\\:\\/\\/)(.&#123;4,&#125;)$/</span>.test(val)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">  &lt;validator name=\"validation1\"&gt;</div><div class=\"line\">    username: &lt;input type=\"text\" v-validate:username=\"['required']\"&gt;&lt;br /&gt;</div><div class=\"line\">    email: &lt;input type=\"text\" v-validate:address=\"['email']\"&gt;&lt;br /&gt;</div><div class=\"line\">    age: &lt;input type=\"text\" v-validate:age=\"['numeric']\"&gt;&lt;br /&gt;</div><div class=\"line\">    site: &lt;input type=\"text\" v-validate:site=\"['url']\"&gt;&lt;br /&gt;</div><div class=\"line\">    &lt;div class=\"errors\"&gt;</div><div class=\"line\">      &lt;p v-if=\"$validation1.username.required\"&gt;required username&lt;/p&gt;</div><div class=\"line\">      &lt;p v-if=\"$validation1.address.email\"&gt;invalid email address&lt;/p&gt;</div><div class=\"line\">      &lt;p v-if=\"$validation1.age.numeric\"&gt;invalid age value&lt;/p&gt;</div><div class=\"line\">      &lt;p v-if=\"$validation1.site.url\"&gt;invalid site uril format&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;validator&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"延迟初始化\"><a href=\"#延迟初始化\" class=\"headerlink\" title=\"延迟初始化\"></a>延迟初始化</h1><p>如果在 validator 元素上设置了 lazy 属性，那么验证器直到 $activateValidator() 被调用时才会进行初始化。这在待验证的数据需要异步加载时有用，避免了在得到数据前出现错误提示。下例中在得到评论内容后验证器才开始工作；如果不设置 lazy 属性，在得到评论内容前会显示错误提示。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- comment component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Preview<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;comment&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">lazy</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validation1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"comment\"</span> <span class=\"attr\">v-validate:comment</span>=<span class=\"string\">\"&#123; required: true, maxlength: 256 &#125;\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation1.comment.required\"</span>&gt;</span>Required your comment<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$validation1.comment.maxlength\"</span>&gt;</span>Too long comment !!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"save\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onSave\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"valid\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'comment'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">comment</span>: <span class=\"string\">''</span> &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">activate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> resource = <span class=\"keyword\">this</span>.$resource(<span class=\"string\">'/comments/:id'</span>);</div><div class=\"line\">    resource.get(&#123; <span class=\"attr\">id</span>: <span class=\"keyword\">this</span>.id &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comment, stat, req</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.comment =  comment.body</div><div class=\"line\">      <span class=\"comment\">// activate validator</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$activateValidator()</div><div class=\"line\">      done()</div><div class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>)).error(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, stat, req</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// handle error ...</span></div><div class=\"line\">      done()</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">onSave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> resource = <span class=\"keyword\">this</span>.$resource(<span class=\"string\">'/comments/:id'</span>);</div><div class=\"line\">      resource.save(&#123; <span class=\"attr\">id</span>: <span class=\"keyword\">this</span>.id &#125;, &#123; <span class=\"attr\">body</span>: <span class=\"keyword\">this</span>.comment &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, stat, req</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// handle success</span></div><div class=\"line\">      &#125;).error(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, sta, req</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// handle error</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"自定义验证时机\"><a href=\"#自定义验证时机\" class=\"headerlink\" title=\"自定义验证时机\"></a>自定义验证时机</h1><p>默认情况下，vue-validator 会根据 validator 和 v-validate 指令自动进行验证。然而有时候我们需要关闭自动验证，在有需要时手动触发验证。<br>initial<br>当 vue-validator 完成初始编译后，会根据每一条 v-validate 指令自动进行验证。如果你不需要自动验证，可以通过 initial 属性或 v-validate 验证规则来关闭自动验证。<br>(1)initial<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">initial</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">v-validate:username</span>=<span class=\"string\">\"['required', 'exist']\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>(2) v-validate 验证规则<br>detect-blur and detect-change<br>vue-validator 会在检测到表单元素(input, checkbox, select 等)上的 DOM 事件(input, blur, change)时自动验证。此时，可以使用 detect-change 和 detect-blur 属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\">          <span class=\"attr\">detect-change</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">detect-blur</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">v-validate:username</span>=<span class=\"string\">\"&#123;</span></div><div class=\"line\">          required: &#123; rule: true, message: 'required you name !!' &#125;</div><div class=\"line\">        &#125;\" /&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"异步验证\"><a href=\"#异步验证\" class=\"headerlink\" title=\"异步验证\"></a>异步验证</h1><p>当在需要进行服务器端验证，可以使用异步验证，如下例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validator</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validation\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">novalidate</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>user registration<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"username\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span>&gt;</span>username:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></div><div class=\"line\">          <span class=\"attr\">detect-change</span>=<span class=\"string\">\"off\"</span> <span class=\"attr\">v-validate:username</span>=<span class=\"string\">\"&#123;</span></div><div class=\"line\">          required: &#123; rule: true, message: 'required your name !!' &#125;,</div><div class=\"line\">          exist: &#123; rule: true, initial: 'off' &#125;</div><div class=\"line\">        &#125;\" /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"checking\"</span>&gt;</span>checking ...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"errors\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">validator-errors</span> <span class=\"attr\">:validation</span>=<span class=\"string\">\"$validation\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">validator-errors</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"register\"</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">\"!$validation.valid\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">validator</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyOwnFrom</span> (<span class=\"params\">target, source</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.getOwnPropertyNames(source).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">propName</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, propName, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(source, propName))</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> target</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ValidationError</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  copyOwnFrom(<span class=\"keyword\">this</span>, <span class=\"built_in\">Error</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">ValidationError.prototype = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Error</span>.prototype)</div><div class=\"line\">ValidationError.prototype.constructor = ValidationError</div><div class=\"line\"><span class=\"comment\">// exmpale with ES2015</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">validators</span>: &#123;</div><div class=\"line\">    data () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">checking</span>: <span class=\"literal\">false</span> &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    exist (val) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.vm.checking = <span class=\"literal\">true</span> <span class=\"comment\">// spinner on</span></div><div class=\"line\">      <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/validations/exist'</span>, &#123;</div><div class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>,</div><div class=\"line\">        <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">          <span class=\"string\">'Accept'</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">body</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">          <span class=\"attr\">username</span>: val</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.vm.checking = <span class=\"literal\">false</span> <span class=\"comment\">// spinner off</span></div><div class=\"line\">        <span class=\"keyword\">return</span> res.json()</div><div class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(json).length &gt; <span class=\"number\">0</span></div><div class=\"line\">          ? <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> ValidationError(json.message))</div><div class=\"line\">          : <span class=\"built_in\">Promise</span>.resolve()</div><div class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error <span class=\"keyword\">instanceof</span> ValidationError) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error.message)</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'unexpected error'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>异步验证接口在异步验证时，可以使用如下两类接口：</p>\n<p>函数需要实现一个返回签名为 function (resolve, reject) 如同 promise 一样的函数的自定义验证器。函数参数解释如下：<br>• 验证结果<br>o 成功时: resolve<br>o 失败时: reject</p>\n<p>promise需要实现一个返回 promise 的自定义验证器。根据验证结果来 resolve 或 reject。<br>使用错误消息<br>如上例所示，在服务器端验证错误发生时，可以使用服务器端返回的错误消息。<br>验证器函数 context<br>验证器函数 context 是绑定到 Validation 对象上的。Validation 对象提供了一些属性，这些属性在实现特定的验证器时有用。<br>vm 属性<br>暴露了当前验证所在的 vue 实例。<br>the following ES2015 example:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  data () &#123; <span class=\"keyword\">return</span> &#123; <span class=\"attr\">checking</span>: <span class=\"literal\">false</span> &#125; &#125;,</div><div class=\"line\">  <span class=\"attr\">validators</span>: &#123;</div><div class=\"line\">    exist (val) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.vm.checking = <span class=\"literal\">true</span> <span class=\"comment\">// spinner on</span></div><div class=\"line\">      <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/validations/exist'</span>, &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123; <span class=\"comment\">// done</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.vm.checking = <span class=\"literal\">false</span> <span class=\"comment\">// spinner off</span></div><div class=\"line\">        <span class=\"keyword\">return</span> res.json()</div><div class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve()</div><div class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error.message)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>el 属性暴露了当前验证器的目标 DOM 元素。下面展示了结合 International Telephone Input jQuery 插件使用的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">validators</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>.el).intlTelInput(<span class=\"string\">'isValidNumber'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487899430922,
				"created_by": 2,
				"updated_at": 1487899799711,
				"updated_by": 2,
				"published_at": 1487899430922,
				"published_by": 2
			},
			{
				"id": "cizex0j93000098fchas9dkof",
				"title": "vuex 2.x新版使用指南",
				"slug": "Vuex2_vue_change",
				"markdown": "vuex为了迎合vue2.0的变化 进行了大量的调整和优化\n\n<!--more-->\n\n总结下大概有几点变化\n\n# 更加语义化\n\n原文 Terms naming change for better semantics 这个语义化说的是触发action和mutation的API上\n在使用action的时候 我们一般是从vue组件本身dispatch派发一个action 这个其实只是一个命令 并没有实际\n改变什么， 而dispatch一个mutation 其实是改变了vuex本身的数据 所以一般从数据角度理解 这种应该属于事物提交。那么变化之后的命名就是commit这样更加语义化 也更好的理解职责\n\n新的写法\n```js\ndispatch --> Action\n\nmethods:{\n    Add : function(){\n      this.$store.dispatch('ADD',2).then(function(resp){\n          console.log(resp)\n      })\n    }\n}\ncommit --> Mutation\n\nactions:{\n    \"ADD\" : function(store , param){\n        return new Promise(function(resolve, reject) {\n            store.commit('ADD',param)\n            resolve(\"ok\");\n        })\n    }\n}\n```\n1.x 写法就是触发action和mutation都叫dispatch\n\nADD: function(store, param ){\n    store.dispatch('COMMIT',param)\n}\n# 更灵活\n\n1.x之前的版本action是不定义在vuex里的, 而2.x actions可以直接在store中定义了 也就是可以在store实例中直接dispatch\n```js\nvar store =  new Vuex.Store({\n    state: {\n        messages: 0\n    },\n    mutations:{\n        \"ADD\": function(state, msg) {\n            state.messages += msg;\n        }\n    },\n    // action不用再去外面定义 可以直接写在构建参数里\n    actions:{\n        \"ADD\" : function(store , param){\n            store.commit('ADD',param)\n        },\n    }\n})\nstore.dispatch('ADD',2)\n```\n而getter也是如此 在vue中直接取getters\n```js\ncomputed:{\n   msg : function(){\n      return this.$store.getters.getMessage\n   }\n}\n```\n# Promise Action\n\n原文 Composable Action Flow直译 可组合的action流\n其实这个组合事件流概念 没怎么用过 也不好翻译 我就简单从变化性翻译它\n就是action现在返回了promise 在之前的版本 并没有返回promise 而2.x的源码中已经返回了promise\n所以也就可以支持所谓的Composable Action\n```js\n// action我们定义一个返回promise的add action\nactions:{\n    \"ADD\" : function(store , param){\n        return new Promise(function(resolve, reject) {\n            store.commit('ADD',param)\n            resolve(\"ok\");\n        })\n    }\n}\n\n// 这里可以在dispatch之后直接处理异步\nthis.$store.dispatch('ADD',2).then(function(resp){\n   console.log(resp) // ok\n})\n```\n# MapGetters/ MapActions\n\n新版vuex提供了几个封装方法 mapState, mapMutations, mapGetters,mapActions\n\n这些都是什么鬼呢？\n\n其实如果你用过vuex1.x以下的版本 其实它就是我们vue组件中的vuex属性的 换了一种更高逼格写法\n\n可以定义一组要获取的actions getters 然后map进来\n```js\n // 旧版写法\n var App = Vue.extend({\n    template:\"....\",\n    vuex:{\n        getters:{\n            msg : function(state){\n                return state.messages\n            }\n        },\n        actions:{\n            add :actions.ADD\n        }\n    }\n })\n\n // 新版写法 es5 写法\n var App = Vue.extend({\n    template:\"....\",\n    computed:Vuex.mapGetters({\n        msg : 'getMessage'\n    }),\n    methods:Vuex.mapGetters({\n        add : 'ADD'\n    })\n})\n```\n这种本质跟1.x的vuex写法是一样的 内部都是使用vue的Object.defineProperty取做响应式\n```js\n// es6写法 支持rest参数这种写法 也可以直接完全使用map套装注入\nimport { mapGetters, mapActions } from 'vuex'\nexport default {\n  computed: {\n    someComuted () { … },\n    ...mapGetters(['getMessage', 'getName'])\n  },\n  methods: {\n    someMethod () { … },\n    ...mapActions(['ADD','EDIT'])\n  }\n}\n```\n# 其他变动\n\n最新的vuex-2.0.0.rc5 为说明API一些新变化\n```js\n   // 这个就是换个名字\n   store.middlewares -> store.plugins\n\n   // 这货貌似干掉又被还原了 尤大真是喜怒无常 哈\n   store.watch\n\n   // 使用subscribe 监听vuex的变化\n   store.subscribe((mutation, state) => { ... })\n\n   // 注册模块\n   registerModule\n\n   // 注销模块\n   unregisterModule\n```\n# 总结\n\n总体来说vuex2.0的变化还是跟vue本身一样 也算折腾了一下 新版的写法和逼格更高些。作为vue全家桶中重要的状态流管理框架 vuex值得你拥有",
				"html": "<p>vuex为了迎合vue2.0的变化 进行了大量的调整和优化</p>\n<a id=\"more\"></a>\n<p>总结下大概有几点变化</p>\n<h1 id=\"更加语义化\"><a href=\"#更加语义化\" class=\"headerlink\" title=\"更加语义化\"></a>更加语义化</h1><p>原文 Terms naming change for better semantics 这个语义化说的是触发action和mutation的API上<br>在使用action的时候 我们一般是从vue组件本身dispatch派发一个action 这个其实只是一个命令 并没有实际<br>改变什么， 而dispatch一个mutation 其实是改变了vuex本身的数据 所以一般从数据角度理解 这种应该属于事物提交。那么变化之后的命名就是commit这样更加语义化 也更好的理解职责</p>\n<p>新的写法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch --&gt; Action</div><div class=\"line\"></div><div class=\"line\">methods:&#123;</div><div class=\"line\">    <span class=\"attr\">Add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'ADD'</span>,<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(resp)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">commit --&gt; Mutation</div><div class=\"line\"></div><div class=\"line\">actions:&#123;</div><div class=\"line\">    <span class=\"string\">\"ADD\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store , param</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">            store.commit(<span class=\"string\">'ADD'</span>,param)</div><div class=\"line\">            resolve(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>1.x 写法就是触发action和mutation都叫dispatch</p>\n<p>ADD: function(store, param ){<br>    store.dispatch(‘COMMIT’,param)<br>}</p>\n<h1 id=\"更灵活\"><a href=\"#更灵活\" class=\"headerlink\" title=\"更灵活\"></a>更灵活</h1><p>1.x之前的版本action是不定义在vuex里的, 而2.x actions可以直接在store中定义了 也就是可以在store实例中直接dispatch<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store =  <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">messages</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"ADD\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state, msg</span>) </span>&#123;</div><div class=\"line\">            state.messages += msg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// action不用再去外面定义 可以直接写在构建参数里</span></div><div class=\"line\">    actions:&#123;</div><div class=\"line\">        <span class=\"string\">\"ADD\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store , param</span>)</span>&#123;</div><div class=\"line\">            store.commit(<span class=\"string\">'ADD'</span>,param)</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">store.dispatch(<span class=\"string\">'ADD'</span>,<span class=\"number\">2</span>)</div></pre></td></tr></table></figure></p>\n<p>而getter也是如此 在vue中直接取getters<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">computed:&#123;</div><div class=\"line\">   <span class=\"attr\">msg</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.getMessage</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-Action\"><a href=\"#Promise-Action\" class=\"headerlink\" title=\"Promise Action\"></a>Promise Action</h1><p>原文 Composable Action Flow直译 可组合的action流<br>其实这个组合事件流概念 没怎么用过 也不好翻译 我就简单从变化性翻译它<br>就是action现在返回了promise 在之前的版本 并没有返回promise 而2.x的源码中已经返回了promise<br>所以也就可以支持所谓的Composable Action<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// action我们定义一个返回promise的add action</span></div><div class=\"line\">actions:&#123;</div><div class=\"line\">    <span class=\"string\">\"ADD\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">store , param</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">            store.commit(<span class=\"string\">'ADD'</span>,param)</div><div class=\"line\">            resolve(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这里可以在dispatch之后直接处理异步</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'ADD'</span>,<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(resp) <span class=\"comment\">// ok</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"MapGetters-MapActions\"><a href=\"#MapGetters-MapActions\" class=\"headerlink\" title=\"MapGetters/ MapActions\"></a>MapGetters/ MapActions</h1><p>新版vuex提供了几个封装方法 mapState, mapMutations, mapGetters,mapActions</p>\n<p>这些都是什么鬼呢？</p>\n<p>其实如果你用过vuex1.x以下的版本 其实它就是我们vue组件中的vuex属性的 换了一种更高逼格写法</p>\n<p>可以定义一组要获取的actions getters 然后map进来<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// 旧版写法</span></div><div class=\"line\"> <span class=\"keyword\">var</span> App = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>:<span class=\"string\">\"....\"</span>,</div><div class=\"line\">    <span class=\"attr\">vuex</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">getters</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">msg</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> state.messages</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">actions</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">add</span> :actions.ADD</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 新版写法 es5 写法</span></div><div class=\"line\"> <span class=\"keyword\">var</span> App = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>:<span class=\"string\">\"....\"</span>,</div><div class=\"line\">    <span class=\"attr\">computed</span>:Vuex.mapGetters(&#123;</div><div class=\"line\">        <span class=\"attr\">msg</span> : <span class=\"string\">'getMessage'</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"attr\">methods</span>:Vuex.mapGetters(&#123;</div><div class=\"line\">        <span class=\"attr\">add</span> : <span class=\"string\">'ADD'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这种本质跟1.x的vuex写法是一样的 内部都是使用vue的Object.defineProperty取做响应式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// es6写法 支持rest参数这种写法 也可以直接完全使用map套装注入</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters, mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    someComuted () &#123; … &#125;,</div><div class=\"line\">    ...mapGetters([<span class=\"string\">'getMessage'</span>, <span class=\"string\">'getName'</span>])</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    someMethod () &#123; … &#125;,</div><div class=\"line\">    ...mapActions([<span class=\"string\">'ADD'</span>,<span class=\"string\">'EDIT'</span>])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"其他变动\"><a href=\"#其他变动\" class=\"headerlink\" title=\"其他变动\"></a>其他变动</h1><p>最新的vuex-2.0.0.rc5 为说明API一些新变化<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个就是换个名字</span></div><div class=\"line\">store.middlewares -&gt; store.plugins</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这货貌似干掉又被还原了 尤大真是喜怒无常 哈</span></div><div class=\"line\">store.watch</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用subscribe 监听vuex的变化</span></div><div class=\"line\">store.subscribe(<span class=\"function\">(<span class=\"params\">mutation, state</span>) =&gt;</span> &#123; ... &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注册模块</span></div><div class=\"line\">registerModule</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注销模块</span></div><div class=\"line\">unregisterModule</div></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总体来说vuex2.0的变化还是跟vue本身一样 也算折腾了一下 新版的写法和逼格更高些。作为vue全家桶中重要的状态流管理框架 vuex值得你拥有</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487644302162,
				"created_by": 2,
				"updated_at": 1487644303352,
				"updated_by": 2,
				"published_at": 1487644302162,
				"published_by": 2
			},
			{
				"id": "cize2ofv70003ucfcfi1ii6xe",
				"title": "vuex 创建一个笔记本项目",
				"slug": "vuex-notebook",
				"markdown": "\n我们会通过这个例子解释相应的概念，以及 Vuex 所要解决的问题：如何管理一个包含许多组件的大型应用。我们假定这个例子使用以下四个组件：最外层(App.vue),左边(toolbar),中间(noteslist),右边(editor)\n<!--more-->\n![](http://upload-images.jianshu.io/upload_images/1444794-d346609162594f9b.png?%0AimageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n# App.vue\napp 组件，它包含了另外三个子组件：\n\n- toolbar\n- noteslist\n- editor\n```html\n<template>\n  <div id=\"app\">\n    <toolbar></toolbar>\n    <notes-list></notes-list>\n    <editor></editor>\n  </div>\n</template>\n\n<script>\nimport Toolbar from './components/toolbar'\nimport NotesList from './components/noteslist'\nimport Editor from './components/editor'\n\nexport default {\n  components: {\n    Toolbar, NotesList, Editor\n  }\n}\n</script>\n<style type=\"text/css\">\n@import url(https://fonts.googleapis.com/css?family=Raleway:400,300);\nhtml, #app {\n  height: 100%;\n}\nbody {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  height: 100%;\n  max-height: 100%;\n  position: relative;\n}\n#toolbar {\n  float: left;\n  width: 80px;\n  height: 100%;\n  background-color: #30414D;\n  color: #767676;\n  padding: 35px 25px 25px 25px;\n}\n#notes-list {\n  float: left;\n  width: 300px;\n  height: 100%;\n  background-color: #F5F5F5;\n  font-family: 'Raleway', sans-serif;\n  font-weight: 400;\n}\n#list-header {\n  padding: 5px 25px 25px 25px;\n}\n#list-header h2 {\n  font-weight: 300;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 22px;\n  padding-bottom: 8px;\n}\n#notes-list .container {\n  height: calc(100% - 137px);\n  max-height: calc(100% - 137px);\n  overflow: auto;\n  width: 100%;\n  padding: 0;\n}\n#notes-list .container .list-group-item {\n  border: 0;\n  border-radius: 0;\n}\n.list-group-item-heading {\n  font-weight: 300;\n  font-size: 15px;\n}\n#note-editor {\n  height: 100%;\n  margin-left: 380px;\n}\n#note-editor textarea {\n  height: 100%;\n  border: 0;\n  border-radius: 0;\n}\n#toolbar i {\n  font-size: 30px;\n  margin-bottom: 35px;\n  cursor: pointer;\n  opacity: 0.8;\n  transition: opacity 0.5s ease;\n}\n#toolbar i:hover {\n  opacity: 1;\n}\n.starred {\n  color: #F7AE4F;\n}\n</style>\n```\n\ncomponent/toolbar.vue\n```html\n<template>\n  <div id=\"toolbar\">\n    <i class=\"glyphicon glyphicon-plus\"></i>\n    <i class=\"glyphicon glyphicon-star\"></i>\n    <i class=\"glyphicon glyphicon-remove\"></i>\n  </div>\n</template>\n<script>\nexport default {}\n</script>\n```\ncomponent/noteslist.vue\n```html\n<template>\n  <div id=\"notes-list\">\n    <div id=\"list-header\">\n      <h2>Notes | coligo</h2>\n      <div class=\"btn-group btn-group-justified\" role=\"group\">\n        <!-- All Notes button -->\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-default\">\n            All Notes\n          </button>\n        </div>\n        <!-- Favorites Button -->\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-default\">\n            Favorites\n          </button>\n        </div>\n      </div>\n    </div>\n    <!-- render notes in a list -->\n    <div class=\"container\">\n      <div class=\"list-group\">\n        <a class=\"list-group-item\" href=\"#\">\n          <h4 class=\"list-group-item-heading\">\n            标题列表\n          </h4>\n        </a>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {}\n</script>\n```\ncomponent/editor.vue\n```html\n<template>\n  <div id=\"note-editor\">\n    <textarea class=\"form-control\">\n    </textarea>\n  </div>\n</template>\n\n<script>\nexport default {}\n</script>\n```\n# 第一步：加入 store\n\nstore 存储应用所需的数据。所有组件都从 store 中读取数据，在我们开始之前，先用 npm 安装 vuex\n```bash\n$ npm install --save vuex\n```\n建立一个新的文件，在根目录下创建 vuex/store.js\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\n// 使用 vuex\nVue.use(Vuex)\n\n// 创建一个对象来保存应用启动时的初始状态\nconst state = {\n  // TODO 放置初始状态\n}\n\n// 创建一个对象存储一系列我们接下来要写的 mutation 函数\nconst mutations = {\n    // TODO 放置我们的状态变更函数\n}\n\n// 整合初始状态和变更函数，我们就得到了我们所需的 store\n// 至此，这个 store 就可以链接到我们的应用中\nexport default new Vuex.Store({\n  state, mutations\n})\n```\n我们需要将创建的 store 让整个项目发现，所以这个时候需要修改 main.js\n修改 main.js，注入 store\n```js\nimport Vue from 'vue'\n\nimport App from './App'\nimport store from './vuex/store'\n\nnew Vue({\n  template: '<App/>',\n  store,\n  components: { App }\n}).$mount('#app')\n```\n# 第二步：创建 action\n\naction 是一种专门用来被 component 调用的函数，action 函数能够通过分发相应的 mutation 函数，来触发对 store 的更新。action 也可以先从 HTTP 后端或 store 中读取其他数据之后再分发更新事件。\n\n创建一个新文件 vuex/action.js，然后写入相关函数\n```js\n// 新增笔记\nexport const addNote = ({ commit, state }) => {\n  commit('ADD_NOTE')\n}\n\n// 修改笔记\nexport const editNote = ({ commit, state }, e) => {\n  commit('EDIT_NOTE', e.target.value)\n}\n\n// 删除笔记\nexport const deleteNote = ({ commit, state }) => {\n  commit('DELETE_NOTE')\n}\n\n// 更新当前选中笔记\nexport const updateActiveNote = ({ commit, state }, note) => {\n  commit('SET_ACTIVE_NOTE', note)\n}\n\n// 选中模块按钮（All note、Favorites）\nexport const toggleFavorite = ({ commit, state }) => {\n  commit('TOGGLE_FAVORITE')\n}\n```\n回顾一下我们刚刚添加的内容背后所潜藏的一些有趣的点：\n\n- 我们有了一个新对象 vuex.actions，包含着新的 action；\n- 我们没有指定特定的 store，object，state 等等。Vuex 会自动把它们串联起来；\n- 我们可以用 this.addNote () 在任何方法中调用此 action；\n- 我们也可以通过 @click 参数调用它，与使用其他普通的 Vue 组件方法并无二致；\n- 我们给 action 起名叫 addNote，但是在具体使用时，我们可以根据需要进行重新命名\n# 第三步：创建 state 和 mutation\n\n我们在 vuex/actions.js 文件里，添加了相关的 mutation ，但是我们还没有写它所对应的具体操作，现在就让我们来将这些方法暴露出来。\n\n修改 vuex/store.js\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport * as actions from './actions'\nimport * as getters from './getters'\n\n// 使用 vuex\nVue.use(Vuex)\n\n// 创建一个对象来保存应用启动时的初始状态\nconst state = {\n  // TODO 放置初始状态\n  count: 0,\n  notes: [],\n  activeNote: []\n}\n\n// 创建一个对象存储一系列我们接下来要写的 mutation 函数\nconst mutations = {\n  // TODO 放置我们的状态变更函数\n  increment (state, amount) {\n    state.count = state.count + amount\n  },\n  decrement (state, amount) {\n    state.count = state.count - amount\n  },\n  DECREMENT (state, amount) {\n    state.count = state.count - amount\n  },\n  ADD_NOTE (state) {\n    console.log(state)\n    const newNote = {\n      text: 'New Note',\n      favorite: false\n    }\n    state.notes.push(newNote)\n    state.activeNote = newNote\n  },\n\n  EDIT_NOTE (state, text) {\n    state.activeNote.text = text\n  },\n\n  DELETE_NOTE (state) {\n    state.notes.$remove(state.activeNote)\n    state.activeNote = state.notes[0]\n  },\n\n  TOGGLE_FAVORITE (state) {\n    state.activeNote.favorite = !state.activeNote.favorite\n  },\n\n  SET_ACTIVE_NOTE (state, note) {\n    state.activeNote = note\n  }\n}\n\n// 整合初始状态和变更函数，我们就得到了我们所需的 store\n// 至此，这个 store 就可以链接到我们的应用中\nexport default new Vuex.Store({\n  actions,\n  getters,\n  state,\n  mutations\n})\n```\n# 第四步： 创建 getter\n\n在 store 中的数据，我们可以通过创建一个新的文件 getter 来统一获取方法，这样子不仅便于管理，有时候很多地方使用同一个方法，此时我们不需要修改一大堆页面，只需要修改 getter.js 中的方法实现就可以。\n\n创建一个新文件 vuex/getter.js ，然后编写代码：\n```js\n/**\n * 在 ES6 里你可以这样写\n * export const getCount = state => state.count\n */\nexport const notes = state => state.notes\n\nexport const activeNote = state => state.activeNote\n\nexport const activeNoteText = state => state.activeNote.text\n```\n# 第五步：在组件中获取数据，并且调用 action 方法\n\n修改 vuex/toolbar.vue\n```html\n<template>\n  <div id=\"toolbar\">\n    <i @click=\"addNote\" class=\"glyphicon glyphicon-plus\"></i>\n    <i @click=\"toggleFavorite\"\n      class=\"glyphicon glyphicon-star\"\n      :class=\"{starred: activeNote.favorite}\"></i>\n    <i @click=\"deleteNote\" class=\"glyphicon glyphicon-remove\"></i>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nexport default {\n  computed: mapGetters({\n    activeNote: 'activeNote'\n  }),\n  methods: mapActions([\n    'addNote',\n    'deleteNote',\n    'toggleFavorite'\n  ])\n}\n</script>\n```\n修改 vuex/noteslist.vue\n```html\n<template>\n  <div id=\"notes-list\">\n\n    <div id=\"list-header\">\n      <h2>Notes | coligo</h2>\n      <div class=\"btn-group btn-group-justified\" role=\"group\">\n        <!-- All Notes button -->\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-default\"\n            @click=\"show = 'all'\"\n            :class=\"{active: show === 'all'}\">\n            All Notes\n          </button>\n        </div>\n        <!-- Favorites Button -->\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-default\"\n            @click=\"show = 'favorites'\"\n            :class=\"{active: show === 'favorites'}\">\n            Favorites\n          </button>\n        </div>\n      </div>\n    </div>\n    <!-- render notes in a list -->\n    <div class=\"container\">\n      <div class=\"list-group\">\n        <a v-for=\"note in filteredNotes\"\n          class=\"list-group-item\" href=\"#\"\n          :class=\"{active: activeNote === note}\"\n          @click=\"updateActiveNote(note)\">\n          <h4 class=\"list-group-item-heading\">\n            {{note.text.trim().substring(0, 30)}}\n          </h4>\n        </a>\n      </div>\n    </div>\n\n  </div>\n</template>\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nexport default {\n  data () {\n    return {\n      show: 'all'\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'notes', 'activeNote'\n    ]),\n    filteredNotes () {\n      if (this.show === 'all') {\n        return this.notes\n      } else if (this.show === 'favorites') {\n        return this.notes.filter(note => note.favorite)\n      }\n    }\n  },\n  methods: mapActions([\n    'updateActiveNote'\n  ])\n}\n</script>\n```\n修改 vuex/editor.vue\n```html\n<template>\n  <div id=\"note-editor\">\n    <textarea\n      :value=\"activeNoteText\"\n      @input=\"editNote\"\n      class=\"form-control\">\n    </textarea>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nexport default {\n  computed: {\n    ...mapGetters([\n      'activeNoteText'\n    ])\n  },\n  methods: {\n    ...mapActions([\n      'editNote'\n    ])\n  }\n}\n</script>\n```\n这个时候，运行下你的程序，它可以正常工作了。\n```bash\n$ npm run dev\n```\n最后，总结下编写该案例时遇到的坑：\n\n注意该案例使用的是 vue2.0 和 vuex2.0，安装插件时请不要装错；\n如果使用 ES6，babel，那么请在 .babelrc 中 使用 stage-3 和 transform-object-rest-spread;\n```json\n{\n   \"presets\": [\"es2015\", \"stage-3\"],\n   \"plugins\": [\"transform-runtime\", \"transform-object-rest-spread\"],\n   \"comments\": false\n}\n```",
				"html": "<p>我们会通过这个例子解释相应的概念，以及 Vuex 所要解决的问题：如何管理一个包含许多组件的大型应用。我们假定这个例子使用以下四个组件：最外层(App.vue),左边(toolbar),中间(noteslist),右边(editor)<br><a id=\"more\"></a><br><img src=\"http://upload-images.jianshu.io/upload_images/1444794-d346609162594f9b.png?%0AimageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"App-vue\"><a href=\"#App-vue\" class=\"headerlink\" title=\"App.vue\"></a>App.vue</h1><p>app 组件，它包含了另外三个子组件：</p>\n<ul>\n<li>toolbar</li>\n<li>noteslist</li>\n<li>editor<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">toolbar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">toolbar</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">notes-list</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">notes-list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">editor</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">editor</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> Toolbar <span class=\"keyword\">from</span> <span class=\"string\">'./components/toolbar'</span></div><div class=\"line\"><span class=\"keyword\">import</span> NotesList <span class=\"keyword\">from</span> <span class=\"string\">'./components/noteslist'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Editor <span class=\"keyword\">from</span> <span class=\"string\">'./components/editor'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    Toolbar, NotesList, Editor</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">@import url(https://fonts.googleapis.com/css?family=Raleway:400,300);</div><div class=\"line\">html, #app &#123;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  padding: 0;</div><div class=\"line\">  border: 0;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  max-height: 100%;</div><div class=\"line\">  position: relative;</div><div class=\"line\">&#125;</div><div class=\"line\">#toolbar &#123;</div><div class=\"line\">  float: left;</div><div class=\"line\">  width: 80px;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  background-color: #30414D;</div><div class=\"line\">  color: #767676;</div><div class=\"line\">  padding: 35px 25px 25px 25px;</div><div class=\"line\">&#125;</div><div class=\"line\">#notes-list &#123;</div><div class=\"line\">  float: left;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  background-color: #F5F5F5;</div><div class=\"line\">  font-family: 'Raleway', sans-serif;</div><div class=\"line\">  font-weight: 400;</div><div class=\"line\">&#125;</div><div class=\"line\">#list-header &#123;</div><div class=\"line\">  padding: 5px 25px 25px 25px;</div><div class=\"line\">&#125;</div><div class=\"line\">#list-header h2 &#123;</div><div class=\"line\">  font-weight: 300;</div><div class=\"line\">  text-transform: uppercase;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  font-size: 22px;</div><div class=\"line\">  padding-bottom: 8px;</div><div class=\"line\">&#125;</div><div class=\"line\">#notes-list .container &#123;</div><div class=\"line\">  height: calc(100% - 137px);</div><div class=\"line\">  max-height: calc(100% - 137px);</div><div class=\"line\">  overflow: auto;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  padding: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">#notes-list .container .list-group-item &#123;</div><div class=\"line\">  border: 0;</div><div class=\"line\">  border-radius: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">.list-group-item-heading &#123;</div><div class=\"line\">  font-weight: 300;</div><div class=\"line\">  font-size: 15px;</div><div class=\"line\">&#125;</div><div class=\"line\">#note-editor &#123;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  margin-left: 380px;</div><div class=\"line\">&#125;</div><div class=\"line\">#note-editor textarea &#123;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  border: 0;</div><div class=\"line\">  border-radius: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">#toolbar i &#123;</div><div class=\"line\">  font-size: 30px;</div><div class=\"line\">  margin-bottom: 35px;</div><div class=\"line\">  cursor: pointer;</div><div class=\"line\">  opacity: 0.8;</div><div class=\"line\">  transition: opacity 0.5s ease;</div><div class=\"line\">&#125;</div><div class=\"line\">#toolbar i:hover &#123;</div><div class=\"line\">  opacity: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">.starred &#123;</div><div class=\"line\">  color: #F7AE4F;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>component/toolbar.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"toolbar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-plus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-star\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>component/noteslist.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"notes-list\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list-header\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Notes | coligo<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-group btn-group-justified\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"group\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- All Notes button --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-group\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"group\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span></div><div class=\"line\">            All Notes</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Favorites Button --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-group\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"group\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span></div><div class=\"line\">            Favorites</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- render notes in a list --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item-heading\"</span>&gt;</span></div><div class=\"line\">            标题列表</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>component/editor.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"note-editor\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"第一步：加入-store\"><a href=\"#第一步：加入-store\" class=\"headerlink\" title=\"第一步：加入 store\"></a>第一步：加入 store</h1><p>store 存储应用所需的数据。所有组件都从 store 中读取数据，在我们开始之前，先用 npm 安装 vuex<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save vuex</div></pre></td></tr></table></figure></p>\n<p>建立一个新的文件，在根目录下创建 vuex/store.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 vuex</span></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个对象来保存应用启动时的初始状态</span></div><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO 放置初始状态</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个对象存储一系列我们接下来要写的 mutation 函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">    <span class=\"comment\">// TODO 放置我们的状态变更函数</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 整合初始状态和变更函数，我们就得到了我们所需的 store</span></div><div class=\"line\"><span class=\"comment\">// 至此，这个 store 就可以链接到我们的应用中</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  state, mutations</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们需要将创建的 store 让整个项目发现，所以这个时候需要修改 main.js<br>修改 main.js，注入 store<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./vuex/store'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;App/&gt;'</span>,</div><div class=\"line\">  store,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123; App &#125;</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"第二步：创建-action\"><a href=\"#第二步：创建-action\" class=\"headerlink\" title=\"第二步：创建 action\"></a>第二步：创建 action</h1><p>action 是一种专门用来被 component 调用的函数，action 函数能够通过分发相应的 mutation 函数，来触发对 store 的更新。action 也可以先从 HTTP 后端或 store 中读取其他数据之后再分发更新事件。</p>\n<p>创建一个新文件 vuex/action.js，然后写入相关函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 新增笔记</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> addNote = <span class=\"function\">(<span class=\"params\">&#123; commit, state &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  commit(<span class=\"string\">'ADD_NOTE'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 修改笔记</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> editNote = <span class=\"function\">(<span class=\"params\">&#123; commit, state &#125;, e</span>) =&gt;</span> &#123;</div><div class=\"line\">  commit(<span class=\"string\">'EDIT_NOTE'</span>, e.target.value)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删除笔记</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> deleteNote = <span class=\"function\">(<span class=\"params\">&#123; commit, state &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  commit(<span class=\"string\">'DELETE_NOTE'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更新当前选中笔记</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> updateActiveNote = <span class=\"function\">(<span class=\"params\">&#123; commit, state &#125;, note</span>) =&gt;</span> &#123;</div><div class=\"line\">  commit(<span class=\"string\">'SET_ACTIVE_NOTE'</span>, note)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 选中模块按钮（All note、Favorites）</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> toggleFavorite = <span class=\"function\">(<span class=\"params\">&#123; commit, state &#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  commit(<span class=\"string\">'TOGGLE_FAVORITE'</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>回顾一下我们刚刚添加的内容背后所潜藏的一些有趣的点：</p>\n<ul>\n<li>我们有了一个新对象 vuex.actions，包含着新的 action；</li>\n<li>我们没有指定特定的 store，object，state 等等。Vuex 会自动把它们串联起来；</li>\n<li>我们可以用 this.addNote () 在任何方法中调用此 action；</li>\n<li>我们也可以通过 @click 参数调用它，与使用其他普通的 Vue 组件方法并无二致；</li>\n<li>我们给 action 起名叫 addNote，但是在具体使用时，我们可以根据需要进行重新命名<h1 id=\"第三步：创建-state-和-mutation\"><a href=\"#第三步：创建-state-和-mutation\" class=\"headerlink\" title=\"第三步：创建 state 和 mutation\"></a>第三步：创建 state 和 mutation</h1></li>\n</ul>\n<p>我们在 vuex/actions.js 文件里，添加了相关的 mutation ，但是我们还没有写它所对应的具体操作，现在就让我们来将这些方法暴露出来。</p>\n<p>修改 vuex/store.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> getters <span class=\"keyword\">from</span> <span class=\"string\">'./getters'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 vuex</span></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个对象来保存应用启动时的初始状态</span></div><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO 放置初始状态</span></div><div class=\"line\">  count: <span class=\"number\">0</span>,</div><div class=\"line\">  <span class=\"attr\">notes</span>: [],</div><div class=\"line\">  <span class=\"attr\">activeNote</span>: []</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个对象存储一系列我们接下来要写的 mutation 函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">  <span class=\"comment\">// TODO 放置我们的状态变更函数</span></div><div class=\"line\">  increment (state, amount) &#123;</div><div class=\"line\">    state.count = state.count + amount</div><div class=\"line\">  &#125;,</div><div class=\"line\">  decrement (state, amount) &#123;</div><div class=\"line\">    state.count = state.count - amount</div><div class=\"line\">  &#125;,</div><div class=\"line\">  DECREMENT (state, amount) &#123;</div><div class=\"line\">    state.count = state.count - amount</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ADD_NOTE (state) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(state)</div><div class=\"line\">    <span class=\"keyword\">const</span> newNote = &#123;</div><div class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">'New Note'</span>,</div><div class=\"line\">      <span class=\"attr\">favorite</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    state.notes.push(newNote)</div><div class=\"line\">    state.activeNote = newNote</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  EDIT_NOTE (state, text) &#123;</div><div class=\"line\">    state.activeNote.text = text</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  DELETE_NOTE (state) &#123;</div><div class=\"line\">    state.notes.$remove(state.activeNote)</div><div class=\"line\">    state.activeNote = state.notes[<span class=\"number\">0</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  TOGGLE_FAVORITE (state) &#123;</div><div class=\"line\">    state.activeNote.favorite = !state.activeNote.favorite</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  SET_ACTIVE_NOTE (state, note) &#123;</div><div class=\"line\">    state.activeNote = note</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 整合初始状态和变更函数，我们就得到了我们所需的 store</span></div><div class=\"line\"><span class=\"comment\">// 至此，这个 store 就可以链接到我们的应用中</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">  actions,</div><div class=\"line\">  getters,</div><div class=\"line\">  state,</div><div class=\"line\">  mutations</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"第四步：-创建-getter\"><a href=\"#第四步：-创建-getter\" class=\"headerlink\" title=\"第四步： 创建 getter\"></a>第四步： 创建 getter</h1><p>在 store 中的数据，我们可以通过创建一个新的文件 getter 来统一获取方法，这样子不仅便于管理，有时候很多地方使用同一个方法，此时我们不需要修改一大堆页面，只需要修改 getter.js 中的方法实现就可以。</p>\n<p>创建一个新文件 vuex/getter.js ，然后编写代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 在 ES6 里你可以这样写</div><div class=\"line\"> * export const getCount = state =&gt; state.count</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> notes = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.notes</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> activeNote = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.activeNote</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> activeNoteText = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.activeNote.text</div></pre></td></tr></table></figure></p>\n<h1 id=\"第五步：在组件中获取数据，并且调用-action-方法\"><a href=\"#第五步：在组件中获取数据，并且调用-action-方法\" class=\"headerlink\" title=\"第五步：在组件中获取数据，并且调用 action 方法\"></a>第五步：在组件中获取数据，并且调用 action 方法</h1><p>修改 vuex/toolbar.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"toolbar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addNote\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-plus\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toggleFavorite\"</span></span></div><div class=\"line\">      <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-star\"</span></div><div class=\"line\">      <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;starred: activeNote.favorite&#125;\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"deleteNote\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters, mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">computed</span>: mapGetters(&#123;</div><div class=\"line\">    <span class=\"attr\">activeNote</span>: <span class=\"string\">'activeNote'</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  <span class=\"attr\">methods</span>: mapActions([</div><div class=\"line\">    <span class=\"string\">'addNote'</span>,</div><div class=\"line\">    <span class=\"string\">'deleteNote'</span>,</div><div class=\"line\">    <span class=\"string\">'toggleFavorite'</span></div><div class=\"line\">  ])</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>修改 vuex/noteslist.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"notes-list\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list-header\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Notes | coligo<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-group btn-group-justified\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"group\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- All Notes button --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-group\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"group\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span></span></div><div class=\"line\">            @<span class=\"attr\">click</span>=<span class=\"string\">\"show = 'all'\"</span></div><div class=\"line\">            <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;active: show === 'all'&#125;\"</span>&gt;</div><div class=\"line\">            All Notes</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- Favorites Button --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-group\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"group\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span></span></div><div class=\"line\">            @<span class=\"attr\">click</span>=<span class=\"string\">\"show = 'favorites'\"</span></div><div class=\"line\">            <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;active: show === 'favorites'&#125;\"</span>&gt;</div><div class=\"line\">            Favorites</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- render notes in a list --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"note in filteredNotes\"</span></span></div><div class=\"line\">          <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span></div><div class=\"line\">          <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;active: activeNote === note&#125;\"</span></div><div class=\"line\">          @<span class=\"attr\">click</span>=<span class=\"string\">\"updateActiveNote(note)\"</span>&gt;</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item-heading\"</span>&gt;</span></div><div class=\"line\">            &#123;&#123;note.text.trim().substring(0, 30)&#125;&#125;</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters, mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">show</span>: <span class=\"string\">'all'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    ...mapGetters([</div><div class=\"line\">      <span class=\"string\">'notes'</span>, <span class=\"string\">'activeNote'</span></div><div class=\"line\">    ]),</div><div class=\"line\">    filteredNotes () &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.show === <span class=\"string\">'all'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.notes</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.show === <span class=\"string\">'favorites'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.notes.filter(<span class=\"function\"><span class=\"params\">note</span> =&gt;</span> note.favorite)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: mapActions([</div><div class=\"line\">    <span class=\"string\">'updateActiveNote'</span></div><div class=\"line\">  ])</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>修改 vuex/editor.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"note-editor\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span></span></div><div class=\"line\">      <span class=\"attr\">:value</span>=<span class=\"string\">\"activeNoteText\"</span></div><div class=\"line\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"editNote\"</span></div><div class=\"line\">      <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters, mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    ...mapGetters([</div><div class=\"line\">      <span class=\"string\">'activeNoteText'</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    ...mapActions([</div><div class=\"line\">      <span class=\"string\">'editNote'</span></div><div class=\"line\">    ])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个时候，运行下你的程序，它可以正常工作了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm run dev</div></pre></td></tr></table></figure></p>\n<p>最后，总结下编写该案例时遇到的坑：</p>\n<p>注意该案例使用的是 vue2.0 和 vuex2.0，安装插件时请不要装错；<br>如果使用 ES6，babel，那么请在 .babelrc 中 使用 stage-3 和 transform-object-rest-spread;<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"stage-3\"</span>],</div><div class=\"line\">   <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-runtime\"</span>, <span class=\"string\">\"transform-object-rest-spread\"</span>],</div><div class=\"line\">   <span class=\"attr\">\"comments\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487593361359,
				"created_by": 2,
				"updated_at": 1487593362756,
				"updated_by": 2,
				"published_at": 1487593361359,
				"published_by": 2
			},
			{
				"id": "cize1s4ot0000ucfcdlaz07x6",
				"title": "vuex 模块化拆分",
				"slug": "vuex_module",
				"markdown": "\nVuex 强调使用单一状态树，即在一个项目里只有一个 store，这个 store 集中管理了项目中所有的数据以及对数据的操作行为。但是这样带来的问题是 store 可能会非常臃肿庞大不易维护，所以就需要对状态树进行模块化的拆分。\n\n<!--more-->\n\n# Module\n首先介绍下基本的组件化规则：你可以根据项目组件的划分来拆分 store，每个模块里管理着当前组件的状态以及行为，最后将这些模块在根 store 进行组合。\n\n```js\nconst moduleA = {\n    state: { ... },\n    getters: { ... }\n    mutations: { ... }\n};\n\nconst moduleB = {\n    state: { ... },\n    getters: { ... },\n    mutations: { ... },\n    actions: { ... }\n};\n\nconst store = new Vuex.Store({\n    modules: {\n        a: moduleA,\n        b: moduleB\n    }\n});\n\nconsole.log(store.state.a); // moduleA 的 state\n```\n接下来看 Vuex 核心在模块化后的使用注意事项。\n\n# State\n\n在 Vuex 模块化中，state 是唯一会根据组合时模块的别名来添加层级的，后面的 getters、mutations 以及 actions 都是直接合并在 store 下。\n\n例如，访问模块 a 中的 state，要通过 store.state.a，访问根 store 上申明的 state，依然是通过 store.state.xxx 直接访问。\n\n```js\nconst moduleA = {\n    state: {\n        maState: 'A'\n    }\n};\n\nconst moduleB = {\n    state: {\n        mbState: 'B'\n    }\n};\n\nconst store = new Vuex.Store({\n    modules: {\n        a: moduleA,\n        b: moduleB\n    },\n    state: {\n        rtState: 'Root'\n    }\n});\n\nconsole.log(store.state.a.maState); // A\nconsole.log(store.state.b.mbState); // B\nconsole.log(store.state.rtState); // Root\n```\n\n\n# \bGetters\n\n与 state 不同的是，不同模块的 getters 会直接合并在 store.getters 下\n\n```js\nconst moduleA = {\n    state: {\n        count: 1\n    },\n    getters: {\n        maGetter(state, getters, rootState) {\n            return state.count + rootState.b.count;\n        }\n    }\n};\n\nconst moduleB = {\n    state: {\n        count: 2\n    },\n    getters: {\n        mbGetter() {\n            return 'Hello Vuex';\n        }\n    }\n};\n\nconst store = {\n    modules: {\n        a: moduleA,\n        b: moduleB\n    }\n};\n\nconsole.log(store.getters.maGetter); // 3\nconsole.log(store.getters.mbGetter); // Hello Vuex\n```\n\n在上文我们介绍过 getters 的回调函数所接收的前两个参数，模块化后需要用到第三个参数——rootState。参数：\n1. state，模块中的 state 仅为模块自身中的 state；\n2. getters，等同于 store.getters；\n3. rootState，全局 state。\n\n通过 rootState，模块中的 getters 就可以引用别的模块中的 state 了，十分方便。\n\n注意：由于 getters 不区分模块，所以不同模块中的 getters 如果重名，Vuex 会报出 'duplicate getter key: [重复的getter名]' 错误。\n\n\n\n# Mutations\n\nmutations 与 getters 类似，不同模块的 mutation 均可以通过 store.commit 直接触发。\n\n```js\nconst moduleA = {\n    state: {\n        count: 1\n    },\n    mutations: {\n        sayCountA(state) {\n            console.log('Module A count: ', state.count);\n        }\n    }\n};\n\nconst moduleB = {\n    state: {\n        count: 2\n    },\n    mutations: {\n        sayCountB(state) {\n            console.log('Module B count: ', state.count);\n        }\n    }\n};\n\nconst store = {\n    modules: {\n        a: moduleA,\n        b: moduleB\n    }\n};\n\nstore.commit('sayCountA'); // Module A count: 1\nstore.commit('sayCountB'); // Module B count: 2\n```\nmutation 的回调函数中只接收唯一的参数——当前模块的 state。如果不同模块中有同名的 mutation，Vuex 不会报错，通过 store.commit 调用，会依次触发所有同名 mutation。\n\n\n\n# Actions\n\n与 mutations 类似，不同模块的 actions 均可以通过 store.dispatch 直接触发。\n\n```js\nconst moduleA = {\n    state: {\n        count: 1\n    },\n    mutations: {\n        sayCountA(state) {\n            console.log('Module A count: ', state.count);\n        }\n    },\n    actions: {\n        maAction(context) {\n            context.dispatch('mbAction');\n        }\n    }\n};\n\nconst moduleB = {\n    state: {\n        count: 2\n    },\n    mutations: {\n        sayCountB(state, num) {\n            console.log('Module B count: ', state.count+num);\n        }\n    },\n    action: {\n        mbAction({ commit, rootState }) {\n            commit('sayCountA');\n            commit('sayCountB', rootState.a.count);\n        }\n    }\n};\n\nconst store = {\n    modules: {\n        a: moduleA,\n        b: moduleB\n    }\n};\n\nstore.dispatch('maAction'); // Module A count: 1、Module B count: 3\n```\n从上例可以看出，action 的回调函数接收一个 context 上下文参数，context 包含：1. state、2. rootState、3. getters、4. mutations、5. actions 五个属性，为了简便可以在参数中解构。\n\n在 action 中可以通过 context.commit 跨模块调用 mutation，同时一个模块的 action 也可以调用其他模块的 action。\n\n同样的，当不同模块中有同名 action 时，通过 store.dispatch 调用，会依次触发所有同名 actions。\n\n\n\n最后有一点要注意的是，将 store 中的 state 绑定到 Vue 组件中的 computed 计算属性后，对 state 进行更改需要通过 mutation 或者 action，在 Vue 组件中直接进行赋值 (this.myState = 'ABC') 是不会生效的。",
				"html": "<p>Vuex 强调使用单一状态树，即在一个项目里只有一个 store，这个 store 集中管理了项目中所有的数据以及对数据的操作行为。但是这样带来的问题是 store 可能会非常臃肿庞大不易维护，所以就需要对状态树进行模块化的拆分。</p>\n<a id=\"more\"></a>\n<h1 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h1><p>首先介绍下基本的组件化规则：你可以根据项目组件的划分来拆分 store，每个模块里管理着当前组件的状态以及行为，最后将这些模块在根 store 进行组合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123; ... &#125;,</div><div class=\"line\">    <span class=\"attr\">getters</span>: &#123; ... &#125;</div><div class=\"line\">    mutations: &#123; ... &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123; ... &#125;,</div><div class=\"line\">    <span class=\"attr\">getters</span>: &#123; ... &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123; ... &#125;,</div><div class=\"line\">    <span class=\"attr\">actions</span>: &#123; ... &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">a</span>: moduleA,</div><div class=\"line\">        <span class=\"attr\">b</span>: moduleB</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.state.a); <span class=\"comment\">// moduleA 的 state</span></div></pre></td></tr></table></figure>\n<p>接下来看 Vuex 核心在模块化后的使用注意事项。</p>\n<h1 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h1><p>在 Vuex 模块化中，state 是唯一会根据组合时模块的别名来添加层级的，后面的 getters、mutations 以及 actions 都是直接合并在 store 下。</p>\n<p>例如，访问模块 a 中的 state，要通过 store.state.a，访问根 store 上申明的 state，依然是通过 store.state.xxx 直接访问。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">maState</span>: <span class=\"string\">'A'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">mbState</span>: <span class=\"string\">'B'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">a</span>: moduleA,</div><div class=\"line\">        <span class=\"attr\">b</span>: moduleB</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">rtState</span>: <span class=\"string\">'Root'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.state.a.maState); <span class=\"comment\">// A</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.state.b.mbState); <span class=\"comment\">// B</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.state.rtState); <span class=\"comment\">// Root</span></div></pre></td></tr></table></figure>\n<h1 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"\bGetters\"></a>\bGetters</h1><p>与 state 不同的是，不同模块的 getters 会直接合并在 store.getters 下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getters</span>: &#123;</div><div class=\"line\">        maGetter(state, getters, rootState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> state.count + rootState.b.count;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getters</span>: &#123;</div><div class=\"line\">        mbGetter() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'Hello Vuex'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = &#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">a</span>: moduleA,</div><div class=\"line\">        <span class=\"attr\">b</span>: moduleB</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.getters.maGetter); <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.getters.mbGetter); <span class=\"comment\">// Hello Vuex</span></div></pre></td></tr></table></figure>\n<p>在上文我们介绍过 getters 的回调函数所接收的前两个参数，模块化后需要用到第三个参数——rootState。参数：</p>\n<ol>\n<li>state，模块中的 state 仅为模块自身中的 state；</li>\n<li>getters，等同于 store.getters；</li>\n<li>rootState，全局 state。</li>\n</ol>\n<p>通过 rootState，模块中的 getters 就可以引用别的模块中的 state 了，十分方便。</p>\n<p>注意：由于 getters 不区分模块，所以不同模块中的 getters 如果重名，Vuex 会报出 ‘duplicate getter key: [重复的getter名]’ 错误。</p>\n<h1 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h1><p>mutations 与 getters 类似，不同模块的 mutation 均可以通过 store.commit 直接触发。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">        sayCountA(state) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Module A count: '</span>, state.count);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">        sayCountB(state) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Module B count: '</span>, state.count);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = &#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">a</span>: moduleA,</div><div class=\"line\">        <span class=\"attr\">b</span>: moduleB</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">store.commit(<span class=\"string\">'sayCountA'</span>); <span class=\"comment\">// Module A count: 1</span></div><div class=\"line\">store.commit(<span class=\"string\">'sayCountB'</span>); <span class=\"comment\">// Module B count: 2</span></div></pre></td></tr></table></figure>\n<p>mutation 的回调函数中只接收唯一的参数——当前模块的 state。如果不同模块中有同名的 mutation，Vuex 不会报错，通过 store.commit 调用，会依次触发所有同名 mutation。</p>\n<h1 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h1><p>与 mutations 类似，不同模块的 actions 均可以通过 store.dispatch 直接触发。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">        sayCountA(state) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Module A count: '</span>, state.count);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">actions</span>: &#123;</div><div class=\"line\">        maAction(context) &#123;</div><div class=\"line\">            context.dispatch(<span class=\"string\">'mbAction'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">        sayCountB(state, num) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Module B count: '</span>, state.count+num);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">action</span>: &#123;</div><div class=\"line\">        mbAction(&#123; commit, rootState &#125;) &#123;</div><div class=\"line\">            commit(<span class=\"string\">'sayCountA'</span>);</div><div class=\"line\">            commit(<span class=\"string\">'sayCountB'</span>, rootState.a.count);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> store = &#123;</div><div class=\"line\">    <span class=\"attr\">modules</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">a</span>: moduleA,</div><div class=\"line\">        <span class=\"attr\">b</span>: moduleB</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">store.dispatch(<span class=\"string\">'maAction'</span>); <span class=\"comment\">// Module A count: 1、Module B count: 3</span></div></pre></td></tr></table></figure>\n<p>从上例可以看出，action 的回调函数接收一个 context 上下文参数，context 包含：1. state、2. rootState、3. getters、4. mutations、5. actions 五个属性，为了简便可以在参数中解构。</p>\n<p>在 action 中可以通过 context.commit 跨模块调用 mutation，同时一个模块的 action 也可以调用其他模块的 action。</p>\n<p>同样的，当不同模块中有同名 action 时，通过 store.dispatch 调用，会依次触发所有同名 actions。</p>\n<p>最后有一点要注意的是，将 store 中的 state 绑定到 Vue 组件中的 computed 计算属性后，对 state 进行更改需要通过 mutation 或者 action，在 Vue 组件中直接进行赋值 (this.myState = ‘ABC’) 是不会生效的。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487591853928,
				"created_by": 2,
				"updated_at": 1487591855400,
				"updated_by": 2,
				"published_at": 1487591853928,
				"published_by": 2
			},
			{
				"id": "cize1inxo0000qgfcb9ftanfi",
				"title": "vuex 2.0 知识点详解",
				"slug": "vuex_2.0_knowledge",
				"markdown": "\nVuex 是一个专门为 Vue.js 应该程序开发的状态管理模式，它类似于 Redux 应用于 React 项目中，他们都是一种 Flux 架构。相比 Redux，Vuex 更简洁，学习成本更低。\n\n<!--more-->\n\n注：本文针对 Vuex 2.0 的语法，目前通过 npm 默认下载的版本为 1.0+ ，想引入 2.0 版本可以通过 script 标签引入。\n```html\n<script src=\"https://unpkg.com/vuex@2.0.0\"></script>\n```\n习惯使用 ES6 中 import 方法的可以暂时通过解构赋值的方式引入 Vuex 中的方法。\n```js\nimport { mapState, mapGetters } from 'Vuex';\n//替换为：\nlet { mapState, mapGetters } = Vuex;\n```\n\nVuex 的核心内容主要就是 State、Getters、Mutations、Actions 这四部分，也非常好理解。\n\n# State\n首先看如何申明一个 store\n\n```js\nimport Vue from 'Vue';\nimport Vuex from 'Vuex';\n\nVue.use(Vuex);\n\nlet store = new Vuex.Store({\n    state: {\n        stateA: 'a',\n        stateB: 'b',\n        stateC: 'c'\n    }\n});\n\nconsole.log(store.state.stateA); // a\n```\n\n在 store 中的 state 对象，可以理解为 Vue 实例中的 data 对象，它用来保存最基本的数据。\n\n## 在 Vue 中获取 store 中的状态\n\n```js\nlet app = new Vue({\n　　 el: '#demo',\n    template: `<h1>{{myState}}</h1>`,\n    computed: {\n         myState() {\n            return store.state.stateA;\n        }\n    }\n});\n```\n\n最简单的方式就是通过 Vue 中的计算属性(computed) 来将 store 中的状态映射为 Vue 的数据。但是当数据多时这种方法明显效率过低，所以 Vuex 中提供了 mapState 方法用于批量映射 store 中的状态。\n\n首先必须在 Vue 中注册 store 选项，这样整个 store 就从根节点注册到 Vue 下的每一个子组件里了。\n\n```js\nimport { mapState } from 'Vuex';\n\nlet app = new Vue({\n    el: '#demo',\n    store,\n    data: {\n        local: 'L'\n    },\n    computed: mapState({\n        stateA: state => state.stateA,\n        stateB: 'stateB',\n        stateC(state) {\n            return state.stateC + this.local;\n        }\n    })\n});\n```\n上例中，a. 可以通过 ES6 中的箭头函数进行数据的映射，b. 当计算属性的名称与 state 的属性名一致时可能直接通过字符串赋值，c. 当需要引用上下文中的 data 属性实，只能通过常规函数来使 this 生效。\n\n如果所有计算属性的名称都与 state 一致，可以在 mapState 中以数组的方式进行映射。如果 Vue 中已经存在计算属性，可以通过 ES6 的展开操作符 (...) 进行组合。\n\n```js\nlet app = new Vue({\n    el: '#demo',\n    store,\n    computed: {\n        local() {\n             return 'Local';\n        },\n        ...mapState(['stateA', 'stateB', 'stateC'])\n    }\n});\n```\n\n\n# Getters\n当需要对 store 中的数据进行处理，或者需要对处理后的数据进行复用，就可以使用 Getters 来处理，Getters 也可以理解为 Vue 中的计算属性 (computed)。\n\n```js\nlet store = new Vuex.Store({\n    state: {\n        nowDate: new Date()\n    },\n    getters: {\n        dateFormat(state, getters) {\n            let date = state.nowDate;\n            return `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()} / ${date.getHours()}:${date.getMinutes()}`;\n        }\n    }\n});\n\nconsole.log('The time is now:', store.getters.dateFormat); // The time is now: 2017-2-10 / 17:28\n```\ngetters 接收两个参数，1. state、2. getters 本身，可以引用其他 getters。与 mapState 类似，Getters 也拥有 mapGetters 方法，用于批量映射。\n\n```js\nlet { mapGetters } from 'Vuex';\n\nlet comonent = {\n    computed: {\n        ...mapGetters([\n            'nowDate'\n        ])\n    }\n};\n```\n\n\n# Mutations\n在 Vue 中，data 值是可以直接被更改的。但是在 Vuex 中，不能直接对 state 进行操作，\b唯一的方法就是提交 mutation。mutation 可以理解为 Vue 中的 method 事件，只不过调用 mutation 需要特别的方法。\n\n```js\nlet store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        addCount(state) {\n            state.count ++;\n        }\n    }\n});\n\nstore.commit('addCount');\n\nconsole.log(store.state.count); // 1\n```\n每一个 mutation 都有一个字符串的事件类型和一个回调函数。通常在回调函数中进行状态更改，通过 store.commit 触发事件。\n\n## 传参\n\n```js\n// ...\nmutations: {\n    addCount(state, n) {\n        state.count += n;\n    }\n}\n\nstore.commit('addCount', 10);\n```\n 这种方式有一个问题，一旦参数多了，就必须保证传入的顺序不能出错，可读性也很低。所以通常将参数以对象的形式传入，同时 mutaion 的事件类型字符串也可以使用对象的形式传入。\n\n```js\n// ...\nmutations: {\n    addCount(state, params) {\n        state.count += params.num;\n    }\n}\n\nstore.commit('addCount', {\n    num: 10\n});\n\nstore.commit({\n    type: 'addCount',\n    num: 10\n});\n```\n这里有一个规则需要遵守，在 mutation 中更改 state 应该以新对象替换老对象，不要在直接原对象上直接修改。*熟悉 React 的朋友们应该知道，在使用 setState 更新状态时也是同样的规则。\n\n通过 ES6 的展开操作符可以很容易的完成。\n```js\nstate.obj = { ...state.obj, newState: 123 };\n```\n## 在 Vue 组件中提交 mutaion\n```js\nthis.$store.commit('xxx');\n```\n在组件中可以通过上述方法提交 commit，不过 Vuex 提供了 mapMutations 方法用于将 mutation 映射到组件中的 method 中。与 mapState、mapGetters 相似，这里就不再赘述了。\n\n```js\nimport { mapMutations } from 'vuex'\n\nconst component = {\n    // ...\n    methods: {\n        ...mapMutations([\n            'addCount' // 映射 this.addCount() 为 this.$store.commit('addCount')\n        ]),\n        ...mapMutations({\n            add: 'addCount' // 映射 this.add() 为 this.$store.commit('addCount')\n        })\n    }\n}\n```\n## mutation 必须是同步函数\n\n我们先试着写一个异步的 mutation ，看看会发生什么。\n\n```js\n// ...\nmutations: {\n    asyncAdd(state) {\n        setTimeout(() => {\n            state.count ++;\n        }, 2000);\n    }\n}\n\nstore.commit('asyncAdd');\n```\n经测试，在 mutaion 里进行异步操作也是会生效的，2秒之后 state.count 确实发生改变。\n\n那为什么还要强调 mutation 必须是同步的呢？因为在触发 commit 之后，回调函数还没有被调用，所以这次 mutation 的修改也是无法被调试工具所记录的。\n\n如何对 state 进行异步操作呢，就要使用下面的 Action 了。\n\n\n\n# Actions\nAction 类似于 mutation，不同在于：\n\n1. Action 不直接更改状态，而是提交 mutation\n\n2. Action 可以包含任何异步操作\n\n```js\nconst store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        addCount(state) {\n            state.count ++;\n        }\n    },\n    actions: {\n       asyncAdd(context) {\n           setTimeout(() => {\n               context.commit('addCount');\n           }, 2000);\n       }\n    }\n})\n```\nAction 中的回调函数会接收一个上下文 context 对象，它包含了当前 store 中所有属性和方法，但其不是 store 本身。你可以通过 context.commit 来提交 mutation，也可以通过 context.state 与 context.getters 来获取 state 和 getters。\n\n当需要多次调用 commit 时，可以使用 ES6 的语法对传入的参数进行解构。\n\n```js\nactions: {\n    asyncAdd({ commit }) {\n        commit('addCount');\n    }\n}\n```\n## 分发 Action 与传参\n\nAction 是通过 store.dispatch 方法来触发，传参方式与 store.commit 类似。\n\n```js\nstore.dispatch('asyncAdd');\n\nstore.dispatch('asyncAdd', {\n    num: 10\n});\n\nstore.dispatch({\n    type: 'asyncAdd',\n    num: 10\n});\n```\n## 在 Vue 组件中分发 Action\n```js\nthis.$store.dispatch('xxx');\n```\n可以使用上述方式，同时 Vuex 中也提供了 mapActions 方法用于批量映射于组件中的 methods 中，与 mapMutations 类似。\n\n```js\nimport { mapActions } from 'vuex'\n\nconst component = {\n    // ...\n    methods: {\n        ...mapActions([\n            'asyncAdd' // 映射 this.asyncAdd() 为 this.$store.dispatch('asyncAdd')\n        ]),\n        ...mapActions({\n            add: 'asyncAdd' // 映射 this.add() 为 this.$store.dispatch('asyncAdd')\n        })\n    }\n}\n```\n## 组合 Actions\n\n既然 Action 是异步行为，那我们可以使用 ES6 中的 Promise 对象进行组合。\n\n```js\nconst store = {\n    actions: {\n        asyncActionA({ commit }) {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    commit('asyncAdd');\n                    resolve();\n                }, 2000);\n            });\n        },\n        asyncActionB({ dispatch }, params) {\n            return dispatch('asyncActionA').then(() => {\n                console.log('Action complete at: ', params.date);\n            });\n        }\n    }\n}\n\nstore.dispatch('asyncActionB', {\n    date: (new Date()).getTime() // 2秒后打印 Action complete at: xxxxxxxx (当前时间毫秒数)\n});\n```",
				"html": "<p>Vuex 是一个专门为 Vue.js 应该程序开发的状态管理模式，它类似于 Redux 应用于 React 项目中，他们都是一种 Flux 架构。相比 Redux，Vuex 更简洁，学习成本更低。</p>\n<a id=\"more\"></a>\n<p>注：本文针对 Vuex 2.0 的语法，目前通过 npm 默认下载的版本为 1.0+ ，想引入 2.0 版本可以通过 script 标签引入。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vuex@2.0.0\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>习惯使用 ES6 中 import 方法的可以暂时通过解构赋值的方式引入 Vuex 中的方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'Vuex'</span>;</div><div class=\"line\"><span class=\"comment\">//替换为：</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; mapState, mapGetters &#125; = Vuex;</div></pre></td></tr></table></figure></p>\n<p>Vuex 的核心内容主要就是 State、Getters、Mutations、Actions 这四部分，也非常好理解。</p>\n<h1 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h1><p>首先看如何申明一个 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'Vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'Vuex'</span>;</div><div class=\"line\"></div><div class=\"line\">Vue.use(Vuex);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">stateA</span>: <span class=\"string\">'a'</span>,</div><div class=\"line\">        <span class=\"attr\">stateB</span>: <span class=\"string\">'b'</span>,</div><div class=\"line\">        <span class=\"attr\">stateC</span>: <span class=\"string\">'c'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.state.stateA); <span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在 store 中的 state 对象，可以理解为 Vue 实例中的 data 对象，它用来保存最基本的数据。</p>\n<h2 id=\"在-Vue-中获取-store-中的状态\"><a href=\"#在-Vue-中获取-store-中的状态\" class=\"headerlink\" title=\"在 Vue 中获取 store 中的状态\"></a>在 Vue 中获取 store 中的状态</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">　　 <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">`&lt;h1&gt;&#123;&#123;myState&#125;&#125;&lt;/h1&gt;`</span>,</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">         myState() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> store.state.stateA;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>最简单的方式就是通过 Vue 中的计算属性(computed) 来将 store 中的状态映射为 Vue 的数据。但是当数据多时这种方法明显效率过低，所以 Vuex 中提供了 mapState 方法用于批量映射 store 中的状态。</p>\n<p>首先必须在 Vue 中注册 store 选项，这样整个 store 就从根节点注册到 Vue 下的每一个子组件里了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'Vuex'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">    store,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">local</span>: <span class=\"string\">'L'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">computed</span>: mapState(&#123;</div><div class=\"line\">        <span class=\"attr\">stateA</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.stateA,</div><div class=\"line\">        <span class=\"attr\">stateB</span>: <span class=\"string\">'stateB'</span>,</div><div class=\"line\">        stateC(state) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> state.stateC + <span class=\"keyword\">this</span>.local;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上例中，a. 可以通过 ES6 中的箭头函数进行数据的映射，b. 当计算属性的名称与 state 的属性名一致时可能直接通过字符串赋值，c. 当需要引用上下文中的 data 属性实，只能通过常规函数来使 this 生效。</p>\n<p>如果所有计算属性的名称都与 state 一致，可以在 mapState 中以数组的方式进行映射。如果 Vue 中已经存在计算属性，可以通过 ES6 的展开操作符 (…) 进行组合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">    store,</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">        local() &#123;</div><div class=\"line\">             <span class=\"keyword\">return</span> <span class=\"string\">'Local'</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        ...mapState([<span class=\"string\">'stateA'</span>, <span class=\"string\">'stateB'</span>, <span class=\"string\">'stateC'</span>])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h1><p>当需要对 store 中的数据进行处理，或者需要对处理后的数据进行复用，就可以使用 Getters 来处理，Getters 也可以理解为 Vue 中的计算属性 (computed)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">nowDate</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getters</span>: &#123;</div><div class=\"line\">        dateFormat(state, getters) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> date = state.nowDate;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;date.getFullYear()&#125;</span>-<span class=\"subst\">$&#123;date.getMonth()+<span class=\"number\">1</span>&#125;</span>-<span class=\"subst\">$&#123;date.getDate()&#125;</span> / <span class=\"subst\">$&#123;date.getHours()&#125;</span>:<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>`</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The time is now:'</span>, store.getters.dateFormat); <span class=\"comment\">// The time is now: 2017-2-10 / 17:28</span></div></pre></td></tr></table></figure>\n<p>getters 接收两个参数，1. state、2. getters 本身，可以引用其他 getters。与 mapState 类似，Getters 也拥有 mapGetters 方法，用于批量映射。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'Vuex'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> comonent = &#123;</div><div class=\"line\">    <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">        ...mapGetters([</div><div class=\"line\">            <span class=\"string\">'nowDate'</span></div><div class=\"line\">        ])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h1><p>在 Vue 中，data 值是可以直接被更改的。但是在 Vuex 中，不能直接对 state 进行操作，\b唯一的方法就是提交 mutation。mutation 可以理解为 Vue 中的 method 事件，只不过调用 mutation 需要特别的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">        addCount(state) &#123;</div><div class=\"line\">            state.count ++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">store.commit(<span class=\"string\">'addCount'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(store.state.count); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>每一个 mutation 都有一个字符串的事件类型和一个回调函数。通常在回调函数中进行状态更改，通过 store.commit 触发事件。</p>\n<h2 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">mutations: &#123;</div><div class=\"line\">    addCount(state, n) &#123;</div><div class=\"line\">        state.count += n;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">store.commit(<span class=\"string\">'addCount'</span>, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<p> 这种方式有一个问题，一旦参数多了，就必须保证传入的顺序不能出错，可读性也很低。所以通常将参数以对象的形式传入，同时 mutaion 的事件类型字符串也可以使用对象的形式传入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">mutations: &#123;</div><div class=\"line\">    addCount(state, params) &#123;</div><div class=\"line\">        state.count += params.num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">store.commit(<span class=\"string\">'addCount'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">num</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">store.commit(&#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">'addCount'</span>,</div><div class=\"line\">    <span class=\"attr\">num</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这里有一个规则需要遵守，在 mutation 中更改 state 应该以新对象替换老对象，不要在直接原对象上直接修改。*熟悉 React 的朋友们应该知道，在使用 setState 更新状态时也是同样的规则。</p>\n<p>通过 ES6 的展开操作符可以很容易的完成。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newState</span>: <span class=\"number\">123</span> &#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"在-Vue-组件中提交-mutaion\"><a href=\"#在-Vue-组件中提交-mutaion\" class=\"headerlink\" title=\"在 Vue 组件中提交 mutaion\"></a>在 Vue 组件中提交 mutaion</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'xxx'</span>);</div></pre></td></tr></table></figure>\n<p>在组件中可以通过上述方法提交 commit，不过 Vuex 提供了 mapMutations 方法用于将 mutation 映射到组件中的 method 中。与 mapState、mapGetters 相似，这里就不再赘述了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> component = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    methods: &#123;</div><div class=\"line\">        ...mapMutations([</div><div class=\"line\">            <span class=\"string\">'addCount'</span> <span class=\"comment\">// 映射 this.addCount() 为 this.$store.commit('addCount')</span></div><div class=\"line\">        ]),</div><div class=\"line\">        ...mapMutations(&#123;</div><div class=\"line\">            <span class=\"attr\">add</span>: <span class=\"string\">'addCount'</span> <span class=\"comment\">// 映射 this.add() 为 this.$store.commit('addCount')</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"mutation-必须是同步函数\"><a href=\"#mutation-必须是同步函数\" class=\"headerlink\" title=\"mutation 必须是同步函数\"></a>mutation 必须是同步函数</h2><p>我们先试着写一个异步的 mutation ，看看会发生什么。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">mutations: &#123;</div><div class=\"line\">    asyncAdd(state) &#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            state.count ++;</div><div class=\"line\">        &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">store.commit(<span class=\"string\">'asyncAdd'</span>);</div></pre></td></tr></table></figure>\n<p>经测试，在 mutaion 里进行异步操作也是会生效的，2秒之后 state.count 确实发生改变。</p>\n<p>那为什么还要强调 mutation 必须是同步的呢？因为在触发 commit 之后，回调函数还没有被调用，所以这次 mutation 的修改也是无法被调试工具所记录的。</p>\n<p>如何对 state 进行异步操作呢，就要使用下面的 Action 了。</p>\n<h1 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h1><p>Action 类似于 mutation，不同在于：</p>\n<ol>\n<li><p>Action 不直接更改状态，而是提交 mutation</p>\n</li>\n<li><p>Action 可以包含任何异步操作</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    <span class=\"attr\">state</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</div><div class=\"line\">        addCount(state) &#123;</div><div class=\"line\">            state.count ++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">actions</span>: &#123;</div><div class=\"line\">       asyncAdd(context) &#123;</div><div class=\"line\">           setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">               context.commit(<span class=\"string\">'addCount'</span>);</div><div class=\"line\">           &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Action 中的回调函数会接收一个上下文 context 对象，它包含了当前 store 中所有属性和方法，但其不是 store 本身。你可以通过 context.commit 来提交 mutation，也可以通过 context.state 与 context.getters 来获取 state 和 getters。</p>\n<p>当需要多次调用 commit 时，可以使用 ES6 的语法对传入的参数进行解构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">actions: &#123;</div><div class=\"line\">    asyncAdd(&#123; commit &#125;) &#123;</div><div class=\"line\">        commit(<span class=\"string\">'addCount'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"分发-Action-与传参\"><a href=\"#分发-Action-与传参\" class=\"headerlink\" title=\"分发 Action 与传参\"></a>分发 Action 与传参</h2><p>Action 是通过 store.dispatch 方法来触发，传参方式与 store.commit 类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.dispatch(<span class=\"string\">'asyncAdd'</span>);</div><div class=\"line\"></div><div class=\"line\">store.dispatch(<span class=\"string\">'asyncAdd'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">num</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">store.dispatch(&#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">'asyncAdd'</span>,</div><div class=\"line\">    <span class=\"attr\">num</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"在-Vue-组件中分发-Action\"><a href=\"#在-Vue-组件中分发-Action\" class=\"headerlink\" title=\"在 Vue 组件中分发 Action\"></a>在 Vue 组件中分发 Action</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'xxx'</span>);</div></pre></td></tr></table></figure>\n<p>可以使用上述方式，同时 Vuex 中也提供了 mapActions 方法用于批量映射于组件中的 methods 中，与 mapMutations 类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> component = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    methods: &#123;</div><div class=\"line\">        ...mapActions([</div><div class=\"line\">            <span class=\"string\">'asyncAdd'</span> <span class=\"comment\">// 映射 this.asyncAdd() 为 this.$store.dispatch('asyncAdd')</span></div><div class=\"line\">        ]),</div><div class=\"line\">        ...mapActions(&#123;</div><div class=\"line\">            <span class=\"attr\">add</span>: <span class=\"string\">'asyncAdd'</span> <span class=\"comment\">// 映射 this.add() 为 this.$store.dispatch('asyncAdd')</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"组合-Actions\"><a href=\"#组合-Actions\" class=\"headerlink\" title=\"组合 Actions\"></a>组合 Actions</h2><p>既然 Action 是异步行为，那我们可以使用 ES6 中的 Promise 对象进行组合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> store = &#123;</div><div class=\"line\">    <span class=\"attr\">actions</span>: &#123;</div><div class=\"line\">        asyncActionA(&#123; commit &#125;) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                    commit(<span class=\"string\">'asyncAdd'</span>);</div><div class=\"line\">                    resolve();</div><div class=\"line\">                &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        asyncActionB(&#123; dispatch &#125;, params) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> dispatch(<span class=\"string\">'asyncActionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Action complete at: '</span>, params.date);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">store.dispatch(<span class=\"string\">'asyncActionB'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">date</span>: (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime() <span class=\"comment\">// 2秒后打印 Action complete at: xxxxxxxx (当前时间毫秒数)</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487591398419,
				"created_by": 2,
				"updated_at": 1487591559012,
				"updated_by": 2,
				"published_at": 1487591398419,
				"published_by": 2
			},
			{
				"id": "cizdvvbma0000lgfc5j781hrc",
				"title": "vuex代码样例",
				"slug": "vue-vuex-code",
				"markdown": "这个文章主要的作用是熟悉 vue vue-router vuex 在初期搭建项目的时候该怎么配置，以及怎么去互相配合，xx.vue文件该怎么写，如何创建和使用组件，vuex的state，mutations，actions，getters怎么配合，形成一个完整的流程。\n<!--more-->\n# 路由配置\n```js\nimport App from '../App'\n\nexport default [{\n    path: '/',\n    component: App,\n    children: [{\n        path: '',\n        component: r => require.ensure([], () => r(require('../page/home')), 'home')\n    }, {\n        path: '/item',\n        component: r => require.ensure([], () => r(require('../page/item')), 'item')\n    }, {\n        path: '/score',\n        component: r => require.ensure([], () => r(require('../page/score')), 'score')\n    }]\n}]\n```\n# 配置actions\n```js\nimport ajax from '../config/ajax'\n\nexport default {\n    addNum({ commit, state }, id) {\n        commit('REMBER_ANSWER', { id })\n        if (state.itemNum < state.itemDetail.length) {\n            commit('ADD_ITEMNUM', {\n                num: 1\n            })\n        }\n    },\n\n    getData({ commit, state }) {\n        ajax('GET', 'http://operating-activities.putao.com/happyfriday?active_topic_id=4').\n        then(res => {\n            commit('GET_DATA', {\n                res\n            })\n        })\n    },\n\n    initializeData({ commit }) {\n        commit('INITIALIZE_DATA')\n    }\n}\n```\n# mutations\n```js\nconst GET_DATA = 'GET_DATA'\nconst ADD_ITEMNUM = 'ADD_ITEMNUM'\nconst REMBER_ANSWER = 'REMBER_ANSWER'\nconst REMBER_TIME = 'REMBER_TIME'\nconst INITIALIZE_DATA = 'INITIALIZE_DATA'\nconst GET_USER_INFORM = 'GET_USER_INFORM'\n\nexport default {\n    [GET_DATA](state, payload) {\n        if (payload.res.httpStatusCode == 200) {\n            state.itemDetail = payload.res.topiclist;\n        }\n    },\n\n    [GET_USER_INFORM](state, payload) {\n        state.user_id = payload.res.users_id;\n    },\n\n    [ADD_ITEMNUM](state, payload) {\n        state.itemNum += payload.num;\n    },\n\n    [REMBER_ANSWER](state, payload) {\n        state.answerid[state.itemNum] = payload.id;\n    },\n\n    [REMBER_TIME](state) {\n        state.timer = setInterval(() => {\n            state.allTime++;\n        }, 1000)\n    },\n\n    [INITIALIZE_DATA](state) {\n        state.itemNum = 1;\n        state.allTime = 0;\n    },\n}\n```\n# 创建store\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport mutations from './mutations'\nimport actions from './action'\n\n\nVue.use(Vuex)\n\nconst state = {\n    level: '第一周',\n    itemNum: 1,\n    allTime: 0,\n    timer: '',\n    itemDetail: [],\n    answerid: {}\n}\n\nexport default new Vuex.Store({\n    state,\n    actions,\n    mutations\n})\n```\n# 创建vue实例\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport routes from './router/router'\nimport store from './store/'\n\nVue.use(VueRouter)\nconst router = new VueRouter({\n    routes\n})\n\nnew Vue({\n    router,\n    store,\n}).$mount('#app')\n```",
				"html": "<p>这个文章主要的作用是熟悉 vue vue-router vuex 在初期搭建项目的时候该怎么配置，以及怎么去互相配合，xx.vue文件该怎么写，如何创建和使用组件，vuex的state，mutations，actions，getters怎么配合，形成一个完整的流程。<br><a id=\"more\"></a></p>\n<h1 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../App'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [&#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: App,</div><div class=\"line\">    <span class=\"attr\">children</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">''</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], () =&gt; r(<span class=\"built_in\">require</span>(<span class=\"string\">'../page/home'</span>)), <span class=\"string\">'home'</span>)</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/item'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], () =&gt; r(<span class=\"built_in\">require</span>(<span class=\"string\">'../page/item'</span>)), <span class=\"string\">'item'</span>)</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/score'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> <span class=\"built_in\">require</span>.ensure([], () =&gt; r(<span class=\"built_in\">require</span>(<span class=\"string\">'../page/score'</span>)), <span class=\"string\">'score'</span>)</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure>\n<h1 id=\"配置actions\"><a href=\"#配置actions\" class=\"headerlink\" title=\"配置actions\"></a>配置actions</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> ajax <span class=\"keyword\">from</span> <span class=\"string\">'../config/ajax'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    addNum(&#123; commit, state &#125;, id) &#123;</div><div class=\"line\">        commit(<span class=\"string\">'REMBER_ANSWER'</span>, &#123; id &#125;)</div><div class=\"line\">        <span class=\"keyword\">if</span> (state.itemNum &lt; state.itemDetail.length) &#123;</div><div class=\"line\">            commit(<span class=\"string\">'ADD_ITEMNUM'</span>, &#123;</div><div class=\"line\">                <span class=\"attr\">num</span>: <span class=\"number\">1</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    getData(&#123; commit, state &#125;) &#123;</div><div class=\"line\">        ajax(<span class=\"string\">'GET'</span>, <span class=\"string\">'http://operating-activities.putao.com/happyfriday?active_topic_id=4'</span>).</div><div class=\"line\">        then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">            commit(<span class=\"string\">'GET_DATA'</span>, &#123;</div><div class=\"line\">                res</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    initializeData(&#123; commit &#125;) &#123;</div><div class=\"line\">        commit(<span class=\"string\">'INITIALIZE_DATA'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"mutations\"><a href=\"#mutations\" class=\"headerlink\" title=\"mutations\"></a>mutations</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span></div><div class=\"line\"><span class=\"keyword\">const</span> ADD_ITEMNUM = <span class=\"string\">'ADD_ITEMNUM'</span></div><div class=\"line\"><span class=\"keyword\">const</span> REMBER_ANSWER = <span class=\"string\">'REMBER_ANSWER'</span></div><div class=\"line\"><span class=\"keyword\">const</span> REMBER_TIME = <span class=\"string\">'REMBER_TIME'</span></div><div class=\"line\"><span class=\"keyword\">const</span> INITIALIZE_DATA = <span class=\"string\">'INITIALIZE_DATA'</span></div><div class=\"line\"><span class=\"keyword\">const</span> GET_USER_INFORM = <span class=\"string\">'GET_USER_INFORM'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    [GET_DATA](state, payload) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (payload.res.httpStatusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">            state.itemDetail = payload.res.topiclist;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    [GET_USER_INFORM](state, payload) &#123;</div><div class=\"line\">        state.user_id = payload.res.users_id;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    [ADD_ITEMNUM](state, payload) &#123;</div><div class=\"line\">        state.itemNum += payload.num;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    [REMBER_ANSWER](state, payload) &#123;</div><div class=\"line\">        state.answerid[state.itemNum] = payload.id;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    [REMBER_TIME](state) &#123;</div><div class=\"line\">        state.timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            state.allTime++;</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    [INITIALIZE_DATA](state) &#123;</div><div class=\"line\">        state.itemNum = <span class=\"number\">1</span>;</div><div class=\"line\">        state.allTime = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"创建store\"><a href=\"#创建store\" class=\"headerlink\" title=\"创建store\"></a>创建store</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">import</span> mutations <span class=\"keyword\">from</span> <span class=\"string\">'./mutations'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./action'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> state = &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: <span class=\"string\">'第一周'</span>,</div><div class=\"line\">    <span class=\"attr\">itemNum</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">allTime</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">timer</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">itemDetail</span>: [],</div><div class=\"line\">    <span class=\"attr\">answerid</span>: &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    state,</div><div class=\"line\">    actions,</div><div class=\"line\">    mutations</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"创建vue实例\"><a href=\"#创建vue实例\" class=\"headerlink\" title=\"创建vue实例\"></a>创建vue实例</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./router/router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store/'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(VueRouter)</div><div class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">    routes</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    router,</div><div class=\"line\">    store,</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487581917230,
				"created_by": 2,
				"updated_at": 1487581918566,
				"updated_by": 2,
				"published_at": 1487581917230,
				"published_by": 2
			},
			{
				"id": "cizdg0aiv0000k8fc9vf2xpld",
				"title": "vue+vuex构建单页应用",
				"slug": "vue-vuex",
				"markdown": "\n# 基本\n构建工具： webpack\n语言： ES6\n分号：行首分号规则（行尾不加分好， [ , ( , / , + , - 开头时在行首加分号）\n配套设施： webpack 全家桶， vue 全家桶\n\n<!--more-->\n# 项目结构\n\n基本目录结构\n![](http://img2.tuicool.com/IzeyAvR.png)\n\napi ：封装与后端接口交互的操作\n\ncommon ：放置一些 reset.css 之类的\n\ncomponents ：组件\n\nentry ：项目入口文件 index.js,index.css,index.html\n\nfilters ：过滤器。注：虽然 vue2.0 已经基本废弃（只保留了对文本的过滤）了 Vue.filter 的用法，此目录下的方法仍然可用于官方推荐用来替代过滤器的计算属性的计算中\n\nmixins ：一些通用类的混入部分。比如全选、多选可抽出通用的 list-toggle\n\nmock ：本地开发的 mock 数据\n\nutils ：封装的工具，如对上传文件、日期处理等的封装\n\nviews ：单页应用的视图（视图也是组件，也可放到 components 中，但个人觉得放在这里比较一目了然）\n\nvuex ：放置 store，actions，mutations，state\n\nfis-conf.js ：用于测试环境联调时 fis 实时将前端资源推送到开发机上\n\n如果有自定义指令，还可以加上 directives 目录（ vue 的几个可扩展的地方都可以单独做一个目录）。对于项目目录，也可以使用官方提供的另一个工具 vue-cli 来生成,它还会自动构建单元测试( unit )和端对端测试( e2e )的目录和简单示例。\n\n# 基础组件\nvue 除了双向绑定外的一个最大特点就是提供了强大的组件树系统，组件化也是 web 发展的趋势.\n\n每一个 Vue 实例就是一个组件，构造一个组件的也很简单:\n```js\nvar myComponent = Vue.extend({\n    template: '',\n    ...\n})\n// 全局注册组件，tag 为 my-component\nVue.component('my-component', MyComponent)\n```\n更推荐的做法是写成 *.vue 形式的单文件组件，搭配 vue-loader 使用（下图来自官方文档）。\n![](http://img2.tuicool.com/J77veyQ.png)\n\n更多关于组件的内容，见官方文档 组件 。\n\n另外，在使用单文件组件时，样式会被打包到 js 中并在运行时会以 style 节点的形式插入到 head 里面。此时如果想将组件的样式打包到输出的 css 文件中，只需要在 webpack.config.js 的 module.exports 中加上以下配置即可：\n```js\nvue: {\n    loaders: {\n        js: 'babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false',\n        css:ExtractTextPlugin.extract(['css-loader'])\n    }\n}\n```\n刚开始一个项目时，如果在有自己特定的 UI 设计风格，可能需要单独封装一些 textinput,checkbox,radio 等基础组件；如果没有的话（如普通的后台管理系统），也可以使用 Google Material Design ，已经有对应的实现 material-design-lite 。并且 vue 社区中也已经有针对它的 vue 组件封装 vue-mdl 。\n\n# 应用骨架\n以“xx管理后台”为例，首先分为上（导航）下（主体内容）两部分，基本结构为：\n![](http://img1.tuicool.com/J3EZBbV.png)\n\n接下来在 views 里面心间 user.vue ，作为用户管理模块入口，如果每个模块还需要包含二级导航（通常是在页面左侧部分）， user.vue 可以像这样：\n![](http://img2.tuicool.com/AZRzia2.png)\n\n这两个文件中用到的 router-view ，都是 vue 官方路由插件 vue-router 提供的。\n\n然后是配置单页应用的路由：\n![](http://img2.tuicool.com/6fQVJv6.png)\n\n在对应的视图组件中，通过route选项的钩子函数，来确定时图在出现和消失的过程中需要执行的行为。更多路由相关，见 官方文档 。\n\n这样，一个基本的：上 -> ［左｜右］的单页应用骨架就有了。（其他类型的应用也可依此类推）\n\n# 应用状态管理\n应用组件化之后，就需要解决组件之间的通信问题。针对组件之间的通信问题， vue 提供了三种方式： props 属性传递，直接通过引用调用组件方法，自定义事件通信，通过 v-ref （在 vue2.0 已简化为 ref ）来建立子组件索引从而调用子组件方法。\n\nporps ：基于属性传递， vue 提供了单次绑定、单向绑定和双向绑定。（虽然双向绑定在 vue2.0 中已经废弃）\n\n通过引用：子组件可以用 this.$parent 访问它的父组件。根实例的后代可以用 this.$root 访问它。父组件有一个数组 this.$children ，包含它所有的子元素。\n\n通过自定义事件通信：每个 Vue 实例都是一个事件触发器：\n\n使用 $on() 监听事件\n\n使用 $emit() 在它上面触发事件\n\n使用 $dispatch() 派发事件，事件沿着父链冒泡（ vue2.0 已废弃）\n\n使用 $broadcast() 广播事件，事件向下传导给所有的后代（ vue2.0 已废弃）\n\n在 vue2.0 中，可以单独使用一个 Vue 实例来来担任 eventBus 的作用。\n\n除了这几种方式，当应用比较复杂时，官方推荐使用另一个官方插件 vuex\n\n类似于 react 的 redux ， vue 的 vuex 的 store 也包含一个全局的状态树 state ；修改 state 的行为 mutations （对应 redux 的 actions ）；执行修改的动作 actions （对应 redux 的 createAction ）。\n![](http://img1.tuicool.com/qAzIJju.png)\n\n以全局 alert 组件的状态为例：\n\n\n- 创建 state\n```js\nexport default {\n    alert: {\n        show: false,\n        type: 'alert',\n        message: '',\n        onSure: null,\n        onClose: null\n    }\n}\n```\n-  创建 mutations\n```js\nexport default {\n    SHOW_ALERT (state, data) {\n        data.show = true\n        state.alert = data\n    },\n    HIDE_ALERT (state) {\n        state.alert.show = false\n    }\n}\n```\n\n- 创建 actions\n```js\n/*主页面涉及到的actions*/\nlet noop = () => {}\n/*显示浮层alert*/\nexport const showAlert = ({dispatch}, message = '') => {\n    if(!message) {\n        return false\n    }\n    dispatch('SHOW_ALERT', {\n        type: 'alert',\n        message: message,\n        onClose: noop\n    })\n}\n/*显示浮层confirm*/\nexport const showConfirm = ({dispatch}, data = {}) => {\n    if(!data.message) {\n        return false\n    }\n    data.type = 'confirm'\n    if(typeof data.onClose != 'function') {\n        data.onClose = noop\n    }\n    if(typeof data.onConfirm != 'function') {\n        data.onConfirm = noop\n    }\n    dispatch('SHOW_ALERT', data)\n}\n/*隐藏浮层*/\nexport const hideAlert = ({dispatch}) => dispatch('HIDE_ALERT')\n```\n\n- 构建 store\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport actions from './actions'\nimport mutations from './mutations'\nimport state from \"./state\"\nVue.use(Vuex)\nconst debug = process.env.NODE_ENV !== 'production'\nVue.config.debug = debug\nexport default new Vuex.Store({\n    state,\n    mutations,\n    actions,\n    strict: debug\n})\n```\n然后在应用的根组件中，通过以下方式获取 vuex 的功能：\n```js\n/*引入vuex*/\nimport store from \"../vuex/store\"\nlet App = Vue.extend({\n    store,\n    components: {\n        'admin-header': adminHeader,\n        'alert': alert\n    }\n})\n```\n然后再在自组件中的vuex模块通过以下方式获取状态以及触发状态改变的动作：\n![](http://img2.tuicool.com/6b2AziY.png)\n\n# 应用的数据交互\n## api层\n\n记得之前看过民工叔叔（徐飞）的某篇文章里说的，数据层能够跟UI层分离，这样即使 UI 底层库更换了，也可以使用数据层。同理如果想要对api交互进行替换（如想把某些 ajax 库换成浏览器支持的 fetch api ），也可以直接在这一层进行更改。\n\n## mock数据\n\n在开发阶段，有时需要mock一些数据来测试应用。推荐一个对 restful api 友好的第三方工具 json-server 。\n\n\nindex.js\n```js\nvar users = require('./database/users')\nmodule.exports = function() {\n    return {\n        \"users\": users\n    }\n}\n```\ndatabase/users.js\n```js\nmodule.exports = {\n    \"users\": [\n        {\n            \"user_id\": \"233\",\n            \"user_name\": \"哈哈哈\",\n        },\n        {\n            \"user_id\": \"233\",\n            \"user_name\": \"哈哈哈\",\n        }\n    ],\n    \"more\": true,\n    \"result\": \"SUCCESS\"\n}\n```\n然后终端执行 json-server mock/index.js －port 9999 就开启了一个 restful 的服务了。（也可以把这句写到 npm script 中）\n\n接下来还差一步，就是需要用到 webpack-dev-server 的 proxy 配置：\n![](http://img2.tuicool.com/NrM3yqu.png)\n\n这样，所有访问 /rest/* 的接口都会被代理到 json-server 的服务上.\n\n# 应用测试\n一个完整的应用应该还具备单元测试、端对端测试等。目前比较成熟的测试框架社区中也有不少，但由于还没油深入研究过，此处不展开。",
				"html": "<h1 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h1><p>构建工具： webpack<br>语言： ES6<br>分号：行首分号规则（行尾不加分好， [ , ( , / , + , - 开头时在行首加分号）<br>配套设施： webpack 全家桶， vue 全家桶</p>\n<a id=\"more\"></a>\n<h1 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h1><p>基本目录结构<br><img src=\"http://img2.tuicool.com/IzeyAvR.png\" alt=\"\"></p>\n<p>api ：封装与后端接口交互的操作</p>\n<p>common ：放置一些 reset.css 之类的</p>\n<p>components ：组件</p>\n<p>entry ：项目入口文件 index.js,index.css,index.html</p>\n<p>filters ：过滤器。注：虽然 vue2.0 已经基本废弃（只保留了对文本的过滤）了 Vue.filter 的用法，此目录下的方法仍然可用于官方推荐用来替代过滤器的计算属性的计算中</p>\n<p>mixins ：一些通用类的混入部分。比如全选、多选可抽出通用的 list-toggle</p>\n<p>mock ：本地开发的 mock 数据</p>\n<p>utils ：封装的工具，如对上传文件、日期处理等的封装</p>\n<p>views ：单页应用的视图（视图也是组件，也可放到 components 中，但个人觉得放在这里比较一目了然）</p>\n<p>vuex ：放置 store，actions，mutations，state</p>\n<p>fis-conf.js ：用于测试环境联调时 fis 实时将前端资源推送到开发机上</p>\n<p>如果有自定义指令，还可以加上 directives 目录（ vue 的几个可扩展的地方都可以单独做一个目录）。对于项目目录，也可以使用官方提供的另一个工具 vue-cli 来生成,它还会自动构建单元测试( unit )和端对端测试( e2e )的目录和简单示例。</p>\n<h1 id=\"基础组件\"><a href=\"#基础组件\" class=\"headerlink\" title=\"基础组件\"></a>基础组件</h1><p>vue 除了双向绑定外的一个最大特点就是提供了强大的组件树系统，组件化也是 web 发展的趋势.</p>\n<p>每一个 Vue 实例就是一个组件，构造一个组件的也很简单:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myComponent = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 全局注册组件，tag 为 my-component</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, MyComponent)</div></pre></td></tr></table></figure></p>\n<p>更推荐的做法是写成 *.vue 形式的单文件组件，搭配 vue-loader 使用（下图来自官方文档）。<br><img src=\"http://img2.tuicool.com/J77veyQ.png\" alt=\"\"></p>\n<p>更多关于组件的内容，见官方文档 组件 。</p>\n<p>另外，在使用单文件组件时，样式会被打包到 js 中并在运行时会以 style 节点的形式插入到 head 里面。此时如果想将组件的样式打包到输出的 css 文件中，只需要在 webpack.config.js 的 module.exports 中加上以下配置即可：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue: &#123;</div><div class=\"line\">    <span class=\"attr\">loaders</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">js</span>: <span class=\"string\">'babel-loader?presets[]=es2015&amp;plugins[]=transform-runtime&amp;comments=false'</span>,</div><div class=\"line\">        <span class=\"attr\">css</span>:ExtractTextPlugin.extract([<span class=\"string\">'css-loader'</span>])</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>刚开始一个项目时，如果在有自己特定的 UI 设计风格，可能需要单独封装一些 textinput,checkbox,radio 等基础组件；如果没有的话（如普通的后台管理系统），也可以使用 Google Material Design ，已经有对应的实现 material-design-lite 。并且 vue 社区中也已经有针对它的 vue 组件封装 vue-mdl 。</p>\n<h1 id=\"应用骨架\"><a href=\"#应用骨架\" class=\"headerlink\" title=\"应用骨架\"></a>应用骨架</h1><p>以“xx管理后台”为例，首先分为上（导航）下（主体内容）两部分，基本结构为：<br><img src=\"http://img1.tuicool.com/J3EZBbV.png\" alt=\"\"></p>\n<p>接下来在 views 里面心间 user.vue ，作为用户管理模块入口，如果每个模块还需要包含二级导航（通常是在页面左侧部分）， user.vue 可以像这样：<br><img src=\"http://img2.tuicool.com/AZRzia2.png\" alt=\"\"></p>\n<p>这两个文件中用到的 router-view ，都是 vue 官方路由插件 vue-router 提供的。</p>\n<p>然后是配置单页应用的路由：<br><img src=\"http://img2.tuicool.com/6fQVJv6.png\" alt=\"\"></p>\n<p>在对应的视图组件中，通过route选项的钩子函数，来确定时图在出现和消失的过程中需要执行的行为。更多路由相关，见 官方文档 。</p>\n<p>这样，一个基本的：上 -&gt; ［左｜右］的单页应用骨架就有了。（其他类型的应用也可依此类推）</p>\n<h1 id=\"应用状态管理\"><a href=\"#应用状态管理\" class=\"headerlink\" title=\"应用状态管理\"></a>应用状态管理</h1><p>应用组件化之后，就需要解决组件之间的通信问题。针对组件之间的通信问题， vue 提供了三种方式： props 属性传递，直接通过引用调用组件方法，自定义事件通信，通过 v-ref （在 vue2.0 已简化为 ref ）来建立子组件索引从而调用子组件方法。</p>\n<p>porps ：基于属性传递， vue 提供了单次绑定、单向绑定和双向绑定。（虽然双向绑定在 vue2.0 中已经废弃）</p>\n<p>通过引用：子组件可以用 this.$parent 访问它的父组件。根实例的后代可以用 this.$root 访问它。父组件有一个数组 this.$children ，包含它所有的子元素。</p>\n<p>通过自定义事件通信：每个 Vue 实例都是一个事件触发器：</p>\n<p>使用 $on() 监听事件</p>\n<p>使用 $emit() 在它上面触发事件</p>\n<p>使用 $dispatch() 派发事件，事件沿着父链冒泡（ vue2.0 已废弃）</p>\n<p>使用 $broadcast() 广播事件，事件向下传导给所有的后代（ vue2.0 已废弃）</p>\n<p>在 vue2.0 中，可以单独使用一个 Vue 实例来来担任 eventBus 的作用。</p>\n<p>除了这几种方式，当应用比较复杂时，官方推荐使用另一个官方插件 vuex</p>\n<p>类似于 react 的 redux ， vue 的 vuex 的 store 也包含一个全局的状态树 state ；修改 state 的行为 mutations （对应 redux 的 actions ）；执行修改的动作 actions （对应 redux 的 createAction ）。<br><img src=\"http://img1.tuicool.com/qAzIJju.png\" alt=\"\"></p>\n<p>以全局 alert 组件的状态为例：</p>\n<ul>\n<li><p>创建 state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">alert</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'alert'</span>,</div><div class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">''</span>,</div><div class=\"line\">        <span class=\"attr\">onSure</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">onClose</span>: <span class=\"literal\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建 mutations</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    SHOW_ALERT (state, data) &#123;</div><div class=\"line\">        data.show = <span class=\"literal\">true</span></div><div class=\"line\">        state.alert = data</div><div class=\"line\">    &#125;,</div><div class=\"line\">    HIDE_ALERT (state) &#123;</div><div class=\"line\">        state.alert.show = <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建 actions</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*主页面涉及到的actions*/</span></div><div class=\"line\"><span class=\"keyword\">let</span> noop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</div><div class=\"line\"><span class=\"comment\">/*显示浮层alert*/</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> showAlert = <span class=\"function\">(<span class=\"params\">&#123;dispatch&#125;, message = <span class=\"string\">''</span></span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!message) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    dispatch(<span class=\"string\">'SHOW_ALERT'</span>, &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'alert'</span>,</div><div class=\"line\">        <span class=\"attr\">message</span>: message,</div><div class=\"line\">        <span class=\"attr\">onClose</span>: noop</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*显示浮层confirm*/</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> showConfirm = <span class=\"function\">(<span class=\"params\">&#123;dispatch&#125;, data = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!data.message) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    data.type = <span class=\"string\">'confirm'</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data.onClose != <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        data.onClose = noop</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> data.onConfirm != <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        data.onConfirm = noop</div><div class=\"line\">    &#125;</div><div class=\"line\">    dispatch(<span class=\"string\">'SHOW_ALERT'</span>, data)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*隐藏浮层*/</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> hideAlert = <span class=\"function\">(<span class=\"params\">&#123;dispatch&#125;</span>) =&gt;</span> dispatch(<span class=\"string\">'HIDE_ALERT'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>构建 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> mutations <span class=\"keyword\">from</span> <span class=\"string\">'./mutations'</span></div><div class=\"line\"><span class=\"keyword\">import</span> state <span class=\"keyword\">from</span> <span class=\"string\">\"./state\"</span></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"><span class=\"keyword\">const</span> debug = process.env.NODE_ENV !== <span class=\"string\">'production'</span></div><div class=\"line\">Vue.config.debug = debug</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    state,</div><div class=\"line\">    mutations,</div><div class=\"line\">    actions,</div><div class=\"line\">    <span class=\"attr\">strict</span>: debug</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后在应用的根组件中，通过以下方式获取 vuex 的功能：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*引入vuex*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">\"../vuex/store\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> App = Vue.extend(&#123;</div><div class=\"line\">    store,</div><div class=\"line\">    <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'admin-header'</span>: adminHeader,</div><div class=\"line\">        <span class=\"string\">'alert'</span>: alert</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后再在自组件中的vuex模块通过以下方式获取状态以及触发状态改变的动作：<br><img src=\"http://img2.tuicool.com/6b2AziY.png\" alt=\"\"></p>\n<h1 id=\"应用的数据交互\"><a href=\"#应用的数据交互\" class=\"headerlink\" title=\"应用的数据交互\"></a>应用的数据交互</h1><h2 id=\"api层\"><a href=\"#api层\" class=\"headerlink\" title=\"api层\"></a>api层</h2><p>记得之前看过民工叔叔（徐飞）的某篇文章里说的，数据层能够跟UI层分离，这样即使 UI 底层库更换了，也可以使用数据层。同理如果想要对api交互进行替换（如想把某些 ajax 库换成浏览器支持的 fetch api ），也可以直接在这一层进行更改。</p>\n<h2 id=\"mock数据\"><a href=\"#mock数据\" class=\"headerlink\" title=\"mock数据\"></a>mock数据</h2><p>在开发阶段，有时需要mock一些数据来测试应用。推荐一个对 restful api 友好的第三方工具 json-server 。</p>\n<p>index.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./database/users'</span>)</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"users\"</span>: users</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>database/users.js<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"string\">\"users\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"user_id\"</span>: <span class=\"string\">\"233\"</span>,</div><div class=\"line\">            <span class=\"string\">\"user_name\"</span>: <span class=\"string\">\"哈哈哈\"</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"user_id\"</span>: <span class=\"string\">\"233\"</span>,</div><div class=\"line\">            <span class=\"string\">\"user_name\"</span>: <span class=\"string\">\"哈哈哈\"</span>,</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"more\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"result\"</span>: <span class=\"string\">\"SUCCESS\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后终端执行 json-server mock/index.js －port 9999 就开启了一个 restful 的服务了。（也可以把这句写到 npm script 中）</p>\n<p>接下来还差一步，就是需要用到 webpack-dev-server 的 proxy 配置：<br><img src=\"http://img2.tuicool.com/NrM3yqu.png\" alt=\"\"></p>\n<p>这样，所有访问 /rest/* 的接口都会被代理到 json-server 的服务上.</p>\n<h1 id=\"应用测试\"><a href=\"#应用测试\" class=\"headerlink\" title=\"应用测试\"></a>应用测试</h1><p>一个完整的应用应该还具备单元测试、端对端测试等。目前比较成熟的测试框架社区中也有不少，但由于还没油深入研究过，此处不展开。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487555234674,
				"created_by": 2,
				"updated_at": 1487555885048,
				"updated_by": 2,
				"published_at": 1487555234674,
				"published_by": 2
			},
			{
				"id": "ciz95pdlx00004ofc45vyalzj",
				"title": "Vue2 移动端开发环境搭建",
				"slug": "vue-quick-start",
				"markdown": "\n本文给出基于 Vue2 的移动端环境搭建，移动端大家更多想到的是响应布局，我们根据不同大小的屏幕进行适配，当然少不了我们的重头戏 rem，移动端相比 pc 端就没什么特别的了。\n\n我会一步一步带领大家进入 Vue2 的世界，拥抱变化，熟悉 Vue 1.x 的根据文档可以迅速掌握 2.0，因为其中大约 90% 的语法是重复的。2.0 更多是基于框架本身的优化，整体设计思想是不变的。\n<!--more-->\n# vue-cli\n首先还是介绍我们的脚手架工具，因为它能让我们省去大部分的配置时间，这里只给出简单步骤，保证你的命令顺利运行的前提是安装最新版本的 node 和 npm，这里不赘述升级流程\n\n全局安装 vue-cli\n```bash\nnpm install vue-cli -g\n```\n借此也全局安装一个 webpack\n```bash\nnpm install webpack -g\n```\n注意这里可能会有坑，墙内的用户安装失败，没关系，我们先安装淘宝镜像\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n然后通过以下命令安装 webpack\n```bash\ncnpm install webpack -g\n```\n注：下面 orange 默认给出 npm 的安装方案，安装失败请自行转为 cnpm 安装\n\n在需要创建工程的位置运行\n```bash\nvue init webpack-simple 工程名字<工程名字不能用中文>\n```\n或者创建 vue1.0 的项目，只需将命令换成\n```\nvue init webpack-simple#1.0\n```\n这里我们基于 2.x 开发的，直接使用第一种方法创建工程即可，下图是创建工程时的截图，需要你添加 Project name ， Project description ， Author .\n![](http://static.open-open.com/lib/uploadImg/20161019/20161019105244_337.png)\n\n\n\n图中已经给出下一步应该操作的步骤，我们按照步骤一步一步执行，这里 orange 不给大家一步一步列出。\n\n注意：这里一定要使用 npm install 安装官方库，而不要使用淘宝镜像，会导致部分依赖丢失。\n\n安装完成后，目录如下图。\n![](http://static.open-open.com/lib/uploadImg/20161019/20161019105244_185.png)\n\n\n然后我们运行我们的项目后浏览器会自动弹出，并展示以下页面\n![](http://static.open-open.com/lib/uploadImg/20161019/20161019105244_485.png)\n\n这里注意观察，默认给我们八个链接，可以根据这几个链接获得我们想要的学习资源，上面是必要的的链接（官方文档以及关注 vue 动态），下面是 vue 的生态系统，大家亲切的叫它们为全家桶。\n\n# Vue 全家桶\n我们接下来介绍全家桶的安装（使用详情大家可以去初始页面的链接查看）\n\n一句命令搞定全家桶\n```bash\nnpm install vue-router vue-resource vuex --save\n```\npackage.json 已经加入了我们的全家桶，node_modules 目录下也有对应的依赖包，注意这里现在还不能用扩展之后的方法，因为我们没引入到项目中来。\n\nsrc/main.js 修改如下\n```js\nimport Vue from 'vue'\nimport VueResource from 'vue-resource'\nimport VueRouter from 'vue-router'\nimport Vuex from 'vuex'\n\nimport App from './App.vue'\n\nVue.use(VueResource)\nVue.use(VueRouter)\nVue.use(Vuex)\n\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n})\n```\n这时我们的项目就能运行对应的扩展方法了\n\n# 集成 Sass\n作为移动端的开发怎么能缺少 css 预编译语言。sass 安装需要几个依赖。\n\n我们干脆在 package.json 把版本写死，然后通过 npm install 安装\n\n在 \"devDependencies\": {} 中添加下面几个依赖\n```js\n\"node-sass\": \"^3.8.0\",\n\"sass\": \"^0.5.0\",\n\"sass-loader\": \"^4.0.0\",\n```\n好，我们 npm install 后，就可以正式使用 sass 啦\n\n# 目录结构建议\n依赖的安装到这里差不多结束了，其它大家需要的可以自定义安装\n\n下面给出我的目录建议供大家参考，\n![](http://static.open-open.com/lib/uploadImg/20161019/20161019105245_102.png)\n\n\n这里的 img 目录放置图片，script 目录放置公共的工具函数，style 目录放置我们的 sass 文件，\n\n你查看 App.vue 文件时不难发现，默认的把样式文件给到了模块里，这样样式一直跟着模块\n\norange 建议大家不要这样做，因为这样十分不利于样式的模块化，注意区分与模版模块化的区别，\n\n我们单独设置 style 目录，并在目录当中对 sass 进行模块化处理（通过 import 引入 sass 模块）\n\n对应的 App.vue 也变得非常简洁，代码如下\n```css\n<style lang=\"sass\">\n @import \"/style/base.scss\";\n</style>\n```\n# rem 适配\n对于移动端的开发，rem 适配必不可少，我们可以用多种方式实现，下面给出一种方案\n\n在 /src/script/util.js 中添加如下代码\n```js\nexport function setREM() {\n  let html = document.documentElement;\n\n  window.rem = html.getBoundingClientRect().width / 16 ;\n  html.style.fontSize = window.rem + 'px';\n}\n```\n这里基于宽 320px 的屏幕分成了 16 份，也就是 1rem = 20px，目前大多数设计稿都是根据 iphone6 的宽（ 375px ）走的，建议大家在这里分成 25 份，也就是 1rem = 15px，计算起来方便些。\n\n然后在 App.vue 的 script 部分中这样引入\n```js\nimport { setREM } from './script/util';\n```\n保证你的 App.vue 是接下来所有开发模块的父级模块，切换页面通过路由实现\n\n简单说下 rem 原理：根据 html 的 fontSize 属性值为基准，其它所有的 rem 值，根据这个基准计算。\n\n我们根据屏幕宽度用 js 动态修改了 html 的 fontSize 属性值，达到移动端适配的目的",
				"html": "<p>本文给出基于 Vue2 的移动端环境搭建，移动端大家更多想到的是响应布局，我们根据不同大小的屏幕进行适配，当然少不了我们的重头戏 rem，移动端相比 pc 端就没什么特别的了。</p>\n<p>我会一步一步带领大家进入 Vue2 的世界，拥抱变化，熟悉 Vue 1.x 的根据文档可以迅速掌握 2.0，因为其中大约 90% 的语法是重复的。2.0 更多是基于框架本身的优化，整体设计思想是不变的。<br><a id=\"more\"></a></p>\n<h1 id=\"vue-cli\"><a href=\"#vue-cli\" class=\"headerlink\" title=\"vue-cli\"></a>vue-cli</h1><p>首先还是介绍我们的脚手架工具，因为它能让我们省去大部分的配置时间，这里只给出简单步骤，保证你的命令顺利运行的前提是安装最新版本的 node 和 npm，这里不赘述升级流程</p>\n<p>全局安装 vue-cli<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-cli -g</div></pre></td></tr></table></figure></p>\n<p>借此也全局安装一个 webpack<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install webpack -g</div></pre></td></tr></table></figure></p>\n<p>注意这里可能会有坑，墙内的用户安装失败，没关系，我们先安装淘宝镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>然后通过以下命令安装 webpack<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install webpack -g</div></pre></td></tr></table></figure></p>\n<p>注：下面 orange 默认给出 npm 的安装方案，安装失败请自行转为 cnpm 安装</p>\n<p>在需要创建工程的位置运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack-simple 工程名字&lt;工程名字不能用中文&gt;</div></pre></td></tr></table></figure></p>\n<p>或者创建 vue1.0 的项目，只需将命令换成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue init webpack-simple#1.0</div></pre></td></tr></table></figure></p>\n<p>这里我们基于 2.x 开发的，直接使用第一种方法创建工程即可，下图是创建工程时的截图，需要你添加 Project name ， Project description ， Author .<br><img src=\"http://static.open-open.com/lib/uploadImg/20161019/20161019105244_337.png\" alt=\"\"></p>\n<p>图中已经给出下一步应该操作的步骤，我们按照步骤一步一步执行，这里 orange 不给大家一步一步列出。</p>\n<p>注意：这里一定要使用 npm install 安装官方库，而不要使用淘宝镜像，会导致部分依赖丢失。</p>\n<p>安装完成后，目录如下图。<br><img src=\"http://static.open-open.com/lib/uploadImg/20161019/20161019105244_185.png\" alt=\"\"></p>\n<p>然后我们运行我们的项目后浏览器会自动弹出，并展示以下页面<br><img src=\"http://static.open-open.com/lib/uploadImg/20161019/20161019105244_485.png\" alt=\"\"></p>\n<p>这里注意观察，默认给我们八个链接，可以根据这几个链接获得我们想要的学习资源，上面是必要的的链接（官方文档以及关注 vue 动态），下面是 vue 的生态系统，大家亲切的叫它们为全家桶。</p>\n<h1 id=\"Vue-全家桶\"><a href=\"#Vue-全家桶\" class=\"headerlink\" title=\"Vue 全家桶\"></a>Vue 全家桶</h1><p>我们接下来介绍全家桶的安装（使用详情大家可以去初始页面的链接查看）</p>\n<p>一句命令搞定全家桶<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-router vue-resource vuex --save</div></pre></td></tr></table></figure></p>\n<p>package.json 已经加入了我们的全家桶，node_modules 目录下也有对应的依赖包，注意这里现在还不能用扩展之后的方法，因为我们没引入到项目中来。</p>\n<p>src/main.js 修改如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueResource <span class=\"keyword\">from</span> <span class=\"string\">'vue-resource'</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(VueResource)</div><div class=\"line\">Vue.use(VueRouter)</div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这时我们的项目就能运行对应的扩展方法了</p>\n<h1 id=\"集成-Sass\"><a href=\"#集成-Sass\" class=\"headerlink\" title=\"集成 Sass\"></a>集成 Sass</h1><p>作为移动端的开发怎么能缺少 css 预编译语言。sass 安装需要几个依赖。</p>\n<p>我们干脆在 package.json 把版本写死，然后通过 npm install 安装</p>\n<p>在 “devDependencies”: {} 中添加下面几个依赖<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^3.8.0\"</span>,</div><div class=\"line\"><span class=\"string\">\"sass\"</span>: <span class=\"string\">\"^0.5.0\"</span>,</div><div class=\"line\"><span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^4.0.0\"</span>,</div></pre></td></tr></table></figure></p>\n<p>好，我们 npm install 后，就可以正式使用 sass 啦</p>\n<h1 id=\"目录结构建议\"><a href=\"#目录结构建议\" class=\"headerlink\" title=\"目录结构建议\"></a>目录结构建议</h1><p>依赖的安装到这里差不多结束了，其它大家需要的可以自定义安装</p>\n<p>下面给出我的目录建议供大家参考，<br><img src=\"http://static.open-open.com/lib/uploadImg/20161019/20161019105245_102.png\" alt=\"\"></p>\n<p>这里的 img 目录放置图片，script 目录放置公共的工具函数，style 目录放置我们的 sass 文件，</p>\n<p>你查看 App.vue 文件时不难发现，默认的把样式文件给到了模块里，这样样式一直跟着模块</p>\n<p>orange 建议大家不要这样做，因为这样十分不利于样式的模块化，注意区分与模版模块化的区别，</p>\n<p>我们单独设置 style 目录，并在目录当中对 sass 进行模块化处理（通过 import 引入 sass 模块）</p>\n<p>对应的 App.vue 也变得非常简洁，代码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style lang=\"sass\"&gt;</div><div class=\"line\"> @import \"/style/base.scss\";</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"rem-适配\"><a href=\"#rem-适配\" class=\"headerlink\" title=\"rem 适配\"></a>rem 适配</h1><p>对于移动端的开发，rem 适配必不可少，我们可以用多种方式实现，下面给出一种方案</p>\n<p>在 /src/script/util.js 中添加如下代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setREM</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">window</span>.rem = html.getBoundingClientRect().width / <span class=\"number\">16</span> ;</div><div class=\"line\">  html.style.fontSize = <span class=\"built_in\">window</span>.rem + <span class=\"string\">'px'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里基于宽 320px 的屏幕分成了 16 份，也就是 1rem = 20px，目前大多数设计稿都是根据 iphone6 的宽（ 375px ）走的，建议大家在这里分成 25 份，也就是 1rem = 15px，计算起来方便些。</p>\n<p>然后在 App.vue 的 script 部分中这样引入<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; setREM &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./script/util'</span>;</div></pre></td></tr></table></figure></p>\n<p>保证你的 App.vue 是接下来所有开发模块的父级模块，切换页面通过路由实现</p>\n<p>简单说下 rem 原理：根据 html 的 fontSize 属性值为基准，其它所有的 rem 值，根据这个基准计算。</p>\n<p>我们根据屏幕宽度用 js 动态修改了 html 的 fontSize 属性值，达到移动端适配的目的</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487296096449,
				"created_by": 2,
				"updated_at": 1487554415354,
				"updated_by": 2,
				"published_at": 1487296096449,
				"published_by": 2
			},
			{
				"id": "ciz8b0a10000000fcvj1dkuzz",
				"title": "使用gulp脚本配合TypeScript开发",
				"slug": "typescript-gulp",
				"markdown": "\n目标：编写TypeScript时，保存即生成js文件。\n\n\n<!--more-->\n# tsconfig.json\n\n运行 tsc --init 生成配置文件\n\ntsconfig.json\n\n```json\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"module\": \"commonjs\",\n        \"sourceMap\": true,\n        \"outDir\": \"dist\",\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"removeComments\": false,\n        \"noImplicitAny\": false\n    },\n    \"includes\": [\n        \"src/**/*\"\n    ]\n}\n```\n\n# 编写gulpfiles.js\n\n\n使用npm安装以下组件\ngulp\ngulp-rename\nthrough-gulp\ngulp-typescript\n\n```js\nvar gulp = require('gulp');\nvar ts = require('gulp-typescript');\nvar sourcemaps = require('gulp-sourcemaps');\nvar nodemon = require('gulp-nodemon');\n\nvar tsProject = ts.createProject('tsconfig.json');\n\ngulp.task('compile', function () {\n    return tsProject.src()\n        .pipe(sourcemaps.init())\n        .pipe(tsProject())\n        .pipe(sourcemaps.write())\n        .pipe(gulp.dest('dist'));\n});\n\ngulp.task('default', ['compile'], function () {\n    gulp.watch([\"**/*.ts\", \"!**/node_modules/**\"], ['compile']);\n});\n```\n\n执行脚本时把所有的*.ts文件生成一次，然后检测到有修改时生成对应的js。",
				"html": "<p>目标：编写TypeScript时，保存即生成js文件。</p>\n<a id=\"more\"></a>\n<h1 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h1><p>运行 tsc –init 生成配置文件</p>\n<p>tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"compilerOptions\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES5\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sourceMap\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"outDir\"</span>: <span class=\"string\">\"dist\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"removeComments\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">\"noImplicitAny\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"includes\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"src/**/*\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"编写gulpfiles-js\"><a href=\"#编写gulpfiles-js\" class=\"headerlink\" title=\"编写gulpfiles.js\"></a>编写gulpfiles.js</h1><p>使用npm安装以下组件<br>gulp<br>gulp-rename<br>through-gulp<br>gulp-typescript</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ts = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> nodemon = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-nodemon'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tsProject = ts.createProject(<span class=\"string\">'tsconfig.json'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'compile'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> tsProject.src()</div><div class=\"line\">        .pipe(sourcemaps.init())</div><div class=\"line\">        .pipe(tsProject())</div><div class=\"line\">        .pipe(sourcemaps.write())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'compile'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.watch([<span class=\"string\">\"**/*.ts\"</span>, <span class=\"string\">\"!**/node_modules/**\"</span>], [<span class=\"string\">'compile'</span>]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>执行脚本时把所有的*.ts文件生成一次，然后检测到有修改时生成对应的js。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487244355267,
				"created_by": 2,
				"updated_at": 1487244790247,
				"updated_by": 2,
				"published_at": 1487244355267,
				"published_by": 2
			},
			{
				"id": "ciz7p5ysn0000lcfc1b9uap41",
				"title": "TypeScript 2.1 新特性一览",
				"slug": "typescript_2.1",
				"markdown": "\n继 TypeScript 2.0 正式版发布两个半月后, TypeScript 2.1 也终于来了. 这次更新带来了不少有用的改进, 特别是查找/映射类型及 any 类型的推断. 除此之外, 也用上了新的代码生成机制. 以下则是译自官方 Wiki 的内容.\nkeyof 与查找类型\n\n<!--more-->\n\n# keyof 与查找类型\n在 JavaScript 生态里常常会有 API 接受属性名称作为参数的情况, 但到目前为止还无法表达这类 API 的类型关系.\n\n入口索引类型查询或者说 keyof; 索引类型查询 keyof T 会得出 T 可能的属性名称的类型. keyof T 类型被认为是 string 的子类型.\n\n例子\n```js\ninterface Person {\n    name: string;\n    age: number;\n    location: string;\n}\n\ntype K1 = keyof Person; // \"name\" | \"age\" | \"location\"\ntype K2 = keyof Person[];  // \"length\" | \"push\" | \"pop\" | \"concat\" | ...\ntype K3 = keyof { [x: string]: Person };  // string\n```\n与之对应的是索引访问类型, 也叫作查找类型 (lookup types). 语法上, 它们看起来和元素访问完全相似, 但是是以类型的形式使用的:\n\n例子\n```js\ntype P1 = Person[\"name\"];  // string\ntype P2 = Person[\"name\" | \"age\"];  // string | number\ntype P3 = string[\"charAt\"];  // (pos: number) => string\ntype P4 = string[][\"push\"];  // (...items: string[]) => number\ntype P5 = string[][0];  // string\n```\n你可以将这种形式与类型系统中的其他功能组合, 来获得类型安全的查找.\n```js\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n    return obj[key];  // 推断的类型为 T[K]\n}\n\nfunction setProperty<T, K extends keyof T>(obj: T, key: K, value: T[K]) {\n    obj[key] = value;\n}\n\nlet x = { foo: 10, bar: \"hello!\" };\n\nlet foo = getProperty(x, \"foo\"); // number\nlet bar = getProperty(x, \"bar\"); // string\n\nlet oops = getProperty(x, \"wargarbl\"); // 错误! \"wargarbl\" 不满足类型 \"foo\" | \"bar\"\n\nsetProperty(x, \"foo\", \"string\"); // 错误! string 应该是 number\n```\n# 映射类型\n\n一个常见的需求是取一个现有的类型, 并将他的所有属性转换为可选值. 假设我们有 Person 类型:\n```js\ninterface Person {\n    name: string;\n    age: number;\n    location: string;\n}\n```\n它的部分类型 (partial) 的版本会是这样:\n```js\ninterface PartialPerson {\n    name?: string;\n    age?: number;\n    location?: string;\n}\n```\n有了映射类型, PartialPerson 就可以被写作对于 Person 类型的一般化转换:\n```js\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\ntype PartialPerson = Partial<Person>;\n```\n映射类型是获取字面量类型的并集, 再通过计算新对象的属性集合产生的. 它们和 Python 中的列表解析 相似, 但不是在列表中创建新的元素, 而是在类型中创建新的属性.\n\n除了 Partial 之外, 映射类型可以表达很多有用的类型转换:\n```js\n// 保持类型一致, 但使每一个属性变为只读\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n// 相同的属性名称, 但使值为 Promise 而不是具体的值\ntype Deferred<T> = {\n    [P in keyof T]: Promise<T[P]>;\n};\n\n// 为 T 的属性添加代理\ntype Proxify<T> = {\n    [P in keyof T]: { get(): T[P]; set(v: T[P]): void }\n};\n```\n# Partial, Readonly, Record 以及 Pick\n\nPartial 与 Readonly, 就像之前提到的, 是非常有用的结构. 你可以使用它们来描述一些常见的 JS 实践, 比如:\n\nfunction assign<T>(obj: T, props: Partial<T>): void;\nfunction freeze<T>(obj: T): Readonly<T>;\n正因为如此, 它们现在默认被包含在了标准库中.\n\n我们还引入了另外两种工具类型: Record 和 Pick.\n```js\n// 从 T 挑选一些属性 K\ndeclare function pick<T, K extends keyof T>(obj: T, ...keys: K[]): Pick<T, K>;\n\nconst nameAndAgeOnly = pick(person, \"name\", \"age\");  // { name: string, age: number }\n// 对所有 T 类型的属性 K, 将它转换为 U\nfunction mapObject<K extends string | number, T, U>(obj: Record<K, T>, f: (x: T) => U): Record<K, U>;\n\nconst names = { foo: \"hello\", bar: \"world\", baz: \"bye\" };\nconst lengths = mapObject(names, s => s.length);  // { foo: number, bar: number, baz: number }\n```\n# 对象的展开与剩余运算符\n\nTypeScript 2.1 带来了对 ES2017 展开与剩余运算符的支持.\n\n和数组的展开类似, 展开一个对象可以很方便地获得它的浅拷贝:\n```js\nlet copy = { ...original };\n```\n相似的, 你可以合并多个不同的对象. 在下面的例子中, merged 会有来自 foo, bar 和 baz 的属性.\n```js\nlet merged = { ...foo, ...bar, ...baz };\n```\n你也可以覆盖已有的属性和添加新的属性:\n```js\nlet obj = { x: 1, y: \"string\" };\nvar newObj = {...obj, z: 3, y: 4}; // { x: number, y: number, z: number }\n```\n指定展开操作的顺序决定了那些属性的值会留在创建的对象里; 在靠后的展开中出现的属性会 \"战胜\" 之前创建的属性.\n\n对象的剩余操作和对象的展开是对应的, 这样一来我们可以导出解构一个元素时被漏掉的其他属性.\n```js\nlet obj = { x: 1, y: 1, z: 1 };\nlet { z, ...obj1 } = obj;\nobj1; // {x: number, y: number};\n```\n# 异步函数的向下编译\n\n这一特性在 TypeScript 2.1 前就已经被支持, 但仅仅是当编译到 ES6/ES2015 的时候. TypeScript 2.1 带来了编译到 ES3 和 ES5 运行时的能力, 意味着你可以自由地运用这项优势到任何你在使用的环境.\n\n注意: 首先, 我们需要确保我们的运行时有和 ECMAScript 兼容的全局 Promise. 这可能需要使用一个 Promise 的实现, 或者依赖目标运行时中的实现. 我们还需要通过设置 lib 选项为像 \"dom\", \"es2015\" 或者 \"dom\", \"es2015.promise\", \"es5\" 这样的值来确保 TypeScript 知道 Promise 存在.\n\n例子tsconfig.json\n```js\n{\n    \"compilerOptions\": {\n        \"lib\": [\"dom\", \"es2015.promise\", \"es5\"]\n    }\n}\n```\ndramaticWelcome.ts\n```js\nfunction delay(milliseconds: number) {\n    return new Promise<void>(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nasync function dramaticWelcome() {\n    console.log(\"你好\");\n\n    for (let i = 0; i < 3; i++) {\n        await delay(500);\n        console.log(\".\");\n    }\n\n    console.log(\"世界!\");\n}\n\ndramaticWelcome();\n```\n编译和运行, 在 ES3/ES5 引擎中应该也会有正确的行为.\n\n# 支持外部工具库 (tslib)\n\nTypeScript 会注入一些工具函数, 比如用于继承的 __extends, 用于对象字面量与 JSX 元素中展开运算符的 __assign, 以及用于异步函数的 __awaiter.\n\n过去我们有两个选择:\n\n在所有需要的文件中注入这些工具函数, 或者\n使用 --noEmitHelpers 完全不输出工具函数.\n这两个选项很难满足已有的需求; 在每一个文件中加入这些工具函数对于关心包大小的客户来说是一个痛点. 而不包含工具函数又意味着客户需要维护自己的工具库.\n\nTypeScript 2.1 允许在你的项目中将这些文件作为单独的模块引用, 而编译器则会在需要的时候导入它们.\n\n首先, 安装 tslib 工具库:\n```bash\nnpm install tslib\n```\n接下来, 使用 --importHelpers 选项编译你的文件:\n```bash\ntsc --module commonjs --importHelpers a.ts\n```\n所以使用以下作为输入, 输出的 .js 文件就会包含对 tslib 的引入, 并且使用其中的 ___assign 工具函数而不是将它输出在文件中.\n```js\nexport const o = { a: 1, name: \"o\" };\nexport const copy = { ...o };\n\"use strict\";\nvar tslib_1 = require(\"tslib\");\nexports.o = { a: 1, name: \"o\" };\nexports.copy = tslib_1.__assign({}, exports.o);\n```\n# 未添加类型的导入\n\nTypeScript 过去对于如何导入模块有一些过于严格. 这样的本意是避免拼写错误, 并且帮助用户正确地使用模块.\n\n然而, 很多时候, 你可能仅仅是想导入一个没有它自己的 .d.ts 文件的现有模块. 之前这是会导致错误. 从 TypeScript 2.1 开始, 则会容易很多.\n\n使用 TypeScript 2.1, 你可以导入一个 JavaScript 模块而无需类型声明. 类型声明 (比如 declare module \"foo\" { ... } 或者 node_modules/@types/foo) 如果存在的话仍具有更高的优先级.\n\n对没有声明文件的模块的导入, 在 --noImplicitAny 时仍会被标记为错误.\n\n例子\n```js\n// 如果 `node_modules/asdf/index.js` 存在, 或 `node_modules/asdf/package.json` 定义了合法的 \"main\" 入口即可\nimport { x } from \"asdf\";\n```\n# 对 --target ES2016, --target ES2017 及 --target ESNext 的支持\n\nTypeScript 2.1 支持了三个新的目标版本值 --target ES2016, --target ES2017 及 --target ESNext.\n\n使用目标版本 --target ES2016 会告诉编译器不要对 ES2016 的特性进行转换, 比如 ** 运算符.\n\n相似的, --target ES2017 会告诉编译器不要转换 ES2017 的特性, 比如 async/await.\n\n--target ESNext 则对应最新的 ES 提案特性的支持.\n\n改进的 any 推断\n\n之前, 如果 TypeScript 不能弄明白一个变量的类型, 它会选择 any 类型.\n```js\nlet x;      // 隐式的 'any'\nlet y = []; // 隐式的 'any[]'\n\nlet z: any; // 显式的 'any'.\n```\n在 TypeScript 2.1 中, 不同于简单地选择 any, TypeScript 会根据之后的赋值推断类型.\n\n这仅会在 --noImplicitAny 时开启.\n\n例子\n```js\nlet x;\n\n// 你仍可以将任何值赋给 'x'.\nx = () => 42;\n\n// 在上一次赋值后, TypeScript 2.1 知道 'x' 的类型为 '() => number'.\nlet y = x();\n\n// 得益于此, 它现在会告诉你你不能将一个数字和函数相加!\nconsole.log(x + y);\n//          ~~~~~\n// 错误! 运算符 '+' 不能被使用在类型 '() => number' 和 'number' 上.\n\n// TypeScript 仍允许你将任何值赋给 'x'\nx = \"Hello world!\";\n\n// 但现在它也会知道 'x' 是 'string'!\nx.toLowerCase();\n```\n同样的追踪现在对于空数组也会生效.\n\n一个没有类型标注, 初始值为 [] 的变量声明被认为是一个隐式的 any[] 变量. 不过, 接下来的 x.push(value), x.unshift(value) 或者 x[n] = value 操作将依据添加的元素去演进变量的类型.\n```js\nfunction f1() {\n    let x = [];\n    x.push(5);\n    x[1] = \"hello\";\n    x.unshift(true);\n    return x;  // (string | number | boolean)[]\n}\n\nfunction f2() {\n    let x = null;\n    if (cond()) {\n        x = [];\n        while (cond()) {\n            x.push(\"hello\");\n        }\n    }\n    return x;  // string[] | null\n}\n```\n# 隐式 any 错误\n\n这个特性的一大好处就是, 使用 --noImplicitAny 时你会看到的隐式 any 错误会比之前少非常多. 隐式 any 错误仅仅会在编译器不通过类型声明就无法知道变量类型时被报告.\n\n例子\n```js\nfunction f3() {\n    let x = [];  // 错误: 变量 'x' 隐式地有类型 'any[]' 在一些位置的类型无法被确定.\n    x.push(5);\n    function g() {\n        x;    // 错误: 变量 'x' 隐式地有类型 'any[]'.\n    }\n}\n```\n# 对字面量类型更好的推断\n\n字符串, 数字和布尔值字面量类型 (例如 \"abc\", 1, 和 true) 在之前仅会在有显式的类型标注时被使用. 从 TypeScript 2.1 开始, 对于 const 变量和 readonly 属性, 字面量类型会始终作为推断的结果.\n\n对于没有类型标注的 const 变量和 readonly 属性, 推断的类型为字面量初始值的类型. 对于有初始值, 没有类型标注的 let 变量, var 变量, 参数, 或者非 readonly 的属性, 推断的类型为拓宽的字面量初始值的类型. 这里拓宽的类型对于字符串字面量来说是 string, 对于数字字面量是 number, 对于 true 或 false 来说是 boolean, 对于枚举字面量类型则是对应的枚举类型.\n\n例子\n```js\nconst c1 = 1;  // 类型 1\nconst c2 = c1;  // 类型 1\nconst c3 = \"abc\";  // 类型 \"abc\"\nconst c4 = true;  // 类型 true\nconst c5 = cond ? 1 : \"abc\";  // 类型 1 | \"abc\"\n\nlet v1 = 1;  // 类型 number\nlet v2 = c2;  // 类型 number\nlet v3 = c3;  // 类型 string\nlet v4 = c4;  // 类型 boolean\nlet v5 = c5;  // 类型 number | string\n```\n字面量类型的拓宽可以通过显式的类型标注来控制. 具体来说, 当一个有字面量类型的表达式是通过常量位置而不是类型标注被推断时, 这个 const 变量被推断的是待拓宽的字面量类型. 但在 const 位置有显式的类型标注时, const 变量获得的是非待拓宽的字面量类型.\n\n例子\n```js\nconst c1 = \"hello\";  // 待拓宽类型 \"hello\"\nlet v1 = c1;  // 类型 string\n\nconst c2: \"hello\" = \"hello\";  // 类型 \"hello\"\nlet v2 = c2;  // 类型 \"hello\"\n```\n# 使用 super 的返回值作为 'this'\n\n在 ES2015 中, 返回对象的构造函数会隐式地替换所有 super() 调用者的 this 的值. 这样一来, 捕获 super() 任何潜在的返回值并使用 this 替代则是必要的. 这一项改变使得我们可以配合自定义元素, 而它正是利用了这一特性来初始化浏览器分配, 却是由用户编写了构造函数的元素.\n\nExample\n```js\nclass Base {\n    x: number;\n    constructor() {\n        // 返回一个不同于 `this` 的新对象\n        return {\n            x: 1,\n        };\n    }\n}\n\nclass Derived extends Base {\n    constructor() {\n        super();\n        this.x = 2;\n    }\n}\n```\n生成:\n```js\nvar Derived = (function (_super) {\n    __extends(Derived, _super);\n    function Derived() {\n        var _this = _super.call(this) || this;\n        _this.x = 2;\n        return _this;\n    }\n    return Derived;\n}(Base));\n```\n这一改变会引起对像 Error, Array, Map 等等的内建类的扩展行为带来不兼容的变化. 请参照扩展内建类型不兼容变化文档了解详情.\n\n# 配置继承\n\n一个项目通常会有多个输出目标, 比如 ES5 和 ES2015, 编译和生产或 CommonJS 和 System; 在这些成对的目标中, 只有少数配置选项会改变, 而维护多个 tsconfig.json 文件可以会比较麻烦.\n\nTypeScript 2.1 支持通过 extends 来继承配置, 在这儿:\n\nextends 是 tsconfig.json 中一个新的顶级属性 (同级的还有 compilerOptions, files, include 和 exclude).\nextends 的值必须为一个包含了到另一个被继承的配置文件的路径的字符串.\n基文件的配置会先被加载, 然后被继承它的文件内的配置覆盖.\n配置文件不允许出现循环.\n继承文件中的 files, include 和 exclude 会覆盖被继承的配置文件中对应的值.\n所有配置文件中出现的相对路径会相对这些路径所配置文件的路径来解析.\n例子\nconfigs/base.json:\n```json\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true\n  }\n}\n```\ntsconfig.json:\n```json\n{\n  \"extends\": \"./configs/base\",\n  \"files\": [\n    \"main.ts\",\n    \"supplemental.ts\"\n  ]\n}\n```\ntsconfig.nostrictnull.json:\n```json\n{\n  \"extends\": \"./tsconfig\",\n  \"compilerOptions\": {\n    \"strictNullChecks\": false\n  }\n}\n```\n# 新 --alwaysStrict 选项\n\n使用 --alwaysStrict 来启动编译器会使:\n\n所有代码以严格模式进行解析.\n在所有生成文件的顶部输出 \"use strict\"; 指令.\n模块会自动以严格模式进行解析. 对于非模块代码推荐使用该新选项.",
				"html": "<p>继 TypeScript 2.0 正式版发布两个半月后, TypeScript 2.1 也终于来了. 这次更新带来了不少有用的改进, 特别是查找/映射类型及 any 类型的推断. 除此之外, 也用上了新的代码生成机制. 以下则是译自官方 Wiki 的内容.<br>keyof 与查找类型</p>\n<a id=\"more\"></a>\n<h1 id=\"keyof-与查找类型\"><a href=\"#keyof-与查找类型\" class=\"headerlink\" title=\"keyof 与查找类型\"></a>keyof 与查找类型</h1><p>在 JavaScript 生态里常常会有 API 接受属性名称作为参数的情况, 但到目前为止还无法表达这类 API 的类型关系.</p>\n<p>入口索引类型查询或者说 keyof; 索引类型查询 keyof T 会得出 T 可能的属性名称的类型. keyof T 类型被认为是 string 的子类型.</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Person &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: string;</div><div class=\"line\">    age: number;</div><div class=\"line\">    location: string;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">type K1 = keyof Person; <span class=\"comment\">// \"name\" | \"age\" | \"location\"</span></div><div class=\"line\">type K2 = keyof Person[];  <span class=\"comment\">// \"length\" | \"push\" | \"pop\" | \"concat\" | ...</span></div><div class=\"line\">type K3 = keyof &#123; [x: string]: Person &#125;;  <span class=\"comment\">// string</span></div></pre></td></tr></table></figure></p>\n<p>与之对应的是索引访问类型, 也叫作查找类型 (lookup types). 语法上, 它们看起来和元素访问完全相似, 但是是以类型的形式使用的:</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">type P1 = Person[<span class=\"string\">\"name\"</span>];  <span class=\"comment\">// string</span></div><div class=\"line\">type P2 = Person[<span class=\"string\">\"name\"</span> | <span class=\"string\">\"age\"</span>];  <span class=\"comment\">// string | number</span></div><div class=\"line\">type P3 = string[<span class=\"string\">\"charAt\"</span>];  <span class=\"comment\">// (pos: number) =&gt; string</span></div><div class=\"line\">type P4 = string[][<span class=\"string\">\"push\"</span>];  <span class=\"comment\">// (...items: string[]) =&gt; number</span></div><div class=\"line\">type P5 = string[][<span class=\"number\">0</span>];  <span class=\"comment\">// string</span></div></pre></td></tr></table></figure></p>\n<p>你可以将这种形式与类型系统中的其他功能组合, 来获得类型安全的查找.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">obj: T, key: K</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj[key];  <span class=\"comment\">// 推断的类型为 T[K]</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">obj: T, key: K, value: T[K]</span>) </span>&#123;</div><div class=\"line\">    obj[key] = value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> x = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">10</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"hello!\"</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> foo = getProperty(x, <span class=\"string\">\"foo\"</span>); <span class=\"comment\">// number</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = getProperty(x, <span class=\"string\">\"bar\"</span>); <span class=\"comment\">// string</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oops = getProperty(x, <span class=\"string\">\"wargarbl\"</span>); <span class=\"comment\">// 错误! \"wargarbl\" 不满足类型 \"foo\" | \"bar\"</span></div><div class=\"line\"></div><div class=\"line\">setProperty(x, <span class=\"string\">\"foo\"</span>, <span class=\"string\">\"string\"</span>); <span class=\"comment\">// 错误! string 应该是 number</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"映射类型\"><a href=\"#映射类型\" class=\"headerlink\" title=\"映射类型\"></a>映射类型</h1><p>一个常见的需求是取一个现有的类型, 并将他的所有属性转换为可选值. 假设我们有 Person 类型:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Person &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: string;</div><div class=\"line\">    age: number;</div><div class=\"line\">    location: string;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它的部分类型 (partial) 的版本会是这样:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface PartialPerson &#123;</div><div class=\"line\">    name?: string;</div><div class=\"line\">    age?: number;</div><div class=\"line\">    location?: string;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有了映射类型, PartialPerson 就可以被写作对于 Person 类型的一般化转换:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">type Partial&lt;T&gt; = &#123;</div><div class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">type PartialPerson = Partial&lt;Person&gt;;</div></pre></td></tr></table></figure></p>\n<p>映射类型是获取字面量类型的并集, 再通过计算新对象的属性集合产生的. 它们和 Python 中的列表解析 相似, 但不是在列表中创建新的元素, 而是在类型中创建新的属性.</p>\n<p>除了 Partial 之外, 映射类型可以表达很多有用的类型转换:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 保持类型一致, 但使每一个属性变为只读</span></div><div class=\"line\">type Readonly&lt;T&gt; = &#123;</div><div class=\"line\">    readonly [P <span class=\"keyword\">in</span> keyof T]: T[P];</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 相同的属性名称, 但使值为 Promise 而不是具体的值</span></div><div class=\"line\">type Deferred&lt;T&gt; = &#123;</div><div class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">Promise</span>&lt;T[P]&gt;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为 T 的属性添加代理</span></div><div class=\"line\">type Proxify&lt;T&gt; = &#123;</div><div class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]: &#123; get(): T[P]; set(v: T[P]): <span class=\"keyword\">void</span> &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Partial-Readonly-Record-以及-Pick\"><a href=\"#Partial-Readonly-Record-以及-Pick\" class=\"headerlink\" title=\"Partial, Readonly, Record 以及 Pick\"></a>Partial, Readonly, Record 以及 Pick</h1><p>Partial 与 Readonly, 就像之前提到的, 是非常有用的结构. 你可以使用它们来描述一些常见的 JS 实践, 比如:</p>\n<p>function assign<t>(obj: T, props: Partial<t>): void;<br>function freeze<t>(obj: T): Readonly<t>;<br>正因为如此, 它们现在默认被包含在了标准库中.</t></t></t></t></p>\n<p>我们还引入了另外两种工具类型: Record 和 Pick.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 从 T 挑选一些属性 K</span></div><div class=\"line\">declare <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">obj: T, ...keys: K[]</span>): <span class=\"title\">Pick</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span>&gt;;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">const</span> <span class=\"title\">nameAndAgeOnly</span> = <span class=\"title\">pick</span>(<span class=\"params\">person, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span></span>);  // &#123; name: string, <span class=\"attr\">age</span>: number &#125;</div><div class=\"line\"><span class=\"comment\">// 对所有 T 类型的属性 K, 将它转换为 U</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapObject</span>&lt;<span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">string</span> | <span class=\"title\">number</span>, <span class=\"title\">T</span>, <span class=\"title\">U</span>&gt;(<span class=\"params\">obj: Record&lt;K, T&gt;, f: (x: T</span>) =&gt; <span class=\"title\">U</span>): <span class=\"title\">Record</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">U</span>&gt;;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">const</span> <span class=\"title\">names</span> = &#123; foo: <span class=\"string\">\"hello\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"world\"</span>, <span class=\"attr\">baz</span>: <span class=\"string\">\"bye\"</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> lengths = mapObject(names, s =&gt; s.length);  <span class=\"comment\">// &#123; foo: number, bar: number, baz: number &#125;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"对象的展开与剩余运算符\"><a href=\"#对象的展开与剩余运算符\" class=\"headerlink\" title=\"对象的展开与剩余运算符\"></a>对象的展开与剩余运算符</h1><p>TypeScript 2.1 带来了对 ES2017 展开与剩余运算符的支持.</p>\n<p>和数组的展开类似, 展开一个对象可以很方便地获得它的浅拷贝:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> copy = &#123; ...original &#125;;</div></pre></td></tr></table></figure></p>\n<p>相似的, 你可以合并多个不同的对象. 在下面的例子中, merged 会有来自 foo, bar 和 baz 的属性.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> merged = &#123; ...foo, ...bar, ...baz &#125;;</div></pre></td></tr></table></figure></p>\n<p>你也可以覆盖已有的属性和添加新的属性:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"string\">\"string\"</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> newObj = &#123;...obj, <span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span>&#125;; <span class=\"comment\">// &#123; x: number, y: number, z: number &#125;</span></div></pre></td></tr></table></figure></p>\n<p>指定展开操作的顺序决定了那些属性的值会留在创建的对象里; 在靠后的展开中出现的属性会 “战胜” 之前创建的属性.</p>\n<p>对象的剩余操作和对象的展开是对应的, 这样一来我们可以导出解构一个元素时被漏掉的其他属性.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span>, <span class=\"attr\">z</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; z, ...obj1 &#125; = obj;</div><div class=\"line\">obj1; <span class=\"comment\">// &#123;x: number, y: number&#125;;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"异步函数的向下编译\"><a href=\"#异步函数的向下编译\" class=\"headerlink\" title=\"异步函数的向下编译\"></a>异步函数的向下编译</h1><p>这一特性在 TypeScript 2.1 前就已经被支持, 但仅仅是当编译到 ES6/ES2015 的时候. TypeScript 2.1 带来了编译到 ES3 和 ES5 运行时的能力, 意味着你可以自由地运用这项优势到任何你在使用的环境.</p>\n<p>注意: 首先, 我们需要确保我们的运行时有和 ECMAScript 兼容的全局 Promise. 这可能需要使用一个 Promise 的实现, 或者依赖目标运行时中的实现. 我们还需要通过设置 lib 选项为像 “dom”, “es2015” 或者 “dom”, “es2015.promise”, “es5” 这样的值来确保 TypeScript 知道 Promise 存在.</p>\n<p>例子tsconfig.json<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"lib\"</span>: [<span class=\"string\">\"dom\"</span>, <span class=\"string\">\"es2015.promise\"</span>, <span class=\"string\">\"es5\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>dramaticWelcome.ts<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">milliseconds: number</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>&lt;<span class=\"keyword\">void</span>&gt;(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(resolve, milliseconds);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dramaticWelcome</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">await</span> delay(<span class=\"number\">500</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\".\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"世界!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dramaticWelcome();</div></pre></td></tr></table></figure></p>\n<p>编译和运行, 在 ES3/ES5 引擎中应该也会有正确的行为.</p>\n<h1 id=\"支持外部工具库-tslib\"><a href=\"#支持外部工具库-tslib\" class=\"headerlink\" title=\"支持外部工具库 (tslib)\"></a>支持外部工具库 (tslib)</h1><p>TypeScript 会注入一些工具函数, 比如用于继承的 <strong>extends, 用于对象字面量与 JSX 元素中展开运算符的 </strong>assign, 以及用于异步函数的 __awaiter.</p>\n<p>过去我们有两个选择:</p>\n<p>在所有需要的文件中注入这些工具函数, 或者<br>使用 –noEmitHelpers 完全不输出工具函数.<br>这两个选项很难满足已有的需求; 在每一个文件中加入这些工具函数对于关心包大小的客户来说是一个痛点. 而不包含工具函数又意味着客户需要维护自己的工具库.</p>\n<p>TypeScript 2.1 允许在你的项目中将这些文件作为单独的模块引用, 而编译器则会在需要的时候导入它们.</p>\n<p>首先, 安装 tslib 工具库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install tslib</div></pre></td></tr></table></figure></p>\n<p>接下来, 使用 –importHelpers 选项编译你的文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tsc --module commonjs --importHelpers a.ts</div></pre></td></tr></table></figure></p>\n<p>所以使用以下作为输入, 输出的 .js 文件就会包含对 tslib 的引入, 并且使用其中的 ___assign 工具函数而不是将它输出在文件中.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> o = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"o\"</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> copy = &#123; ...o &#125;;</div><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> tslib_1 = <span class=\"built_in\">require</span>(<span class=\"string\">\"tslib\"</span>);</div><div class=\"line\">exports.o = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"o\"</span> &#125;;</div><div class=\"line\">exports.copy = tslib_1.__assign(&#123;&#125;, exports.o);</div></pre></td></tr></table></figure></p>\n<h1 id=\"未添加类型的导入\"><a href=\"#未添加类型的导入\" class=\"headerlink\" title=\"未添加类型的导入\"></a>未添加类型的导入</h1><p>TypeScript 过去对于如何导入模块有一些过于严格. 这样的本意是避免拼写错误, 并且帮助用户正确地使用模块.</p>\n<p>然而, 很多时候, 你可能仅仅是想导入一个没有它自己的 .d.ts 文件的现有模块. 之前这是会导致错误. 从 TypeScript 2.1 开始, 则会容易很多.</p>\n<p>使用 TypeScript 2.1, 你可以导入一个 JavaScript 模块而无需类型声明. 类型声明 (比如 declare module “foo” { … } 或者 node_modules/@types/foo) 如果存在的话仍具有更高的优先级.</p>\n<p>对没有声明文件的模块的导入, 在 –noImplicitAny 时仍会被标记为错误.</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果 `node_modules/asdf/index.js` 存在, 或 `node_modules/asdf/package.json` 定义了合法的 \"main\" 入口即可</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; x &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"asdf\"</span>;</div></pre></td></tr></table></figure></p>\n<h1 id=\"对-–target-ES2016-–target-ES2017-及-–target-ESNext-的支持\"><a href=\"#对-–target-ES2016-–target-ES2017-及-–target-ESNext-的支持\" class=\"headerlink\" title=\"对 –target ES2016, –target ES2017 及 –target ESNext 的支持\"></a>对 –target ES2016, –target ES2017 及 –target ESNext 的支持</h1><p>TypeScript 2.1 支持了三个新的目标版本值 –target ES2016, –target ES2017 及 –target ESNext.</p>\n<p>使用目标版本 –target ES2016 会告诉编译器不要对 ES2016 的特性进行转换, 比如 ** 运算符.</p>\n<p>相似的, –target ES2017 会告诉编译器不要转换 ES2017 的特性, 比如 async/await.</p>\n<p>–target ESNext 则对应最新的 ES 提案特性的支持.</p>\n<p>改进的 any 推断</p>\n<p>之前, 如果 TypeScript 不能弄明白一个变量的类型, 它会选择 any 类型.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x;      <span class=\"comment\">// 隐式的 'any'</span></div><div class=\"line\"><span class=\"keyword\">let</span> y = []; <span class=\"comment\">// 隐式的 'any[]'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> z: any; <span class=\"comment\">// 显式的 'any'.</span></div></pre></td></tr></table></figure></p>\n<p>在 TypeScript 2.1 中, 不同于简单地选择 any, TypeScript 会根据之后的赋值推断类型.</p>\n<p>这仅会在 –noImplicitAny 时开启.</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 你仍可以将任何值赋给 'x'.</span></div><div class=\"line\">x = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">42</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在上一次赋值后, TypeScript 2.1 知道 'x' 的类型为 '() =&gt; number'.</span></div><div class=\"line\"><span class=\"keyword\">let</span> y = x();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得益于此, 它现在会告诉你你不能将一个数字和函数相加!</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(x + y);</div><div class=\"line\"><span class=\"comment\">//          ~~~~~</span></div><div class=\"line\"><span class=\"comment\">// 错误! 运算符 '+' 不能被使用在类型 '() =&gt; number' 和 'number' 上.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TypeScript 仍允许你将任何值赋给 'x'</span></div><div class=\"line\">x = <span class=\"string\">\"Hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 但现在它也会知道 'x' 是 'string'!</span></div><div class=\"line\">x.toLowerCase();</div></pre></td></tr></table></figure></p>\n<p>同样的追踪现在对于空数组也会生效.</p>\n<p>一个没有类型标注, 初始值为 [] 的变量声明被认为是一个隐式的 any[] 变量. 不过, 接下来的 x.push(value), x.unshift(value) 或者 x[n] = value 操作将依据添加的元素去演进变量的类型.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> x = [];</div><div class=\"line\">    x.push(<span class=\"number\">5</span>);</div><div class=\"line\">    x[<span class=\"number\">1</span>] = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\">    x.unshift(<span class=\"literal\">true</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> x;  <span class=\"comment\">// (string | number | boolean)[]</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cond()) &#123;</div><div class=\"line\">        x = [];</div><div class=\"line\">        <span class=\"keyword\">while</span> (cond()) &#123;</div><div class=\"line\">            x.push(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> x;  <span class=\"comment\">// string[] | null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"隐式-any-错误\"><a href=\"#隐式-any-错误\" class=\"headerlink\" title=\"隐式 any 错误\"></a>隐式 any 错误</h1><p>这个特性的一大好处就是, 使用 –noImplicitAny 时你会看到的隐式 any 错误会比之前少非常多. 隐式 any 错误仅仅会在编译器不通过类型声明就无法知道变量类型时被报告.</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f3</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> x = [];  <span class=\"comment\">// 错误: 变量 'x' 隐式地有类型 'any[]' 在一些位置的类型无法被确定.</span></div><div class=\"line\">    x.push(<span class=\"number\">5</span>);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        x;    <span class=\"comment\">// 错误: 变量 'x' 隐式地有类型 'any[]'.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"对字面量类型更好的推断\"><a href=\"#对字面量类型更好的推断\" class=\"headerlink\" title=\"对字面量类型更好的推断\"></a>对字面量类型更好的推断</h1><p>字符串, 数字和布尔值字面量类型 (例如 “abc”, 1, 和 true) 在之前仅会在有显式的类型标注时被使用. 从 TypeScript 2.1 开始, 对于 const 变量和 readonly 属性, 字面量类型会始终作为推断的结果.</p>\n<p>对于没有类型标注的 const 变量和 readonly 属性, 推断的类型为字面量初始值的类型. 对于有初始值, 没有类型标注的 let 变量, var 变量, 参数, 或者非 readonly 的属性, 推断的类型为拓宽的字面量初始值的类型. 这里拓宽的类型对于字符串字面量来说是 string, 对于数字字面量是 number, 对于 true 或 false 来说是 boolean, 对于枚举字面量类型则是对应的枚举类型.</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> c1 = <span class=\"number\">1</span>;  <span class=\"comment\">// 类型 1</span></div><div class=\"line\"><span class=\"keyword\">const</span> c2 = c1;  <span class=\"comment\">// 类型 1</span></div><div class=\"line\"><span class=\"keyword\">const</span> c3 = <span class=\"string\">\"abc\"</span>;  <span class=\"comment\">// 类型 \"abc\"</span></div><div class=\"line\"><span class=\"keyword\">const</span> c4 = <span class=\"literal\">true</span>;  <span class=\"comment\">// 类型 true</span></div><div class=\"line\"><span class=\"keyword\">const</span> c5 = cond ? <span class=\"number\">1</span> : <span class=\"string\">\"abc\"</span>;  <span class=\"comment\">// 类型 1 | \"abc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> v1 = <span class=\"number\">1</span>;  <span class=\"comment\">// 类型 number</span></div><div class=\"line\"><span class=\"keyword\">let</span> v2 = c2;  <span class=\"comment\">// 类型 number</span></div><div class=\"line\"><span class=\"keyword\">let</span> v3 = c3;  <span class=\"comment\">// 类型 string</span></div><div class=\"line\"><span class=\"keyword\">let</span> v4 = c4;  <span class=\"comment\">// 类型 boolean</span></div><div class=\"line\"><span class=\"keyword\">let</span> v5 = c5;  <span class=\"comment\">// 类型 number | string</span></div></pre></td></tr></table></figure></p>\n<p>字面量类型的拓宽可以通过显式的类型标注来控制. 具体来说, 当一个有字面量类型的表达式是通过常量位置而不是类型标注被推断时, 这个 const 变量被推断的是待拓宽的字面量类型. 但在 const 位置有显式的类型标注时, const 变量获得的是非待拓宽的字面量类型.</p>\n<p>例子<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> c1 = <span class=\"string\">\"hello\"</span>;  <span class=\"comment\">// 待拓宽类型 \"hello\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> v1 = c1;  <span class=\"comment\">// 类型 string</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> c2: <span class=\"string\">\"hello\"</span> = <span class=\"string\">\"hello\"</span>;  <span class=\"comment\">// 类型 \"hello\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> v2 = c2;  <span class=\"comment\">// 类型 \"hello\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"使用-super-的返回值作为-‘this’\"><a href=\"#使用-super-的返回值作为-‘this’\" class=\"headerlink\" title=\"使用 super 的返回值作为 ‘this’\"></a>使用 super 的返回值作为 ‘this’</h1><p>在 ES2015 中, 返回对象的构造函数会隐式地替换所有 super() 调用者的 this 的值. 这样一来, 捕获 super() 任何潜在的返回值并使用 this 替代则是必要的. 这一项改变使得我们可以配合自定义元素, 而它正是利用了这一特性来初始化浏览器分配, 却是由用户编写了构造函数的元素.</p>\n<p>Example<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    x: number;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 返回一个不同于 `this` 的新对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生成:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Derived = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_super</span>) </span>&#123;</div><div class=\"line\">    __extends(Derived, _super);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Derived</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> _this = _super.call(<span class=\"keyword\">this</span>) || <span class=\"keyword\">this</span>;</div><div class=\"line\">        _this.x = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> _this;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> Derived;</div><div class=\"line\">&#125;(Base));</div></pre></td></tr></table></figure></p>\n<p>这一改变会引起对像 Error, Array, Map 等等的内建类的扩展行为带来不兼容的变化. 请参照扩展内建类型不兼容变化文档了解详情.</p>\n<h1 id=\"配置继承\"><a href=\"#配置继承\" class=\"headerlink\" title=\"配置继承\"></a>配置继承</h1><p>一个项目通常会有多个输出目标, 比如 ES5 和 ES2015, 编译和生产或 CommonJS 和 System; 在这些成对的目标中, 只有少数配置选项会改变, 而维护多个 tsconfig.json 文件可以会比较麻烦.</p>\n<p>TypeScript 2.1 支持通过 extends 来继承配置, 在这儿:</p>\n<p>extends 是 tsconfig.json 中一个新的顶级属性 (同级的还有 compilerOptions, files, include 和 exclude).<br>extends 的值必须为一个包含了到另一个被继承的配置文件的路径的字符串.<br>基文件的配置会先被加载, 然后被继承它的文件内的配置覆盖.<br>配置文件不允许出现循环.<br>继承文件中的 files, include 和 exclude 会覆盖被继承的配置文件中对应的值.<br>所有配置文件中出现的相对路径会相对这些路径所配置文件的路径来解析.<br>例子<br>configs/base.json:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"strictNullChecks\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>tsconfig.json:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"./configs/base\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"files\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"main.ts\"</span>,</div><div class=\"line\">    <span class=\"string\">\"supplemental.ts\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>tsconfig.nostrictnull.json:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"./tsconfig\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"strictNullChecks\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"新-–alwaysStrict-选项\"><a href=\"#新-–alwaysStrict-选项\" class=\"headerlink\" title=\"新 –alwaysStrict 选项\"></a>新 –alwaysStrict 选项</h1><p>使用 –alwaysStrict 来启动编译器会使:</p>\n<p>所有代码以严格模式进行解析.<br>在所有生成文件的顶部输出 “use strict”; 指令.<br>模块会自动以严格模式进行解析. 对于非模块代码推荐使用该新选项.</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487207761603,
				"created_by": 2,
				"updated_at": 1487207763058,
				"updated_by": 2,
				"published_at": 1487207761603,
				"published_by": 2
			},
			{
				"id": "ciyz9rjy60000xgfc9bo920zx",
				"title": "Vue开发中的常见问题2",
				"slug": "vue-com-pro",
				"markdown": "# vue2.x\n\n## 独立构建vs运行时构建\n\n在按照vue1.0的配置配置好webpack后，会出现Failed to mount component: template or render function not defined. (found in root instance)的错误，这里涉及到vue2.0与vue1.0的第一个不同的地方。具体区别独立构建 vs 运行时构建。解决方法为在webpack配置文件中添加如下配置项：\n<!--more-->\n```js\nresolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.common.js'\n  }\n}\n```\n## 挂载点的选择\n\n在原来的vue1.0的项目中我使用body元素作为挂载点，但是在vue2.0中，如果使用body或者html作为挂载点，则会报以下警告：Do not mount Vue to <html> or <body> - mount to normal elements instead.\n\n在vue1.0中允许开发者以body或者html作为根实体的挂载点，但是到了2.0后，只能通过独立的节点挂载，例如：div等，否则报警告\n3.动态组件渲染（跟1.x类似）\n\n多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 元素，动态地绑定到它的 is 特性：\n```html\n<!-- 动态组件由 vm 实例的属性值 `componentId` 控制 -->\n<component :is=\"componentId\"></component>\n<!-- 也能够渲染注册过的组件或 prop 传入的组件 -->\n<component :is=\"$options.components.child\"></component>\n```\n## keep-alive\n\n如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数：\n\n```html\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n## ref\n\n有时候需要直接在父组件中访问子组件实例，或者直接操作DOM元素，此时需要使用ref。\n\nref被用来给元素或子元素注册引用信息。引用信息会根据父组件的$refs对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素，如果用在子组件上，引用信息就是组件实例。\n\n```html\n<!-- vm.$refs.p will be the DOM node -->\n<p ref=\"p\">hello</p>\n<!-- vm.$refs.child will be the child comp instance -->\n<child-comp ref=\"child\"></child-comp>\n```\n当 v-for 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例数组。\n\n关于ref注册时间的重要说明: 因为ref本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模版中做数据绑定。\n\n## 自定义事件\n\n在vue自定义事件使用$on与$emit，前者用于触发监听，后者用于触发，监听可以有两种方式\n\n```html\n<!--使用v-on在html中监听-->\n<my-component v-on:test=\"callbackFun\"></my-component>\n<script>\n  //直接用$on监听\n  vm.$on('text',function(){})\n</script>\n```\n## 组件命名的约定\n\n当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase\n\n```js\n// 在组件定义中\ncomponents: {\n  // 使用 kebab-case 形式注册\n  'kebab-cased-component': { /* ... */ },\n  // register using camelCase\n  'camelCasedComponent': { /* ... */ },\n  // register using TitleCase\n  'TitleCasedComponent': { /* ... */ }\n}\n```\n在 HTML 模版中，只能使用 kebab-case 形式：\n\n```html\n<!-- 在HTML模版中始终使用 kebab-case -->\n<kebab-cased-component></kebab-cased-component>\n<camel-cased-component></camel-cased-component>\n<title-cased-component></title-cased-component>\n```\n当使用字符串模式时可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：\n\n```html\n<!-- 在字符串模版中可以用任何你喜欢的方式! -->\n<my-component></my-component>\n<myComponent></myComponent>\n<MyComponent></MyComponent>\n```\n## 子组件中使用this\n\n有时候子组件简单，可以在父组件中直接注册，此时在子组件内使用this就是子组件实例并不是父组件，例如：\n```js\nexport default{\n    data(){\n        return{\n            parentMsg:'hello!'\n        }\n    },\n    components:{\n        child:{\n            props:['inputMessage'],\n            template:'<span>{{inputMessage}}</span>'\n        },\n        'child-secound':{\n            props:['inputMessage'],\n            template:'<span>{{upperCase}}</span>',\n            computed:{\n                upperCase(){\n                    return this.inputMessage.toUpperCase();\n                }\n            }    \n        }\n    }\n}\n```\n## key的使用\n\n一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用key关键字，使用v-bind绑定key关键字，可以实现在数据发生变化时候重新渲染整个元素。注：同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的key\n\n## v-move的使用\n\n在使用<transition-group>时候，不仅可以定义进入离开动画，还可以使用新增的v-move特性，与过渡一样，默认为v-move，可以用name进行自定义前缀，也可以用move-class属性手动设定。用了这个之后就可以实现移动过程中的动画。\n\n## 跳过css检测\n\n对于只使用js过度的元素使用v-bind:css=\"false\"跳过vue对css的检测。\n\n## render函数的使用\n\ncreateElement接受三个参数：\n\n{String | Object | Function}即一个HTML标签 | 组件选项 | 一个函数，必须返回上述其中一个\n\n{Object}一个对应HTML标签属性的数据对象（可选）\n\n{String | Array}子节点（VNode）（可选）\n\n⚠️ 关于第三个参数的说明\n\ncreateElement第三个参数，如果是String，则类似于innerHTML，如果是Array，则可以写入一个执行函数，这个函数用于创建另一个DOM结构（而且这里如果想写入一个执行函数，必须是数组！！）\n每个createElement只能创建一个元素，所以如果是创建多个元素相互嵌套，需要多个createElement函数相互嵌套，最后再render，这个跟原生js创建DOM元素类似\n如果需要同时渲染多个元素，则需要在第三个参数的数组中，分别写入需要渲染的元素，此时Vue会按照数组中顺序进行渲染\n完整数据对象：\n\n```json\n{\n  // 和`v-bind:class`一样的 API\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // 和`v-bind:style`一样的 API\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // 正常的 HTML 特性\n  attrs: {\n    id: 'foo'\n  },\n  // 组件 props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM 属性\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // 事件监听器基于 \"on\"\n  // 所以不再支持如 v-on:keyup.enter 修饰器\n  // 需要手动匹配 keyCode。\n  on: {\n    click: this.clickHandler\n  },\n  // 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // 自定义指令. 注意事项：不能对绑定的旧值设值\n  // Vue 会为您持续追踨\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // Scoped slots in the form of\n  // { name: props => VNode | Array<VNode> }\n  scopedSlots: {\n    default: props => h('span', props.text)\n  },\n  // 如果子组件有定义 slot 的名称\n  slot: 'name-of-slot'\n  // 其他特殊顶层属性\n  key: 'myKey',\n  ref: 'myRef'\n}\n```\n# vue-router2.x\n\n## router-view\n\n在vue-router2中<router-view>是最顶层的出口，渲染最高级路由匹配到组件。同样地，一个被渲染组件同样可以包含自己的嵌套<router-view>。\n\n## 挂载\n\n在router1.0中，挂载节点的方式为router.start()而在router2.0中使用vue自己的$mount手动挂载\n\n## 给link添加事件\n\n在vue-router1中使用v-link写入路由，但是在vue-router2中要使用router-link写入路由，在浏览器渲染的时候会把router-link渲染成a。\n\n有时候需要为router-link注册事件，对于一般的html元素，直接使用@click=\"eventFun\"即可，但是对于router-link，像普通html元素那样注册事件后并不管用，需要添加.native才会成功注册。\n\n事实上给组件绑定原生事件就需要.native修饰v-on，否则无法注册成功。\n```html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n## 利用vue-router做导航\n\n在利用vue-router做导航的时候，需要用到redirect关键字的重定向功能，具体写法如下：\n```js\nconst router = new VueRouter({\n    routes : [\n        {path:'/',redirect:'/ZY'},\n        {path:'/ZY',component:ZY}\n    ]\n});\n```\n## 路由嵌套\n\nvue-router的路由嵌套指的是子组件会在父组件中渲染出来，必须是子组件的父组件，祖先不可以实现，例如：\n\n```bash\n/user/foo/profile                     /user/foo/posts\n+------------------+                  +-----------------+\n| User             |                  | User            |\n| +--------------+ |                  | +-------------+ |\n| | Profile      | |  +------------>  | | Posts       | |\n| |              | |                  | |             | |\n| +--------------+ |                  | +-------------+ |\n+------------------+                  +-----------------+\n```",
				"html": "<h1 id=\"vue2-x\"><a href=\"#vue2-x\" class=\"headerlink\" title=\"vue2.x\"></a>vue2.x</h1><h2 id=\"独立构建vs运行时构建\"><a href=\"#独立构建vs运行时构建\" class=\"headerlink\" title=\"独立构建vs运行时构建\"></a>独立构建vs运行时构建</h2><p>在按照vue1.0的配置配置好webpack后，会出现Failed to mount component: template or render function not defined. (found in root instance)的错误，这里涉及到vue2.0与vue1.0的第一个不同的地方。具体区别独立构建 vs 运行时构建。解决方法为在webpack配置文件中添加如下配置项：<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  <span class=\"attr\">alias</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.common.js'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"挂载点的选择\"><a href=\"#挂载点的选择\" class=\"headerlink\" title=\"挂载点的选择\"></a>挂载点的选择</h2><p>在原来的vue1.0的项目中我使用body元素作为挂载点，但是在vue2.0中，如果使用body或者html作为挂载点，则会报以下警告：Do not mount Vue to <html> or <body> - mount to normal elements instead.</body></html></p>\n<p>在vue1.0中允许开发者以body或者html作为根实体的挂载点，但是到了2.0后，只能通过独立的节点挂载，例如：div等，否则报警告<br>3.动态组件渲染（跟1.x类似）</p>\n<p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 元素，动态地绑定到它的 is 特性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 也能够渲染注册过的组件或 prop 传入的组件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 非活动组件将被缓存！ --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p>有时候需要直接在父组件中访问子组件实例，或者直接操作DOM元素，此时需要使用ref。</p>\n<p>ref被用来给元素或子元素注册引用信息。引用信息会根据父组件的$refs对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素，如果用在子组件上，引用信息就是组件实例。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当 v-for 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例数组。</p>\n<p>关于ref注册时间的重要说明: 因为ref本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模版中做数据绑定。</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><p>在vue自定义事件使用$on与$emit，前者用于触发监听，后者用于触发，监听可以有两种方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--使用v-on在html中监听--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:test</span>=<span class=\"string\">\"callbackFun\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  <span class=\"comment\">//直接用$on监听</span></div><div class=\"line\">  vm.$on(<span class=\"string\">'text'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"组件命名的约定\"><a href=\"#组件命名的约定\" class=\"headerlink\" title=\"组件命名的约定\"></a>组件命名的约定</h2><p>当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在组件定义中</span></div><div class=\"line\">components: &#123;</div><div class=\"line\">  <span class=\"comment\">// 使用 kebab-case 形式注册</span></div><div class=\"line\">  <span class=\"string\">'kebab-cased-component'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">  <span class=\"comment\">// register using camelCase</span></div><div class=\"line\">  <span class=\"string\">'camelCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">  <span class=\"comment\">// register using TitleCase</span></div><div class=\"line\">  <span class=\"string\">'TitleCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 HTML 模版中，只能使用 kebab-case 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 在HTML模版中始终使用 kebab-case --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kebab-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">kebab-cased-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">camel-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">camel-cased-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title-cased-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当使用字符串模式时可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 在字符串模版中可以用任何你喜欢的方式! --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">myComponent</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"子组件中使用this\"><a href=\"#子组件中使用this\" class=\"headerlink\" title=\"子组件中使用this\"></a>子组件中使用this</h2><p>有时候子组件简单，可以在父组件中直接注册，此时在子组件内使用this就是子组件实例并不是父组件，例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</div><div class=\"line\">    data()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">            <span class=\"attr\">parentMsg</span>:<span class=\"string\">'hello!'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">components</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">child</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">props</span>:[<span class=\"string\">'inputMessage'</span>],</div><div class=\"line\">            <span class=\"attr\">template</span>:<span class=\"string\">'&lt;span&gt;&#123;&#123;inputMessage&#125;&#125;&lt;/span&gt;'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'child-secound'</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">props</span>:[<span class=\"string\">'inputMessage'</span>],</div><div class=\"line\">            <span class=\"attr\">template</span>:<span class=\"string\">'&lt;span&gt;&#123;&#123;upperCase&#125;&#125;&lt;/span&gt;'</span>,</div><div class=\"line\">            <span class=\"attr\">computed</span>:&#123;</div><div class=\"line\">                upperCase()&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inputMessage.toUpperCase();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;    </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"key的使用\"><a href=\"#key的使用\" class=\"headerlink\" title=\"key的使用\"></a>key的使用</h2><p>一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用key关键字，使用v-bind绑定key关键字，可以实现在数据发生变化时候重新渲染整个元素。注：同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的key</p>\n<h2 id=\"v-move的使用\"><a href=\"#v-move的使用\" class=\"headerlink\" title=\"v-move的使用\"></a>v-move的使用</h2><p>在使用<transition-group>时候，不仅可以定义进入离开动画，还可以使用新增的v-move特性，与过渡一样，默认为v-move，可以用name进行自定义前缀，也可以用move-class属性手动设定。用了这个之后就可以实现移动过程中的动画。</transition-group></p>\n<h2 id=\"跳过css检测\"><a href=\"#跳过css检测\" class=\"headerlink\" title=\"跳过css检测\"></a>跳过css检测</h2><p>对于只使用js过度的元素使用v-bind:css=”false”跳过vue对css的检测。</p>\n<h2 id=\"render函数的使用\"><a href=\"#render函数的使用\" class=\"headerlink\" title=\"render函数的使用\"></a>render函数的使用</h2><p>createElement接受三个参数：</p>\n<p>{String | Object | Function}即一个HTML标签 | 组件选项 | 一个函数，必须返回上述其中一个</p>\n<p>{Object}一个对应HTML标签属性的数据对象（可选）</p>\n<p>{String | Array}子节点（VNode）（可选）</p>\n<p>⚠️ 关于第三个参数的说明</p>\n<p>createElement第三个参数，如果是String，则类似于innerHTML，如果是Array，则可以写入一个执行函数，这个函数用于创建另一个DOM结构（而且这里如果想写入一个执行函数，必须是数组！！）<br>每个createElement只能创建一个元素，所以如果是创建多个元素相互嵌套，需要多个createElement函数相互嵌套，最后再render，这个跟原生js创建DOM元素类似<br>如果需要同时渲染多个元素，则需要在第三个参数的数组中，分别写入需要渲染的元素，此时Vue会按照数组中顺序进行渲染<br>完整数据对象：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  // 和`v-bind:class`一样的 API</div><div class=\"line\">  'class': &#123;</div><div class=\"line\">    foo: true,</div><div class=\"line\">    bar: false</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 和`v-bind:style`一样的 API</div><div class=\"line\">  style: &#123;</div><div class=\"line\">    color: 'red',</div><div class=\"line\">    fontSize: '14px'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 正常的 HTML 特性</div><div class=\"line\">  attrs: &#123;</div><div class=\"line\">    id: 'foo'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 组件 props</div><div class=\"line\">  props: &#123;</div><div class=\"line\">    myProp: 'bar'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // DOM 属性</div><div class=\"line\">  domProps: &#123;</div><div class=\"line\">    innerHTML: 'baz'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 事件监听器基于 \"on\"</div><div class=\"line\">  // 所以不再支持如 v-on:keyup.enter 修饰器</div><div class=\"line\">  // 需要手动匹配 keyCode。</div><div class=\"line\">  on: &#123;</div><div class=\"line\">    click: this.clickHandler</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。</div><div class=\"line\">  nativeOn: &#123;</div><div class=\"line\">    click: this.nativeClickHandler</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 自定义指令. 注意事项：不能对绑定的旧值设值</div><div class=\"line\">  // Vue 会为您持续追踨</div><div class=\"line\">  directives: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      name: 'my-custom-directive',</div><div class=\"line\">      value: '2'</div><div class=\"line\">      expression: '1 + 1',</div><div class=\"line\">      arg: 'foo',</div><div class=\"line\">      modifiers: &#123;</div><div class=\"line\">        bar: true</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  // Scoped slots in the form of</div><div class=\"line\">  // &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</div><div class=\"line\">  scopedSlots: &#123;</div><div class=\"line\">    default: props =&gt; h('span', props.text)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 如果子组件有定义 slot 的名称</div><div class=\"line\">  slot: 'name-of-slot'</div><div class=\"line\">  // 其他特殊顶层属性</div><div class=\"line\">  key: 'myKey',</div><div class=\"line\">  ref: 'myRef'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"vue-router2-x\"><a href=\"#vue-router2-x\" class=\"headerlink\" title=\"vue-router2.x\"></a>vue-router2.x</h1><h2 id=\"router-view\"><a href=\"#router-view\" class=\"headerlink\" title=\"router-view\"></a>router-view</h2><p>在vue-router2中<router-view>是最顶层的出口，渲染最高级路由匹配到组件。同样地，一个被渲染组件同样可以包含自己的嵌套<router-view>。</router-view></router-view></p>\n<h2 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h2><p>在router1.0中，挂载节点的方式为router.start()而在router2.0中使用vue自己的$mount手动挂载</p>\n<h2 id=\"给link添加事件\"><a href=\"#给link添加事件\" class=\"headerlink\" title=\"给link添加事件\"></a>给link添加事件</h2><p>在vue-router1中使用v-link写入路由，但是在vue-router2中要使用router-link写入路由，在浏览器渲染的时候会把router-link渲染成a。</p>\n<p>有时候需要为router-link注册事件，对于一般的html元素，直接使用@click=”eventFun”即可，但是对于router-link，像普通html元素那样注册事件后并不管用，需要添加.native才会成功注册。</p>\n<p>事实上给组件绑定原生事件就需要.native修饰v-on，否则无法注册成功。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"利用vue-router做导航\"><a href=\"#利用vue-router做导航\" class=\"headerlink\" title=\"利用vue-router做导航\"></a>利用vue-router做导航</h2><p>在利用vue-router做导航的时候，需要用到redirect关键字的重定向功能，具体写法如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">    <span class=\"attr\">routes</span> : [</div><div class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/'</span>,<span class=\"attr\">redirect</span>:<span class=\"string\">'/ZY'</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/ZY'</span>,<span class=\"attr\">component</span>:ZY&#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h2><p>vue-router的路由嵌套指的是子组件会在父组件中渲染出来，必须是子组件的父组件，祖先不可以实现，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/user/foo/profile                     /user/foo/posts</div><div class=\"line\">+------------------+                  +-----------------+</div><div class=\"line\">| User             |                  | User            |</div><div class=\"line\">| +--------------+ |                  | +-------------+ |</div><div class=\"line\">| | Profile      | |  +------------&gt;  | | Posts       | |</div><div class=\"line\">| |              | |                  | |             | |</div><div class=\"line\">| +--------------+ |                  | +-------------+ |</div><div class=\"line\">+------------------+                  +-----------------+</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1486698261935,
				"created_by": 2,
				"updated_at": 1486698468165,
				"updated_by": 2,
				"published_at": 1486698261935,
				"published_by": 2
			},
			{
				"id": "ciyz91o9p0000ywfcnv1lt5u8",
				"title": "vue开发中的常见问题",
				"slug": "vue-common-problem",
				"markdown": "\n最近在学习vue的过程中，这里做一下总结：\n\n# eslint静态检查\n\n在大家用vue-cli创建工程的时候，会有一项，使用使用eslint，如果选择了y，那么工程就会安装并启用eslint。\n\n<!--more-->\n\n这里列举一下常见的错误：\n\n1.多余的分号\n![](http://img0.tuicool.com/bmqqMrB.png)\n2.定义了却未使用的变量\n![](http://img0.tuicool.com/AVbu2eB.png)\n\n3.结尾多余空格\n![](http://img1.tuicool.com/NFjAzae.png)\n\n4.超过一行的空行\n![](http://img1.tuicool.com/rYVFv2.png)\n\n5.代码尾行应该有空行\n![](http://img1.tuicool.com/m2yUri.png)\n\n错误肯定是列举不完的，那么提示错误的时候，我们应该先去看提示信息（翻译），如果发现没有错误，可以对照 eslint的官方文档\n\n在大家适应了eslint的写法后，效率和正确率会直线上升，这里安利下我的另一篇文章， 提升效率的eslint+vscode的开发环境搭建\n\n# this指向\n\n经常会有朋友问一些undifined的错误，比如：\n```js\n<script>\nimport Hello from './components/Hello'\n\nexport default {\n  data () {\n    return {\n      list: ['a', 'b', 'c'],\n      idx: 0,\n      current: ''\n    }\n  },\n  methods: {\n    iter () {\n      this.list.map(function (v, k) {\n        if (k === this.idx) {\n          this.current = v\n\n          console.log(this.current)\n        }\n      })\n    }\n  },\n  components: {\n    Hello\n  }\n}\n</script>\n```\n这是刚创建的工程，我们定义了list，idx和current，在执行iter方法时，我们就给current赋值以idx为下标的值，当我们执行后会发现，浏览器报了一个错误\n\n\n这么回事，我们不是定义了idx了吗？\n\n其实是因为我们在map里的this是指向当前map的迭代对象，而非我们vue的实例，所以this里没有我们需要的idx。\n\n解决方式有两种，其一是通过保存this\n```js\nlet _this = this\n```\n其二是使用es6箭头函数\n```js\nmethods: {\n    iter () {\n      this.list.map((v, k) => {\n        if (k === this.idx) {\n          this.current = v\n\n          console.log(this.current)\n        }\n      })\n    }\n  },\n```\n现在再看我们的浏览器\n\n\n已经可以达到我们预期的效果了！\n\n# 方法传值\n\n我们在input中的方法希望获取input的value，怎么获取呢？\n\n可以通过$event这个对象，通过将$event传入方法\n```html\n<input type=\"text\" value=\"value\" @input=\"change($event)\"/>\n```\n我们可以成功的拿到我们希望的值\n```js\nchange (e) {\n  console.log(e.target.value)\n  this.value = e.target.value\n}\n```\n# 迭代判断\n\n比如我们有一个列表，我们希望能显示我们当前选中的那一个，如何实现呢？\n\n基本思路是通过$index来判断是否是当前迭代对象，然后去增减class或者style来实现不同的样式\n```js\n<ul>\n\n  <!-- 方法1 class-->\n  <li v-for=\"item in list\" :class=\"{'active': $index === activeId}\">{item}</li>\n\n  <!-- 方法2 style-->\n  <li v-for=\"item in list\" :style=\"{backgroundColor: $index === activeId ? 'red' : 'white'}\">{item}</li>\n</ul>\ndata () {\n  return {\n    list: ['a', 'b', 'c'],\n    activeId: 0\n  }\n},\n```\n# camelCase vs. kebab-case\n\nHTML 特性不区分大小写。名字形式为 camelCase 的 prop 用作特性时，需要转为 kebab-case（短横线隔开）(官网例子)\n```js\nVue.component('child', {\n  // camelCase in JavaScript\n  props: ['myMessage'],\n  template: '<span>{ myMessage }</span>'\n})\n\n<!-- kebab-case in HTML -->\n<child my-message=\"hello!\"></child>\n```\n# 另外props的写法\n\n## 简写\n```js\nprops: ['demo-first', 'demo-second']\n```\n## 带类型\n```js\nprops: {\n    'demo-first': Number,\n    'demo-second': Number\n}\n```\n## 带多种检查\n```js\nprops: {\n    'demo-first': {\n        type: Number,\n        default: 0\n    }\n}\n```\n所以， 当你获取不到props的值的时候，可以先仔细检查拼写是否正确。\n\n## 传值与传字面量\n\n在vue的组件中传递数据，如果是单纯传递字面量，如\n```html\n<hello result=\"success\"></hello>\n```\n那么在hello中获取的props result的值就是“success”，如果希望进行值传递，需要在指令前加 ':' 冒号，这样，父层的success的值改变，hello的值也会跟着改变。\n\n# 转场动画\n\n在vue中有个很好用的指令，transition，通过它我们可以实现自定义的router切换中的动画\n\n方法就是在\n```html\n<router-view transition=\"fade\"></router-view>\n```\n加入自定义的class fade-transition , fade-leave , fade-enter即可。\n\n# 数据驱动 vs dom\n\nvue是基于数据驱动的，最好不要直接去修改dom（虽然官方给出了这样的方法）\n\n# v-cloak\n\n如果出现{}的短暂出现的情况，可以通过添加v-cloak来处理。\n\n这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。",
				"html": "<p>最近在学习vue的过程中，这里做一下总结：</p>\n<h1 id=\"eslint静态检查\"><a href=\"#eslint静态检查\" class=\"headerlink\" title=\"eslint静态检查\"></a>eslint静态检查</h1><p>在大家用vue-cli创建工程的时候，会有一项，使用使用eslint，如果选择了y，那么工程就会安装并启用eslint。</p>\n<a id=\"more\"></a>\n<p>这里列举一下常见的错误：</p>\n<p>1.多余的分号<br><img src=\"http://img0.tuicool.com/bmqqMrB.png\" alt=\"\"><br>2.定义了却未使用的变量<br><img src=\"http://img0.tuicool.com/AVbu2eB.png\" alt=\"\"></p>\n<p>3.结尾多余空格<br><img src=\"http://img1.tuicool.com/NFjAzae.png\" alt=\"\"></p>\n<p>4.超过一行的空行<br><img src=\"http://img1.tuicool.com/rYVFv2.png\" alt=\"\"></p>\n<p>5.代码尾行应该有空行<br><img src=\"http://img1.tuicool.com/m2yUri.png\" alt=\"\"></p>\n<p>错误肯定是列举不完的，那么提示错误的时候，我们应该先去看提示信息（翻译），如果发现没有错误，可以对照 eslint的官方文档</p>\n<p>在大家适应了eslint的写法后，效率和正确率会直线上升，这里安利下我的另一篇文章， 提升效率的eslint+vscode的开发环境搭建</p>\n<h1 id=\"this指向\"><a href=\"#this指向\" class=\"headerlink\" title=\"this指向\"></a>this指向</h1><p>经常会有朋友问一些undifined的错误，比如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./components/Hello'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">list</span>: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>],</div><div class=\"line\">      <span class=\"attr\">idx</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">current</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    iter () &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.list.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v, k</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k === <span class=\"keyword\">this</span>.idx) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.current = v</div><div class=\"line\"></div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.current)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    Hello</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这是刚创建的工程，我们定义了list，idx和current，在执行iter方法时，我们就给current赋值以idx为下标的值，当我们执行后会发现，浏览器报了一个错误</p>\n<p>这么回事，我们不是定义了idx了吗？</p>\n<p>其实是因为我们在map里的this是指向当前map的迭代对象，而非我们vue的实例，所以this里没有我们需要的idx。</p>\n<p>解决方式有两种，其一是通过保存this<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span></div></pre></td></tr></table></figure></p>\n<p>其二是使用es6箭头函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">    iter () &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.list.map(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k === <span class=\"keyword\">this</span>.idx) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.current = v</div><div class=\"line\"></div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.current)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure></p>\n<p>现在再看我们的浏览器</p>\n<p>已经可以达到我们预期的效果了！</p>\n<h1 id=\"方法传值\"><a href=\"#方法传值\" class=\"headerlink\" title=\"方法传值\"></a>方法传值</h1><p>我们在input中的方法希望获取input的value，怎么获取呢？</p>\n<p>可以通过$event这个对象，通过将$event传入方法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"value\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"change($event)\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们可以成功的拿到我们希望的值<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">change (e) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.value)</div><div class=\"line\">  <span class=\"keyword\">this</span>.value = e.target.value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"迭代判断\"><a href=\"#迭代判断\" class=\"headerlink\" title=\"迭代判断\"></a>迭代判断</h1><p>比如我们有一个列表，我们希望能显示我们当前选中的那一个，如何实现呢？</p>\n<p>基本思路是通过$index来判断是否是当前迭代对象，然后去增减class或者style来实现不同的样式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"xml\"><span class=\"comment\">&lt;!-- 方法1 class--&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'active': $index === activeId&#125;\"</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 方法2 style--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123;backgroundColor: $index === activeId ? 'red' : 'white'&#125;\"</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">data () &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>],</div><div class=\"line\">    <span class=\"attr\">activeId</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h1 id=\"camelCase-vs-kebab-case\"><a href=\"#camelCase-vs-kebab-case\" class=\"headerlink\" title=\"camelCase vs. kebab-case\"></a>camelCase vs. kebab-case</h1><p>HTML 特性不区分大小写。名字形式为 camelCase 的 prop 用作特性时，需要转为 kebab-case（短横线隔开）(官网例子)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// camelCase in JavaScript</span></div><div class=\"line\">  props: [<span class=\"string\">'myMessage'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;span&gt;&#123; myMessage &#125;&lt;/span&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">&lt;!-- kebab-<span class=\"keyword\">case</span> <span class=\"keyword\">in</span> HTML --&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">my-message</span>=<span class=\"string\">\"hello!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"另外props的写法\"><a href=\"#另外props的写法\" class=\"headerlink\" title=\"另外props的写法\"></a>另外props的写法</h1><h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: [<span class=\"string\">'demo-first'</span>, <span class=\"string\">'demo-second'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"带类型\"><a href=\"#带类型\" class=\"headerlink\" title=\"带类型\"></a>带类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: &#123;</div><div class=\"line\">    <span class=\"string\">'demo-first'</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"string\">'demo-second'</span>: <span class=\"built_in\">Number</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"带多种检查\"><a href=\"#带多种检查\" class=\"headerlink\" title=\"带多种检查\"></a>带多种检查</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">props: &#123;</div><div class=\"line\">    <span class=\"string\">'demo-first'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">        <span class=\"attr\">default</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以， 当你获取不到props的值的时候，可以先仔细检查拼写是否正确。</p>\n<h2 id=\"传值与传字面量\"><a href=\"#传值与传字面量\" class=\"headerlink\" title=\"传值与传字面量\"></a>传值与传字面量</h2><p>在vue的组件中传递数据，如果是单纯传递字面量，如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello</span> <span class=\"attr\">result</span>=<span class=\"string\">\"success\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>那么在hello中获取的props result的值就是“success”，如果希望进行值传递，需要在指令前加 ‘:’ 冒号，这样，父层的success的值改变，hello的值也会跟着改变。</p>\n<h1 id=\"转场动画\"><a href=\"#转场动画\" class=\"headerlink\" title=\"转场动画\"></a>转场动画</h1><p>在vue中有个很好用的指令，transition，通过它我们可以实现自定义的router切换中的动画</p>\n<p>方法就是在<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>加入自定义的class fade-transition , fade-leave , fade-enter即可。</p>\n<h1 id=\"数据驱动-vs-dom\"><a href=\"#数据驱动-vs-dom\" class=\"headerlink\" title=\"数据驱动 vs dom\"></a>数据驱动 vs dom</h1><p>vue是基于数据驱动的，最好不要直接去修改dom（虽然官方给出了这样的方法）</p>\n<h1 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h1><p>如果出现{}的短暂出现的情况，可以通过添加v-cloak来处理。</p>\n<p>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1486696755158,
				"created_by": 2,
				"updated_at": 1486697945696,
				"updated_by": 2,
				"published_at": 1486696755158,
				"published_by": 2
			},
			{
				"id": "ciypf96ta0000wcfcgvux0w5m",
				"title": "JavaScript Date 格式化 以及 本周本月的获取",
				"slug": "js-date-format",
				"markdown": "\n获取本周第一天和最后一天，Date获取本月第一天和最后一天。\n\n#  Date 的主要使用----单独取值\n```js\nDate() //------返回当日的日期和时间。\ngetDate() //---从 Date 对象返回一个月中的某一天 (1 ~ 31)。\ngetDay() //----从 Date 对象返回一周中的某一天 (0 ~ 6)。\ngetMonth()//---从 Date 对象返回月份 (0 ~ 11)。\ngetFullYear()//从 Date 对象以四位数字返回年份。\ngetYear()//----请使用 getFullYear() 方法代替。\ngetHours()//---返回 Date 对象的小时 (0 ~ 23)。\ngetMinutes()// -返回 Date 对象的分钟 (0 ~ 59)。\ngetSeconds()//-返回 Date 对象的秒数 (0 ~ 59)。\ngetMilliseconds()//返回 Date 对象的毫秒(0 ~ 999)。\ngetTime()//-----返回 1970 年 1 月 1 日至今的毫秒数。\n```\n<!--more-->\n#  Date 的主要使用----赋值\n```js\nsetDate()//-----设置 Date 对象中月的某一天 (1 ~ 31)。\nsetMonth()//----设置 Date 对象中月份 (0 ~ 11)。\nsetFullYear()//-设置 Date 对象中的年份（四位数字）。\nsetYear()//-----请使用 setFullYear() 方法代替。\nsetHours()//----设置 Date 对象中的小时 (0 ~ 23)。\nsetMinutes()//--设置 Date 对象中的分钟 (0 ~ 59)。\nsetSeconds()//--设置 Date 对象中的秒钟 (0 ~ 59)。\nsetMilliseconds()//设置 Date 对象中的毫秒 (0 ~ 999)。\nsetTime()//------以毫秒设置 Date 对象。\n```\n#  Date 的主要使用----格式化值\n```js\ntoString()//-----把 Date 对象转换为字符串。没多大意义\ntoTimeString()//-把 Date 对象的时间部分转换为字符串。标准格式，没多大意义\ntoDateString()//-把 Date 对象的日期部分转换为字符串。标准格式，没多大意义\ntoUTCString()//-根据世界时，把 Date 对象转换为字符串。\ntoLocaleString()//根据本地时间格式，把 Date 对象转换为字符串。\ntoLocaleTimeString()//根据本地时间格式，把 Date 对象的时间部分转换为字符串。当然是按照格式来的，不过不能自定义格式\ntoLocaleDateString()//根据本地时间格式，把 Date 对象的日期部分转换为字符串。 当然是按照格式来的，不过不能自定义格式\nd.valueOf()//----返回的是定义时的值，没多大意义，如果使用new Date（）那么返回毫秒数，等价于getTime（）\n```\n#  Date 的格式化函数，简单格式化\n```js\n// 对Date的扩展，将 Date 转化为指定格式的String\n// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，\n// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\n// 例子：\n// (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\n// (new Date()).Format(\"yyyy-M-d h:m:s.S\")      ==> 2006-7-2 8:9:4.18\nDate.prototype.format = function(fmt){\n//author: meizz\n  var o = {\n    \"M+\" : this.getMonth()+1,                 //月份\n    \"d+\" : this.getDate(),                    //日\n    \"h+\" : this.getHours(),                   //小时\n    \"m+\" : this.getMinutes(),                 //分\n    \"s+\" : this.getSeconds(),                 //秒\n    \"q+\" : Math.floor((this.getMonth()+3)/3), //季度\n    \"S\"  : this.getMilliseconds()             //毫秒\n  };\n  if(/(y+)/.test(fmt))\n    fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length));\n  for(var k in o)\n    if(new RegExp(\"(\"+ k +\")\").test(fmt))\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ?\n                     (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n return fmt;\n}\n// 示例代码\nvar today = new Date().format('yyyy-MM-dd hh:mm:ss.S');\nconsole.info(today);\n```\n#  Date 获取本月第一天 最后一天 ，本周第一天 最后一天\n```js\n/**\n * 本周第一天\n */\nfunction showWeekFirstDay()\n {\n     var Nowdate=new Date();\n     var WeekFirstDay=new Date(Nowdate-(Nowdate.getDay()-1)*86400000);\n     return WeekFirstDay.format('yyyy-MM-dd hh:mm:ss.S')\n }\n /**\n  * 本周最后一天\n  */\n function showWeekLastDay()\n {\n     var Nowdate=new Date();\n     var WeekFirstDay=new Date(Nowdate-(Nowdate.getDay()-1)*86400000);\n     var WeekLastDay=new Date((WeekFirstDay/1000+6*86400)*1000);\n     return WeekLastDay.format('yyyy-MM-dd hh:mm:ss.S')\n }\n /**\n  * 本月第一天\n  */\n function showMonthFirstDay()\n {\n     var Nowdate=new Date();\n     var MonthFirstDay=new Date(Nowdate.getFullYear(),Nowdate.getMonth(),1);\n     return MonthFirstDay.format('yyyy-M-d hh:mm:ss.S')\n }\n /**\n  * 本月最后一天\n  */\n function showMonthLastDay()\n {\n     var Nowdate=new Date();\n     var MonthNextFirstDay=new Date(Nowdate.getFullYear(),Nowdate.getMonth()+1,1);\n     var MonthLastDay=new Date(MonthNextFirstDay-86400000);\n     return MonthLastDay.format('yyyy-MM-dd hh:mm:ss.S')\n }\n ```",
				"html": "<p>获取本周第一天和最后一天，Date获取本月第一天和最后一天。</p>\n<h1 id=\"Date-的主要使用—-单独取值\"><a href=\"#Date-的主要使用—-单独取值\" class=\"headerlink\" title=\"Date 的主要使用—-单独取值\"></a>Date 的主要使用—-单独取值</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span>() <span class=\"comment\">//------返回当日的日期和时间。</span></div><div class=\"line\">getDate() <span class=\"comment\">//---从 Date 对象返回一个月中的某一天 (1 ~ 31)。</span></div><div class=\"line\">getDay() <span class=\"comment\">//----从 Date 对象返回一周中的某一天 (0 ~ 6)。</span></div><div class=\"line\">getMonth()<span class=\"comment\">//---从 Date 对象返回月份 (0 ~ 11)。</span></div><div class=\"line\">getFullYear()<span class=\"comment\">//从 Date 对象以四位数字返回年份。</span></div><div class=\"line\">getYear()<span class=\"comment\">//----请使用 getFullYear() 方法代替。</span></div><div class=\"line\">getHours()<span class=\"comment\">//---返回 Date 对象的小时 (0 ~ 23)。</span></div><div class=\"line\">getMinutes()<span class=\"comment\">// -返回 Date 对象的分钟 (0 ~ 59)。</span></div><div class=\"line\">getSeconds()<span class=\"comment\">//-返回 Date 对象的秒数 (0 ~ 59)。</span></div><div class=\"line\">getMilliseconds()<span class=\"comment\">//返回 Date 对象的毫秒(0 ~ 999)。</span></div><div class=\"line\">getTime()<span class=\"comment\">//-----返回 1970 年 1 月 1 日至今的毫秒数。</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"Date-的主要使用—-赋值\"><a href=\"#Date-的主要使用—-赋值\" class=\"headerlink\" title=\"Date 的主要使用—-赋值\"></a>Date 的主要使用—-赋值</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">setDate()<span class=\"comment\">//-----设置 Date 对象中月的某一天 (1 ~ 31)。</span></div><div class=\"line\">setMonth()<span class=\"comment\">//----设置 Date 对象中月份 (0 ~ 11)。</span></div><div class=\"line\">setFullYear()<span class=\"comment\">//-设置 Date 对象中的年份（四位数字）。</span></div><div class=\"line\">setYear()<span class=\"comment\">//-----请使用 setFullYear() 方法代替。</span></div><div class=\"line\">setHours()<span class=\"comment\">//----设置 Date 对象中的小时 (0 ~ 23)。</span></div><div class=\"line\">setMinutes()<span class=\"comment\">//--设置 Date 对象中的分钟 (0 ~ 59)。</span></div><div class=\"line\">setSeconds()<span class=\"comment\">//--设置 Date 对象中的秒钟 (0 ~ 59)。</span></div><div class=\"line\">setMilliseconds()<span class=\"comment\">//设置 Date 对象中的毫秒 (0 ~ 999)。</span></div><div class=\"line\">setTime()<span class=\"comment\">//------以毫秒设置 Date 对象。</span></div></pre></td></tr></table></figure>\n<h1 id=\"Date-的主要使用—-格式化值\"><a href=\"#Date-的主要使用—-格式化值\" class=\"headerlink\" title=\"Date 的主要使用—-格式化值\"></a>Date 的主要使用—-格式化值</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">toString()<span class=\"comment\">//-----把 Date 对象转换为字符串。没多大意义</span></div><div class=\"line\">toTimeString()<span class=\"comment\">//-把 Date 对象的时间部分转换为字符串。标准格式，没多大意义</span></div><div class=\"line\">toDateString()<span class=\"comment\">//-把 Date 对象的日期部分转换为字符串。标准格式，没多大意义</span></div><div class=\"line\">toUTCString()<span class=\"comment\">//-根据世界时，把 Date 对象转换为字符串。</span></div><div class=\"line\">toLocaleString()<span class=\"comment\">//根据本地时间格式，把 Date 对象转换为字符串。</span></div><div class=\"line\">toLocaleTimeString()<span class=\"comment\">//根据本地时间格式，把 Date 对象的时间部分转换为字符串。当然是按照格式来的，不过不能自定义格式</span></div><div class=\"line\">toLocaleDateString()<span class=\"comment\">//根据本地时间格式，把 Date 对象的日期部分转换为字符串。 当然是按照格式来的，不过不能自定义格式</span></div><div class=\"line\">d.valueOf()<span class=\"comment\">//----返回的是定义时的值，没多大意义，如果使用new Date（）那么返回毫秒数，等价于getTime（）</span></div></pre></td></tr></table></figure>\n<h1 id=\"Date-的格式化函数，简单格式化\"><a href=\"#Date-的格式化函数，简单格式化\" class=\"headerlink\" title=\"Date 的格式化函数，简单格式化\"></a>Date 的格式化函数，简单格式化</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对Date的扩展，将 Date 转化为指定格式的String</span></div><div class=\"line\"><span class=\"comment\">// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，</span></div><div class=\"line\"><span class=\"comment\">// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)</span></div><div class=\"line\"><span class=\"comment\">// 例子：</span></div><div class=\"line\"><span class=\"comment\">// (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==&gt; 2006-07-02 08:09:04.423</span></div><div class=\"line\"><span class=\"comment\">// (new Date()).Format(\"yyyy-M-d h:m:s.S\")      ==&gt; 2006-7-2 8:9:4.18</span></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fmt</span>)</span>&#123;</div><div class=\"line\"><span class=\"comment\">//author: meizz</span></div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"string\">\"M+\"</span> : <span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">1</span>,                 <span class=\"comment\">//月份</span></div><div class=\"line\">    <span class=\"string\">\"d+\"</span> : <span class=\"keyword\">this</span>.getDate(),                    <span class=\"comment\">//日</span></div><div class=\"line\">    <span class=\"string\">\"h+\"</span> : <span class=\"keyword\">this</span>.getHours(),                   <span class=\"comment\">//小时</span></div><div class=\"line\">    <span class=\"string\">\"m+\"</span> : <span class=\"keyword\">this</span>.getMinutes(),                 <span class=\"comment\">//分</span></div><div class=\"line\">    <span class=\"string\">\"s+\"</span> : <span class=\"keyword\">this</span>.getSeconds(),                 <span class=\"comment\">//秒</span></div><div class=\"line\">    <span class=\"string\">\"q+\"</span> : <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">this</span>.getMonth()+<span class=\"number\">3</span>)/<span class=\"number\">3</span>), <span class=\"comment\">//季度</span></div><div class=\"line\">    <span class=\"string\">\"S\"</span>  : <span class=\"keyword\">this</span>.getMilliseconds()             <span class=\"comment\">//毫秒</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"regexp\">/(y+)/</span>.test(fmt))</div><div class=\"line\">    fmt=fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"keyword\">this</span>.getFullYear()+<span class=\"string\">\"\"</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length));</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\"</span>+ k +<span class=\"string\">\")\"</span>).test(fmt))</div><div class=\"line\">            fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length==<span class=\"number\">1</span>) ?</div><div class=\"line\">                     (o[k]) : ((<span class=\"string\">\"00\"</span>+ o[k]).substr((<span class=\"string\">\"\"</span>+ o[k]).length)));</div><div class=\"line\"> <span class=\"keyword\">return</span> fmt;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 示例代码</span></div><div class=\"line\"><span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().format(<span class=\"string\">'yyyy-MM-dd hh:mm:ss.S'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.info(today);</div></pre></td></tr></table></figure>\n<h1 id=\"Date-获取本月第一天-最后一天-，本周第一天-最后一天\"><a href=\"#Date-获取本月第一天-最后一天-，本周第一天-最后一天\" class=\"headerlink\" title=\"Date 获取本月第一天 最后一天 ，本周第一天 最后一天\"></a>Date 获取本月第一天 最后一天 ，本周第一天 最后一天</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 本周第一天</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showWeekFirstDay</span>(<span class=\"params\"></span>)</span></div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> Nowdate=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">     <span class=\"keyword\">var</span> WeekFirstDay=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(Nowdate-(Nowdate.getDay()<span class=\"number\">-1</span>)*<span class=\"number\">86400000</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span> WeekFirstDay.format(<span class=\"string\">'yyyy-MM-dd hh:mm:ss.S'</span>)</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 本周最后一天</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showWeekLastDay</span>(<span class=\"params\"></span>)</span></div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> Nowdate=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">     <span class=\"keyword\">var</span> WeekFirstDay=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(Nowdate-(Nowdate.getDay()<span class=\"number\">-1</span>)*<span class=\"number\">86400000</span>);</div><div class=\"line\">     <span class=\"keyword\">var</span> WeekLastDay=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>((WeekFirstDay/<span class=\"number\">1000</span>+<span class=\"number\">6</span>*<span class=\"number\">86400</span>)*<span class=\"number\">1000</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span> WeekLastDay.format(<span class=\"string\">'yyyy-MM-dd hh:mm:ss.S'</span>)</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 本月第一天</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showMonthFirstDay</span>(<span class=\"params\"></span>)</span></div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> Nowdate=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">     <span class=\"keyword\">var</span> MonthFirstDay=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(Nowdate.getFullYear(),Nowdate.getMonth(),<span class=\"number\">1</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span> MonthFirstDay.format(<span class=\"string\">'yyyy-M-d hh:mm:ss.S'</span>)</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 本月最后一天</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showMonthLastDay</span>(<span class=\"params\"></span>)</span></div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> Nowdate=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">     <span class=\"keyword\">var</span> MonthNextFirstDay=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(Nowdate.getFullYear(),Nowdate.getMonth()+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\">     <span class=\"keyword\">var</span> MonthLastDay=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(MonthNextFirstDay<span class=\"number\">-86400000</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span> MonthLastDay.format(<span class=\"string\">'yyyy-MM-dd hh:mm:ss.S'</span>)</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1486102813430,
				"created_by": 2,
				"updated_at": 1486102915085,
				"updated_by": 2,
				"published_at": 1486102813430,
				"published_by": 2
			},
			{
				"id": "ciy8w76jt00006sfcdwgy6tep",
				"title": "React/React Native 的ES5 ES6写法对照表",
				"slug": "react-native-write",
				"markdown": "\n很多React/React Native的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。\n<!--more-->\n# 模块\n\n## 引用\n\n在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：\n```js\n//ES5\nvar React = require(\"react-native\");\nvar {\n    Image,\n    Text,\n    PropTypes\n} = React;  //引用不同的React Native组件\n在ES6里，import写法更为标准\n\n//ES6\nimport React, {\n    Image,\n    Text,\n    PropTypes\n} from 'react-native';\n```\n注意在React Native里，import直到0.12+才能正常运作。\n\n## 导出单个类\n\n在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出\n```js\n//ES5\nvar MyComponent = React.createClass({\n    ...\n});\nmodule.exports = MyComponent;\n```\n在ES6里，通常用export default来实现相同的功能：\n```js\n//ES6\nexport default class MyComponent extends React.Component{\n    ...\n}\n```\n引用的时候也类似：\n```js\n//ES5\nvar MyComponent = require('./MyComponent.js');\n\n//ES6\nimport MyComponent from './MyComponent.js';\n```\n## 定义组件\n\n在ES5里，通常通过React.createClass来定义一个组件类，像这样：\n```js\n//ES5\nvar Photo = React.createClass({\n    render: function() {\n        return (\n            <Image source={this.props.source} />\n        );\n    },\n});\n```\n在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：\n```js\n//ES6\nclass Photo extends React.Component {\n    render() {\n        return (\n            <Image source={this.props.source} />\n        );\n    }\n}\n```\n## 给组件定义方法\n\n从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。\n```js\n//ES5\nvar Photo = React.createClass({\n    componentWillMount: function(){\n\n    },\n    render: function() {\n        return (\n            <Image source={this.props.source} />\n        );\n    },\n});\n//ES6\nclass Photo extends React.Component {\n    componentWillMount() {\n\n    }\n    render() {\n        return (\n            <Image source={this.props.source} />\n        );\n    }\n}\n```\n## 定义组件的属性类型和默认属性\n\n在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现\n```js\n//ES5\nvar Video = React.createClass({\n    getDefaultProps: function() {\n        return {\n            autoPlay: false,\n            maxLoops: 10,\n        };\n    },\n    propTypes: {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    },\n    render: function() {\n        return (\n            <View />\n        );\n    },\n});\n```\n在ES6里，可以统一使用static成员来实现\n```js\n//ES6\nclass Video extends React.Component {\n    static defaultProps = {\n        autoPlay: false,\n        maxLoops: 10,\n    };  // 注意这里有分号\n    static propTypes = {\n        autoPlay: React.PropTypes.bool.isRequired,\n        maxLoops: React.PropTypes.number.isRequired,\n        posterFrameSrc: React.PropTypes.string.isRequired,\n        videoSrc: React.PropTypes.string.isRequired,\n    };  // 注意这里有分号\n    render() {\n        return (\n            <View />\n        );\n    } // 注意这里既没有分号也没有逗号\n}\n```\n也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：\n```js\n//ES6\nclass Video extends React.Component {\n    render() {\n        return (\n            <View />\n        );\n    }\n}\nVideo.defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n};\nVideo.propTypes = {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n};\n```\n注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。\n\n## 初始化STATE\n\nES5下情况类似，\n```js\n//ES5\nvar Video = React.createClass({\n    getInitialState: function() {\n        return {\n            loopsRemaining: this.props.maxLoops,\n        };\n    },\n})\nES6下，有两种写法：\n\n//ES6\nclass Video extends React.Component {\n    state = {\n        loopsRemaining: this.props.maxLoops,\n    }\n}\n```\n不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：\n```js\n//ES6\nclass Video extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loopsRemaining: this.props.maxLoops,\n        };\n    }\n}\n```\n# 把方法作为回调提供\n\n很多习惯于ES6的用户反而不理解在ES5下可以这么做：\n```js\n//ES5\nvar PostInfo = React.createClass({\n    handleOptionsButtonClick: function(e) {\n        // Here, 'this' refers to the component instance.\n        this.setState({showOptionsModal: true});\n    },\n    render: function(){\n        return (\n            <TouchableHighlight onPress={this.handleOptionsButtonClick}>\n                <Text>{this.props.label}</Text>\n            </TouchableHighlight>\n        )\n    },\n});\n```\n在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。\n\n在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用\n```js\n//ES6\nclass PostInfo extends React.Component\n{\n    handleOptionsButtonClick(e){\n        this.setState({showOptionsModal: true});\n    }\n    render(){\n        return (\n            <TouchableHighlight\n                onPress={this.handleOptionsButtonClick.bind(this)}\n                onPress={e=>this.handleOptionsButtonClick(e)}\n                >\n                <Text>{this.props.label}</Text>\n            </TouchableHighlight>\n        )\n    },\n}\n```\n箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。\n```js\n// 箭头函数的例子\n()=>1\nv=>v+1\n(a,b)=>a+b\n()=>{\n    alert(\"foo\");\n}\ne=>{\n    if (e == 0){\n        return 0;\n    }\n    return 1000/e;\n}\n```\n需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用\n```js\n// 错误的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));\n    }\n    onAppPaused(event){\n    }\n}\n// 正确的做法\nclass PauseMenu extends React.Component{\n    constructor(props){\n        super(props);\n        this._onAppPaused = this.onAppPaused.bind(this);\n    }\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this._onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this._onAppPaused);\n    }\n    onAppPaused(event){\n    }\n}\n```\n从这个帖子中我们还学习到一种新的做法：\n```js\n// 正确的做法\nclass PauseMenu extends React.Component{\n    componentWillMount(){\n        AppStateIOS.addEventListener('change', this.onAppPaused);\n    }\n    componentDidUnmount(){\n        AppStateIOS.removeEventListener('change', this.onAppPaused);\n    }\n    onAppPaused = (event) => {\n        //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针\n    }\n}\n```\n# Mixins\n\n在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin\n```js\nvar PureRenderMixin = require('react-addons-pure-render-mixin');\nReact.createClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div className={this.props.className}>foo</div>;\n  }\n});\n```\n然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。\n\n尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案\n\n不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：\n```js\n//Enhance.js\nimport { Component } from \"React\";\n\nexport var Enhance = ComposedComponent => class extends Component {\n    constructor() {\n        this.state = { data: null };\n    }\n    componentDidMount() {\n        this.setState({ data: 'Hello' });\n    }\n    render() {\n        return <ComposedComponent {...this.props} data={this.state.data} />;\n    }\n};\n//HigherOrderComponent.js\nimport { Enhance } from \"./Enhance\";\n\nclass MyComponent {\n    render() {\n        if (!this.data) return <div>Waiting...</div>;\n        return <div>{this.data}</div>;\n    }\n}\n\nexport default Enhance(MyComponent); // Enhanced component\n```\n用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。\n\n# ES6+带来的其它好处\n\n## 解构&属性延展　###\n\n结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：\n```js\nclass AutoloadingPostsGrid extends React.Component {\n    render() {\n        var {\n            className,\n            ...others,  // contains all properties of this.props except for className\n        } = this.props;\n        return (\n            <div className={className}>\n                <PostsGrid {...others} />\n                <button onClick={this.handleLoadMoreClick}>Load more</button>\n            </div>\n        );\n    }\n}\n```\n下面这种写法，则是传递所有属性的同时，用覆盖新的className值：\n```html\n<div {...this.props} className=\"override\">\n    …\n</div>\n```\n这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值\n```html\n<div className=\"base\" {...this.props}>\n    …\n</div>\n```",
				"html": "<p>很多React/React Native的初学者都被ES6的问题迷惑：各路大神都建议我们直接学习ES6的语法(class Foo extends React.Component)，然而网上搜到的很多教程和例子都是ES5版本的，所以很多人在学习的时候连照猫画虎都不知道怎么做。今天在此整理了一些ES5和ES6的写法对照表，希望大家以后读到ES5的代码，也能通过对照，在ES6下实现相同的功能。<br><a id=\"more\"></a></p>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">\"react-native\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;</div><div class=\"line\">    Image,</div><div class=\"line\">    Text,</div><div class=\"line\">    PropTypes</div><div class=\"line\">&#125; = React;  <span class=\"comment\">//引用不同的React Native组件</span></div><div class=\"line\">在ES6里，<span class=\"keyword\">import</span>写法更为标准</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;</div><div class=\"line\">    Image,</div><div class=\"line\">    Text,</div><div class=\"line\">    PropTypes</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div></pre></td></tr></table></figure></p>\n<p>注意在React Native里，import直到0.12+才能正常运作。</p>\n<h2 id=\"导出单个类\"><a href=\"#导出单个类\" class=\"headerlink\" title=\"导出单个类\"></a>导出单个类</h2><p>在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass(&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = MyComponent;</div></pre></td></tr></table></figure></p>\n<p>在ES6里，通常用export default来实现相同的功能：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>引用的时候也类似：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = <span class=\"built_in\">require</span>(<span class=\"string\">'./MyComponent.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyComponent <span class=\"keyword\">from</span> <span class=\"string\">'./MyComponent.js'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"定义组件\"><a href=\"#定义组件\" class=\"headerlink\" title=\"定义组件\"></a>定义组件</h2><p>在ES5里，通常通过React.createClass来定义一个组件类，像这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> Photo = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在ES6里，我们通过定义一个继承自React.Component的class来定义一个组件类，像这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Photo</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"给组件定义方法\"><a href=\"#给组件定义方法\" class=\"headerlink\" title=\"给组件定义方法\"></a>给组件定义方法</h2><p>从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> Photo = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">componentWillMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\">//ES6</div><div class=\"line\">class Photo extends React.Component &#123;</div><div class=\"line\">    componentWillMount() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"定义组件的属性类型和默认属性\"><a href=\"#定义组件的属性类型和默认属性\" class=\"headerlink\" title=\"定义组件的属性类型和默认属性\"></a>定义组件的属性类型和默认属性</h2><p>在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> Video = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">autoPlay</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">            <span class=\"attr\">maxLoops</span>: <span class=\"number\">10</span>,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">propTypes</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">autoPlay</span>: React.PropTypes.bool.isRequired,</div><div class=\"line\">        <span class=\"attr\">maxLoops</span>: React.PropTypes.number.isRequired,</div><div class=\"line\">        <span class=\"attr\">posterFrameSrc</span>: React.PropTypes.string.isRequired,</div><div class=\"line\">        <span class=\"attr\">videoSrc</span>: React.PropTypes.string.isRequired,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在ES6里，可以统一使用static成员来实现<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Video</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</div><div class=\"line\">        <span class=\"attr\">autoPlay</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">maxLoops</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;;  <span class=\"comment\">// 注意这里有分号</span></div><div class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123;</div><div class=\"line\">        <span class=\"attr\">autoPlay</span>: React.PropTypes.bool.isRequired,</div><div class=\"line\">        <span class=\"attr\">maxLoops</span>: React.PropTypes.number.isRequired,</div><div class=\"line\">        <span class=\"attr\">posterFrameSrc</span>: React.PropTypes.string.isRequired,</div><div class=\"line\">        <span class=\"attr\">videoSrc</span>: React.PropTypes.string.isRequired,</div><div class=\"line\">    &#125;;  <span class=\"comment\">// 注意这里有分号</span></div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125; // 注意这里既没有分号也没有逗号</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Video</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View /&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Video.defaultProps = &#123;</div><div class=\"line\">    autoPlay: false,</div><div class=\"line\">    maxLoops: 10,</div><div class=\"line\">&#125;;</div><div class=\"line\">Video.propTypes = &#123;</div><div class=\"line\">    autoPlay: React.PropTypes.bool.isRequired,</div><div class=\"line\">    maxLoops: React.PropTypes.number.isRequired,</div><div class=\"line\">    posterFrameSrc: React.PropTypes.string.isRequired,</div><div class=\"line\">    videoSrc: React.PropTypes.string.isRequired,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>注意: 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。</p>\n<h2 id=\"初始化STATE\"><a href=\"#初始化STATE\" class=\"headerlink\" title=\"初始化STATE\"></a>初始化STATE</h2><p>ES5下情况类似，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> Video = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">loopsRemaining</span>: <span class=\"keyword\">this</span>.props.maxLoops,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\">ES6下，有两种写法：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Video</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    state = &#123;</div><div class=\"line\">        <span class=\"attr\">loopsRemaining</span>: <span class=\"keyword\">this</span>.props.maxLoops,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Video</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">            <span class=\"attr\">loopsRemaining</span>: <span class=\"keyword\">this</span>.props.maxLoops,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"把方法作为回调提供\"><a href=\"#把方法作为回调提供\" class=\"headerlink\" title=\"把方法作为回调提供\"></a>把方法作为回调提供</h1><p>很多习惯于ES6的用户反而不理解在ES5下可以这么做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5</span></div><div class=\"line\"><span class=\"keyword\">var</span> PostInfo = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">handleOptionsButtonClick</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Here, 'this' refers to the component instance.</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">showOptionsModal</span>: <span class=\"literal\">true</span>&#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;TouchableHighlight onPress=&#123;this.handleOptionsButtonClick&#125;&gt;</div><div class=\"line\">                &lt;Text&gt;&#123;this.props.label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;/TouchableHighlight&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。</p>\n<p>在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostInfo</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    handleOptionsButtonClick(e)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">showOptionsModal</span>: <span class=\"literal\">true</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;TouchableHighlight</div><div class=\"line\">                onPress=&#123;this.handleOptionsButtonClick.bind(this)&#125;</div><div class=\"line\">                onPress=&#123;e=&gt;this.handleOptionsButtonClick(e)&#125;</div><div class=\"line\">                &gt;</div><div class=\"line\">                &lt;Text&gt;&#123;this.props.label&#125;&lt;/Text&gt;</div><div class=\"line\">            &lt;/TouchableHighlight&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 箭头函数的例子</span></div><div class=\"line\">()=&gt;<span class=\"number\">1</span></div><div class=\"line\">v=&gt;v+<span class=\"number\">1</span></div><div class=\"line\">(a,b)=&gt;a+b</div><div class=\"line\">()=&gt;&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">e=&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1000</span>/e;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的做法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PauseMenu</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    componentWillMount()&#123;</div><div class=\"line\">        AppStateIOS.addEventListener(<span class=\"string\">'change'</span>, <span class=\"keyword\">this</span>.onAppPaused.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidUnmount()&#123;</div><div class=\"line\">        AppStateIOS.removeEventListener(<span class=\"string\">'change'</span>, <span class=\"keyword\">this</span>.onAppPaused.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    onAppPaused(event)&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 正确的做法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PauseMenu</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props);</div><div class=\"line\">        <span class=\"keyword\">this</span>._onAppPaused = <span class=\"keyword\">this</span>.onAppPaused.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentWillMount()&#123;</div><div class=\"line\">        AppStateIOS.addEventListener(<span class=\"string\">'change'</span>, <span class=\"keyword\">this</span>._onAppPaused);</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidUnmount()&#123;</div><div class=\"line\">        AppStateIOS.removeEventListener(<span class=\"string\">'change'</span>, <span class=\"keyword\">this</span>._onAppPaused);</div><div class=\"line\">    &#125;</div><div class=\"line\">    onAppPaused(event)&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从这个帖子中我们还学习到一种新的做法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正确的做法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PauseMenu</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    componentWillMount()&#123;</div><div class=\"line\">        AppStateIOS.addEventListener(<span class=\"string\">'change'</span>, <span class=\"keyword\">this</span>.onAppPaused);</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidUnmount()&#123;</div><div class=\"line\">        AppStateIOS.removeEventListener(<span class=\"string\">'change'</span>, <span class=\"keyword\">this</span>.onAppPaused);</div><div class=\"line\">    &#125;</div><div class=\"line\">    onAppPaused = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Mixins\"><a href=\"#Mixins\" class=\"headerlink\" title=\"Mixins\"></a>Mixins</h1><p>在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如PureRenderMixin<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> PureRenderMixin = <span class=\"built_in\">require</span>(<span class=\"string\">'react-addons-pure-render-mixin'</span>);</div><div class=\"line\">React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [PureRenderMixin],</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &lt;div className=&#123;this.props.className&#125;&gt;foo&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>然而现在官方已经不再打算在ES6里继续推行Mixin，他们说：Mixins Are Dead. Long Live Composition。</p>\n<p>尽管如果要继续使用mixin，还是有一些第三方的方案可以用，譬如这个方案</p>\n<p>不过官方推荐，对于库编写者而言，应当尽快放弃Mixin的编写方式，上文中提到Sebastian Markbåge的一段代码推荐了一种新的编码方式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Enhance.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"React\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> Enhance = <span class=\"function\"><span class=\"params\">ComposedComponent</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">data</span>: <span class=\"literal\">null</span> &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"string\">'Hello'</span> &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &lt;ComposedComponent &#123;...this.props&#125; data=&#123;this.state.data&#125; /&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">//HigherOrderComponent.js</div><div class=\"line\">import &#123; Enhance &#125; from \"./Enhance\";</div><div class=\"line\"></div><div class=\"line\">class MyComponent &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        if (!this.data) return &lt;div&gt;Waiting...&lt;/div&gt;;</div><div class=\"line\">        return &lt;div&gt;&#123;this.data&#125;&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default Enhance(MyComponent); // Enhanced component</div></pre></td></tr></table></figure></p>\n<p>用一个“增强函数”，来某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。</p>\n<h1 id=\"ES6-带来的其它好处\"><a href=\"#ES6-带来的其它好处\" class=\"headerlink\" title=\"ES6+带来的其它好处\"></a>ES6+带来的其它好处</h1><h2 id=\"解构-amp-属性延展\"><a href=\"#解构-amp-属性延展\" class=\"headerlink\" title=\"解构&amp;属性延展　\"></a>解构&amp;属性延展　</h2><p>结合使用ES6+的解构和属性延展，我们给孩子传递一批属性更为方便了。这个例子把className以外的所有属性传递给div标签：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoloadingPostsGrid</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> &#123;</div><div class=\"line\">            className,</div><div class=\"line\">            ...others,  <span class=\"comment\">// contains all properties of this.props except for className</span></div><div class=\"line\">        &#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div className=&#123;className&#125;&gt;</div><div class=\"line\">                &lt;PostsGrid &#123;...others&#125; /&gt;</div><div class=\"line\">                &lt;button onClick=&#123;this.handleLoadMoreClick&#125;&gt;Load more&lt;/button&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面这种写法，则是传递所有属性的同时，用覆盖新的className值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> &#123;<span class=\"attr\">...this.props</span>&#125; <span class=\"attr\">className</span>=<span class=\"string\">\"override\"</span>&gt;</span></div><div class=\"line\">    …</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个例子则相反，如果属性中没有包含className，则提供默认的值，而如果属性中已经包含了，则使用属性中的值<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"base\"</span> &#123;<span class=\"attr\">...this.props</span>&#125;&gt;</span></div><div class=\"line\">    …</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1485103349272,
				"created_by": 2,
				"updated_at": 1485103351701,
				"updated_by": 2,
				"published_at": 1485103349272,
				"published_by": 2
			},
			{
				"id": "ciy5kkb9n0000dsfcfaihfhqu",
				"title": "yarn —— Nodejs包新管理工具",
				"slug": "nodejs-npm-yarn",
				"markdown": "\n在yarn发布之前，所有Nodejs开发者用的都是npm包管理工具，而npm工具存在挺多难以忍受的诟病，包括安装速度慢、每次都要在线重新安装等问题，而yarn也是为了解决npm当前所存在的问题而出现的。\n<!--more-->\n\n# 安装\n如果原先有npm工具的话，安装yarn很简单，只需要一行命令即可\n```\nnpm install -g yarn\n```\n如果没有npm工具，安装yarn可参照\n各平台下yarn工具安装方式\n# 配置\n安装yarn之后默认的包安装源是https://registry.yarnpkg.com，可用查看命令\n```\nyarn config get registry\n```\n若想提高yarn安装的速度，可将包安装源修改为cnpm的安装源，执行以下命令即可\n```\nyarn config set registry 'https://registry.npm.taobao.org'\n```\n# 使用\n初始化某个项目\n```\nnpm init\nyarn init\n```\n默认的安装依赖操作\n```\nnpm install/link\nyarn install/link\n```\n安装某个依赖，并且默认保存到package\n```\nnpm install xxx —save\nyarn add xxx\n```\n移除某个依赖项目\n```\nnpm uninstall xxx —save\nyarn remove xxx\n```\n安装某个开发时依赖项目\n```\nnpm install --save-dev xxx\nyarn add xxx —dev\n```\n更新某个依赖项目\n```\nnpm update --save xxx\nyarn upgrade xxx\n```\n安装某个全局依赖项目\n```\nnpm install -g xxx\nyarn global add xxx\n```\n发布/登录/登出，一系列NPM Registry操作\n```\nnpm publish/login/logout\nyarn publish/login/logout\n```\n运行某个命令\n```\nnpm run/test\nyarn run/test\n```",
				"html": "<p>在yarn发布之前，所有Nodejs开发者用的都是npm包管理工具，而npm工具存在挺多难以忍受的诟病，包括安装速度慢、每次都要在线重新安装等问题，而yarn也是为了解决npm当前所存在的问题而出现的。<br><a id=\"more\"></a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>如果原先有npm工具的话，安装yarn很简单，只需要一行命令即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yarn</div></pre></td></tr></table></figure></p>\n<p>如果没有npm工具，安装yarn可参照<br>各平台下yarn工具安装方式</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>安装yarn之后默认的包安装源是<a href=\"https://registry.yarnpkg.com，可用查看命令\" target=\"_blank\" rel=\"external\">https://registry.yarnpkg.com，可用查看命令</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn config get registry</div></pre></td></tr></table></figure></p>\n<p>若想提高yarn安装的速度，可将包安装源修改为cnpm的安装源，执行以下命令即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn config set registry &apos;https://registry.npm.taobao.org&apos;</div></pre></td></tr></table></figure></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>初始化某个项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div><div class=\"line\">yarn init</div></pre></td></tr></table></figure></p>\n<p>默认的安装依赖操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install/link</div><div class=\"line\">yarn install/link</div></pre></td></tr></table></figure></p>\n<p>安装某个依赖，并且默认保存到package<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install xxx —save</div><div class=\"line\">yarn add xxx</div></pre></td></tr></table></figure></p>\n<p>移除某个依赖项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall xxx —save</div><div class=\"line\">yarn remove xxx</div></pre></td></tr></table></figure></p>\n<p>安装某个开发时依赖项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev xxx</div><div class=\"line\">yarn add xxx —dev</div></pre></td></tr></table></figure></p>\n<p>更新某个依赖项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update --save xxx</div><div class=\"line\">yarn upgrade xxx</div></pre></td></tr></table></figure></p>\n<p>安装某个全局依赖项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g xxx</div><div class=\"line\">yarn global add xxx</div></pre></td></tr></table></figure></p>\n<p>发布/登录/登出，一系列NPM Registry操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish/login/logout</div><div class=\"line\">yarn publish/login/logout</div></pre></td></tr></table></figure></p>\n<p>运行某个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run/test</div><div class=\"line\">yarn run/test</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1484902409130,
				"created_by": 2,
				"updated_at": 1484902530076,
				"updated_by": 2,
				"published_at": 1484902409130,
				"published_by": 2
			},
			{
				"id": "cixrmvcl400000kfcw4sjc45b",
				"title": "MongoDB安装成为Windows服务",
				"slug": "mongodb-serve",
				"markdown": "\nMongoDB安装成为Windows服务\n使用以下命令将MongoDB安装成为Windows服务。\n笔者的MongoDB目录为D:\\Program Files\\mongodb\n\n切换到D:\\Program Files\\mongodb\\bin>\n```bash\nmongod --logpath \"D:\\Program Files\\mongodb\\data\\logs.txt\" --logappend --dbpath \"D:\\Program Files\\mongodb\\data\" --directoryperdb --serviceName \"MongoDB\" --serviceDisplayName \"MongoDB\" --install\n```\n输入以上命令。\n\n<!--more-->\n```bash\nCreating service MongoDB.\nService creation successful.\nService can be started from the command line via 'net start \"MongoDB\"'.\n```\n\n\n该命令行指定了日志文件：D:\\Program Files\\mongodb\\data\\logs.tx，日志是以追加的方式输出的；\n\n数据文件目录：D:\\Program Files\\mongodb\\data，并且参数--directoryperdb说明每个DB都会新建一个目录；\n\n\n\nWindows服务的名称：MongoDB；\n\n\n最后是安装参数：--install，与之相对的是--remove\n\n启动MongoDB：net start MongoDB\n\n停止MongoDB：net stop MongoDB\n\n\n注意：遇到问题请查看日志文件\n```bash\nmongodb exception in initAndListen: 12596 old lock file, terminating解决方法\n```\n错误信息如下：\n```bash\nexception in initAndListen: 12596 old lock file, terminating\n```\n解决方法\n\n1.删除data目录中的.lock文件\n\n2.mongod.exe --repair\n\n3.启动mongod就可以了",
				"html": "<p>MongoDB安装成为Windows服务<br>使用以下命令将MongoDB安装成为Windows服务。<br>笔者的MongoDB目录为D:\\Program Files\\mongodb</p>\n<p>切换到D:\\Program Files\\mongodb\\bin&gt;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --logpath <span class=\"string\">\"D:\\Program Files\\mongodb\\data\\logs.txt\"</span> --logappend --dbpath <span class=\"string\">\"D:\\Program Files\\mongodb\\data\"</span> --directoryperdb --serviceName <span class=\"string\">\"MongoDB\"</span> --serviceDisplayName <span class=\"string\">\"MongoDB\"</span> --install</div></pre></td></tr></table></figure></p>\n<p>输入以上命令。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Creating service MongoDB.</div><div class=\"line\">Service creation successful.</div><div class=\"line\">Service can be started from the <span class=\"built_in\">command</span> line via <span class=\"string\">'net start \"MongoDB\"'</span>.</div></pre></td></tr></table></figure>\n<p>该命令行指定了日志文件：D:\\Program Files\\mongodb\\data\\logs.tx，日志是以追加的方式输出的；</p>\n<p>数据文件目录：D:\\Program Files\\mongodb\\data，并且参数–directoryperdb说明每个DB都会新建一个目录；</p>\n<p>Windows服务的名称：MongoDB；</p>\n<p>最后是安装参数：–install，与之相对的是–remove</p>\n<p>启动MongoDB：net start MongoDB</p>\n<p>停止MongoDB：net stop MongoDB</p>\n<p>注意：遇到问题请查看日志文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongodb exception <span class=\"keyword\">in</span> initAndListen: 12596 old lock file, terminating解决方法</div></pre></td></tr></table></figure></p>\n<p>错误信息如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exception <span class=\"keyword\">in</span> initAndListen: 12596 old lock file, terminating</div></pre></td></tr></table></figure></p>\n<p>解决方法</p>\n<p>1.删除data目录中的.lock文件</p>\n<p>2.mongod.exe –repair</p>\n<p>3.启动mongod就可以了</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1484059771754,
				"created_by": 2,
				"updated_at": 1484059826411,
				"updated_by": 2,
				"published_at": 1484059771754,
				"published_by": 2
			},
			{
				"id": "cixrmruth0000y4fcigodrfe4",
				"title": "windows7下启动mysql服务出现服务名无效的原因及解决方法",
				"slug": "mysql-uninstall",
				"markdown": "问题原因：mysql服务没有安装。\n解决办法： 在 mysql bin目录下 以管理员的权限 执行 mysqld -install命令\n然后仍然以管理员的权限 net start mysql 开启Mysql服务了。\n附卸载mysql服务的方法。\n1、以管理员的权限 net stop mysql ，关闭mysql服务\n2、以管理员的权限 mysqld -remove ，卸载mysql服务",
				"html": "<p>问题原因：mysql服务没有安装。<br>解决办法： 在 mysql bin目录下 以管理员的权限 执行 mysqld -install命令<br>然后仍然以管理员的权限 net start mysql 开启Mysql服务了。<br>附卸载mysql服务的方法。<br>1、以管理员的权限 net stop mysql ，关闭mysql服务<br>2、以管理员的权限 mysqld -remove ，卸载mysql服务</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1484059595470,
				"created_by": 2,
				"updated_at": 1484059596571,
				"updated_by": 2,
				"published_at": 1484059595470,
				"published_by": 2
			},
			{
				"id": "cixpnuwff0000rkfcz902x6q6",
				"title": "管理Sass项目文件结构",
				"slug": "sass-projiect",
				"markdown": "# 构建你的结构体系\nCSS预处理器的特点之一是可以把你的代码分割成很多个文件，而且不会影响性能。这都要归功于Sass的@import命令，只要在你的开发环境下，你调用不管多少文件，最终将编译出一个CSS样式文件。\n\n开始将你的CSS文件分割成多个文件和文件夹。\n<!--more-->\n# 文件夹构建\n文件夹的创建是必不可少的。\n\n你在创建CSS的架构的时候不只是把所有的Sass文件放在一个文件夹下，你会将他们分类。\n\n下面的示例屏示的是我将如何组织我的Sass文件：\n```bash\nsass/\n|\n|– base/\n|   |– _reset.scss       # Reset/normalize\n|   |– _typography.scss  # Typography rules\n|   ...                  # Etc…\n|\n|– components/\n|   |– _buttons.scss     # Buttons\n|   |– _carousel.scss    # Carousel\n|   |– _cover.scss       # Cover\n|   |– _dropdown.scss    # Dropdown\n|   |– _navigation.scss  # Navigation\n|   ...                  # Etc…\n|\n|– helpers/\n|   |– _variables.scss   # Sass Variables\n|   |– _functions.scss   # Sass Functions\n|   |– _mixins.scss      # Sass Mixins\n|   |– _helpers.scss     # Class & placeholders helpers\n|   ...                  # Etc…\n|\n|– layout/\n|   |– _grid.scss        # Grid system\n|   |– _header.scss      # Header\n|   |– _footer.scss      # Footer\n|   |– _sidebar.scss     # Sidebar\n|   |– _forms.scss       # Forms\n|   ...                  # Etc…\n|\n|– pages/\n|   |– _home.scss        # Home specific styles\n|   |– _contact.scss     # Contact specific styles\n|   ...                  # Etc…\n|\n|– themes/\n|   |– _theme.scss       # Default theme\n|   |– _admin.scss       # Admin theme\n|   ...                  # Etc…\n|\n|– vendors/\n|   |– _bootstrap.scss   # Bootstrap\n|   |– _jquery-ui.scss   # jQuery UI\n|   ...                  # Etc…\n|\n|\n`– main.scss             # primary Sass file\n```\n正如你所看到的，在根目录底下只有一个main.scss文件，其他.scss文件都根据不同的分类放在对应的文件夹中，只是这些.scss文件前面都有一个下划线(_)，用来告诉Sass，这些.scss文件只是局部，不通过@import是不应该被编译出.css文件。事实上，它们是导入和合并文件的基本文件而以。\n\n一个文件可以解决所有问题，一个文件可以找到他们，一个文件给他们带来了所有的一切，Sass只是将他们合并在一起。——@J.R.R. Tolkien\n\n接下来，我们依次来看结构中的每一个文件目录。\n\n## Base\n\nbase/文件夹包含了一些有关于你的项目中一些模板相关。在这里，你可以看到reset样式(或者Normalize.css,或者其他)，也有一些关于文本排版方面的，当然根据不同的项目会有一些其他的文件。\n```js\n_reset.scss或_normalize.scss\n_typography.scss\n```\n## Helpers\n\nhelpers/文件夹（有的地方也称其为utils/）主要包含了项目中关于Sass的工具和帮助之类。在里面放置了我们需要使用的_function.scss，和_mixin.scss。在这里还包含了一个_variables.scss文件（有的地方也称其为_config.scss），这里包含项目中所有的全局变量（比如排版本上的，配色方案等等）。\n```bash\n_variables.scss\n_mixin.scss\n_function.scss\n_placeholders.scss#(也有称为_helpers.scss)\n```\n## Layout\n\nlayout/文件夹(有时也称为partials/)中放置了大量的文件，每个文件主要用于布局方面的，比如说\"header\"，“footer”等。他也会包括_grid.scss文件，用来创建网格系统。\n```js\n_grid.scss\n_header.scss\n_footer.scss\n_sidebar.scss\n_forms.scss\n```\n导航文件（_navigation.scss）文件放在这里也有意义，虽然我将他放在了components/文件夹中。但是我想将其放在layout/文件夹中更好些，当然最后还是由你自己来决定。\n\n## Components\n\n对于一些小组件，都放在了components/文件夹（通常也称为modules/），layout/是一个宏观的（定义全局的线框），components/是一个微观的。它里面放了一些特定的组件，比如说slider，loading，widget或者其他的小组件。通常components/目录下的都是一些小组件文件。\n```js\n_media.scss\n_carousel.scss\n_thumbnails.scss\n```\n## Page\n\n如果你需要针对一些页面写特定的样式，我想将他们放在page/文件夹中是非常酷的，并且以页面的名称来命名。例如，你的首页需要制作一个特定的样式，那么你就可以在page/文件夹中创建一个名叫_home.scss文件。\n```js\n_home.scss\n_contact.scss\n```\n根据你自己的布署，你可以根据自己的需求调用这些文件，避免与其他样式文件合并在一起。这真的主取决于你自己，在我工作的地方，我是不允 许这样的事情发生，只在需要的页面调用需要的文件。比如说，我们首页有一个特定的布局样式，编译出来的CSS大约有200行代码。为了防止每个页面加载这 些代码，我只在主页文件上引用这个文件。\n\n## Themes\n\n如果你像我一样要为一个大型的网站制作多个主题，那么有一个theme/文件夹是非常有意义的。你可以把主题相关的文件放在这个文件夹中。这绝对跟具体的项目有关，你只要觉得跟主题相关的，有必要引入。\n```js\n_theme.scss\n_admin.scss\n```\n## Vendors\n\n最后一个但并非不重要，创建vendors/文件夹，主要用来包含来自外部的库和框架的CSS文件。比如Bootstrap,jQueryUI，FancyCarouselSliderjQueryPowered等等。把这些文件放在同一个文件夹中，你可以说，嘿，这些代码不是我的，不是我写的，跟我无关。\n\n例如：\n```js\nbootstrap.scss\njquery-ui.scss\nselect2.scss\n```\n从另一个角度来说，在我平时工作中，还创建了一个vendors-extensions/文件夹，用来放置一些覆盖从外部引入进来的库和框架中的小组件。例如，我们可以在_bootstrap.scss文件中用来覆盖Bootstrap框架中的一些小组件。这为了避免和外部直接引来的组件升级造成的冲突，或许这不是一个很好的方案。\n\n大致就是这些，但不同的项目可能会不一样，但我可以肯定，你们都有了这样的一个概念。在文件夹中嵌套一个文件夹，这样的做法我一直不太反对，但我不 太喜欢这样的方式。我发现，在大多数情况之下，只需一个层级就足足够，既保证结构的简洁与清晰，而且不复杂。但话又说回来，如果你觉得你的项目有必要嵌套 更深层次的文件夹，你也可以自由的发挥。\n\n温馨提示：如果你觉得你的架构并不能向大家说明SCSS文件夹的架构，你可以在根目录下创建一个README.md文件（或者在main.scss文件中一步一步说明）解释。\n\n文件很酷？\n有一个问题常被人问到“多少文件才算是很多文件呢？”我常回答“再多文件都不算多”。拆分成多个文件的宗旨是帮助你组织你的代码。如果你觉得某事值得拆分成多个文件，可以自由的拆分。正如CHRIS COYIER在《Sass Style Guide》中所说：\n\n拆分成尽可能多的小文件是有道理的。——@CHRIS COYIER\n\n不过，我建议不把单个组件拆分成多个文件，除非你有很好的理由这样做。通常我更倾向于一个组件一个文件。俗话说“没有更多，只有更少”。用一个简洁语义化的名称，用来表示模块的名称。这样我们就可以通过查找名称找到你需要的东西",
				"html": "<h1 id=\"构建你的结构体系\"><a href=\"#构建你的结构体系\" class=\"headerlink\" title=\"构建你的结构体系\"></a>构建你的结构体系</h1><p>CSS预处理器的特点之一是可以把你的代码分割成很多个文件，而且不会影响性能。这都要归功于Sass的@import命令，只要在你的开发环境下，你调用不管多少文件，最终将编译出一个CSS样式文件。</p>\n<p>开始将你的CSS文件分割成多个文件和文件夹。<br><a id=\"more\"></a></p>\n<h1 id=\"文件夹构建\"><a href=\"#文件夹构建\" class=\"headerlink\" title=\"文件夹构建\"></a>文件夹构建</h1><p>文件夹的创建是必不可少的。</p>\n<p>你在创建CSS的架构的时候不只是把所有的Sass文件放在一个文件夹下，你会将他们分类。</p>\n<p>下面的示例屏示的是我将如何组织我的Sass文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass/</div><div class=\"line\">|</div><div class=\"line\">|– base/</div><div class=\"line\">|   |– _reset.scss       <span class=\"comment\"># Reset/normalize</span></div><div class=\"line\">|   |– _typography.scss  <span class=\"comment\"># Typography rules</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|– components/</div><div class=\"line\">|   |– _buttons.scss     <span class=\"comment\"># Buttons</span></div><div class=\"line\">|   |– _carousel.scss    <span class=\"comment\"># Carousel</span></div><div class=\"line\">|   |– _cover.scss       <span class=\"comment\"># Cover</span></div><div class=\"line\">|   |– _dropdown.scss    <span class=\"comment\"># Dropdown</span></div><div class=\"line\">|   |– _navigation.scss  <span class=\"comment\"># Navigation</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|– helpers/</div><div class=\"line\">|   |– _variables.scss   <span class=\"comment\"># Sass Variables</span></div><div class=\"line\">|   |– _functions.scss   <span class=\"comment\"># Sass Functions</span></div><div class=\"line\">|   |– _mixins.scss      <span class=\"comment\"># Sass Mixins</span></div><div class=\"line\">|   |– _helpers.scss     <span class=\"comment\"># Class &amp; placeholders helpers</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|– layout/</div><div class=\"line\">|   |– _grid.scss        <span class=\"comment\"># Grid system</span></div><div class=\"line\">|   |– _header.scss      <span class=\"comment\"># Header</span></div><div class=\"line\">|   |– _footer.scss      <span class=\"comment\"># Footer</span></div><div class=\"line\">|   |– _sidebar.scss     <span class=\"comment\"># Sidebar</span></div><div class=\"line\">|   |– _forms.scss       <span class=\"comment\"># Forms</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|– pages/</div><div class=\"line\">|   |– _home.scss        <span class=\"comment\"># Home specific styles</span></div><div class=\"line\">|   |– _contact.scss     <span class=\"comment\"># Contact specific styles</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|– themes/</div><div class=\"line\">|   |– _theme.scss       <span class=\"comment\"># Default theme</span></div><div class=\"line\">|   |– _admin.scss       <span class=\"comment\"># Admin theme</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|– vendors/</div><div class=\"line\">|   |– _bootstrap.scss   <span class=\"comment\"># Bootstrap</span></div><div class=\"line\">|   |– _jquery-ui.scss   <span class=\"comment\"># jQuery UI</span></div><div class=\"line\">|   ...                  <span class=\"comment\"># Etc…</span></div><div class=\"line\">|</div><div class=\"line\">|</div><div class=\"line\">`– main.scss             <span class=\"comment\"># primary Sass file</span></div></pre></td></tr></table></figure></p>\n<p>正如你所看到的，在根目录底下只有一个main.scss文件，其他.scss文件都根据不同的分类放在对应的文件夹中，只是这些.scss文件前面都有一个下划线(_)，用来告诉Sass，这些.scss文件只是局部，不通过@import是不应该被编译出.css文件。事实上，它们是导入和合并文件的基本文件而以。</p>\n<p>一个文件可以解决所有问题，一个文件可以找到他们，一个文件给他们带来了所有的一切，Sass只是将他们合并在一起。——@J.R.R. Tolkien</p>\n<p>接下来，我们依次来看结构中的每一个文件目录。</p>\n<h2 id=\"Base\"><a href=\"#Base\" class=\"headerlink\" title=\"Base\"></a>Base</h2><p>base/文件夹包含了一些有关于你的项目中一些模板相关。在这里，你可以看到reset样式(或者Normalize.css,或者其他)，也有一些关于文本排版方面的，当然根据不同的项目会有一些其他的文件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_reset.scss或_normalize.scss</div><div class=\"line\">_typography.scss</div></pre></td></tr></table></figure></p>\n<h2 id=\"Helpers\"><a href=\"#Helpers\" class=\"headerlink\" title=\"Helpers\"></a>Helpers</h2><p>helpers/文件夹（有的地方也称其为utils/）主要包含了项目中关于Sass的工具和帮助之类。在里面放置了我们需要使用的_function.scss，和_mixin.scss。在这里还包含了一个_variables.scss文件（有的地方也称其为_config.scss），这里包含项目中所有的全局变量（比如排版本上的，配色方案等等）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_variables.scss</div><div class=\"line\">_mixin.scss</div><div class=\"line\">_function.scss</div><div class=\"line\">_placeholders.scss<span class=\"comment\">#(也有称为_helpers.scss)</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Layout\"><a href=\"#Layout\" class=\"headerlink\" title=\"Layout\"></a>Layout</h2><p>layout/文件夹(有时也称为partials/)中放置了大量的文件，每个文件主要用于布局方面的，比如说”header”，“footer”等。他也会包括_grid.scss文件，用来创建网格系统。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">_grid.scss</div><div class=\"line\">_header.scss</div><div class=\"line\">_footer.scss</div><div class=\"line\">_sidebar.scss</div><div class=\"line\">_forms.scss</div></pre></td></tr></table></figure></p>\n<p>导航文件（_navigation.scss）文件放在这里也有意义，虽然我将他放在了components/文件夹中。但是我想将其放在layout/文件夹中更好些，当然最后还是由你自己来决定。</p>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>对于一些小组件，都放在了components/文件夹（通常也称为modules/），layout/是一个宏观的（定义全局的线框），components/是一个微观的。它里面放了一些特定的组件，比如说slider，loading，widget或者其他的小组件。通常components/目录下的都是一些小组件文件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">_media.scss</div><div class=\"line\">_carousel.scss</div><div class=\"line\">_thumbnails.scss</div></pre></td></tr></table></figure></p>\n<h2 id=\"Page\"><a href=\"#Page\" class=\"headerlink\" title=\"Page\"></a>Page</h2><p>如果你需要针对一些页面写特定的样式，我想将他们放在page/文件夹中是非常酷的，并且以页面的名称来命名。例如，你的首页需要制作一个特定的样式，那么你就可以在page/文件夹中创建一个名叫_home.scss文件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_home.scss</div><div class=\"line\">_contact.scss</div></pre></td></tr></table></figure></p>\n<p>根据你自己的布署，你可以根据自己的需求调用这些文件，避免与其他样式文件合并在一起。这真的主取决于你自己，在我工作的地方，我是不允 许这样的事情发生，只在需要的页面调用需要的文件。比如说，我们首页有一个特定的布局样式，编译出来的CSS大约有200行代码。为了防止每个页面加载这 些代码，我只在主页文件上引用这个文件。</p>\n<h2 id=\"Themes\"><a href=\"#Themes\" class=\"headerlink\" title=\"Themes\"></a>Themes</h2><p>如果你像我一样要为一个大型的网站制作多个主题，那么有一个theme/文件夹是非常有意义的。你可以把主题相关的文件放在这个文件夹中。这绝对跟具体的项目有关，你只要觉得跟主题相关的，有必要引入。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">_theme.scss</div><div class=\"line\">_admin.scss</div></pre></td></tr></table></figure></p>\n<h2 id=\"Vendors\"><a href=\"#Vendors\" class=\"headerlink\" title=\"Vendors\"></a>Vendors</h2><p>最后一个但并非不重要，创建vendors/文件夹，主要用来包含来自外部的库和框架的CSS文件。比如Bootstrap,jQueryUI，FancyCarouselSliderjQueryPowered等等。把这些文件放在同一个文件夹中，你可以说，嘿，这些代码不是我的，不是我写的，跟我无关。</p>\n<p>例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bootstrap.scss</div><div class=\"line\">jquery-ui.scss</div><div class=\"line\">select2.scss</div></pre></td></tr></table></figure></p>\n<p>从另一个角度来说，在我平时工作中，还创建了一个vendors-extensions/文件夹，用来放置一些覆盖从外部引入进来的库和框架中的小组件。例如，我们可以在_bootstrap.scss文件中用来覆盖Bootstrap框架中的一些小组件。这为了避免和外部直接引来的组件升级造成的冲突，或许这不是一个很好的方案。</p>\n<p>大致就是这些，但不同的项目可能会不一样，但我可以肯定，你们都有了这样的一个概念。在文件夹中嵌套一个文件夹，这样的做法我一直不太反对，但我不 太喜欢这样的方式。我发现，在大多数情况之下，只需一个层级就足足够，既保证结构的简洁与清晰，而且不复杂。但话又说回来，如果你觉得你的项目有必要嵌套 更深层次的文件夹，你也可以自由的发挥。</p>\n<p>温馨提示：如果你觉得你的架构并不能向大家说明SCSS文件夹的架构，你可以在根目录下创建一个README.md文件（或者在main.scss文件中一步一步说明）解释。</p>\n<p>文件很酷？<br>有一个问题常被人问到“多少文件才算是很多文件呢？”我常回答“再多文件都不算多”。拆分成多个文件的宗旨是帮助你组织你的代码。如果你觉得某事值得拆分成多个文件，可以自由的拆分。正如CHRIS COYIER在《Sass Style Guide》中所说：</p>\n<p>拆分成尽可能多的小文件是有道理的。——@CHRIS COYIER</p>\n<p>不过，我建议不把单个组件拆分成多个文件，除非你有很好的理由这样做。通常我更倾向于一个组件一个文件。俗话说“没有更多，只有更少”。用一个简洁语义化的名称，用来表示模块的名称。这样我们就可以通过查找名称找到你需要的东西</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1483940478654,
				"created_by": 2,
				"updated_at": 1483940695221,
				"updated_by": 2,
				"published_at": 1483940478654,
				"published_by": 2
			},
			{
				"id": "cixipq36n0000csfcku4oqst0",
				"title": "淘宝npm镜像",
				"slug": "npm-node-taobao",
				"markdown": "\n镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:\n\n# 通过config命令\n```js\nnpm config set registry https://registry.npm.taobao.org\nnpm info underscore （如果上面配置正确这个命令会有字符串response）\n```\n# 命令行指定\n```bash\nnpm --registry https://registry.npm.taobao.org info underscore\n```\n# 编辑 ~/.npmrc 加入下面内容\n```bash\nregistry = https://registry.npm.taobao.org\n```\n搜索镜像: https://npm.taobao.org\n\n建立或使用镜像,参考: https://github.com/cnpm/cnpmjs.org",
				"html": "<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>\n<h1 id=\"通过config命令\"><a href=\"#通过config命令\" class=\"headerlink\" title=\"通过config命令\"></a>通过config命令</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https:<span class=\"comment\">//registry.npm.taobao.org</span></div><div class=\"line\">npm info underscore （如果上面配置正确这个命令会有字符串response）</div></pre></td></tr></table></figure>\n<h1 id=\"命令行指定\"><a href=\"#命令行指定\" class=\"headerlink\" title=\"命令行指定\"></a>命令行指定</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm --registry https://registry.npm.taobao.org info underscore</div></pre></td></tr></table></figure>\n<h1 id=\"编辑-npmrc-加入下面内容\"><a href=\"#编辑-npmrc-加入下面内容\" class=\"headerlink\" title=\"编辑 ~/.npmrc 加入下面内容\"></a>编辑 ~/.npmrc 加入下面内容</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">registry = https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>搜索镜像: <a href=\"https://npm.taobao.org\" target=\"_blank\" rel=\"external\">https://npm.taobao.org</a></p>\n<p>建立或使用镜像,参考: <a href=\"https://github.com/cnpm/cnpmjs.org\" target=\"_blank\" rel=\"external\">https://github.com/cnpm/cnpmjs.org</a></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1483520320440,
				"created_by": 2,
				"updated_at": 1483520321680,
				"updated_by": 2,
				"published_at": 1483520320440,
				"published_by": 2
			},
			{
				"id": "cixipq36w0001csfcim29yj05",
				"title": "gulp+browserSync+nodemon 实现express 全端自动刷新",
				"slug": "gulp-nodemon-refresh",
				"markdown": "\n# 技术细节\n整个项目的技术栈是 jade+node-sass+js，实现全自动开发。首先在 views 下面，定义好 jade 模版文件，然后开始新加页面\n<!--more-->\n\n# 关系依赖\n这个环境，主要基于 Express,Gulp 以及一系列的 Gulp 插件搭建，这个是开发环境的依赖关系：\n```js\n{\n  \"dependencies\": {\n    \"body-parser\": \"~1.13.2\",\n    \"cookie-parser\": \"~1.3.5\",\n    \"debug\": \"~2.2.0\",\n    \"express\": \"~4.13.1\",\n    \"jade\": \"~1.11.0\",\n    \"morgan\": \"~1.6.1\",\n    \"serve-favicon\": \"~2.3.0\"\n  },\n  \"devDependencies\": {\n    \"browser-sync\": \"^2.9.1\",\n    \"del\": \"^2.0.2\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-autoprefixer\": \"^3.0.1\",\n    \"gulp-jade\": \"^1.1.0\",\n    \"gulp-nodemon\": \"^2.0.4\",\n    \"gulp-sass\": \"^2.0.4\",\n    \"gulp-sourcemaps\": \"^1.5.2\",\n    \"jade\": \"^1.11.0\"\n  }\n}\n```\n其中，express 主要用来渲染 jade 模版引擎以及提供路由功能，同时起一个本地的服务器。有人说，渲染 jade 模版，我直接用 gulp 也可以啊。是的，gulp 是可以直接渲染 jade 模版，但是有一个问题，就是如果你本地只修改了一个 jade 文件时候，gulp 也需要把所有的 jade 文件全部渲染一遍，这明显会浪费很多时间。\n\n所以我引入了 express，只会按需渲染 jade，节省了很多时间。同时一个高效的开发环境必须有浏览器自动刷新，但是 express 没有这个功能。所以我引入了 browser-sync，用它来代理 express 启动的本地服务，然后来监测本地文件的变动，来做到浏览器自动刷新。\n\n有同学可能会问了，如果我改了 express 相应的 js 文件怎么办，或者 jade 文件编译出错了怎么办。因为这些时候 express 服务器都会 crash 掉，需要重启。所以我引入了 nodemon，来做 express 服务器的自动重启功能。\n\n在这个环境下面，我在开发中所能碰到的所有 jade，scss，js 文件的改动都会被检测到并作出相应的动作，而且速度还非常快。让我可以花更多时间在业务代码的开发上，而不是不断重启服务和刷新浏览器。\n\n# 最后\n\n同时附上 gulpfile 全文，以供参考：\n```js\n'use strict';\n\nvar gulp = require('gulp');\nvar browserSync = require('browser-sync');\nvar reload = browserSync.reload;\nvar sass = require('gulp-sass');\nvar prefix = require('gulp-autoprefixer');\nvar nodemon = require('gulp-nodemon');\nvar sourcemaps = require('gulp-sourcemaps');\nvar jade = require('gulp-jade');\nvar stylus = require('gulp-stylus');\nvar rename = require('gulp-rename');\nvar del = require('del');\n\n//dev task start\n//DONE can not compile the sass or less file\ngulp.task('sass', function () {\n  return gulp.src(['./sass/personal.scss'])\n    .pipe(sourcemaps.init())\n    .pipe(sass({errLogToConsole: true})\n      .on('error', sass.logError))\n    .pipe(prefix('last 2 versions', '> 1%', 'ie 8', 'Android 2'))\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('./public/css'))\n    .pipe(reload({stream: true}));\n});\n\ngulp.task('browser-sync', ['nodemon'], function () {\n  browserSync.init(null, {\n    proxy: 'http://localhost:3000',\n    files: ['public/**/*.*', 'views/**/*.*', 'submodule/**/*.*'],\n    browser: 'google chrome',\n    notify: false,\n    port: 5000\n  });\n});\n\ngulp.task('movesub', function () {\n  return gulp.src(['./submodule/images/**/*.*'], {base: './submodule'})\n    .pipe(gulp.dest('./public'))\n});\n\ngulp.task('stylus', function () {\n  return gulp.src('submodule/stylus/public.styl')\n    .pipe(stylus())\n    .pipe(rename({\n      extname: '.scss'\n    }))\n    .pipe(gulp.dest('submodule/stylus/'))\n});\n\ngulp.task('nodemon', function (cb) {\n  del(['./public/*.html']);\n\n  var called = false;\n\n  return nodemon({\n    script: 'bin/www'\n  }).on('start', function () {\n    if (!called) {\n      cb();\n      called = true;\n    }\n  });\n});\n//dev task end\n\ngulp.task('clean', function (cb) {\n  del(['./dist/*'], cb)\n});\n\ngulp.task('copy', function () {\n  return gulp.src([\n    'public/css/**/*',\n    'public/images/**/*',\n    'public/js/**/*',\n    'public/pageScripts/**/*'\n  ], {base: './public'})\n  .pipe(gulp.dest('./dist'))\n});\n\n//build task start\n//DONE add build task\ngulp.task('jade', function () {\n  return gulp.src(['views/**/*.jade', '!views/layout/**/*.jade', '!views/includes/**/*.jade'])\n    .pipe(jade({pretty: true}))\n    .pipe(gulp.dest('./dist'));\n});\n//build task end\n\ngulp.task('dist', ['clean', 'copy', 'jade']);\n\ngulp.task('default', ['browser-sync', 'sass', 'movesub'], function () {\n  gulp.watch(['sass/**/*.*', '.submodule/stylus/**/*.*'], ['sass']);\n});\n\n```",
				"html": "<h1 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h1><p>整个项目的技术栈是 jade+node-sass+js，实现全自动开发。首先在 views 下面，定义好 jade 模版文件，然后开始新加页面<br><a id=\"more\"></a></p>\n<h1 id=\"关系依赖\"><a href=\"#关系依赖\" class=\"headerlink\" title=\"关系依赖\"></a>关系依赖</h1><p>这个环境，主要基于 Express,Gulp 以及一系列的 Gulp 插件搭建，这个是开发环境的依赖关系：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"body-parser\"</span>: <span class=\"string\">\"~1.13.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"cookie-parser\"</span>: <span class=\"string\">\"~1.3.5\"</span>,</div><div class=\"line\">    <span class=\"string\">\"debug\"</span>: <span class=\"string\">\"~2.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"express\"</span>: <span class=\"string\">\"~4.13.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jade\"</span>: <span class=\"string\">\"~1.11.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"morgan\"</span>: <span class=\"string\">\"~1.6.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.3.0\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"browser-sync\"</span>: <span class=\"string\">\"^2.9.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"del\"</span>: <span class=\"string\">\"^2.0.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-autoprefixer\"</span>: <span class=\"string\">\"^3.0.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-jade\"</span>: <span class=\"string\">\"^1.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-nodemon\"</span>: <span class=\"string\">\"^2.0.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-sass\"</span>: <span class=\"string\">\"^2.0.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gulp-sourcemaps\"</span>: <span class=\"string\">\"^1.5.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jade\"</span>: <span class=\"string\">\"^1.11.0\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中，express 主要用来渲染 jade 模版引擎以及提供路由功能，同时起一个本地的服务器。有人说，渲染 jade 模版，我直接用 gulp 也可以啊。是的，gulp 是可以直接渲染 jade 模版，但是有一个问题，就是如果你本地只修改了一个 jade 文件时候，gulp 也需要把所有的 jade 文件全部渲染一遍，这明显会浪费很多时间。</p>\n<p>所以我引入了 express，只会按需渲染 jade，节省了很多时间。同时一个高效的开发环境必须有浏览器自动刷新，但是 express 没有这个功能。所以我引入了 browser-sync，用它来代理 express 启动的本地服务，然后来监测本地文件的变动，来做到浏览器自动刷新。</p>\n<p>有同学可能会问了，如果我改了 express 相应的 js 文件怎么办，或者 jade 文件编译出错了怎么办。因为这些时候 express 服务器都会 crash 掉，需要重启。所以我引入了 nodemon，来做 express 服务器的自动重启功能。</p>\n<p>在这个环境下面，我在开发中所能碰到的所有 jade，scss，js 文件的改动都会被检测到并作出相应的动作，而且速度还非常快。让我可以花更多时间在业务代码的开发上，而不是不断重启服务和刷新浏览器。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>同时附上 gulpfile 全文，以供参考：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> reload = browserSync.reload;</div><div class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> nodemon = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-nodemon'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sourcemaps'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> jade = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jade'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stylus = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-stylus'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//dev task start</span></div><div class=\"line\"><span class=\"comment\">//DONE can not compile the sass or less file</span></div><div class=\"line\">gulp.task(<span class=\"string\">'sass'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./sass/personal.scss'</span>])</div><div class=\"line\">    .pipe(sourcemaps.init())</div><div class=\"line\">    .pipe(sass(&#123;<span class=\"attr\">errLogToConsole</span>: <span class=\"literal\">true</span>&#125;)</div><div class=\"line\">      .on(<span class=\"string\">'error'</span>, sass.logError))</div><div class=\"line\">    .pipe(prefix(<span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'ie 8'</span>, <span class=\"string\">'Android 2'</span>))</div><div class=\"line\">    .pipe(sourcemaps.write())</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public/css'</span>))</div><div class=\"line\">    .pipe(reload(&#123;<span class=\"attr\">stream</span>: <span class=\"literal\">true</span>&#125;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'browser-sync'</span>, [<span class=\"string\">'nodemon'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  browserSync.init(<span class=\"literal\">null</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">proxy</span>: <span class=\"string\">'http://localhost:3000'</span>,</div><div class=\"line\">    <span class=\"attr\">files</span>: [<span class=\"string\">'public/**/*.*'</span>, <span class=\"string\">'views/**/*.*'</span>, <span class=\"string\">'submodule/**/*.*'</span>],</div><div class=\"line\">    <span class=\"attr\">browser</span>: <span class=\"string\">'google chrome'</span>,</div><div class=\"line\">    <span class=\"attr\">notify</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">5000</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'movesub'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'./submodule/images/**/*.*'</span>], &#123;<span class=\"attr\">base</span>: <span class=\"string\">'./submodule'</span>&#125;)</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'stylus'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'submodule/stylus/public.styl'</span>)</div><div class=\"line\">    .pipe(stylus())</div><div class=\"line\">    .pipe(rename(&#123;</div><div class=\"line\">      <span class=\"attr\">extname</span>: <span class=\"string\">'.scss'</span></div><div class=\"line\">    &#125;))</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'submodule/stylus/'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'nodemon'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cb</span>) </span>&#123;</div><div class=\"line\">  del([<span class=\"string\">'./public/*.html'</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> called = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> nodemon(&#123;</div><div class=\"line\">    <span class=\"attr\">script</span>: <span class=\"string\">'bin/www'</span></div><div class=\"line\">  &#125;).on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!called) &#123;</div><div class=\"line\">      cb();</div><div class=\"line\">      called = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//dev task end</span></div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cb</span>) </span>&#123;</div><div class=\"line\">  del([<span class=\"string\">'./dist/*'</span>], cb)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'copy'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</div><div class=\"line\">    <span class=\"string\">'public/css/**/*'</span>,</div><div class=\"line\">    <span class=\"string\">'public/images/**/*'</span>,</div><div class=\"line\">    <span class=\"string\">'public/js/**/*'</span>,</div><div class=\"line\">    <span class=\"string\">'public/pageScripts/**/*'</span></div><div class=\"line\">  ], &#123;<span class=\"attr\">base</span>: <span class=\"string\">'./public'</span>&#125;)</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./dist'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//build task start</span></div><div class=\"line\"><span class=\"comment\">//DONE add build task</span></div><div class=\"line\">gulp.task(<span class=\"string\">'jade'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'views/**/*.jade'</span>, <span class=\"string\">'!views/layout/**/*.jade'</span>, <span class=\"string\">'!views/includes/**/*.jade'</span>])</div><div class=\"line\">    .pipe(jade(&#123;<span class=\"attr\">pretty</span>: <span class=\"literal\">true</span>&#125;))</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//build task end</span></div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'dist'</span>, [<span class=\"string\">'clean'</span>, <span class=\"string\">'copy'</span>, <span class=\"string\">'jade'</span>]);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'browser-sync'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'movesub'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  gulp.watch([<span class=\"string\">'sass/**/*.*'</span>, <span class=\"string\">'.submodule/stylus/**/*.*'</span>], [<span class=\"string\">'sass'</span>]);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1483520214609,
				"created_by": 2,
				"updated_at": 1483520216160,
				"updated_by": 2,
				"published_at": 1483520214609,
				"published_by": 2
			},
			{
				"id": "cixb5jc3b0001dkfc172kdbfw",
				"title": "启用composer镜像",
				"slug": "php_composer_install",
				"markdown": "\n# 用法：\n\n有两种方式启用本镜像服务：\n\n系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“例1”\n单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“例2”\n<!--more-->\n例1：修改 composer 的全局配置文件（推荐方式）\n\n打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：\n```bash\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n例2：修改当前项目的 composer.json 配置文件：\n\n打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：\n```bash\ncomposer config repo.packagist composer https://packagist.phpcomposer.com\n```\n上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：\n```json\n\"repositories\": {\n    \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n    }\n}\n```\n以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：\n```json\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"laravel/framework\": \"5.2.*\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"phpunit/phpunit\": \"~4.0\",\n        \"symfony/css-selector\": \"2.8.*|3.0.*\",\n        \"symfony/dom-crawler\": \"2.8.*|3.0.*\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database\"\n        ],\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/TestCase.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php artisan key:generate\"\n        ],\n        \"post-install-cmd\": [\n            \"php artisan clear-compiled\",\n            \"php artisan optimize\"\n        ],\n        \"pre-update-cmd\": [\n            \"php artisan clear-compiled\"\n        ],\n        \"post-update-cmd\": [\n            \"php artisan optimize\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    },\n    \"repositories\": {\n        \"packagist\": {\n            \"type\": \"composer\",\n            \"url\": \"https://packagist.phpcomposer.com\"\n        }\n    }\n}\n```\nOK，一切搞定！试一下 composer install 来体验飞一般的速度吧！\n\n# 镜像说明：\n\n一般情况下，安装包的数据（主要是 zip 文件）一般是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。\n\n然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”甚至“不存在”。\n\n“Packagist 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，从而达到加速 composer install 以及 composer update 的过程，并且更加快速、稳定。因此，即使 packagist.org、github.com 发生故障（主要是连接速度太慢和被墙），你仍然可以下载、更新安装包。\n\n\n# 如何安装 Composer\n安装前请务必确保已经正确安装了 PHP。打开命令行窗口并执行 php -v 查看是否正确输出版本号。\n打开命令行并执行下列命令安装最新版本的 Composer (以下指令摘自 https://getcomposer.org/download/ ，请前往查看最新的安装指令)：\n```bash\nphp -r \"readfile('https://getcomposer.org/installer');\" > composer-setup.php\n#下载安装脚本（composer-setup.php）到当前目录。\nphp composer-setup.php\n#执行安装过程。\nphp -r \"unlink('composer-setup.php');\"\n#删除安装脚本 -- composer-setup.php 。\n```\n执行第一条命令下载下来的 composer-setup.php 脚本将简单的检测 php.ini 中的参数设置，如果某些参数未正确设置则会给出警告；然后下载最新版本的 composer.phar 文件到当前目录。\n\n## 局部安装\n\n上述下载 Composer 的过程正确执行完毕后，可以将 composer.phar 文件复制到任意目录（比如项目根目录下），然后通过 php composer.phar 指令即可使用 Composer 了！\n\n## 全局安装\n\n全局安装是将 Composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口中直接执行 composer 命令了。\n\nMac 或 Linux 系统：打开命令行窗口并执行如下命令将前面下载的 composer.phar 文件移动到 /usr/local/bin/ 目录下面：\n```bash\nsudo mv composer.phar /usr/local/bin/composer\n```\nWindows 系统：\n\n找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。\n将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。\n在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。\n@php \"%~dp0composer.phar\" %*\n最后重新打开一个命令行窗口试一试执行 composer --version 看看是否正确输出版本号。\n\n## 最后\n\n提示：不要忘了经常执行 composer selfupdate 以保持 Composer 一直是最新版本哦！",
				"html": "<h1 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h1><p>有两种方式启用本镜像服务：</p>\n<p>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“例1”<br>单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“例2”<br><a id=\"more\"></a><br>例1：修改 composer 的全局配置文件（推荐方式）</p>\n<p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure></p>\n<p>例2：修改当前项目的 composer.json 配置文件：</p>\n<p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer config repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure></p>\n<p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"repositories\": &#123;</div><div class=\"line\">    \"packagist\": &#123;</div><div class=\"line\">        \"type\": \"composer\",</div><div class=\"line\">        \"url\": \"https://packagist.phpcomposer.com\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以 laravel 项目的 composer.json 配置文件为例，执行上述命令后如下所示（注意最后几行）：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"laravel/laravel\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"The Laravel Framework.\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"keywords\"</span>: [<span class=\"string\">\"framework\"</span>, <span class=\"string\">\"laravel\"</span>],</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"project\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"&gt;=5.5.9\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"laravel/framework\"</span>: <span class=\"string\">\"5.2.*\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"fzaninotto/faker\"</span>: <span class=\"string\">\"~1.4\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mockery/mockery\"</span>: <span class=\"string\">\"0.9.*\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"phpunit/phpunit\"</span>: <span class=\"string\">\"~4.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"symfony/css-selector\"</span>: <span class=\"string\">\"2.8.*|3.0.*\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"symfony/dom-crawler\"</span>: <span class=\"string\">\"2.8.*|3.0.*\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"classmap\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"database\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"App\\\\\"</span>: <span class=\"string\">\"app/\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"autoload-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"classmap\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"tests/TestCase.php\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"post-root-package-install\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php -r \\\"copy('.env.example', '.env');\\\"\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"post-create-project-cmd\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php artisan key:generate\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"post-install-cmd\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php artisan clear-compiled\"</span>,</div><div class=\"line\">            <span class=\"string\">\"php artisan optimize\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"pre-update-cmd\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php artisan clear-compiled\"</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"attr\">\"post-update-cmd\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php artisan optimize\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"config\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"preferred-install\"</span>: <span class=\"string\">\"dist\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"repositories\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"packagist\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"composer\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://packagist.phpcomposer.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>OK，一切搞定！试一下 composer install 来体验飞一般的速度吧！</p>\n<h1 id=\"镜像说明：\"><a href=\"#镜像说明：\" class=\"headerlink\" title=\"镜像说明：\"></a>镜像说明：</h1><p>一般情况下，安装包的数据（主要是 zip 文件）一般是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。</p>\n<p>然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”甚至“不存在”。</p>\n<p>“Packagist 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，从而达到加速 composer install 以及 composer update 的过程，并且更加快速、稳定。因此，即使 packagist.org、github.com 发生故障（主要是连接速度太慢和被墙），你仍然可以下载、更新安装包。</p>\n<h1 id=\"如何安装-Composer\"><a href=\"#如何安装-Composer\" class=\"headerlink\" title=\"如何安装 Composer\"></a>如何安装 Composer</h1><p>安装前请务必确保已经正确安装了 PHP。打开命令行窗口并执行 php -v 查看是否正确输出版本号。<br>打开命令行并执行下列命令安装最新版本的 Composer (以下指令摘自 <a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"external\">https://getcomposer.org/download/</a> ，请前往查看最新的安装指令)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">php -r <span class=\"string\">\"readfile('https://getcomposer.org/installer');\"</span> &gt; composer-setup.php</div><div class=\"line\"><span class=\"comment\">#下载安装脚本（composer-setup.php）到当前目录。</span></div><div class=\"line\">php composer-setup.php</div><div class=\"line\"><span class=\"comment\">#执行安装过程。</span></div><div class=\"line\">php -r <span class=\"string\">\"unlink('composer-setup.php');\"</span></div><div class=\"line\"><span class=\"comment\">#删除安装脚本 -- composer-setup.php 。</span></div></pre></td></tr></table></figure></p>\n<p>执行第一条命令下载下来的 composer-setup.php 脚本将简单的检测 php.ini 中的参数设置，如果某些参数未正确设置则会给出警告；然后下载最新版本的 composer.phar 文件到当前目录。</p>\n<h2 id=\"局部安装\"><a href=\"#局部安装\" class=\"headerlink\" title=\"局部安装\"></a>局部安装</h2><p>上述下载 Composer 的过程正确执行完毕后，可以将 composer.phar 文件复制到任意目录（比如项目根目录下），然后通过 php composer.phar 指令即可使用 Composer 了！</p>\n<h2 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h2><p>全局安装是将 Composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口中直接执行 composer 命令了。</p>\n<p>Mac 或 Linux 系统：打开命令行窗口并执行如下命令将前面下载的 composer.phar 文件移动到 /usr/local/bin/ 目录下面：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</div></pre></td></tr></table></figure></p>\n<p>Windows 系统：</p>\n<p>找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。<br>将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。<br>在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。<br>@php “%~dp0composer.phar” %*<br>最后重新打开一个命令行窗口试一试执行 composer –version 看看是否正确输出版本号。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>提示：不要忘了经常执行 composer selfupdate 以保持 Composer 一直是最新版本哦！</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1483062533485,
				"created_by": 2,
				"updated_at": 1483062535300,
				"updated_by": 2,
				"published_at": 1483062533485,
				"published_by": 2
			},
			{
				"id": "cixb3so2p000064fcywqv4unm",
				"title": "Ubuntu 16.04安装Laravel",
				"slug": "linux_php_laravel",
				"markdown": "\nLaravel是开源的PHP框架，方便用户开发MVC web应用。\nLaravel源代码：https://github.com/laravel/laravel\n<!--more-->\nUbuntu 16.04安装Laravel\n\n# 安装PHP\n```bash\napt update\napt upgrade\napt install php php-mcrypt php-gd php-mbstring php-mysql\n```\n\n# 安装composer\n```bash\ncurl -sS https://getcomposer.org/installer | php\nchmod +x composer.phar\nmv composer.phar /usr/local/bin/composer\n```\n# 安装MySQL数据库\n\n首先，更新升级系统：\n```bash\n$ sudo apt update\n$ sudo apt upgrade\n```\n安装MariaDB\n```bash\n$ sudo apt install mariadb-server\n```\n启动MariaDB服务\n```bash\n$ sudo systemctl start mysql\n$ sudo systemctl enable mysql\n```\n\n# 安装Apache\n```bash\napt install apache2\n```\n启动apache服务\n```bash\nsystemctl start apache2\nsystemctl enable apache2\n```\n\n# 下载Laravel\n```bash\ncd /var/www/html\ngit clone https://github.com/laravel/laravel.git\n```\n# 安装Laravel\n```bash\ncd laravel\ncomposer install\n```\n# 设置文件权限\n```bash\nchown -R www-data: /var/www/html/laravel\n# chmod -R 755 /var/www/laravel\n```\n创建.env配置文件\n```bash\nmv .env.example .env\n```\n生成App key\n```\n$ php artisan key:generate\n```\n编辑config/app.php，把上面生成的key写入：\n![图片](http://www.linuxdiyf.com/linux/uploads/allimg/161031/2-161031222930449.jpg)\n\n添加虚拟主机配置文件\n```bash\n$ vim /etc/apache2/sites-available/laravel.conf\n```\n写入内容\n```xml\n<VirtualHost *:80>\nServerAdmin admin@your_domain.com\nDocumentRoot /var/www/html/laravel/public/\nServerName your_domain.com\nServerAlias www.your_domain.com\n<Directory /var/www/html/laravel/>\nOptions FollowSymLinks\nAllowOverride All\nOrder allow,deny\nallow from all\n</Directory>\nErrorLog /var/log/apache2/your_domain.com-error_log\nCustomLog /var/log/apache2/your_domain.com-access_log common\n</VirtualHost>\n```\n注意替换上面的域名。\n使生效：\n```bash\na2ensite laravel.conf\nsystemctl restart apache2\n```\n使用浏览器访问：your_doamin_or_IP\n![图片](http://www.linuxdiyf.com//linux/uploads/allimg/161031/2-1610312229415M.JPG)\n",
				"html": "<p>Laravel是开源的PHP框架，方便用户开发MVC web应用。<br>Laravel源代码：<a href=\"https://github.com/laravel/laravel\" target=\"_blank\" rel=\"external\">https://github.com/laravel/laravel</a><br><a id=\"more\"></a><br>Ubuntu 16.04安装Laravel</p>\n<h1 id=\"安装PHP\"><a href=\"#安装PHP\" class=\"headerlink\" title=\"安装PHP\"></a>安装PHP</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt update</div><div class=\"line\">apt upgrade</div><div class=\"line\">apt install php php-mcrypt php-gd php-mbstring php-mysql</div></pre></td></tr></table></figure>\n<h1 id=\"安装composer\"><a href=\"#安装composer\" class=\"headerlink\" title=\"安装composer\"></a>安装composer</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>S https://getcomposer.org/installer | php</div><div class=\"line\">chmod +x composer.phar</div><div class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</div></pre></td></tr></table></figure>\n<h1 id=\"安装MySQL数据库\"><a href=\"#安装MySQL数据库\" class=\"headerlink\" title=\"安装MySQL数据库\"></a>安装MySQL数据库</h1><p>首先，更新升级系统：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt update</div><div class=\"line\">$ sudo apt upgrade</div></pre></td></tr></table></figure></p>\n<p>安装MariaDB<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt install mariadb-server</div></pre></td></tr></table></figure></p>\n<p>启动MariaDB服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo systemctl start mysql</div><div class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> mysql</div></pre></td></tr></table></figure></p>\n<h1 id=\"安装Apache\"><a href=\"#安装Apache\" class=\"headerlink\" title=\"安装Apache\"></a>安装Apache</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt install apache2</div></pre></td></tr></table></figure>\n<p>启动apache服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start apache2</div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> apache2</div></pre></td></tr></table></figure></p>\n<h1 id=\"下载Laravel\"><a href=\"#下载Laravel\" class=\"headerlink\" title=\"下载Laravel\"></a>下载Laravel</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /var/www/html</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/laravel/laravel.git</div></pre></td></tr></table></figure>\n<h1 id=\"安装Laravel\"><a href=\"#安装Laravel\" class=\"headerlink\" title=\"安装Laravel\"></a>安装Laravel</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> laravel</div><div class=\"line\">composer install</div></pre></td></tr></table></figure>\n<h1 id=\"设置文件权限\"><a href=\"#设置文件权限\" class=\"headerlink\" title=\"设置文件权限\"></a>设置文件权限</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown -R www-data: /var/www/html/laravel</div><div class=\"line\"><span class=\"comment\"># chmod -R 755 /var/www/laravel</span></div></pre></td></tr></table></figure>\n<p>创建.env配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv .env.example .env</div></pre></td></tr></table></figure></p>\n<p>生成App key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ php artisan key:generate</div></pre></td></tr></table></figure></p>\n<p>编辑config/app.php，把上面生成的key写入：<br><img src=\"http://www.linuxdiyf.com/linux/uploads/allimg/161031/2-161031222930449.jpg\" alt=\"图片\"></p>\n<p>添加虚拟主机配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/apache2/sites-available/laravel.conf</div></pre></td></tr></table></figure></p>\n<p>写入内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></div><div class=\"line\">ServerAdmin admin@your_domain.com</div><div class=\"line\">DocumentRoot /var/www/html/laravel/public/</div><div class=\"line\">ServerName your_domain.com</div><div class=\"line\">ServerAlias www.your_domain.com</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Directory</span> /<span class=\"attr\">var</span>/<span class=\"attr\">www</span>/<span class=\"attr\">html</span>/<span class=\"attr\">laravel</span>/&gt;</span></div><div class=\"line\">Options FollowSymLinks</div><div class=\"line\">AllowOverride All</div><div class=\"line\">Order allow,deny</div><div class=\"line\">allow from all</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></div><div class=\"line\">ErrorLog /var/log/apache2/your_domain.com-error_log</div><div class=\"line\">CustomLog /var/log/apache2/your_domain.com-access_log common</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>注意替换上面的域名。<br>使生效：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a2ensite laravel.conf</div><div class=\"line\">systemctl restart apache2</div></pre></td></tr></table></figure></p>\n<p>使用浏览器访问：your_doamin_or_IP<br><img src=\"http://www.linuxdiyf.com//linux/uploads/allimg/161031/2-1610312229415M.JPG\" alt=\"图片\"></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1483060248298,
				"created_by": 2,
				"updated_at": 1483061812478,
				"updated_by": 2,
				"published_at": 1483060248298,
				"published_by": 2
			},
			{
				"id": "cix1fexaw0000c0fc2315vc81",
				"title": "vue router-link标签用法",
				"slug": "vue-router-link",
				"markdown": "\n\n<router-link> 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <a> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。\n\n<!--more-->\n<router-link> 比起写死的 <a href=\"...\"> 会好一些，理由如下：\n\n无论是 HTML5 history 模式还是 hash 模式，它的表现行为一致，所以，当你要切换路由模式，或者在 IE9 降级使用 hash 模式，无须作任何变动。\n\n在 HTML5 history 模式下，router-link 会拦截点击事件，让浏览器不在重新加载页面。\n\n当你在 HTML5 history 模式下使用 base 选项之后，所有的 to 属性都不需要写（基路径）了。\n\n# Props\n\n## to\n\n类型: string | Location\n\nrequired\n\n表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。\n```html\n<!-- 字符串 -->\n<router-link to=\"home\">Home</router-link>\n<!-- 渲染结果 -->\n<a href=\"home\">Home</a>\n\n<!-- 使用 v-bind 的 JS 表达式 -->\n<router-link v-bind:to=\"'home'\">Home</router-link>\n\n<!-- 不写 v-bind 也可以，就像绑定别的属性一样 -->\n<router-link :to=\"'home'\">Home</router-link>\n\n<!-- 同上 -->\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n\n<!-- 命名的路由 -->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n\n<!-- 带查询参数，下面的结果为 /register?plan=private -->\n<router-link :to=\"{ path: 'register', query: { plan: 'private' }}\">Register</router-link>\n```\n## replace\n\n类型: boolean\n\n默认值: false\n\n设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。\n```html\n<router-link :to=\"{ path: '/abc'}\" replace></router-link>\n```\n## append\n\n类型: boolean\n\n默认值: false\n\n设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b\n```html\n  <router-link :to=\"{ path: 'relative/path'}\" append></router-link>\n```\n## tag\n\n类型: string\n\n默认值: \"a\"\n\n有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。\n```html\n<router-link to=\"/foo\" tag=\"li\">foo</router-link>\n<!-- 渲染结果 -->\n<li>foo</li>\n```\n## active-class\n\n类型: string\n\n默认值: \"router-link-active\"\n\n设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。\n\n## exact\n\n类型: boolean\n\n默认值: false\n\n\"是否激活\" 默认类名的依据是 inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 <router-link to=\"/a\"> 也会被设置 CSS 类名。\n\n按照这个规则，<router-link to=\"/\"> 将会点亮各个路由！想要链接使用 \"exact 匹配模式\"，则使用 exact 属性：\n```html\n  <!-- 这个链接只会在地址为 / 的时候被激活 -->\n  <router-link to=\"/\" exact>\n```\n查看更多关于激活链接类名的例子 可运行.\n\n## events\n\n2.1.0+\n\n类型: string | Array<string>\n\n默认值: 'click'\n\n声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。\n\n# 将\"激活时的CSS类名\"应用在外层元素\n\n有时候我们要让 \"激活时的CSS类名\" 应用在外层元素，而不是 <a> 标签本身，那么可以用 <router-link> 渲染外层元素，包裹着内层的原生 <a> 标签：\n```html\n<router-link tag=\"li\" to=\"/foo\">\n  <a>/foo</a>\n</router-link>\n```\n在这种情况下，<a> 将作为真实的链接（它会获得正确的 href 的），而 \"激活时的CSS类名\" 则设置到外层的 <li>。",
				"html": "<p><router-link> 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <a> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。</a></router-link></p>\n<a id=\"more\"></a>\n<p><router-link> 比起写死的 <a href=\"...\"> 会好一些，理由如下：</a></router-link></p>\n<p>无论是 HTML5 history 模式还是 hash 模式，它的表现行为一致，所以，当你要切换路由模式，或者在 IE9 降级使用 hash 模式，无须作任何变动。</p>\n<p>在 HTML5 history 模式下，router-link 会拦截点击事件，让浏览器不在重新加载页面。</p>\n<p>当你在 HTML5 history 模式下使用 base 选项之后，所有的 to 属性都不需要写（基路径）了。</p>\n<h1 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h1><h2 id=\"to\"><a href=\"#to\" class=\"headerlink\" title=\"to\"></a>to</h2><p>类型: string | Location</p>\n<p>required</p>\n<p>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 字符串 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 渲染结果 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-bind:to</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'home' &#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 命名的路由 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;\"</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;\"</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h2><p>类型: boolean</p>\n<p>默认值: false</p>\n<p>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: '/abc'&#125;\"</span> <span class=\"attr\">replace</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append\"></a>append</h2><p>类型: boolean</p>\n<p>默认值: false</p>\n<p>设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; path: 'relative/path'&#125;\"</span> <span class=\"attr\">append</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h2><p>类型: string</p>\n<p>默认值: “a”</p>\n<p>有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 渲染结果 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure></li></router-link></p>\n<h2 id=\"active-class\"><a href=\"#active-class\" class=\"headerlink\" title=\"active-class\"></a>active-class</h2><p>类型: string</p>\n<p>默认值: “router-link-active”</p>\n<p>设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。</p>\n<h2 id=\"exact\"><a href=\"#exact\" class=\"headerlink\" title=\"exact\"></a>exact</h2><p>类型: boolean</p>\n<p>默认值: false</p>\n<p>“是否激活” 默认类名的依据是 inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 <router-link to=\"/a\"> 也会被设置 CSS 类名。</router-link></p>\n<p>按照这个规则，<router-link to=\"/\"> 将会点亮各个路由！想要链接使用 “exact 匹配模式”，则使用 exact 属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这个链接只会在地址为 / 的时候被激活 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">exact</span>&gt;</span></div></pre></td></tr></table></figure></router-link></p>\n<p>查看更多关于激活链接类名的例子 可运行.</p>\n<h2 id=\"events\"><a href=\"#events\" class=\"headerlink\" title=\"events\"></a>events</h2><p>2.1.0+</p>\n<p>类型: string | Array<string></string></p>\n<p>默认值: ‘click’</p>\n<p>声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。</p>\n<h1 id=\"将”激活时的CSS类名”应用在外层元素\"><a href=\"#将”激活时的CSS类名”应用在外层元素\" class=\"headerlink\" title=\"将”激活时的CSS类名”应用在外层元素\"></a>将”激活时的CSS类名”应用在外层元素</h1><p>有时候我们要让 “激活时的CSS类名” 应用在外层元素，而不是 <a> 标签本身，那么可以用 <router-link> 渲染外层元素，包裹着内层的原生 <a> 标签：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/foo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>/foo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure></a></router-link></a></p>\n<p>在这种情况下，<a> 将作为真实的链接（它会获得正确的 href 的），而 “激活时的CSS类名” 则设置到外层的 <li>。</li></a></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1482475104610,
				"created_by": 2,
				"updated_at": 1482475106803,
				"updated_by": 2,
				"published_at": 1482475104610,
				"published_by": 2
			},
			{
				"id": "ciwxbcx14000a0kfcog5jqj8l",
				"title": "es6 常用特性一览",
				"slug": "es6-usual",
				"markdown": "最常用的ES6特性\n```bash\nlet, const, class, extends, super, arrow functions, template string, destructuring, default, rest arguments\n```\n这些是ES6最常用的几个语法，基本上学会它们，就可以满足一般的项目开发\n<!--more-->\n\n# let, const\n\n\n这两个的用途与var类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。\n## let\nlet可以取代var声明局部变量，只在块状作用域内有效，用完销毁，无须担心副作用\n\n```js\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n```\n上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。\n```js\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n```\n再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。\n```js\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = function(){\n        console.log(i)\n    }\n}\n```\n我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。\n```js\nfunction iteratorFactory(i){\n    var onclick = function(e){\n        console.log(i)\n    }\n    return onclick;\n}\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = iteratorFactory(i)\n}\n```\n## const\nconst也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。\n```js\nconst PI = Math.PI\n\nPI = 23 //Module build failed: SyntaxError: /es6/app.js: \"PI\" is read-only\n```\n当我们尝试去改变用const声明的常量时，浏览器就会报错。\nconst有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：\n```js\nconst monent = require('moment')\n```\n# class, extends, super\n\nES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。\n```js\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        console.log(this.type + ' says ' + say)\n    }\n}\n\nlet animal = new Animal()\nanimal.says('hello') //animal says hello\n\nclass Cat extends Animal {\n    constructor(){\n        super()\n        this.type = 'cat'\n    }\n}\n\nlet cat = new Cat()\ncat.says('hello') //cat says hello\n```\n上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实力对象可以共享的。\n\nClass之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。\n\nsuper关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n\nES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。\n\nP.S 如果你写react的话，就会发现以上三个东西在最新版React中出现得很多。创建的每个component都是一个继承React.Component的类。详见react文档\n\n# 箭头函数\n\nES6允许使用“箭头”（=>）定义函数。\n```js\nvar f = v => v;\n```\n上面的箭头函数等同于：\n```js\nvar f = function(v) {\n  return v;\n};\n```\n如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。\n```js\nvar f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。\n```js\nvar sum = (num1, num2) => { return num1 + num2; }\n```\n由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。\n```js\nvar getTempItem = id => ({ id: id, name: \"Temp\" });\n```\n箭头函数可以与变量解构结合使用。\n```js\nconst full = ({ first, last }) => first + ' ' + last;\n\n// 等同于\nfunction full(person) {\n  return person.first + ' ' + person.last;\n}\n```\n箭头函数使得表达更加简洁。\n```js\nconst isEven = n => n % 2 == 0;\nconst square = n => n * n;\n```\n上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。\n\n箭头函数的一个用处是简化回调函数。\n```js\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x => x * x);\n另一个例子是\n\n// 正常函数写法\nvar result = values.sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = values.sort((a, b) => a - b);\n下面是rest参数与箭头函数结合的例子。\n\nconst numbers = (...nums) => nums;\n\nnumbers(1, 2, 3, 4, 5)\n// [1,2,3,4,5]\n\nconst headAndTail = (head, ...tail) => [head, tail];\n\nheadAndTail(1, 2, 3, 4, 5)\n// [1,[2,3,4,5]]\n```\n# 函数参数\n\n## 基本用法\n\nES6允许为函数的参数设置默认值，即直接写在参数定义的后面。\n```js\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n```\n可以看到，ES6的写法比ES5简洁许多，而且非常自然。下面是另一个例子。\n```js\nfunction Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\n\nvar p = new Point();\np // { x: 0, y: 0 }\n```\n除了简洁，ES6的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。\n\n参数变量是默认声明的，所以不能用let或const再次声明。\n```js\nfunction foo(x = 5) {\n  let x = 1; // error\n  const x = 2; // error\n}\n```\n上面代码中，参数变量x是默认声明的，在函数体中，不能用let或const再次声明，否则会报错。\n\n## 参数默认值的位置\n通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际\n上这个参数是没法省略的。\n```js\n// 例一\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf() // [1, undefined]\nf(2) // [2, undefined])\nf(, 1) // 报错\nf(undefined, 1) // [1, 1]\n\n// 例二\nfunction f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf() // [undefined, 5, undefined]\nf(1) // [1, 5, undefined]\nf(1, ,2) // 报错\nf(1, undefined, 2) // [1, 5, 2]\n```\n上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。\n\n如果传入undefined，将触发该参数等于默认值，null则没有这个效果。\n```js\nfunction foo(x = 5, y = 6) {\n  console.log(x, y);\n}\n\nfoo(undefined, null)\n// 5 null\n```\n上面代码中，x参数对应undefined，结果触发了默认值，y参数等于null，就没有触发默认值。\n\n\n\n## rest参数\nES6引入rest参数（形式为“...变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n```js\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n上面代码的add函数是一个求和函数，利用rest参数，可以向该函数传入任意数目的参数。\n\n下面是一个rest参数代替arguments变量的例子。\n```js\n// arguments变量的写法\nfunction sortNumbers() {\n  return Array.prototype.slice.call(arguments).sort();\n}\n\n// rest参数的写法\nconst sortNumbers = (...numbers) => numbers.sort();\n```\n上面代码的两种写法，比较后可以发现，rest参数的写法更自然也更简洁。\n\nrest参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。下面是一个利用rest参数改写数组push方法的例子。\n```js\nfunction push(array, ...items) {\n  items.forEach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n```\n注意，rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。\n```js\n// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n```\n函数的length属性，不包括rest参数。\n```js\n(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n```\n\n## 扩展运算符\n\n扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。\n```js\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>]\n```\n该运算符主要用于函数调用。\n```js\nfunction push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar numbers = [4, 38];\nadd(...numbers) // 42\n```\n上面代码中，array.push(...items)和add(...numbers)这两行，都是函数的调用，它们的都使用了扩展运算符。该运算符将一个数组，变为参数序列。\n\n扩展运算符与正常的函数参数可以结合使用，非常灵活。\n```js\nfunction f(v, w, x, y, z) { }\nvar args = [0, 1];\nf(-1, ...args, 2, ...[3]);\n```\n## 替代数组的apply方法\n由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。\n```js\n// ES5的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n下面是扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法。\n```js\n// ES5的写法\nMath.max.apply(null, [14, 3, 77])\n\n// ES6的写法\nMath.max(...[14, 3, 77])\n\n// 等同于\nMath.max(14, 3, 77);\n```\n上面代码表示，由于JavaScript不提供求数组最大元素的函数，所以只能套用Math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用Math.max了。\n\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。\n```js\n// ES5的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n上面代码的ES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。\n\n下面是另外一个例子。\n```js\n// ES5\nnew (Date.bind.apply(Date, [null, 2015, 1, 1]))\n// ES6\nnew Date(...[2015, 1, 1]);\n\n```\n\n\n# template string\n传统的JavaScript语言，输出模板通常是这样写的。\n```js\n$('#result').append(\n  'There are <b>' + basket.count + '</b> ' +\n  'items in your basket, ' +\n  '<em>' + basket.onSale +\n  '</em> are on sale!'\n);\n```\n上面这种写法相当繁琐不方便，ES6引入了模板字符串解决这个问题。\n```js\n$('#result').append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n```\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```js\n// 普通字符串\n`In JavaScript '\\n' is a line-feed.`\n\n// 多行字符串\n`In JavaScript this is\n not legal.`\n\nconsole.log(`string text line 1\nstring text line 2`);\n\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n```\n上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。\n```js\nvar greeting = `\\`Yo\\` World!`;\n```\n如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。\n```js\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`);\n```\n上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。\n```js\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`.trim());\n```\n模板字符串中嵌入变量，需要将变量名写在${}之中。\n```js\nfunction authorize(user, action) {\n  if (!user.hasPrivilege(action)) {\n    throw new Error(\n      // 传统写法为\n      // 'User '\n      // + user.name\n      // + ' is not authorized to do '\n      // + action\n      // + '.'\n      `User ${user.name} is not authorized to do ${action}.`);\n  }\n}\n```\n大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。\n```js\nvar x = 1;\nvar y = 2;\n\n`${x} + ${y} = ${x + y}`\n// \"1 + 2 = 3\"\n\n`${x} + ${y * 2} = ${x + y * 2}`\n// \"1 + 4 = 5\"\n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`\n// 3\n```\n模板字符串之中还能调用函数。\n```js\nfunction fn() {\n  return \"Hello World\";\n}\n\n`foo ${fn()} bar`\n// foo Hello World bar\n```\n如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。\n\n如果模板字符串中的变量没有声明，将报错。\n```js\n// 变量place没有声明\nvar msg = `Hello, ${place}`;\n// 报错\n```\n由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。\n```js\n`Hello ${'World'}`\n// \"Hello World\"\n```\n模板字符串甚至还能嵌套。\n```js\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n```\n上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。\n```js\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n```\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```js\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n# destructuring\nES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n看下面的例子：\n```js\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat: cat, dog: dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n```\n用ES6完全可以像下面这么写：\n```js\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat, dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n```\n反过来可以这么写：\n```js\nlet dog = {type: 'animal', many: 2}\nlet { type, many} = dog\nconsole.log(type, many)   //animal 2\n```\n# default, rest\ndefault很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || 'cat'来指定默认值。\n```js\nfunction animal(type){\n    type = type || 'cat'\n    console.log(type)\n}\nanimal()\n```\n如果用ES6我们而已直接这么写：\n```js\nfunction animal(type = 'cat'){\n    console.log(type)\n}\nanimal()\n```\n最后一个rest语法也很简单，直接看例子：\n```js\nfunction animals(...types){\n    console.log(types)\n}\nanimals('cat', 'dog', 'fish') //[\"cat\", \"dog\", \"fish\"]\n```\n\n# Module\n到目前为止,javascript (ES5及以前) 还不能支持原生的模块化，大多数的解决方案都是通过引用外部的库来实现模块化。比如 遵循CMD规范的 Seajs 和AMD的 RequireJS 。在ES6中，模块将作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成.每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。\n\n## export,import 命令\n```js\n  //test.js\n  export var name = 'Rainbow'\n```\nES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。\n```js\n //test.js\n var name = 'Rainbow';\n var age = '24';\n export {name, age};\n```\n定义好模块的输出以后就可以在另外一个模块通过import引用。\n```js\n  //index.js\n import {name, age} from './test.js'\n```\n## 整体输入，module指令\n```js\n//test.js\n\n  export function getName() {\n    return name;\n  }\n  export function getAge(){\n   return age;\n  }\n```\n通过 import * as 就完成了模块整体的导入。\n```js\nimport * as test form './test.js';\n```\n通过指令 module 也可以达到整体的输入。\n```js\n module test from 'test.js';\n test.getName();\n```\n## export default\n不用关系模块输出了什么，通过 export default 指令就能加载到默认模块，不需要通过 花括号来指定输出的模块,一个模块只能使用 export default 一次\n```js\n  // default 导出\n  export default function getAge() {}\n\n  // 或者写成\n  function getAge() {}\n  export default getAge;\n\n  // 导入的时候不需要花括号\n  import test from './test.js';\n```\n一条import 语句可以同时导入默认方法和其它变量.\n```js\nimport defaultMethod, { otherMethod } from 'xxx.js';\n```",
				"html": "<p>最常用的ES6特性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span>, const, class, extends, super, arrow <span class=\"built_in\">functions</span>, template string, destructuring, default, rest arguments</div></pre></td></tr></table></figure></p>\n<p>这些是ES6最常用的几个语法，基本上学会它们，就可以满足一般的项目开发<br><a id=\"more\"></a></p>\n<h1 id=\"let-const\"><a href=\"#let-const\" class=\"headerlink\" title=\"let, const\"></a>let, const</h1><p>这两个的用途与var类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。</p>\n<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>let可以取代var声明局部变量，只在块状作用域内有效，用完销毁，无须担心副作用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n<p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></div></pre></td></tr></table></figure></p>\n<p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> clickBoxs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.clickBox'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; clickBoxs.length; i++)&#123;</div><div class=\"line\">    clickBoxs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iteratorFactory</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> onclick;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> clickBoxs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.clickBox'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; clickBoxs.length; i++)&#123;</div><div class=\"line\">    clickBoxs[i].onclick = iteratorFactory(i)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"built_in\">Math</span>.PI</div><div class=\"line\"></div><div class=\"line\">PI = <span class=\"number\">23</span> <span class=\"comment\">//Module build failed: SyntaxError: /es6/app.js: \"PI\" is read-only</span></div></pre></td></tr></table></figure></p>\n<p>当我们尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> monent = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"class-extends-super\"><a href=\"#class-extends-super\" class=\"headerlink\" title=\"class, extends, super\"></a>class, extends, super</h1><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"string\">'animal'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    says(say)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal()</div><div class=\"line\">animal.says(<span class=\"string\">'hello'</span>) <span class=\"comment\">//animal says hello</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"string\">'cat'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Cat()</div><div class=\"line\">cat.says(<span class=\"string\">'hello'</span>) <span class=\"comment\">//cat says hello</span></div></pre></td></tr></table></figure></p>\n<p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实力对象可以共享的。</p>\n<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p>\n<p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>\n<p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>\n<p>P.S 如果你写react的话，就会发现以上三个东西在最新版React中出现得很多。创建的每个component都是一个继承React.Component的类。详见react文档</p>\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><p>ES6允许使用“箭头”（=&gt;）定义函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div></pre></td></tr></table></figure></p>\n<p>上面的箭头函数等同于：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> num1 + num2; &#125;</div></pre></td></tr></table></figure></p>\n<p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getTempItem = <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> (&#123; <span class=\"attr\">id</span>: id, <span class=\"attr\">name</span>: <span class=\"string\">\"Temp\"</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>箭头函数可以与变量解构结合使用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> full = <span class=\"function\">(<span class=\"params\">&#123; first, last &#125;</span>) =&gt;</span> first + <span class=\"string\">' '</span> + last;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">full</span>(<span class=\"params\">person</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> person.first + <span class=\"string\">' '</span> + person.last;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>箭头函数使得表达更加简洁。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n * n;</div></pre></td></tr></table></figure></p>\n<p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。</p>\n<p>箭头函数的一个用处是简化回调函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 正常函数写法</span></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 箭头函数写法</span></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\">另一个例子是</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正常函数写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = values.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a - b;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 箭头函数写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = values.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\">下面是rest参数与箭头函数结合的例子。</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> numbers = <span class=\"function\">(<span class=\"params\">...nums</span>) =&gt;</span> nums;</div><div class=\"line\"></div><div class=\"line\">numbers(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// [1,2,3,4,5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> headAndTail = <span class=\"function\">(<span class=\"params\">head, ...tail</span>) =&gt;</span> [head, tail];</div><div class=\"line\"></div><div class=\"line\">headAndTail(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// [1,[2,3,4,5]]</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>ES6允许为函数的参数设置默认值，即直接写在参数定义的后面。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">'China'</span>) <span class=\"comment\">// Hello China</span></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>, <span class=\"string\">''</span>) <span class=\"comment\">// Hello</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，ES6的写法比ES5简洁许多，而且非常自然。下面是另一个例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point();</div><div class=\"line\">p <span class=\"comment\">// &#123; x: 0, y: 0 &#125;</span></div></pre></td></tr></table></figure></p>\n<p>除了简洁，ES6的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。</p>\n<p>参数变量是默认声明的，所以不能用let或const再次声明。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = <span class=\"number\">5</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// error</span></div><div class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"number\">2</span>; <span class=\"comment\">// error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，参数变量x是默认声明的，在函数体中，不能用let或const再次声明，否则会报错。</p>\n<h2 id=\"参数默认值的位置\"><a href=\"#参数默认值的位置\" class=\"headerlink\" title=\"参数默认值的位置\"></a>参数默认值的位置</h2><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际<br>上这个参数是没法省略的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 例一</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x = <span class=\"number\">1</span>, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">f() <span class=\"comment\">// [1, undefined]</span></div><div class=\"line\">f(<span class=\"number\">2</span>) <span class=\"comment\">// [2, undefined])</span></div><div class=\"line\">f(, <span class=\"number\">1</span>) <span class=\"comment\">// 报错</span></div><div class=\"line\">f(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>) <span class=\"comment\">// [1, 1]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 例二</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y = <span class=\"number\">5</span>, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [x, y, z];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">f() <span class=\"comment\">// [undefined, 5, undefined]</span></div><div class=\"line\">f(<span class=\"number\">1</span>) <span class=\"comment\">// [1, 5, undefined]</span></div><div class=\"line\">f(<span class=\"number\">1</span>, ,<span class=\"number\">2</span>) <span class=\"comment\">// 报错</span></div><div class=\"line\">f(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>) <span class=\"comment\">// [1, 5, 2]</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。</p>\n<p>如果传入undefined，将触发该参数等于默认值，null则没有这个效果。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = <span class=\"number\">5</span>, y = <span class=\"number\">6</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>)</div><div class=\"line\"><span class=\"comment\">// 5 null</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，x参数对应undefined，结果触发了默认值，y参数等于null，就没有触发默认值。</p>\n<h2 id=\"rest参数\"><a href=\"#rest参数\" class=\"headerlink\" title=\"rest参数\"></a>rest参数</h2><p>ES6引入rest参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组，该变量将多余的参数放入数组中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</div><div class=\"line\">    sum += val;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<p>上面代码的add函数是一个求和函数，利用rest参数，可以向该函数传入任意数目的参数。</p>\n<p>下面是一个rest参数代替arguments变量的例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// arguments变量的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// rest参数的写法</span></div><div class=\"line\"><span class=\"keyword\">const</span> sortNumbers = <span class=\"function\">(<span class=\"params\">...numbers</span>) =&gt;</span> numbers.sort();</div></pre></td></tr></table></figure></p>\n<p>上面代码的两种写法，比较后可以发现，rest参数的写法更自然也更简洁。</p>\n<p>rest参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。下面是一个利用rest参数改写数组push方法的例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</div><div class=\"line\">  items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    array.push(item);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\">push(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>注意，rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a, ...b, c</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>函数的length属性，不包括rest参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 1</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...a</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 0</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, ...b</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><p>扩展运算符（spread）是三个点（…）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"comment\">// 1 2 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></div><div class=\"line\"></div><div class=\"line\">[...document.querySelectorAll(<span class=\"string\">'div'</span>)]</div><div class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></div></pre></td></tr></table></figure></p>\n<p>该运算符主要用于函数调用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</div><div class=\"line\">  array.push(...items);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</div><div class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，array.push(…items)和add(…numbers)这两行，都是函数的调用，它们的都使用了扩展运算符。该运算符将一个数组，变为参数序列。</p>\n<p>扩展运算符与正常的函数参数可以结合使用，非常灵活。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">v, w, x, y, z</span>) </span>&#123; &#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</div><div class=\"line\">f(<span class=\"number\">-1</span>, ...args, <span class=\"number\">2</span>, ...[<span class=\"number\">3</span>]);</div></pre></td></tr></table></figure></p>\n<h2 id=\"替代数组的apply方法\"><a href=\"#替代数组的apply方法\" class=\"headerlink\" title=\"替代数组的apply方法\"></a>替代数组的apply方法</h2><p>由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f(...args);</div></pre></td></tr></table></figure></p>\n<p>下面是扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的写法</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>);</div></pre></td></tr></table></figure></p>\n<p>上面代码表示，由于JavaScript不提供求数组最大元素的函数，所以只能套用Math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用Math.max了。</p>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>\n<p>上面代码的ES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。</p>\n<p>下面是另外一个例子。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5</span></div><div class=\"line\"><span class=\"keyword\">new</span> (<span class=\"built_in\">Date</span>.bind.apply(<span class=\"built_in\">Date</span>, [<span class=\"literal\">null</span>, <span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]))</div><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(...[<span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</div></pre></td></tr></table></figure></p>\n<h1 id=\"template-string\"><a href=\"#template-string\" class=\"headerlink\" title=\"template string\"></a>template string</h1><p>传统的JavaScript语言，输出模板通常是这样写的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#result'</span>).append(</div><div class=\"line\">  <span class=\"string\">'There are &lt;b&gt;'</span> + basket.count + <span class=\"string\">'&lt;/b&gt; '</span> +</div><div class=\"line\">  <span class=\"string\">'items in your basket, '</span> +</div><div class=\"line\">  <span class=\"string\">'&lt;em&gt;'</span> + basket.onSale +</div><div class=\"line\">  <span class=\"string\">'&lt;/em&gt; are on sale!'</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>上面这种写法相当繁琐不方便，ES6引入了模板字符串解决这个问题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#result'</span>).append(<span class=\"string\">`</span></div><div class=\"line\">  There are &lt;b&gt;<span class=\"subst\">$&#123;basket.count&#125;</span>&lt;/b&gt; items</div><div class=\"line\">   in your basket, &lt;em&gt;<span class=\"subst\">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</div><div class=\"line\">  are on sale!</div><div class=\"line\">`);</div></pre></td></tr></table></figure></p>\n<p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 普通字符串</span></div><div class=\"line\"><span class=\"string\">`In JavaScript '\\n' is a line-feed.`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多行字符串</span></div><div class=\"line\"><span class=\"string\">`In JavaScript this is</span></div><div class=\"line\"> not legal.`</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`string text line 1</span></div><div class=\"line\">string text line 2`);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> greeting = <span class=\"string\">`\\`Yo\\` World!`</span>;</div></pre></td></tr></table></figure></p>\n<p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#list'</span>).html(<span class=\"string\">`</span></div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;first&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;second&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">`);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#list'</span>).html(<span class=\"string\">`</span></div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li&gt;first&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;second&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\">`.trim());</div></pre></td></tr></table></figure></ul></p>\n<p>模板字符串中嵌入变量，需要将变量名写在${}之中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">authorize</span>(<span class=\"params\">user, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!user.hasPrivilege(action)) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</div><div class=\"line\">      <span class=\"comment\">// 传统写法为</span></div><div class=\"line\">      <span class=\"comment\">// 'User '</span></div><div class=\"line\">      <span class=\"comment\">// + user.name</span></div><div class=\"line\">      <span class=\"comment\">// + ' is not authorized to do '</span></div><div class=\"line\">      <span class=\"comment\">// + action</span></div><div class=\"line\">      <span class=\"comment\">// + '.'</span></div><div class=\"line\">      <span class=\"string\">`User <span class=\"subst\">$&#123;user.name&#125;</span> is not authorized to do <span class=\"subst\">$&#123;action&#125;</span>.`</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span></div><div class=\"line\"><span class=\"comment\">// \"1 + 2 = 3\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y * <span class=\"number\">2</span>&#125;</span> = <span class=\"subst\">$&#123;x + y * <span class=\"number\">2</span>&#125;</span>`</span></div><div class=\"line\"><span class=\"comment\">// \"1 + 4 = 5\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span></div><div class=\"line\"><span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<p>模板字符串之中还能调用函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span></div><div class=\"line\"><span class=\"comment\">// foo Hello World bar</span></div></pre></td></tr></table></figure></p>\n<p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。</p>\n<p>如果模板字符串中的变量没有声明，将报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 变量place没有声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> msg = <span class=\"string\">`Hello, <span class=\"subst\">$&#123;place&#125;</span>`</span>;</div><div class=\"line\"><span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></p>\n<p>由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"string\">'World'</span>&#125;</span>`</span></div><div class=\"line\"><span class=\"comment\">// \"Hello World\"</span></div></pre></td></tr></table></figure></p>\n<p>模板字符串甚至还能嵌套。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</span></div><div class=\"line\">  &lt;table&gt;</div><div class=\"line\">  <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</span></span></div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">  `).join(<span class=\"string\">''</span>)&#125;</div><div class=\"line\">  &lt;/table&gt;</div><div class=\"line\">`;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> data = [</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</div><div class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写法一</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'return '</span> + <span class=\"string\">'`Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'name'</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"built_in\">eval</span>.call(<span class=\"literal\">null</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"destructuring\"><a href=\"#destructuring\" class=\"headerlink\" title=\"destructuring\"></a>destructuring</h1><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>看下面的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"string\">'ken'</span></div><div class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"string\">'lili'</span></div><div class=\"line\"><span class=\"keyword\">let</span> zoo = &#123;<span class=\"attr\">cat</span>: cat, <span class=\"attr\">dog</span>: dog&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(zoo)  <span class=\"comment\">//Object &#123;cat: \"ken\", dog: \"lili\"&#125;</span></div></pre></td></tr></table></figure></p>\n<p>用ES6完全可以像下面这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"string\">'ken'</span></div><div class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"string\">'lili'</span></div><div class=\"line\"><span class=\"keyword\">let</span> zoo = &#123;cat, dog&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(zoo)  <span class=\"comment\">//Object &#123;cat: \"ken\", dog: \"lili\"&#125;</span></div></pre></td></tr></table></figure></p>\n<p>反过来可以这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dog = &#123;<span class=\"attr\">type</span>: <span class=\"string\">'animal'</span>, <span class=\"attr\">many</span>: <span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; type, many&#125; = dog</div><div class=\"line\"><span class=\"built_in\">console</span>.log(type, many)   <span class=\"comment\">//animal 2</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"default-rest\"><a href=\"#default-rest\" class=\"headerlink\" title=\"default, rest\"></a>default, rest</h1><p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || ‘cat’来指定默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animal</span>(<span class=\"params\">type</span>)</span>&#123;</div><div class=\"line\">    type = type || <span class=\"string\">'cat'</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(type)</div><div class=\"line\">&#125;</div><div class=\"line\">animal()</div></pre></td></tr></table></figure></p>\n<p>如果用ES6我们而已直接这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animal</span>(<span class=\"params\">type = <span class=\"string\">'cat'</span></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(type)</div><div class=\"line\">&#125;</div><div class=\"line\">animal()</div></pre></td></tr></table></figure></p>\n<p>最后一个rest语法也很简单，直接看例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animals</span>(<span class=\"params\">...types</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(types)</div><div class=\"line\">&#125;</div><div class=\"line\">animals(<span class=\"string\">'cat'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'fish'</span>) <span class=\"comment\">//[\"cat\", \"dog\", \"fish\"]</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h1><p>到目前为止,javascript (ES5及以前) 还不能支持原生的模块化，大多数的解决方案都是通过引用外部的库来实现模块化。比如 遵循CMD规范的 Seajs 和AMD的 RequireJS 。在ES6中，模块将作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成.每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。</p>\n<h2 id=\"export-import-命令\"><a href=\"#export-import-命令\" class=\"headerlink\" title=\"export,import 命令\"></a>export,import 命令</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//test.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Rainbow'</span></div></pre></td></tr></table></figure>\n<p>ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//test.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Rainbow'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'24'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;name, age&#125;;</div></pre></td></tr></table></figure></p>\n<p>定义好模块的输出以后就可以在另外一个模块通过import引用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;name, age&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./test.js'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"整体输入，module指令\"><a href=\"#整体输入，module指令\" class=\"headerlink\" title=\"整体输入，module指令\"></a>整体输入，module指令</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//test.js</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> age;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过 import * as 就完成了模块整体的导入。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> test form <span class=\"string\">'./test.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>通过指令 module 也可以达到整体的输入。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span> test <span class=\"keyword\">from</span> <span class=\"string\">'test.js'</span>;</div><div class=\"line\">test.getName();</div></pre></td></tr></table></figure></p>\n<h2 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h2><p>不用关系模块输出了什么，通过 export default 指令就能加载到默认模块，不需要通过 花括号来指定输出的模块,一个模块只能使用 export default 一次<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// default 导出</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 或者写成</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> getAge;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 导入的时候不需要花括号</span></div><div class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'./test.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>一条import 语句可以同时导入默认方法和其它变量.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> defaultMethod, &#123; otherMethod &#125; <span class=\"keyword\">from</span> <span class=\"string\">'xxx.js'</span>;</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1482226450325,
				"created_by": 2,
				"updated_at": 1482226540808,
				"updated_by": 2,
				"published_at": 1482226450325,
				"published_by": 2
			},
			{
				"id": "ciwx9d9xu00070kfcfn6c01px",
				"title": "nodejs co模块实现异步操作",
				"slug": "es6-nodejs-co",
				"markdown": "\nnodejs co模块实现异步操作\n\n```js\nfunction co(gen) {\n    var it = gen();\n    var ret = it.next();\n    ret.value.then(function(res) {\n        it.next(res);\n    });\n}\n```\n<!--more-->\n# 万恶的回调\n对前端工程师来说，异步回调是再熟悉不过了，浏览器中的各种交互逻辑都是通过事件回调实现的，前端逻辑越来越复杂，导致回调函数越来越多，同时 nodejs 的流行也让 javascript 在后端的复杂场景中得到应用，在 nodejs 代码中更是经常看到层层嵌套。\n\n以下是一个典型的异步场景：先通过异步请求获取页面数据，然后根据页面数据请求用户信息，最后根据用户信息请求用户的产品列表。过多的回调函数嵌套，使得程序难以维护，发展成万恶的回调。\n```js\n$.get('/api/data', function(data) {\n    console.log(data);\n    $.get('/api/user', function(user) {\n        console.log(user);\n        $.get('/api/products', function(products) {\n            console.log(products)\n        });\n    });\n});\n```\n# 异步流程控制\n最原始异步流程的写法，就是类似上面例子里的回调函数嵌套法，用过的人都知道，那叫一个酸爽。\n后来出现了 Promise ，它极大提高了代码的可维护性，消除了万恶的回调嵌套问题，并且现在已经成为 ES6 标准的一部分。\n```js\n$.get('/api/data')\n.then(function(data) {\n    console.log(data);\n    return $.get('/api/user');\n})\n.then(function(user) {\n    console.log(user);\n    return $.get('/api/products');\n})\n.then(function(products) {\n    console.log(products);\n});\n```\n之后在 nodejs 圈出现了 co 模块，它基于 ES6 的 generator 和 yield ，让我们能用同步的形式编写异步代码。\n```js\nco(function *() {\n    var data = yield $.get('/api/data');\n    console.log(data);\n    var user = yield $.get('/api/user');\n    console.log(user);\n    var products = yield $.get('/api/products');\n    console.log(products);\n});\n```\n以上的 Promise 和 generator 最初创造它的本意都不是为了解决异步流程控制。其中 Promise 是一种编程思想，用于“当xx数据准备完毕，then执行xx动作”这样的场景，不只是异步，同步代码也可以用 Promise。而 generator 在 ES6 中是迭代器生成器，被 TJ 创造性的拿来做异步流程控制了。真正的异步解决方案请大家期待 ES7 的 async 吧！本文以下主要介绍 co 模块。\n# co 模块\n上文已经简单介绍了co 模块是能让我们以同步的形式编写异步代码的 nodejs 模块，主要得益于 ES6 的 generator。nodejs >= 0.11 版本可以加 --harmony 参数来体验 ES6 的 generator 特性，iojs 则已经默认开启了 generator 的支持。\n\n要了解 co ，就不得不先简单了解下 ES6 的 generator 和 iterator。\n\n## Iterator\nIterator 迭代器是一个对象，知道如何从一个集合一次取出一项，而跟踪它的当前序列所在的位置，它提供了一个next()方法返回序列中的下一个项目。\n```js\nvar lang = { name: 'JavaScript', birthYear: 1995 };\nvar it = Iterator(lang);\nvar pair = it.next();\nconsole.log(pair); // [\"name\", \"JavaScript\"]\npair = it.next();\nconsole.log(pair); // [\"birthYear\", 1995]\npair = it.next(); // A StopIteration exception is thrown\n```\n乍一看好像没什么奇特的，不就是一步步的取对象中的 key 和 value 吗，for ... in也能做到，但是把它跟 generator 结合起来就大有用途了。\n\n## Generator\nGenerator 生成器允许你通过写一个可以保存自己状态的的简单函数来定义一个迭代算法。Generator 是一种可以停止并在之后重新进入的函数。生成器的环境（绑定的变量）会在每次执行后被保存，下次进入时可继续使用。generator 字面上是“生成器”的意思，在 ES6 里是迭代器生成器，用于生成一个迭代器对象。\n```js\nfunction *gen() {\n    yield 'hello';\n    yield 'world';\n    return true;\n}\n```\n以上代码定义了一个简单的 generator，看起来就像一个普通的函数，区别是function关键字后面有个*号，函数体内可以使用yield语句进行流程控制。\n```js\nvar iter = gen();\nvar a = iter.next();\nconsole.log(a); // {value:'hello', done:false}\nvar b = iter.next();\nconsole.log(b); // {value:'world', done:false}\nvar c = iter.next();\nconsole.log(c); // {value:true, done:true}\n```\n当执行gen()的时候，并不执行 generator 函数体，而是返回一个迭代器。迭代器具有next()方法，每次调用 next() 方法，函数就执行到yield语句的地方。next() 方法返回一个对象，其中value属性表示 yield 关键词后面表达式的值，done 属性表示是否遍历结束。generator 生成器通过next和yield的配合实现流程控制，上面的代码执行了三次 next() ，generator 函数体才执行完毕。\n\n## co 模块思路\n从上面的例子可以看出，generator 函数体可以停在 yield 语句处，直到下一次执行 next()。co 模块的思路就是利用 generator 的这个特性，将异步操作跟在 yield 后面，当异步操作完成并返回结果后，再触发下一次 next() 。当然，跟在 yield 后面的异步操作需要遵循一定的规范 thunks 和 promises。\n```js\nyieldables\n\nThe yieldable objects currently supported are:\n\npromises\nthunks (functions)\narray (parallel execution)\nobjects (parallel execution)\ngenerators (delegation)\ngenerator functions (delegation)\n```\n# 7行代码\n再看看文章开头的7行代码：\n```js\nfunction co(gen) {\n    var it = gen();\n    var ret = it.next();\n    ret.value.then(function(res) {\n        it.next(res);\n    });\n}\n```\n首先生成一个迭代器，然后执行一遍 next()，得到的 value 是一个 Promise 对象，Promise.then() 里面再执行 next()。当然这只是一个原理性的演示，很多错误处理和循环调用 next() 的逻辑都没有写出来。\n\n下面做个简单对比：\n传统方式，sayhello是一个异步函数，执行helloworld会先输出\"world\"再输出\"hello\"。\n```js\nfunction sayhello() {\n    return Promise.resolve('hello').then(function(hello) {\n        console.log(hello);\n    });\n}\nfunction helloworld() {\n    sayhello();\n    console.log('world');\n}\nhelloworld();\n```\n输出\n```bash\n> \"world\"\n> \"hello\"\n```\nco 的方式，会先输出\"hello\"再输出\"world\"。\n```js\nfunction co(gen) {\n    var it = gen();\n    var ret = it.next();\n    ret.value.then(function(res) {\n        it.next(res);\n    });\n}\nfunction sayhello() {\n    return Promise.resolve('hello').then(function(hello) {\n        console.log(hello);\n    });\n}\nco(function *helloworld() {\n    yield sayhello();\n    console.log('world');\n});\n```\n输出\n```bash\n> \"hello\"\n> \"world\"\n```\n# 消除回调金字塔\n假设sayhello/sayworld/saybye是三个异步函数，用真正的 co 模块就可以这么写：\n```js\nvar co = require('co');\nco(function *() {\n    yield sayhello();\n    yield sayworld();\n    yield saybye();\n});\n```\n输出\n```bash\n> \"hello\"\n> \"world\"\n> \"bye\"\n```",
				"html": "<p>nodejs co模块实现异步操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> it = gen();</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = it.next();</div><div class=\"line\">    ret.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">        it.next(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"万恶的回调\"><a href=\"#万恶的回调\" class=\"headerlink\" title=\"万恶的回调\"></a>万恶的回调</h1><p>对前端工程师来说，异步回调是再熟悉不过了，浏览器中的各种交互逻辑都是通过事件回调实现的，前端逻辑越来越复杂，导致回调函数越来越多，同时 nodejs 的流行也让 javascript 在后端的复杂场景中得到应用，在 nodejs 代码中更是经常看到层层嵌套。</p>\n<p>以下是一个典型的异步场景：先通过异步请求获取页面数据，然后根据页面数据请求用户信息，最后根据用户信息请求用户的产品列表。过多的回调函数嵌套，使得程序难以维护，发展成万恶的回调。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'/api/data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    $.get(<span class=\"string\">'/api/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">        $.get(<span class=\"string\">'/api/products'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">products</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(products)</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"异步流程控制\"><a href=\"#异步流程控制\" class=\"headerlink\" title=\"异步流程控制\"></a>异步流程控制</h1><p>最原始异步流程的写法，就是类似上面例子里的回调函数嵌套法，用过的人都知道，那叫一个酸爽。<br>后来出现了 Promise ，它极大提高了代码的可维护性，消除了万恶的回调嵌套问题，并且现在已经成为 ES6 标准的一部分。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'/api/data'</span>)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    <span class=\"keyword\">return</span> $.get(<span class=\"string\">'/api/user'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">    <span class=\"keyword\">return</span> $.get(<span class=\"string\">'/api/products'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">products</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(products);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>之后在 nodejs 圈出现了 co 模块，它基于 ES6 的 generator 和 yield ，让我们能用同步的形式编写异步代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"keyword\">yield</span> $.get(<span class=\"string\">'/api/data'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">yield</span> $.get(<span class=\"string\">'/api/user'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">    <span class=\"keyword\">var</span> products = <span class=\"keyword\">yield</span> $.get(<span class=\"string\">'/api/products'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(products);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>以上的 Promise 和 generator 最初创造它的本意都不是为了解决异步流程控制。其中 Promise 是一种编程思想，用于“当xx数据准备完毕，then执行xx动作”这样的场景，不只是异步，同步代码也可以用 Promise。而 generator 在 ES6 中是迭代器生成器，被 TJ 创造性的拿来做异步流程控制了。真正的异步解决方案请大家期待 ES7 的 async 吧！本文以下主要介绍 co 模块。</p>\n<h1 id=\"co-模块\"><a href=\"#co-模块\" class=\"headerlink\" title=\"co 模块\"></a>co 模块</h1><p>上文已经简单介绍了co 模块是能让我们以同步的形式编写异步代码的 nodejs 模块，主要得益于 ES6 的 generator。nodejs &gt;= 0.11 版本可以加 –harmony 参数来体验 ES6 的 generator 特性，iojs 则已经默认开启了 generator 的支持。</p>\n<p>要了解 co ，就不得不先简单了解下 ES6 的 generator 和 iterator。</p>\n<h2 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h2><p>Iterator 迭代器是一个对象，知道如何从一个集合一次取出一项，而跟踪它的当前序列所在的位置，它提供了一个next()方法返回序列中的下一个项目。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lang = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'JavaScript'</span>, <span class=\"attr\">birthYear</span>: <span class=\"number\">1995</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> it = Iterator(lang);</div><div class=\"line\"><span class=\"keyword\">var</span> pair = it.next();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(pair); <span class=\"comment\">// [\"name\", \"JavaScript\"]</span></div><div class=\"line\">pair = it.next();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(pair); <span class=\"comment\">// [\"birthYear\", 1995]</span></div><div class=\"line\">pair = it.next(); <span class=\"comment\">// A StopIteration exception is thrown</span></div></pre></td></tr></table></figure></p>\n<p>乍一看好像没什么奇特的，不就是一步步的取对象中的 key 和 value 吗，for … in也能做到，但是把它跟 generator 结合起来就大有用途了。</p>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><p>Generator 生成器允许你通过写一个可以保存自己状态的的简单函数来定义一个迭代算法。Generator 是一种可以停止并在之后重新进入的函数。生成器的环境（绑定的变量）会在每次执行后被保存，下次进入时可继续使用。generator 字面上是“生成器”的意思，在 ES6 里是迭代器生成器，用于生成一个迭代器对象。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码定义了一个简单的 generator，看起来就像一个普通的函数，区别是function关键字后面有个*号，函数体内可以使用yield语句进行流程控制。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> iter = gen();</div><div class=\"line\"><span class=\"keyword\">var</span> a = iter.next();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123;value:'hello', done:false&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> b = iter.next();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123;value:'world', done:false&#125;</span></div><div class=\"line\"><span class=\"keyword\">var</span> c = iter.next();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;value:true, done:true&#125;</span></div></pre></td></tr></table></figure></p>\n<p>当执行gen()的时候，并不执行 generator 函数体，而是返回一个迭代器。迭代器具有next()方法，每次调用 next() 方法，函数就执行到yield语句的地方。next() 方法返回一个对象，其中value属性表示 yield 关键词后面表达式的值，done 属性表示是否遍历结束。generator 生成器通过next和yield的配合实现流程控制，上面的代码执行了三次 next() ，generator 函数体才执行完毕。</p>\n<h2 id=\"co-模块思路\"><a href=\"#co-模块思路\" class=\"headerlink\" title=\"co 模块思路\"></a>co 模块思路</h2><p>从上面的例子可以看出，generator 函数体可以停在 yield 语句处，直到下一次执行 next()。co 模块的思路就是利用 generator 的这个特性，将异步操作跟在 yield 后面，当异步操作完成并返回结果后，再触发下一次 next() 。当然，跟在 yield 后面的异步操作需要遵循一定的规范 thunks 和 promises。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">yieldables</div><div class=\"line\"></div><div class=\"line\">The yieldable objects currently supported are:</div><div class=\"line\"></div><div class=\"line\">promises</div><div class=\"line\">thunks (functions)</div><div class=\"line\">array (parallel execution)</div><div class=\"line\">objects (parallel execution)</div><div class=\"line\">generators (delegation)</div><div class=\"line\">generator functions (delegation)</div></pre></td></tr></table></figure></p>\n<h1 id=\"7行代码\"><a href=\"#7行代码\" class=\"headerlink\" title=\"7行代码\"></a>7行代码</h1><p>再看看文章开头的7行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> it = gen();</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = it.next();</div><div class=\"line\">    ret.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">        it.next(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首先生成一个迭代器，然后执行一遍 next()，得到的 value 是一个 Promise 对象，Promise.then() 里面再执行 next()。当然这只是一个原理性的演示，很多错误处理和循环调用 next() 的逻辑都没有写出来。</p>\n<p>下面做个简单对比：<br>传统方式，sayhello是一个异步函数，执行helloworld会先输出”world”再输出”hello”。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayhello</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hello</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(hello);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">helloworld</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    sayhello();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">helloworld();</div></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"string\">\"world\"</span></div><div class=\"line\">&gt; <span class=\"string\">\"hello\"</span></div></pre></td></tr></table></figure></p>\n<p>co 的方式，会先输出”hello”再输出”world”。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> it = gen();</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = it.next();</div><div class=\"line\">    ret.value.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">        it.next(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayhello</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hello</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(hello);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">helloworld</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> sayhello();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"string\">\"hello\"</span></div><div class=\"line\">&gt; <span class=\"string\">\"world\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"消除回调金字塔\"><a href=\"#消除回调金字塔\" class=\"headerlink\" title=\"消除回调金字塔\"></a>消除回调金字塔</h1><p>假设sayhello/sayworld/saybye是三个异步函数，用真正的 co 模块就可以这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> sayhello();</div><div class=\"line\">    <span class=\"keyword\">yield</span> sayworld();</div><div class=\"line\">    <span class=\"keyword\">yield</span> saybye();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"string\">\"hello\"</span></div><div class=\"line\">&gt; <span class=\"string\">\"world\"</span></div><div class=\"line\">&gt; <span class=\"string\">\"bye\"</span></div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1482223108181,
				"created_by": 2,
				"updated_at": 1487207840588,
				"updated_by": 2,
				"published_at": 1482223108181,
				"published_by": 2
			},
			{
				"id": "ciwx915jz00000kfckkw0ast0",
				"title": "js使用Async/Await实现异步操作",
				"slug": "es6-await-async",
				"markdown": "\nAsync/Await是ES7提出的js异步操作解决方案\n<!--more-->\n\n# 第一个例子\n\nAsync/Await应该是目前最简单的异步方案了，首先来看个例子。\n\n这里我们要实现一个暂停功能，输入N毫秒，则停顿N毫秒后才继续往下执行。\n```js\nvar sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve();\n        }, time);\n    })\n};\n\nvar start = async function () {\n    // 在这里使用起来就像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end');\n};\n\nstart();\n```\n控制台先输出start，稍等3秒后，输出了end。\n\n# 基本规则\n\nasync 表示这是一个async函数，await只能用在这个函数里面。\n\nawait 表示在这里等待promise返回结果了，再继续执行。\n\nawait 后面跟着的应该是一个promise对象（当然，其他返回值也没关系，只是会立即执行，不过那样就没有意义了…）\n\n## 获得返回值\n\nawait等待的虽然是promise对象，但不必写.then(..)，直接可以得到返回值。\n```js\nvar sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 返回 ‘ok’\n            resolve('ok');\n        }, time);\n    })\n};\n\nvar start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 收到 ‘ok’\n};\n```\n## 捕捉错误\n\n既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。\n```js\nvar sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nvar start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); // 这里得到了一个返回错误\n\n        // 所以以下代码不会被执行了\n        console.log('end');\n    } catch (err) {\n        console.log(err); // 这里捕捉到错误 `error`\n    }\n};\n```\n## 循环多个await\n\nawait看起来就像是同步代码，所以可以理所当然的写在for循环里，不必担心以往需要闭包才能解决的问题。\n\n```js\nvar start = async function () {\n    for (var i = 1; i <= 10; i++) {\n        console.log(`当前是第${i}次等待..`);\n        await sleep(1000);\n    }\n};\n```\n值得注意的是，await必须在async函数的上下文中的。\n\n```js\nlet 一到十 = [1,2,3,4,5,6,7,8,9,10];\n\n// 错误示范\n一到十.forEach(function (v) {\n    console.log(`当前是第${v}次等待..`);\n    await sleep(1000); // 错误!! await只能在async函数中运行\n});\n\n// 正确示范\nfor(var v of 一到十) {\n    console.log(`当前是第${v}次等待..`);\n    await sleep(1000); // 正确, for循环的上下文还在async函数中\n}\n```",
				"html": "<p>Async/Await是ES7提出的js异步操作解决方案<br><a id=\"more\"></a></p>\n<h1 id=\"第一个例子\"><a href=\"#第一个例子\" class=\"headerlink\" title=\"第一个例子\"></a>第一个例子</h1><p>Async/Await应该是目前最简单的异步方案了，首先来看个例子。</p>\n<p>这里我们要实现一个暂停功能，输入N毫秒，则停顿N毫秒后才继续往下执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve();</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里使用起来就像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure></p>\n<p>控制台先输出start，稍等3秒后，输出了end。</p>\n<h1 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h1><p>async 表示这是一个async函数，await只能用在这个函数里面。</p>\n<p>await 表示在这里等待promise返回结果了，再继续执行。</p>\n<p>await 后面跟着的应该是一个promise对象（当然，其他返回值也没关系，只是会立即执行，不过那样就没有意义了…）</p>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p>await等待的虽然是promise对象，但不必写.then(..)，直接可以得到返回值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 返回 ‘ok’</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 收到 ‘ok’</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">// 这里得到了一个返回错误</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 所以以下代码不会被执行了</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// 这里捕捉到错误 `error`</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个await</h2><p>await看起来就像是同步代码，所以可以理所当然的写在for循环里，不必担心以往需要闭包才能解决的问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待..`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>值得注意的是，await必须在async函数的上下文中的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> 一到十 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">一到十.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;v&#125;</span>次等待..`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// 错误!! await只能在async函数中运行</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> v <span class=\"keyword\">of</span> 一到十) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;v&#125;</span>次等待..`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// 正确, for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1482222542221,
				"created_by": 2,
				"updated_at": 1487207825815,
				"updated_by": 2,
				"published_at": 1482222542221,
				"published_by": 2
			},
			{
				"id": "ciwvf88wh00002ofc1uac6pku",
				"title": "正则表达式语法",
				"slug": "reg-pattern-rules",
				"markdown": "\n正则表达式是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”）。模式描述在搜索文本时要匹配的一个或多个字符串。\n<!--more-->\n# 正则表达式示例\n\n|表达式|\t匹配|\n|----|----|\n|/^\\s*$/| 匹配空行。|\n|/\\d{2}-\\d{5}/|验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。|\n|/<\\s*(\\S+)(\\s[^>]*)?>[\\s\\S]*<\\s*\\/\\1\\s*>/|匹配 HTML 标记。|\n\n下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：\n\n|字符|说明|\n|:-----|----|\n|'\\'|将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\\\”匹配“\\”，“\\(”匹配“(”。|\n|^|匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。|\n|\\$|匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。|\n|\\*|零次或多次匹配前面的字符或子表达式。例如，zo* 匹配“z”和“zoo”。* 等效于 {0,}。|\n|+|一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。|\n|?|零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。|\n|{n}|n 是非负整数。正好匹配 n 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。|\n|{n,}|n 是非负整数。至少匹配 n 次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。|\n|{n,m}|M 和 n 是非负整数，其中 n <= m。匹配至少 n 次，至多 m 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。|\n|?|当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。|\n|.|匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。|\n|(pattern)|匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“\\(”或者“\\)”。|\n|(?:pattern)|匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (丨) 组合模式部件的情况很有用。例如，'industr(?:y丨ies) 是比 'industry丨industries' 更经济的表达式。|\n|(?=pattern)|执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95丨98丨NT丨2000)' 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。|\n|(?!pattern)|执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95丨98丨NT丨2000)' 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。|\n|x丨y|匹配 x 或 y。例如，'z丨food' 匹配“z”或“food”。'(z丨f)ood' 匹配“zood”或“food”。|\n|[xyz]|字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。|\n|[^xyz]|反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。|\n|[a-z]|字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。|\n|[^a-z]|反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。|\n|\\b|匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。|\n|\\B|非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。|\n|\\cx|匹配 x 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。|\n|\\d|数字字符匹配。等效于 [0-9]。|\n|\\D|非数字字符匹配。等效于 [^0-9]。|\n|\\f|换页符匹配。等效于 \\x0c 和 \\cL。|\n|\\n|换行符匹配。等效于 \\x0a 和 \\cJ。|\n|\\r|匹配一个回车符。等效于 \\x0d 和 \\cM。|\n|\\s|匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。|\n|\\S|匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。|\n|\\t|制表符匹配。与 \\x09 和 \\cI 等效。|\n|\\v|垂直制表符匹配。与 \\x0b 和 \\cK 等效。|\n|\\w|匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。|\n|\\W|与任何非单词字符匹配。与“[^A-Za-z0-9_]”等效。|\n|\\xn|匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&“1”等效。允许在正则表达式中使用 ASCII 代码。|\n|\\num|匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。|\n|\\n|标识一个八进制转义码或反向引用。如果 \\n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。|\n|\\nm|标识一个八进制转义码或反向引用。如果 \\nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \\nm 前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \\nm 匹配八进制值 nm，其中 n 和 m 是八进制数字 (0-7)。|\n|\\nml|当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。|\n|\\un|匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。|",
				"html": "<p>正则表达式是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”）。模式描述在搜索文本时要匹配的一个或多个字符串。<br><a id=\"more\"></a></p>\n<h1 id=\"正则表达式示例\"><a href=\"#正则表达式示例\" class=\"headerlink\" title=\"正则表达式示例\"></a>正则表达式示例</h1><table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/^\\s*$/</td>\n<td>匹配空行。</td>\n</tr>\n<tr>\n<td>/\\d{2}-\\d{5}/</td>\n<td>验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td>\n</tr>\n<tr>\n<td>/&lt;\\s<em>(\\S+)(\\s[^&gt;]</em>)?&gt;[\\s\\S]<em>&lt;\\s</em>\\/\\1\\s*&gt;/</td>\n<td>匹配 HTML 标记。</td>\n</tr>\n</tbody>\n</table>\n<p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">‘\\’</td>\n<td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\”匹配“\\”，“(”匹配“(”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\$</td>\n<td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td>零次或多次匹配前面的字符或子表达式。例如，zo<em> 匹配“z”和“zoo”。</em> 等效于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td>一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td>零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n}</td>\n<td>n 是非负整数。正好匹配 n 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,}</td>\n<td>n 是非负整数。至少匹配 n 次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{n,m}</td>\n<td>M 和 n 是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td>当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td>匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(pattern)</td>\n<td>匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“(”或者“)”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:pattern)</td>\n<td>匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (丨) 组合模式部件的情况很有用。例如，’industr(?:y丨ies) 是比 ‘industry丨industries’ 更经济的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=pattern)</td>\n<td>执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95丨98丨NT丨2000)’ 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!pattern)</td>\n<td>执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95丨98丨NT丨2000)’ 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x丨y</td>\n<td>匹配 x 或 y。例如，’z丨food’ 匹配“z”或“food”。’(z丨f)ood’ 匹配“zood”或“food”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[xyz]</td>\n<td>字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^xyz]</td>\n<td>反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-z]</td>\n<td>字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^a-z]</td>\n<td>反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td>匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td>非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\cx</td>\n<td>匹配 x 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td>数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td>非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td>换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td>换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td>匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td>匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td>制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td>垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td>匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td>与任何非单词字符匹配。与“[^A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\xn</td>\n<td>匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&amp;“1”等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\num</td>\n<td>匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td>标识一个八进制转义码或反向引用。如果 \\n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nm</td>\n<td>标识一个八进制转义码或反向引用。如果 \\nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \\nm 前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \\nm 匹配八进制值 nm，其中 n 和 m 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td>当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\un</td>\n<td>匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody>\n</table>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1482111991833,
				"created_by": 2,
				"updated_at": 1482112904278,
				"updated_by": 2,
				"published_at": 1482111991833,
				"published_by": 2
			},
			{
				"id": "ciwq4ljvu0000cgfcjpibr2qp",
				"title": "使用Mock.js进行独立于后端的前端开发",
				"slug": "modejs-server",
				"markdown": "# Mock.js实现的功能\n基于 数据模板 生成数据\n基于 HTML模板 生成数据\n拦截并模拟 Ajax请求\n<!--more-->\n# 用法\n## 浏览器：\n```js\n<!-- （必选）加载 Mock -->\n<script src=\"http://mockjs.com/dist/mock.js\"></script>\n<script>\n// 使用 Mock\nvar data = Mock.mock({\n    'list|1-10': [{\n        'id|+1': 1\n    }]\n});\n$('<pre>').text(JSON.stringify(data, null, 4))\n.appendTo('body')\n</script>\n```\n返回值:\n```js\n{\n\"list\": [\n    {\n        \"id\": 1\n    },\n    {\n        \"id\": 2\n    },\n    {\n        \"id\": 3\n    }\n    ]\n}\n```\n## JQuery：\n配置模拟数据：\n```js\nMock.mock('http://g.cn', {\n    'name'     : '@name',\n    'age|1-100': 100,\n    'color'    : '@color'\n});\n发送Ajax请求：\n\n$.ajax({\n    url: 'http://g.cn',\n    dataType:'json'\n    }).done(function(data, status, xhr){\n    console.log(\n    JSON.stringify(data, null, 4)\n    )\n})；\n```\n返回数据：\n```js\n// 结果1\n{\n\"name\": \"Elizabeth Hall\",\n\"age\": 91,\n\"color\": \"#0e64ea\"\n}\n\n// 结果2\n{\n\"name\": \"Michael Taylor\",\n\"age\": 61,\n\"color\": \"#081086\"\n}\n```\n## Node.js：\n```bash\n// 安装\nnpm install mockjs\n```\n\n```js\n// 使用\nvar Mock = require('mockjs');\nvar data = Mock.mock({\n    'list|1-10': [{\n        'id|+1': 1\n    }]\n});\n\nconsole.log(JSON.stringify(data, null, 4))\n```\n\n## Angular.js:\n```js\n<!-- 引用 -->\n<script src=\"http://mockjs.com/dist/mock-min.js\"></script>\n<script src=\"http://cdn.staticfile.org/angular.js/1.3.0-beta.13/angular.min.js\"></script>\n\n<!-- 兼容angular (mock.js默认不兼容angular，需额外引用兼容包)-->\n<script src=\"./src/mock.angular.js\"></script>\n<!-- 模拟数据 -->\n<script src=\"./mockData.js\"></script>\n<!-- 使用 -->\n<script>\n(function() {\n    (function() {\n        var app;\n        app = angular.module('app', []);\n        //使用mockjax方法覆盖Ajax请求\n        Mock.mockjax(app);\n        return app.controller('appCtrl', function($scope, $http) {\n            var box;\n            box = $scope.box = [];\n            $scope.get = function() {\n                $http({\n                    url: 'http://www.baidu.com',\n                    method: 'POST',\n                    params: {a: 1},\n                    data  : {b:1}\n                }).success(function(data) {\n                return box.push(data);\n            });\n\n            $http({\n                url: 'http://baidu.com'\n                }).success(function(data) {\n                console.log(data);\n                });\n            };\n        return $scope.get();\n        });\n    })();\n\n}).call(this);\n</script>\n```\n\nmock数据mockData.js:\n```js\nMock.mock('http://www.baidu.com', {\n    'name': '@name()',\n    'age|1-100': 100,\n    'color': '@color'\n});\n```\n# 语法\nMock.js 的语法规范包括两部分：\n```bash\n#数据模板定义（Data Temaplte Definition，DTD）\n#数据占位符定义（Data Placeholder Definition，DPD）\n```\n## 数据模板定义 DTD\n数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：\n```js\n// 属性名   name\n// 生成规则 rule\n// 属性值   value\n'name|rule': value\n```\n注意：\n\n属性名 和 生成规则 之间用 | 分隔。\n生成规则 是可选的。\n生成规则 有 7 种格式：\n```js\n'name|min-max': value\n'name|count': value\n'name|min-max.dmin-dmax': value\n'name|min-max.dcount': value\n'name|count.dmin-dmax': value\n'name|count.dcount': value\n'name|+step': value\n```\n生成规则 的 含义 需要依赖 属性值 才能确定。\n属性值 中可以含有 @占位符。\n属性值 还指定了最终值的初始值和类型。\n生成规则和示例：\n\n### 1. 属性值是字符串 String\n```js\n'name|min-max': 'value' 通过重复 'value' 生成一个字符串，重复次数大于等于 min，小于等于 max。\n'name|count': 'value' 通过重复 'value' 生成一个字符串，重复次数等于 count。\n```\n### 2. 属性值是数字 Number\n```js\n'name|+1': 100 属性值自动加 1，初始值为 100\n'name|1-100': 100 生成一个大于等于 1、小于等于 100 的整数，属性值 100 只用来确定类型。\n'name|1-100.1-10': 100 生成一个浮点数，整数部分大于等于 1、小于等于 100，小数部分保留 1 到 10 位。\n    {\n    'number1|1-100.1-10': 1,\n    'number2|123.1-10': 1,\n    'number3|123.3': 1,\n    'number4|123.10': 1.123\n    }\n    // =>\n    {\n    \"number1\": 12.92,\n    \"number2\": 123.51,\n    \"number3\": 123.777,\n    \"number4\": 123.1231091814\n    }\n```\n### 3. 属性值是布尔型 Boolean\n```js\n'name|1': value 随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率是 1/2。\n'name|min-max': value 随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。\n```\n### 4. 属性值是对象 Object\n```js\n'name|min-max': {} 从属性值 {} 中随机选取 min 到 max 个属性。\n'name|count': {} 从属性值 {} 中随机选取 count 个属性。\n```\n### 5. 属性值是数组 Array\n```js\n'name|1': [{}, {} ...] 从属性值 [{}, {} ...] 中随机选取 1 个元素，作为最终值。\n'name|min-max': [{}, {} ...] 通过重复属性值 [{}, {} ...] 生成一个新数组，重复次数大于等于 min，小于等于 max。\n'name|count': [{}, {} ...] 通过重复属性值 [{}, {} ...] 生成一个新数组，重复次数为 count。\n```\n\n### 6. 属性值是数组 Function\n```js\n'name': function(){} 执行函数 function(){}，取其返回值作为最终的属性值，上下文为 'name' 所在的对象。\n```\n\n## 数据占位符定义 DPD\n占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符 的格式为：\n```js\n@占位符\n@占位符(参数 [, 参数])\n```\n注意：\n\n用 @ 来标识其后的字符串是 占位符。\n占位符 引用的是 Mock.Random 中的方法。\n通过 Mock.Random.extend() 来扩展自定义占位符。\n占位符 也可以引用 数据模板 中的属性。\n占位符 会优先引用 数据模板 中的属性\n```js\n{\n name: {\n first: '@FIRST',\n middle: '@FIRST',\n last: '@LAST',\n full: '@first @middle @last'\n    }\n}\n// =>\n{\n \"name\": {\n \"first\": \"Charles\",\n \"middle\": \"Brenda\",\n \"last\": \"Lopez\",\n \"full\": \"Charles Brenda Lopez\"\n    }\n}\n```\n# 常用方法\n## Mock.mock( rurl?, rtype?, template|function(options) )\n根据数据模板生成模拟数据。\n\n参数的含义和默认值如下所示：\n```bash\n参数 rurl：#可选。表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 /\\/domain\\/list.json/、'/domian/list.json'。\n参数 rtype：#可选。表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。\n参数 template：#可选。表示数据模板，可以是对象或字符串。例如 { 'data|1-10':[{}] }、'@EMAIL'。\n参数 function(options)：#可选。表示用于生成响应数据的函数。\n参数 options：#指向本次请求的 Ajax 选项集。\n```\n## Mock.mockjax(library)\n覆盖（拦截） Ajax 请求，目前内置支持 jQuery、Zepto、KISSY。\n\n## Mock.Random\nMock.Random 是一个工具类，用于生成各种随机数据。Mock.Random 的方法在数据模板中称为“占位符”，引用格式为 @占位符(参数 [, 参数]) 。\n\n## Mock.tpl(input, options, helpers, partials)\n基于 Handlebars、Mustache 的 HTML 模板生成模拟数据。",
				"html": "<h1 id=\"Mock-js实现的功能\"><a href=\"#Mock-js实现的功能\" class=\"headerlink\" title=\"Mock.js实现的功能\"></a>Mock.js实现的功能</h1><p>基于 数据模板 生成数据<br>基于 HTML模板 生成数据<br>拦截并模拟 Ajax请求<br><a id=\"more\"></a></p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><h2 id=\"浏览器：\"><a href=\"#浏览器：\" class=\"headerlink\" title=\"浏览器：\"></a>浏览器：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- （必选）加载 Mock --&gt;</div><div class=\"line\">&lt;script src=\"http://mockjs.com/dist/mock.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"comment\">// 使用 Mock</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = Mock.mock(&#123;</div><div class=\"line\">    <span class=\"string\">'list|1-10'</span>: [&#123;</div><div class=\"line\">        <span class=\"string\">'id|+1'</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;);</div><div class=\"line\">$(<span class=\"string\">'&lt;pre&gt;'</span>).text(<span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>))</div><div class=\"line\">.appendTo(<span class=\"string\">'body'</span>)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<p>返回值:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"list\"</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"JQuery：\"><a href=\"#JQuery：\" class=\"headerlink\" title=\"JQuery：\"></a>JQuery：</h2><p>配置模拟数据：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mock.mock(<span class=\"string\">'http://g.cn'</span>, &#123;</div><div class=\"line\">    <span class=\"string\">'name'</span>     : <span class=\"string\">'@name'</span>,</div><div class=\"line\">    <span class=\"string\">'age|1-100'</span>: <span class=\"number\">100</span>,</div><div class=\"line\">    <span class=\"string\">'color'</span>    : <span class=\"string\">'@color'</span></div><div class=\"line\">&#125;);</div><div class=\"line\">发送Ajax请求：</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'http://g.cn'</span>,</div><div class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span></div><div class=\"line\">    &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, status, xhr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(</div><div class=\"line\">    <span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>)</div><div class=\"line\">    )</div><div class=\"line\">&#125;)；</div></pre></td></tr></table></figure></p>\n<p>返回数据：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 结果1</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"Elizabeth Hall\"</span>,</div><div class=\"line\"><span class=\"string\">\"age\"</span>: <span class=\"number\">91</span>,</div><div class=\"line\"><span class=\"string\">\"color\"</span>: <span class=\"string\">\"#0e64ea\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果2</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"Michael Taylor\"</span>,</div><div class=\"line\"><span class=\"string\">\"age\"</span>: <span class=\"number\">61</span>,</div><div class=\"line\"><span class=\"string\">\"color\"</span>: <span class=\"string\">\"#081086\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Node-js：\"><a href=\"#Node-js：\" class=\"headerlink\" title=\"Node.js：\"></a>Node.js：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 安装</div><div class=\"line\">npm install mockjs</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">'mockjs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = Mock.mock(&#123;</div><div class=\"line\">    <span class=\"string\">'list|1-10'</span>: [&#123;</div><div class=\"line\">        <span class=\"string\">'id|+1'</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"Angular-js\"><a href=\"#Angular-js\" class=\"headerlink\" title=\"Angular.js:\"></a>Angular.js:</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 引用 --&gt;</div><div class=\"line\">&lt;script src=\"http://mockjs.com/dist/mock-min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"http://cdn.staticfile.org/angular.js/1.3.0-beta.13/angular.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 兼容angular (mock.js默认不兼容angular，需额外引用兼容包)--&gt;</div><div class=\"line\">&lt;script src=\"./src/mock.angular.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;!-- 模拟数据 --&gt;</div><div class=\"line\">&lt;script src=\"./mockData.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;!-- 使用 --&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(function() &#123;</div><div class=\"line\">    (function() &#123;</div><div class=\"line\">        var app;</div><div class=\"line\">        app = angular.module('app', []);</div><div class=\"line\">        //使用mockjax方法覆盖Ajax请求</div><div class=\"line\">        Mock.mockjax(app);</div><div class=\"line\">        return app.controller('appCtrl', function($scope, $http) &#123;</div><div class=\"line\">            var box;</div><div class=\"line\">            box = $scope.box = [];</div><div class=\"line\">            $scope.get = function() &#123;</div><div class=\"line\">                $http(&#123;</div><div class=\"line\">                    url: 'http://www.baidu.com',</div><div class=\"line\">                    method: 'POST',</div><div class=\"line\">                    params: &#123;a: 1&#125;,</div><div class=\"line\">                    data  : &#123;b:1&#125;</div><div class=\"line\">                &#125;).success(function(data) &#123;</div><div class=\"line\">                return box.push(data);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            $http(&#123;</div><div class=\"line\">                url: 'http://baidu.com'</div><div class=\"line\">                &#125;).success(function(data) &#123;</div><div class=\"line\">                console.log(data);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        return $scope.get();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;)();</div><div class=\"line\"></div><div class=\"line\">&#125;).call(this);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>mock数据mockData.js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mock.mock(<span class=\"string\">'http://www.baidu.com'</span>, &#123;</div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"string\">'@name()'</span>,</div><div class=\"line\">    <span class=\"string\">'age|1-100'</span>: <span class=\"number\">100</span>,</div><div class=\"line\">    <span class=\"string\">'color'</span>: <span class=\"string\">'@color'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><p>Mock.js 的语法规范包括两部分：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#数据模板定义（Data Temaplte Definition，DTD）</span></div><div class=\"line\"><span class=\"comment\">#数据占位符定义（Data Placeholder Definition，DPD）</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"数据模板定义-DTD\"><a href=\"#数据模板定义-DTD\" class=\"headerlink\" title=\"数据模板定义 DTD\"></a>数据模板定义 DTD</h2><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 属性名   name</span></div><div class=\"line\"><span class=\"comment\">// 生成规则 rule</span></div><div class=\"line\"><span class=\"comment\">// 属性值   value</span></div><div class=\"line\"><span class=\"string\">'name|rule'</span>: value</div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<p>属性名 和 生成规则 之间用 | 分隔。<br>生成规则 是可选的。<br>生成规则 有 7 种格式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name|min-max'</span>: value</div><div class=\"line\"><span class=\"string\">'name|count'</span>: value</div><div class=\"line\"><span class=\"string\">'name|min-max.dmin-dmax'</span>: value</div><div class=\"line\"><span class=\"string\">'name|min-max.dcount'</span>: value</div><div class=\"line\"><span class=\"string\">'name|count.dmin-dmax'</span>: value</div><div class=\"line\"><span class=\"string\">'name|count.dcount'</span>: value</div><div class=\"line\"><span class=\"string\">'name|+step'</span>: value</div></pre></td></tr></table></figure></p>\n<p>生成规则 的 含义 需要依赖 属性值 才能确定。<br>属性值 中可以含有 @占位符。<br>属性值 还指定了最终值的初始值和类型。<br>生成规则和示例：</p>\n<h3 id=\"1-属性值是字符串-String\"><a href=\"#1-属性值是字符串-String\" class=\"headerlink\" title=\"1. 属性值是字符串 String\"></a>1. 属性值是字符串 String</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name|min-max'</span>: <span class=\"string\">'value'</span> 通过重复 <span class=\"string\">'value'</span> 生成一个字符串，重复次数大于等于 min，小于等于 max。</div><div class=\"line\"><span class=\"string\">'name|count'</span>: <span class=\"string\">'value'</span> 通过重复 <span class=\"string\">'value'</span> 生成一个字符串，重复次数等于 count。</div></pre></td></tr></table></figure>\n<h3 id=\"2-属性值是数字-Number\"><a href=\"#2-属性值是数字-Number\" class=\"headerlink\" title=\"2. 属性值是数字 Number\"></a>2. 属性值是数字 Number</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name|+1'</span>: <span class=\"number\">100</span> 属性值自动加 <span class=\"number\">1</span>，初始值为 <span class=\"number\">100</span></div><div class=\"line\"><span class=\"string\">'name|1-100'</span>: <span class=\"number\">100</span> 生成一个大于等于 <span class=\"number\">1</span>、小于等于 <span class=\"number\">100</span> 的整数，属性值 <span class=\"number\">100</span> 只用来确定类型。</div><div class=\"line\"><span class=\"string\">'name|1-100.1-10'</span>: <span class=\"number\">100</span> 生成一个浮点数，整数部分大于等于 <span class=\"number\">1</span>、小于等于 <span class=\"number\">100</span>，小数部分保留 <span class=\"number\">1</span> 到 <span class=\"number\">10</span> 位。</div><div class=\"line\">    &#123;</div><div class=\"line\">    <span class=\"string\">'number1|1-100.1-10'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'number2|123.1-10'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'number3|123.3'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'number4|123.10'</span>: <span class=\"number\">1.123</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// =&gt;</span></div><div class=\"line\">    &#123;</div><div class=\"line\">    <span class=\"string\">\"number1\"</span>: <span class=\"number\">12.92</span>,</div><div class=\"line\">    <span class=\"string\">\"number2\"</span>: <span class=\"number\">123.51</span>,</div><div class=\"line\">    <span class=\"string\">\"number3\"</span>: <span class=\"number\">123.777</span>,</div><div class=\"line\">    <span class=\"string\">\"number4\"</span>: <span class=\"number\">123.1231091814</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-属性值是布尔型-Boolean\"><a href=\"#3-属性值是布尔型-Boolean\" class=\"headerlink\" title=\"3. 属性值是布尔型 Boolean\"></a>3. 属性值是布尔型 Boolean</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name|1'</span>: value 随机生成一个布尔值，值为 <span class=\"literal\">true</span> 的概率是 <span class=\"number\">1</span>/<span class=\"number\">2</span>，值为 <span class=\"literal\">false</span> 的概率是 <span class=\"number\">1</span>/<span class=\"number\">2</span>。</div><div class=\"line\"><span class=\"string\">'name|min-max'</span>: value 随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。</div></pre></td></tr></table></figure>\n<h3 id=\"4-属性值是对象-Object\"><a href=\"#4-属性值是对象-Object\" class=\"headerlink\" title=\"4. 属性值是对象 Object\"></a>4. 属性值是对象 Object</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name|min-max'</span>: &#123;&#125; 从属性值 &#123;&#125; 中随机选取 min 到 max 个属性。</div><div class=\"line\"><span class=\"string\">'name|count'</span>: &#123;&#125; 从属性值 &#123;&#125; 中随机选取 count 个属性。</div></pre></td></tr></table></figure>\n<h3 id=\"5-属性值是数组-Array\"><a href=\"#5-属性值是数组-Array\" class=\"headerlink\" title=\"5. 属性值是数组 Array\"></a>5. 属性值是数组 Array</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name|1'</span>: [&#123;&#125;, &#123;&#125; ...] 从属性值 [&#123;&#125;, &#123;&#125; ...] 中随机选取 <span class=\"number\">1</span> 个元素，作为最终值。</div><div class=\"line\"><span class=\"string\">'name|min-max'</span>: [&#123;&#125;, &#123;&#125; ...] 通过重复属性值 [&#123;&#125;, &#123;&#125; ...] 生成一个新数组，重复次数大于等于 min，小于等于 max。</div><div class=\"line\"><span class=\"string\">'name|count'</span>: [&#123;&#125;, &#123;&#125; ...] 通过重复属性值 [&#123;&#125;, &#123;&#125; ...] 生成一个新数组，重复次数为 count。</div></pre></td></tr></table></figure>\n<h3 id=\"6-属性值是数组-Function\"><a href=\"#6-属性值是数组-Function\" class=\"headerlink\" title=\"6. 属性值是数组 Function\"></a>6. 属性值是数组 Function</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'name'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; 执行函数 <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;，取其返回值作为最终的属性值，上下文为 <span class=\"string\">'name'</span> 所在的对象。</div></pre></td></tr></table></figure>\n<h2 id=\"数据占位符定义-DPD\"><a href=\"#数据占位符定义-DPD\" class=\"headerlink\" title=\"数据占位符定义 DPD\"></a>数据占位符定义 DPD</h2><p>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符 的格式为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">@占位符</div><div class=\"line\">@占位符(参数 [, 参数])</div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<p>用 @ 来标识其后的字符串是 占位符。<br>占位符 引用的是 Mock.Random 中的方法。<br>通过 Mock.Random.extend() 来扩展自定义占位符。<br>占位符 也可以引用 数据模板 中的属性。<br>占位符 会优先引用 数据模板 中的属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"attr\">name</span>: &#123;</div><div class=\"line\"> <span class=\"attr\">first</span>: <span class=\"string\">'@FIRST'</span>,</div><div class=\"line\"> <span class=\"attr\">middle</span>: <span class=\"string\">'@FIRST'</span>,</div><div class=\"line\"> <span class=\"attr\">last</span>: <span class=\"string\">'@LAST'</span>,</div><div class=\"line\"> <span class=\"attr\">full</span>: <span class=\"string\">'@first @middle @last'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// =&gt;</span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"string\">\"name\"</span>: &#123;</div><div class=\"line\"> <span class=\"string\">\"first\"</span>: <span class=\"string\">\"Charles\"</span>,</div><div class=\"line\"> <span class=\"string\">\"middle\"</span>: <span class=\"string\">\"Brenda\"</span>,</div><div class=\"line\"> <span class=\"string\">\"last\"</span>: <span class=\"string\">\"Lopez\"</span>,</div><div class=\"line\"> <span class=\"string\">\"full\"</span>: <span class=\"string\">\"Charles Brenda Lopez\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><h2 id=\"Mock-mock-rurl-rtype-template-function-options\"><a href=\"#Mock-mock-rurl-rtype-template-function-options\" class=\"headerlink\" title=\"Mock.mock( rurl?, rtype?, template|function(options) )\"></a>Mock.mock( rurl?, rtype?, template|function(options) )</h2><p>根据数据模板生成模拟数据。</p>\n<p>参数的含义和默认值如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">参数 rurl：<span class=\"comment\">#可选。表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 /\\/domain\\/list.json/、'/domian/list.json'。</span></div><div class=\"line\">参数 rtype：<span class=\"comment\">#可选。表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。</span></div><div class=\"line\">参数 template：<span class=\"comment\">#可选。表示数据模板，可以是对象或字符串。例如 &#123; 'data|1-10':[&#123;&#125;] &#125;、'@EMAIL'。</span></div><div class=\"line\">参数 <span class=\"keyword\">function</span>(options)：<span class=\"comment\">#可选。表示用于生成响应数据的函数。</span></div><div class=\"line\">参数 options：<span class=\"comment\">#指向本次请求的 Ajax 选项集。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Mock-mockjax-library\"><a href=\"#Mock-mockjax-library\" class=\"headerlink\" title=\"Mock.mockjax(library)\"></a>Mock.mockjax(library)</h2><p>覆盖（拦截） Ajax 请求，目前内置支持 jQuery、Zepto、KISSY。</p>\n<h2 id=\"Mock-Random\"><a href=\"#Mock-Random\" class=\"headerlink\" title=\"Mock.Random\"></a>Mock.Random</h2><p>Mock.Random 是一个工具类，用于生成各种随机数据。Mock.Random 的方法在数据模板中称为“占位符”，引用格式为 @占位符(参数 [, 参数]) 。</p>\n<h2 id=\"Mock-tpl-input-options-helpers-partials\"><a href=\"#Mock-tpl-input-options-helpers-partials\" class=\"headerlink\" title=\"Mock.tpl(input, options, helpers, partials)\"></a>Mock.tpl(input, options, helpers, partials)</h2><p>基于 Handlebars、Mustache 的 HTML 模板生成模拟数据。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481791813201,
				"created_by": 2,
				"updated_at": 1481791876955,
				"updated_by": 2,
				"published_at": 1481791813201,
				"published_by": 2
			},
			{
				"id": "ciwoq84qa0003q0fclktmcpv4",
				"title": "vue-router 生命周期",
				"slug": "vue-router-life-circle",
				"markdown": "路由的切换过程，本质上是执行一系列路由钩子函数，钩子函数总体上分为两大类：\n\n全局的钩子函数\n组件的钩子函数\n<!--more-->\n全局的钩子函数定义在全局的路由对象中，组件的钩子函数则定义在组件的route选项中。\n\n# 全局钩子函数\n全局钩子函数有2个：\n```bash\nbeforeEach： #在路由切换开始时调用\nafterEach：  #在每次路由切换成功进入激活阶段时被调用\n```\n# 组件的钩子函数\n组件的钩子函数一共6个：\n```bash\ndata：         #可以设置组件的data\nactivate：     #激活组件\ndeactivate：   #禁用组件\ncanActivate:   #组件是否可以被激活\ncanDeactivate：#组件是否可以被禁用\ncanReuse：     #组件是否可以被重用\n```\n# 切换对象\n每个切换钩子函数都会接受一个 transition 对象作为参数。这个切换对象包含以下函数和方法：\n```bash\ntransition.to\n#表示将要切换到的路径的路由对象。\ntransition.from\n#代表当前路径的路由对象。\ntransition.next()\n#调用此函数处理切换过程的下一步。\ntransition.abort([reason])\n#调用此函数来终止或者拒绝此次切换。\n#transition.redirect(path)\n取消当前切换并重定向到另一个路由。\n```\n# 钩子函数的执行顺序\n全局钩子函数和组件钩子函数加起来一共8个，为了熟练vue router的使用，有必要了解这些钩子函数的执行顺序。\n\n为了直观地了解这些钩子函数的执行顺序，在画面上追加一个Vue实例：\n```js\nvar well = new Vue({\n    el: '.well',\n    data: {\n        msg: '',\n        color: '#ff0000'\n    },\n    methods: {\n        setColor: function(){\n            this.color = '#' + parseInt(Math.random()*256).toString(16)\n                        + parseInt(Math.random()*256).toString(16)\n                        + parseInt(Math.random()*256).toString(16)\n        },\n        setColoredMessage: function(msg){\n            this.msg +=  '<p style=\"color: ' + this.color + '\">' + msg + '</p>'\n        },\n        setTitle: function(title){\n            this.msg =  '<h2 style=\"color: #333\">' + title + '</h2>'\n        }\n    }\n})\n```\nwell实例的HTML：\n```html\n<div class=\"well\">\n    {{{ msg }}}\n</div>\n```\n然后，添加一个RouteHelper函数，用于记录各个钩子函数的执行日志：\n```js\nfunction RouteHelper(name) {\n    var route = {\n        canReuse: function(transition) {\n            well.setColoredMessage('执行组件' + name + '的钩子函数:canReuse')\n            return true\n        },\n        canActivate: function(transition) {\n            well.setColoredMessage('执行组件' + name + '的钩子函数:canActivate')\n            transition.next()\n        },\n        activate: function(transition) {\n            well.setColoredMessage('执行组件' + name + '的钩子函数:activate')\n            transition.next()\n        },\n        canDeactivate: function(transition) {\n            well.setColoredMessage('执行组件' + name + '的钩子函数:canDeactivate')\n            transition.next()\n        },\n        deactivate: function(transition) {\n            well.setColoredMessage('执行组件' + name + '的钩子函数:deactivate')\n            transition.next()\n        },\n        data: function(transition) {\n            well.setColoredMessage('执行组件' + name + '的钩子函数:data')\n            transition.next()\n        }\n    }\n    return route;\n}\n```\n最后，将这些钩子函数应用于各个组件：\n```js\nvar Home = Vue.extend({\n    template: '#home',\n    data: function() {\n        return {\n            msg: 'Hello, vue router!',\n            path: ''\n        }\n    },\n    route: RouteHelper('Home')\n})\n\nvar News = Vue.extend({\n    template: '#news',\n    route: RouteHelper('News')\n})\n\nvar Message = Vue.extend({\n    template: '#message',\n    route: RouteHelper('Message')\n})\n\nvar About = Vue.extend({\n    template: '#about',\n    route: RouteHelper('About')\n})\n```",
				"html": "<p>路由的切换过程，本质上是执行一系列路由钩子函数，钩子函数总体上分为两大类：</p>\n<p>全局的钩子函数<br>组件的钩子函数<br><a id=\"more\"></a><br>全局的钩子函数定义在全局的路由对象中，组件的钩子函数则定义在组件的route选项中。</p>\n<h1 id=\"全局钩子函数\"><a href=\"#全局钩子函数\" class=\"headerlink\" title=\"全局钩子函数\"></a>全局钩子函数</h1><p>全局钩子函数有2个：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach： <span class=\"comment\">#在路由切换开始时调用</span></div><div class=\"line\">afterEach：  <span class=\"comment\">#在每次路由切换成功进入激活阶段时被调用</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"组件的钩子函数\"><a href=\"#组件的钩子函数\" class=\"headerlink\" title=\"组件的钩子函数\"></a>组件的钩子函数</h1><p>组件的钩子函数一共6个：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">data：         <span class=\"comment\">#可以设置组件的data</span></div><div class=\"line\">activate：     <span class=\"comment\">#激活组件</span></div><div class=\"line\">deactivate：   <span class=\"comment\">#禁用组件</span></div><div class=\"line\">canActivate:   <span class=\"comment\">#组件是否可以被激活</span></div><div class=\"line\">canDeactivate：<span class=\"comment\">#组件是否可以被禁用</span></div><div class=\"line\">canReuse：     <span class=\"comment\">#组件是否可以被重用</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"切换对象\"><a href=\"#切换对象\" class=\"headerlink\" title=\"切换对象\"></a>切换对象</h1><p>每个切换钩子函数都会接受一个 transition 对象作为参数。这个切换对象包含以下函数和方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">transition.to</div><div class=\"line\"><span class=\"comment\">#表示将要切换到的路径的路由对象。</span></div><div class=\"line\">transition.from</div><div class=\"line\"><span class=\"comment\">#代表当前路径的路由对象。</span></div><div class=\"line\">transition.next()</div><div class=\"line\"><span class=\"comment\">#调用此函数处理切换过程的下一步。</span></div><div class=\"line\">transition.abort([reason])</div><div class=\"line\"><span class=\"comment\">#调用此函数来终止或者拒绝此次切换。</span></div><div class=\"line\"><span class=\"comment\">#transition.redirect(path)</span></div><div class=\"line\">取消当前切换并重定向到另一个路由。</div></pre></td></tr></table></figure></p>\n<h1 id=\"钩子函数的执行顺序\"><a href=\"#钩子函数的执行顺序\" class=\"headerlink\" title=\"钩子函数的执行顺序\"></a>钩子函数的执行顺序</h1><p>全局钩子函数和组件钩子函数加起来一共8个，为了熟练vue router的使用，有必要了解这些钩子函数的执行顺序。</p>\n<p>为了直观地了解这些钩子函数的执行顺序，在画面上追加一个Vue实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> well = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'.well'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">''</span>,</div><div class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">'#ff0000'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">setColor</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.color = <span class=\"string\">'#'</span> + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">256</span>).toString(<span class=\"number\">16</span>)</div><div class=\"line\">                        + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">256</span>).toString(<span class=\"number\">16</span>)</div><div class=\"line\">                        + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">256</span>).toString(<span class=\"number\">16</span>)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">setColoredMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.msg +=  <span class=\"string\">'&lt;p style=\"color: '</span> + <span class=\"keyword\">this</span>.color + <span class=\"string\">'\"&gt;'</span> + msg + <span class=\"string\">'&lt;/p&gt;'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">setTitle</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.msg =  <span class=\"string\">'&lt;h2 style=\"color: #333\"&gt;'</span> + title + <span class=\"string\">'&lt;/h2&gt;'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>well实例的HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"well\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;&#123; msg &#125;&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后，添加一个RouteHelper函数，用于记录各个钩子函数的执行日志：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouteHelper</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> route = &#123;</div><div class=\"line\">        <span class=\"attr\">canReuse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>) </span>&#123;</div><div class=\"line\">            well.setColoredMessage(<span class=\"string\">'执行组件'</span> + name + <span class=\"string\">'的钩子函数:canReuse'</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">canActivate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>) </span>&#123;</div><div class=\"line\">            well.setColoredMessage(<span class=\"string\">'执行组件'</span> + name + <span class=\"string\">'的钩子函数:canActivate'</span>)</div><div class=\"line\">            transition.next()</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">activate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>) </span>&#123;</div><div class=\"line\">            well.setColoredMessage(<span class=\"string\">'执行组件'</span> + name + <span class=\"string\">'的钩子函数:activate'</span>)</div><div class=\"line\">            transition.next()</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">canDeactivate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>) </span>&#123;</div><div class=\"line\">            well.setColoredMessage(<span class=\"string\">'执行组件'</span> + name + <span class=\"string\">'的钩子函数:canDeactivate'</span>)</div><div class=\"line\">            transition.next()</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">deactivate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>) </span>&#123;</div><div class=\"line\">            well.setColoredMessage(<span class=\"string\">'执行组件'</span> + name + <span class=\"string\">'的钩子函数:deactivate'</span>)</div><div class=\"line\">            transition.next()</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>) </span>&#123;</div><div class=\"line\">            well.setColoredMessage(<span class=\"string\">'执行组件'</span> + name + <span class=\"string\">'的钩子函数:data'</span>)</div><div class=\"line\">            transition.next()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> route;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后，将这些钩子函数应用于各个组件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Home = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#home'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'Hello, vue router!'</span>,</div><div class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">route</span>: RouteHelper(<span class=\"string\">'Home'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> News = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#news'</span>,</div><div class=\"line\">    <span class=\"attr\">route</span>: RouteHelper(<span class=\"string\">'News'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Message = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#message'</span>,</div><div class=\"line\">    <span class=\"attr\">route</span>: RouteHelper(<span class=\"string\">'Message'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> About = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#about'</span>,</div><div class=\"line\">    <span class=\"attr\">route</span>: RouteHelper(<span class=\"string\">'About'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481707226040,
				"created_by": 2,
				"updated_at": 1481707227496,
				"updated_by": 2,
				"published_at": 1481707226040,
				"published_by": 2
			},
			{
				"id": "ciwoq3xw10000q0fcm7ndsqef",
				"title": "vue-router 让链接处于活跃状态",
				"slug": "vue-router-class",
				"markdown": "如何解决以下问题：\n\n当用户点击Home链接或About链接后，链接没有显示为选中\n当用户点击News或Message链接后，链接没有显示为选中\n<!--more-->\n设置activeClass\n--\n1.可以通过设定v-link指令的activeClass解决。\n```html\n<a class=\"list-group-item\" v-link=\"{ path: '/home', activeClass: 'active'}\">Home</a>\n<a class=\"list-group-item\" v-link=\"{ path: '/about', activeClass: 'active'}\">About</a>\n```\n设定了v-link指令的activeClass属性后，默认的v-link-active被新的class取代。\n\n2.为v-link指令设定activeClass是不起作用的，因为我们使用的是bootstrap的样式，需要设置a标签的父元素<li>才能让链接看起来处于选中状态，就像下面的代码所展现的：\n```html\n<ul class=\"nav nav-tabs\">\n    <li class=\"active\">\n        <a v-link=\"{ path: '/home/news'}\">News</a>\n    </li>\n    <li>\n        <a v-link=\"{ path: '/home/message'}\">Messages</a>\n    </li>\n</ul>\n```\n如何实现这个效果呢？你可能会想到，为Home组件的data选项追加一个currentPath属性，然后使用以下方式绑定class。\n```html\n<ul class=\"nav nav-tabs\">\n    <li :class=\"currentPath == '/home/news' ? 'active': ''\">\n        <a v-link=\"{ path: '/home/news'}\">News</a>\n    </li>\n    <li :class=\"currentPath == '/home/message' ? 'active': ''\">\n        <a v-link=\"{ path: '/home/message'}\">Messages</a>\n    </li>\n</ul>\n```\n现在又出现了另一个问题，在什么情况下给currentPath赋值呢？\n\n用户点击v-link的元素时，是路由的切换。\n每个组件都有一个route选项，route选项有一系列钩子函数，在切换路由时会执行这些钩子函数。\n其中一个钩子函数是data钩子函数，它用于加载和设置组件的数据。\n```js\nvar Home = Vue.extend({\n    template: '#home',\n    data: function() {\n        return {\n            msg: 'Hello, vue router!',\n            currentPath: ''\n        }\n    },\n    route: {\n        data: function(transition){\n            transition.next({\n                currentPath: transition.to.path\n            })\n        }\n    }\n})\n```",
				"html": "<p>如何解决以下问题：</p>\n<p>当用户点击Home链接或About链接后，链接没有显示为选中<br>当用户点击News或Message链接后，链接没有显示为选中<br><a id=\"more\"></a></p>\n<h2 id=\"设置activeClass\"><a href=\"#设置activeClass\" class=\"headerlink\" title=\"设置activeClass\"></a>设置activeClass</h2><p>1.可以通过设定v-link指令的activeClass解决。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home', activeClass: 'active'&#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/about', activeClass: 'active'&#125;\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>设定了v-link指令的activeClass属性后，默认的v-link-active被新的class取代。</p>\n<p>2.为v-link指令设定activeClass是不起作用的，因为我们使用的是bootstrap的样式，需要设置a标签的父元素<li>才能让链接看起来处于选中状态，就像下面的代码所展现的：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home/news'&#125;\"</span>&gt;</span>News<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home/message'&#125;\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></li></p>\n<p>如何实现这个效果呢？你可能会想到，为Home组件的data选项追加一个currentPath属性，然后使用以下方式绑定class。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"currentPath == '/home/news' ? 'active': ''\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home/news'&#125;\"</span>&gt;</span>News<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"currentPath == '/home/message' ? 'active': ''\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home/message'&#125;\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>现在又出现了另一个问题，在什么情况下给currentPath赋值呢？</p>\n<p>用户点击v-link的元素时，是路由的切换。<br>每个组件都有一个route选项，route选项有一系列钩子函数，在切换路由时会执行这些钩子函数。<br>其中一个钩子函数是data钩子函数，它用于加载和设置组件的数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Home = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#home'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'Hello, vue router!'</span>,</div><div class=\"line\">            <span class=\"attr\">currentPath</span>: <span class=\"string\">''</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">route</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">transition</span>)</span>&#123;</div><div class=\"line\">            transition.next(&#123;</div><div class=\"line\">                <span class=\"attr\">currentPath</span>: transition.to.path</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481707030548,
				"created_by": 2,
				"updated_at": 1481707032419,
				"updated_by": 2,
				"published_at": 1481707030548,
				"published_by": 2
			},
			{
				"id": "ciwoo5ice000084fcnw6lvehv",
				"title": "vue-resource使用",
				"slug": "vue-resourse",
				"markdown": "\n# vue-resource特点\n\nvue-resource插件具有以下特点：\n\n## 体积小\n\nvue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。\n<!--more-->\n## 支持主流的浏览器\n\n和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。\n\n\n## 支持Promise API和URI Templates\n\nPromise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。\nURI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。\n\n## 支持拦截器\n\n拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。\n拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。\n\n# vue-resource使用\n\n## 引入vue-resource\n\n```js\n<script src=\"js/vue.js\"></script>\n<script src=\"js/vue-resource.js\"></script>\n```\n## 基本语法\n\n引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。\n```js\n// 基于全局Vue对象使用http\nVue.http.get('/someUrl', [options]).then(successCallback, errorCallback);\nVue.http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);\n\n// 在一个Vue实例内使用$http\nthis.$http.get('/someUrl', [options]).then(successCallback, errorCallback);\nthis.$http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);\n```\n在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。\n\nthen方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：\n```js\n// 传统写法\nthis.$http.get('/someUrl', [options]).then(function(response){\n    // 响应成功回调\n}, function(response){\n    // 响应错误回调\n});\n\n\n// Lambda写法\nthis.$http.get('/someUrl', [options]).then((response) => {\n    // 响应成功回调\n}, (response) => {\n    // 响应错误回调\n});\n```\nPS：做过.NET开发的人想必对Lambda写法有一种熟悉的感觉。\n\n## 支持的HTTP方法\nvue-resource的请求API是按照REST风格设计的，它提供了7种请求API：\n```bash\nget(url, [options])\nhead(url, [options])\ndelete(url, [options])\njsonp(url, [options])\npost(url, [body], [options])\nput(url, [body], [options])\npatch(url, [body], [options])\n```\n除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。\n\n客户端请求方法\t服务端处理方法\n```js\nthis.$http.get(...)     //Getxxx\nthis.$http.post(...)\t//Postxxx\nthis.$http.put(...)\t    //Putxxx\nthis.$http.delete(...)\t//Deletexxx\n```\n## options对象\n\n发送请求时的options选项对象包含以下属性：\n\n|参数\t|类型\t|描述|\n| ------------- |:-------------:| -----:|\n|url\t|string|\t请求的URL|\n|method\t|string|\t请求的HTTP方法，例如：'GET', 'POST'或其他HTTP方法|\n|body\t|Object, FormDatastring\t|request body|\n|params\t|Object\t|请求的URL参数对象|\n|headers|\tObject|\trequest header|\n|timeout|\tnumber|\t单位为毫秒的请求超时时间 (0 表示无超时时间)|\n|before\t|function(request)|\t请求发送前的处理函数，类似于jQuery的beforeSend函数|\n|progress|\tfunction(event)|\tProgressEvent回调处理函数|\n|credientials\t|boolean|\t表示跨域请求时是否需要使用凭证|\n|emulateHTTP\t|boolean|\t发送PUT, PATCH, DELETE请求时以HTTP POST的方式发送，并设置请求头的X-HTTP-Method-Override|\n|emulateJSON\t|boolean|\t将request body以application/x-www-form-urlencoded content type发送|\n\n## response对象\n\nresponse对象包含以下属性：\n\n| 方法\t| 类型\t| 描述|\n| ------------- |:-------------:| -----:|\n| text()| \tstring\t| 以string形式返回response body|\n| json()\t| Object\t| 以JSON对象形式返回response body|\n| blob()| \tBlob| \t以二进制形式返回response body|\n\n| 属性\t| 类型\t| 描述|\n| ------------- |:-------------:| -----:|\n| ok\t| boolean| \t响应的HTTP状态码在200~299之间时，该属性为true|\n| status| \tnumber| \t响应的HTTP状态码|\n| statusText| \tstring\t| 响应的状态文本|\n| headers\t| Object| \t响应头|\n\n# CURD示例\n\n## GET请求\n\n```js\nvar demo = new Vue({\n    el: '#app',\n    data: {\n        gridColumns: ['customerId', 'companyName', 'contactName', 'phone'],\n        gridData: [],\n        apiUrl: 'http://211.149.193.19:8080/api/customers'\n    },\n    ready: function() {\n        this.getCustomers()\n    },\n    methods: {\n        getCustomers: function() {\n            this.$http.get(this.apiUrl)\n                .then((response) => {\n                    this.$set('gridData', response.data)\n                })\n                .catch(function(response) {\n                    console.log(response)\n                })\n        }\n    }\n})\n```\n\n这段程序的then方法只提供了successCallback，而省略了errorCallback。\ncatch方法用于捕捉程序的异常，catch方法和errorCallback是不同的，errorCallback只在响应失败时调用，而catch则是在整个请求到响应过程中，只要程序出错了就会被调用。\n\n在then方法的回调函数内，你也可以直接使用this，this仍然是指向Vue实例的：\n```js\ngetCustomers: function() {\n    this.$http.get(this.apiUrl)\n        .then((response) => {\n            this.$set('gridData', response.data)\n        })\n        .catch(function(response) {\n            console.log(response)\n        })\n}\n```\n\n## JSONP请求\n\n```js\ngetCustomers: function() {\n    this.$http.jsonp(this.apiUrl).then(function(response){\n        this.$set('gridData', response.data)\n    })\n}\n```\n## PUT请求\n\n```js\nupdateCustomer: function() {\n    var vm = this\n    vm.$http.put(this.apiUrl + '/' + vm.item.customerId, vm.item)\n        .then((response) => {\n            vm.getCustomers()\n        })\n}\n```\n## Delete请求\n\n```js\ndeleteCustomer: function(customer){\n    var vm = this\n    vm.$http.delete(this.apiUrl + '/' + customer.customerId)\n        .then((response) => {\n            vm.getCustomers()\n        })\n}\n```",
				"html": "<h1 id=\"vue-resource特点\"><a href=\"#vue-resource特点\" class=\"headerlink\" title=\"vue-resource特点\"></a>vue-resource特点</h1><p>vue-resource插件具有以下特点：</p>\n<h2 id=\"体积小\"><a href=\"#体积小\" class=\"headerlink\" title=\"体积小\"></a>体积小</h2><p>vue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。<br><a id=\"more\"></a></p>\n<h2 id=\"支持主流的浏览器\"><a href=\"#支持主流的浏览器\" class=\"headerlink\" title=\"支持主流的浏览器\"></a>支持主流的浏览器</h2><p>和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</p>\n<h2 id=\"支持Promise-API和URI-Templates\"><a href=\"#支持Promise-API和URI-Templates\" class=\"headerlink\" title=\"支持Promise API和URI Templates\"></a>支持Promise API和URI Templates</h2><p>Promise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。<br>URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</p>\n<h2 id=\"支持拦截器\"><a href=\"#支持拦截器\" class=\"headerlink\" title=\"支持拦截器\"></a>支持拦截器</h2><p>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。<br>拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。</p>\n<h1 id=\"vue-resource使用\"><a href=\"#vue-resource使用\" class=\"headerlink\" title=\"vue-resource使用\"></a>vue-resource使用</h1><h2 id=\"引入vue-resource\"><a href=\"#引入vue-resource\" class=\"headerlink\" title=\"引入vue-resource\"></a>引入vue-resource</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"js/vue.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"js/vue-resource.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 基于全局Vue对象使用http</span></div><div class=\"line\">Vue.http.get(<span class=\"string\">'/someUrl'</span>, [options]).then(successCallback, errorCallback);</div><div class=\"line\">Vue.http.post(<span class=\"string\">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在一个Vue实例内使用$http</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'/someUrl'</span>, [options]).then(successCallback, errorCallback);</div><div class=\"line\"><span class=\"keyword\">this</span>.$http.post(<span class=\"string\">'/someUrl'</span>, [body], [options]).then(successCallback, errorCallback);</div></pre></td></tr></table></figure></p>\n<p>在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。</p>\n<p>then方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传统写法</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'/someUrl'</span>, [options]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 响应成功回调</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 响应错误回调</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Lambda写法</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'/someUrl'</span>, [options]).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 响应成功回调</span></div><div class=\"line\">&#125;, (response) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 响应错误回调</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>PS：做过.NET开发的人想必对Lambda写法有一种熟悉的感觉。</p>\n<h2 id=\"支持的HTTP方法\"><a href=\"#支持的HTTP方法\" class=\"headerlink\" title=\"支持的HTTP方法\"></a>支持的HTTP方法</h2><p>vue-resource的请求API是按照REST风格设计的，它提供了7种请求API：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">get(url, [options])</div><div class=\"line\">head(url, [options])</div><div class=\"line\">delete(url, [options])</div><div class=\"line\">jsonp(url, [options])</div><div class=\"line\">post(url, [body], [options])</div><div class=\"line\">put(url, [body], [options])</div><div class=\"line\">patch(url, [body], [options])</div></pre></td></tr></table></figure></p>\n<p>除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。</p>\n<p>客户端请求方法    服务端处理方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$http.get(...)     <span class=\"comment\">//Getxxx</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$http.post(...)\t<span class=\"comment\">//Postxxx</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$http.put(...)\t    <span class=\"comment\">//Putxxx</span></div><div class=\"line\"><span class=\"keyword\">this</span>.$http.delete(...)\t<span class=\"comment\">//Deletexxx</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"options对象\"><a href=\"#options对象\" class=\"headerlink\" title=\"options对象\"></a>options对象</h2><p>发送请求时的options选项对象包含以下属性：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:right\">请求的URL</td>\n</tr>\n<tr>\n<td>method</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:right\">请求的HTTP方法，例如：’GET’, ‘POST’或其他HTTP方法</td>\n</tr>\n<tr>\n<td>body</td>\n<td style=\"text-align:center\">Object, FormDatastring</td>\n<td style=\"text-align:right\">request body</td>\n</tr>\n<tr>\n<td>params</td>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:right\">请求的URL参数对象</td>\n</tr>\n<tr>\n<td>headers</td>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:right\">request header</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:right\">单位为毫秒的请求超时时间 (0 表示无超时时间)</td>\n</tr>\n<tr>\n<td>before</td>\n<td style=\"text-align:center\">function(request)</td>\n<td style=\"text-align:right\">请求发送前的处理函数，类似于jQuery的beforeSend函数</td>\n</tr>\n<tr>\n<td>progress</td>\n<td style=\"text-align:center\">function(event)</td>\n<td style=\"text-align:right\">ProgressEvent回调处理函数</td>\n</tr>\n<tr>\n<td>credientials</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">表示跨域请求时是否需要使用凭证</td>\n</tr>\n<tr>\n<td>emulateHTTP</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">发送PUT, PATCH, DELETE请求时以HTTP POST的方式发送，并设置请求头的X-HTTP-Method-Override</td>\n</tr>\n<tr>\n<td>emulateJSON</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">将request body以application/x-www-form-urlencoded content type发送</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"response对象\"><a href=\"#response对象\" class=\"headerlink\" title=\"response对象\"></a>response对象</h2><p>response对象包含以下属性：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text()</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:right\">以string形式返回response body</td>\n</tr>\n<tr>\n<td>json()</td>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:right\">以JSON对象形式返回response body</td>\n</tr>\n<tr>\n<td>blob()</td>\n<td style=\"text-align:center\">Blob</td>\n<td style=\"text-align:right\">以二进制形式返回response body</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ok</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">响应的HTTP状态码在200~299之间时，该属性为true</td>\n</tr>\n<tr>\n<td>status</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:right\">响应的HTTP状态码</td>\n</tr>\n<tr>\n<td>statusText</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:right\">响应的状态文本</td>\n</tr>\n<tr>\n<td>headers</td>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:right\">响应头</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"CURD示例\"><a href=\"#CURD示例\" class=\"headerlink\" title=\"CURD示例\"></a>CURD示例</h1><h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">gridColumns</span>: [<span class=\"string\">'customerId'</span>, <span class=\"string\">'companyName'</span>, <span class=\"string\">'contactName'</span>, <span class=\"string\">'phone'</span>],</div><div class=\"line\">        <span class=\"attr\">gridData</span>: [],</div><div class=\"line\">        <span class=\"attr\">apiUrl</span>: <span class=\"string\">'http://211.149.193.19:8080/api/customers'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">ready</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getCustomers()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">getCustomers</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$http.get(<span class=\"keyword\">this</span>.apiUrl)</div><div class=\"line\">                .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">this</span>.$set(<span class=\"string\">'gridData'</span>, response.data)</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(response)</div><div class=\"line\">                &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这段程序的then方法只提供了successCallback，而省略了errorCallback。<br>catch方法用于捕捉程序的异常，catch方法和errorCallback是不同的，errorCallback只在响应失败时调用，而catch则是在整个请求到响应过程中，只要程序出错了就会被调用。</p>\n<p>在then方法的回调函数内，你也可以直接使用this，this仍然是指向Vue实例的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">getCustomers: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$http.get(<span class=\"keyword\">this</span>.apiUrl)</div><div class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$set(<span class=\"string\">'gridData'</span>, response.data)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(response)</div><div class=\"line\">        &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"JSONP请求\"><a href=\"#JSONP请求\" class=\"headerlink\" title=\"JSONP请求\"></a>JSONP请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getCustomers: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$http.jsonp(<span class=\"keyword\">this</span>.apiUrl).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$set(<span class=\"string\">'gridData'</span>, response.data)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"PUT请求\"><a href=\"#PUT请求\" class=\"headerlink\" title=\"PUT请求\"></a>PUT请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">updateCustomer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">    vm.$http.put(<span class=\"keyword\">this</span>.apiUrl + <span class=\"string\">'/'</span> + vm.item.customerId, vm.item)</div><div class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">            vm.getCustomers()</div><div class=\"line\">        &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Delete请求\"><a href=\"#Delete请求\" class=\"headerlink\" title=\"Delete请求\"></a>Delete请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deleteCustomer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">customer</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">    vm.$http.delete(<span class=\"keyword\">this</span>.apiUrl + <span class=\"string\">'/'</span> + customer.customerId)</div><div class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">            vm.getCustomers()</div><div class=\"line\">        &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481703700302,
				"created_by": 2,
				"updated_at": 1481706040382,
				"updated_by": 2,
				"published_at": 1481703700302,
				"published_by": 2
			},
			{
				"id": "ciwoo5icw000184fcgmoz3mkt",
				"title": "vue-router 快速入门",
				"slug": "vue-router",
				"markdown": "vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。传统的页面应用，是用一些超链接来实现页面切换和跳转的。在vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。\n<!--more-->\n# 第一个单页面应用\n\n## 创建组件\n首先引入vue.js和vue-router.js：\n```js\n<script src=\"js/vue.js\"></script>\n<script src=\"js/vue-router.js\"></script>\n```\n然后创建两个组件构造器Home和About：\n```js\nvar Home = Vue.extend({\n    template: '<div><h1>Home</h1><p>{{msg}}</p></div>',\n    data: function() {\n        return {\n            msg: 'Hello, vue router!'\n        }\n    }\n})\n\nvar About = Vue.extend({\n    template: '<div><h1>About</h1><p>This is the tutorial about vue-router.</p></div>'\n})\n```\n## 创建Router\n```js\nvar router = new VueRouter()\n```\n调用构造器VueRouter，创建一个路由器实例router。\n\n## 映射路由\n```js\nrouter.map({\n    '/home': { component: Home },\n    '/about': { component: About }\n})\n```\n调用router的map方法映射路由，每条路由以key-value的形式存在，key是路径，value是组件。\n例如：'/home'是一条路由的key，它表示路径；{component: Home}则表示该条路由映射的组件。\n\n## 使用v-link指令\n```html\n<div class=\"list-group\">\n    <a class=\"list-group-item\" v-link=\"{ path: '/home'}\">Home</a>\n    <a class=\"list-group-item\" v-link=\"{ path: '/about'}\">About</a>\n</div>\n```\n在a元素上使用v-link指令跳转到指定路径。\n\n## 使用<router-view>标签\n```html\n<router-view></router-view>\n```\n在页面上使用<router-view></router-view>标签，它用于渲染匹配的组件。\n\n## 启动路由\n```js\nvar App = Vue.extend({})\nrouter.start(App, '#app')\n```\n路由器的运行需要一个根组件，router.start(App, '#app') 表示router会创建一个App实例，并且挂载到#app元素。\n注意：使用vue-router的应用，不需要显式地创建Vue实例，而是调用start方法将根组件挂载到某个元素。\n\n## 执行过程\n### JavaScript\n\n创建组件：创建单页面应用需要渲染的组件\n创建路由：创建VueRouter实例\n映射路由：调用VueRouter实例的map方法\n启动路由：调用VueRouter实例的start方法\n### HTML\n\n使用v-link指令\n使用<router-view>标签\nrouter.redirect\n应用在首次运行时右侧是一片空白，应用通常都会有一个首页，例如：Home页。\n使用router.redirect方法将根路径重定向到/home路径：\n```js\nrouter.redirect({\n    '/': '/home'\n})\n```\nrouter.redirect方法用于为路由器定义全局的重定向规则，全局的重定向会在匹配当前路径之前执行。\n\n### 执行过程\n当用户点击v-link指令元素时，我们可以大致猜想一下这中间发生了什么事情：\nvue-router首先会去查找v-link指令的路由映射\n然后根据路由映射找到匹配的组件\n最后将组件渲染到<router-view>标签\n\n# 嵌套路由\n嵌套路由是个常见的需求，假设用户能够通过路径/home/news和/home/message访问一些内容，一个路径映射一个组件，访问这两个路径也会分别渲染两个组件。 \n\n实现嵌套路由有两个要点：\n\n在组件内部使用<router-view>标签\n在路由器对象中给组件定义子路由\n现在我们就动手实现这个需求。\n\n组件模板：\n```html\n<template id=\"home\">\n    <div>\n        <h1>Home</h1>\n        <p>{{msg}}</p>\n    </div>\n    <div>\n        <ul class=\"nav nav-tabs\">\n            <li>\n                <a v-link=\"{ path: '/home/news'}\">News</a>\n            </li>\n            <li>\n                <a v-link=\"{ path: '/home/message'}\">Messages</a>\n            </li>\n        </ul>\n        <router-view></router-view>\n    </div>\n</template>\n\n<template id=\"news\">\n    <ul>\n        <li>News 01</li>\n        <li>News 02</li>\n        <li>News 03</li>\n    </ul>\n</template>\n<template id=\"message\">\n    <ul>\n        <li>Message 01</li>\n        <li>Message 02</li>\n        <li>Message 03</li>\n    </ul>\n</template>\n```\n组件构造器：\n```js\nvar Home = Vue.extend({\n    template: '#home',\n    data: function() {\n        return {\n            msg: 'Hello, vue router!'\n        }\n    }\n})\n\nvar News = Vue.extend({\n    template: '#news'\n})\n\nvar Message = Vue.extend({\n    template: '#message'\n})\n```\n路由映射：\n```js\nrouter.map({\n    '/home': {\n        component: Home,\n        // 定义子路由\n        subRoutes: {\n            '/news': {\n                component: News\n            },\n            '/message': {\n                component: Message\n            }\n        }\n    },\n    '/about': {\n        component: About\n    }\n})\n```\n在/home路由下定义了一个subRoutes选项，/news和/message是两条子路由，它们分别表示路径/home/news和/home/message，这两条路由分别映射组件News和Message。\n\n注意：这里有一个概念要区分一下，/home/news和/home/message是/home路由的子路由，与之对应的News和Message组件并不是Home的子组件。\n\n# v-link指令\n用了这么久的v-link指令，是该介绍一下它了。\n\nv-link 是一个用来让用户在 vue-router 应用的不同路径间跳转的指令。该指令接受一个 JavaScript 表达式，并会在用户点击元素时用该表达式的值去调用 router.go。\n\n具体来讲，v-link有三种用法：\n```js\n<!-- 字面量路径 -->\n<a v-link=\"'home'\">Home</a>\n\n<!-- 效果同上 -->\n<a v-link=\"{ path: 'home' }\">Home</a>\n\n<!-- 具名路径 -->\n<a v-link=\"{ name: 'detail', params: {id: '01'} }\">Home</a>\n```\nv-link 会自动设置 a标签的 href 属性，你无需使用href来处理浏览器的调整，原因如下：\n\n它在 HTML5 history 模式和 hash 模式下的工作方式相同，所以如果你决定改变模式，或者 IE9 浏览器退化为 hash 模式时，都不需要做任何改变。\n\n在 HTML5 history 模式下，v-link 会监听点击事件，防止浏览器尝试重新加载页面。\n\n在 HTML5 history 模式下使用 root 选项时，不需要在 v-link 的 URL 中包含 root 路径。\n\n# 路由对象\n在使用了 vue-router 的应用中，路由对象会被注入每个组件中，赋值为 this.$route ，并且当路由切换时，路由对象会被更新。\n\n路由对象暴露了以下属性：\n\n$route.path \n字符串，等于当前路由对象的路径，会被解析为绝对路径，如 \"/home/news\" 。\n$route.params \n对象，包含路由中的动态片段和全匹配片段的键值对\n$route.query \n对象，包含路由中查询参数的键值对。例如，对于 /home/news/detail/01?favorite=yes ，会得到$route.query.favorite == 'yes' 。\n$route.router \n路由规则所属的路由器（以及其所属的组件）。\n$route.matched \n数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。\n$route.name \n当前路径的名字，如果没有使用具名路径，则名字为空。\n在页面上添加以下代码，可以显示这些路由对象的属性：\n```html\n<div>\n    <p>当前路径：{{$route.path}}</p>\n    <p>当前参数：{{$route.params | json}}</p>\n    <p>路由名称：{{$route.name}}</p>\n    <p>路由查询参数：{{$route.query | json}}</p>\n    <p>路由匹配项：{{$route.matched | json}}</p>\n</div>\n```\n$route.path, $route.params, $route.name, $route.query这几个属性很容易理解，看示例就能知道它们代表的含义。\n\n",
				"html": "<p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。传统的页面应用，是用一些超链接来实现页面切换和跳转的。在vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。<br><a id=\"more\"></a></p>\n<h1 id=\"第一个单页面应用\"><a href=\"#第一个单页面应用\" class=\"headerlink\" title=\"第一个单页面应用\"></a>第一个单页面应用</h1><h2 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h2><p>首先引入vue.js和vue-router.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"js/vue.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"js/vue-router.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>然后创建两个组件构造器Home和About：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Home = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&lt;h1&gt;Home&lt;/h1&gt;&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;&lt;/div&gt;'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'Hello, vue router!'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> About = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&lt;h1&gt;About&lt;/h1&gt;&lt;p&gt;This is the tutorial about vue-router.&lt;/p&gt;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建Router\"><a href=\"#创建Router\" class=\"headerlink\" title=\"创建Router\"></a>创建Router</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter()</div></pre></td></tr></table></figure>\n<p>调用构造器VueRouter，创建一个路由器实例router。</p>\n<h2 id=\"映射路由\"><a href=\"#映射路由\" class=\"headerlink\" title=\"映射路由\"></a>映射路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.map(&#123;</div><div class=\"line\">    <span class=\"string\">'/home'</span>: &#123; <span class=\"attr\">component</span>: Home &#125;,</div><div class=\"line\">    <span class=\"string\">'/about'</span>: &#123; <span class=\"attr\">component</span>: About &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>调用router的map方法映射路由，每条路由以key-value的形式存在，key是路径，value是组件。<br>例如：’/home’是一条路由的key，它表示路径；{component: Home}则表示该条路由映射的组件。</p>\n<h2 id=\"使用v-link指令\"><a href=\"#使用v-link指令\" class=\"headerlink\" title=\"使用v-link指令\"></a>使用v-link指令</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home'&#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/about'&#125;\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在a元素上使用v-link指令跳转到指定路径。</p>\n<h2 id=\"使用标签\"><a href=\"#使用标签\" class=\"headerlink\" title=\"使用标签\"></a>使用<router-view>标签</router-view></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在页面上使用<router-view></router-view>标签，它用于渲染匹配的组件。</p>\n<h2 id=\"启动路由\"><a href=\"#启动路由\" class=\"headerlink\" title=\"启动路由\"></a>启动路由</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123;&#125;)</div><div class=\"line\">router.start(App, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<p>路由器的运行需要一个根组件，router.start(App, ‘#app’) 表示router会创建一个App实例，并且挂载到#app元素。<br>注意：使用vue-router的应用，不需要显式地创建Vue实例，而是调用start方法将根组件挂载到某个元素。</p>\n<h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>创建组件：创建单页面应用需要渲染的组件<br>创建路由：创建VueRouter实例<br>映射路由：调用VueRouter实例的map方法<br>启动路由：调用VueRouter实例的start方法</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><p>使用v-link指令<br>使用<router-view>标签<br>router.redirect<br>应用在首次运行时右侧是一片空白，应用通常都会有一个首页，例如：Home页。<br>使用router.redirect方法将根路径重定向到/home路径：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.redirect(&#123;</div><div class=\"line\">    <span class=\"string\">'/'</span>: <span class=\"string\">'/home'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></router-view></p>\n<p>router.redirect方法用于为路由器定义全局的重定向规则，全局的重定向会在匹配当前路径之前执行。</p>\n<h3 id=\"执行过程-1\"><a href=\"#执行过程-1\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><p>当用户点击v-link指令元素时，我们可以大致猜想一下这中间发生了什么事情：<br>vue-router首先会去查找v-link指令的路由映射<br>然后根据路由映射找到匹配的组件<br>最后将组件渲染到<router-view>标签</router-view></p>\n<h1 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h1><p>嵌套路由是个常见的需求，假设用户能够通过路径/home/news和/home/message访问一些内容，一个路径映射一个组件，访问这两个路径也会分别渲染两个组件。 </p>\n<p>实现嵌套路由有两个要点：</p>\n<p>在组件内部使用<router-view>标签<br>在路由器对象中给组件定义子路由<br>现在我们就动手实现这个需求。</router-view></p>\n<p>组件模板：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"home\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-tabs\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home/news'&#125;\"</span>&gt;</span>News<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/home/message'&#125;\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"news\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>News 01<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>News 02<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>News 03<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Message 01<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Message 02<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Message 03<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>组件构造器：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Home = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#home'</span>,</div><div class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">msg</span>: <span class=\"string\">'Hello, vue router!'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> News = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#news'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Message = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#message'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>路由映射：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.map(&#123;</div><div class=\"line\">    <span class=\"string\">'/home'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">component</span>: Home,</div><div class=\"line\">        <span class=\"comment\">// 定义子路由</span></div><div class=\"line\">        subRoutes: &#123;</div><div class=\"line\">            <span class=\"string\">'/news'</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">component</span>: News</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"string\">'/message'</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">component</span>: Message</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'/about'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">component</span>: About</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在/home路由下定义了一个subRoutes选项，/news和/message是两条子路由，它们分别表示路径/home/news和/home/message，这两条路由分别映射组件News和Message。</p>\n<p>注意：这里有一个概念要区分一下，/home/news和/home/message是/home路由的子路由，与之对应的News和Message组件并不是Home的子组件。</p>\n<h1 id=\"v-link指令\"><a href=\"#v-link指令\" class=\"headerlink\" title=\"v-link指令\"></a>v-link指令</h1><p>用了这么久的v-link指令，是该介绍一下它了。</p>\n<p>v-link 是一个用来让用户在 vue-router 应用的不同路径间跳转的指令。该指令接受一个 JavaScript 表达式，并会在用户点击元素时用该表达式的值去调用 router.go。</p>\n<p>具体来讲，v-link有三种用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 字面量路径 --&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"'home'\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- 效果同上 --&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: 'home' &#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">&lt;!-- 具名路径 --&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; name: 'detail', params: &#123;id: '01'&#125; &#125;\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>v-link 会自动设置 a标签的 href 属性，你无需使用href来处理浏览器的调整，原因如下：</p>\n<p>它在 HTML5 history 模式和 hash 模式下的工作方式相同，所以如果你决定改变模式，或者 IE9 浏览器退化为 hash 模式时，都不需要做任何改变。</p>\n<p>在 HTML5 history 模式下，v-link 会监听点击事件，防止浏览器尝试重新加载页面。</p>\n<p>在 HTML5 history 模式下使用 root 选项时，不需要在 v-link 的 URL 中包含 root 路径。</p>\n<h1 id=\"路由对象\"><a href=\"#路由对象\" class=\"headerlink\" title=\"路由对象\"></a>路由对象</h1><p>在使用了 vue-router 的应用中，路由对象会被注入每个组件中，赋值为 this.$route ，并且当路由切换时，路由对象会被更新。</p>\n<p>路由对象暴露了以下属性：</p>\n<p>$route.path<br>字符串，等于当前路由对象的路径，会被解析为绝对路径，如 “/home/news” 。<br>$route.params<br>对象，包含路由中的动态片段和全匹配片段的键值对<br>$route.query<br>对象，包含路由中查询参数的键值对。例如，对于 /home/news/detail/01?favorite=yes ，会得到$route.query.favorite == ‘yes’ 。<br>$route.router<br>路由规则所属的路由器（以及其所属的组件）。<br>$route.matched<br>数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。<br>$route.name<br>当前路径的名字，如果没有使用具名路径，则名字为空。<br>在页面上添加以下代码，可以显示这些路由对象的属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前路径：&#123;&#123;$route.path&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前参数：&#123;&#123;$route.params | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>路由名称：&#123;&#123;$route.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>路由查询参数：&#123;&#123;$route.query | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>路由匹配项：&#123;&#123;$route.matched | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>$route.path, $route.params, $route.name, $route.query这几个属性很容易理解，看示例就能知道它们代表的含义。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481703623182,
				"created_by": 2,
				"updated_at": 1481706605130,
				"updated_by": 2,
				"published_at": 1481703623182,
				"published_by": 2
			},
			{
				"id": "ciwomrpdl0000gsfcbzt5bt2t",
				"title": "Vue生命周期实例",
				"slug": "vue-life-circle",
				"markdown": "Vue生命周期实例\n<!--more-->\n```js\n  var myVue = new Vue({\n                el: \".test\",\n                data: {\n                    a: \"我是内容,在控制台输入myVue.a=123456,可以改变我的值\"\n                },\n                created: function () {\n                    //在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。\n                    //但是还没有开始 DOM 编译，$el 还不存在,但是实例存在,即this.a存在,可打印出来 。\n                    console.log(\"建立\");\n                },\n                beforeCompile: function () {\n                    console.log(\"未开始编译\");\n                },\n                compiled: function () {\n                    //在编译结束后调用。此时所有的指令已生效，因而数据的变化将触发 DOM 更新。但是不担保 $el 已插入文档。\n                    console.log(\"编译完成\");\n                },\n                ready: function () {\n                    //在编译结束和 $el 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.$appendTo() 等方法或指令更新）才触发 ready 钩子。\n                    console.log(\"一切准备好了\");\n                },\n                attached :function () {  //myVue.$appendTo(\".test2\")暂时触发不了,不知道怎么解决\n                    //在 vm.$el 插入 DOM 时调用。必须是由指令或实例方法（如 $appendTo()）插入，直接操作 vm.$el 不会 触发这个钩子。\n                    console.log(\"插入DOM成功\");\n                },\n                detached :function () { //触发事件 myVue.$destroy(true),其中参数true控制是否删除DOM节点或者myVue.$remove()\n                    //在 vm.$el 从 DOM 中删除时调用。必须是由指令或实例方法删除，直接操作 vm.$el 不会 触发这个钩子。\n                    console.log(\"删除DOM成功\");\n                },\n                beforeDestroy: function () {  //触发方式,在console里面打myVue.$destroy();\n                    //在开始销毁实例时调用。此时实例仍然有功能。\n                    console.log(\"销毁前\");\n                },\n                destroyed: function () {   //触发方式,在console里面打myVue.$destroy();其中myVue.$destroy(true)是删除DOM节点,会触发detached函数,但是实例仍然存在\n                    //在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，注意是解绑不是销毁,所有的子实例也已经被销毁。\n                    console.log(\"已销毁\");\n                }\n        });\n```",
				"html": "<p>Vue生命周期实例<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVue = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">              <span class=\"attr\">el</span>: <span class=\"string\">\".test\"</span>,</div><div class=\"line\">              <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">                  <span class=\"attr\">a</span>: <span class=\"string\">\"我是内容,在控制台输入myVue.a=123456,可以改变我的值\"</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                  <span class=\"comment\">//在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。</span></div><div class=\"line\">                  <span class=\"comment\">//但是还没有开始 DOM 编译，$el 还不存在,但是实例存在,即this.a存在,可打印出来 。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"建立\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">beforeCompile</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"未开始编译\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">compiled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                  <span class=\"comment\">//在编译结束后调用。此时所有的指令已生效，因而数据的变化将触发 DOM 更新。但是不担保 $el 已插入文档。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"编译完成\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">ready</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                  <span class=\"comment\">//在编译结束和 $el 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.$appendTo() 等方法或指令更新）才触发 ready 钩子。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"一切准备好了\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">attached</span> :<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//myVue.$appendTo(\".test2\")暂时触发不了,不知道怎么解决</span></div><div class=\"line\">                  <span class=\"comment\">//在 vm.$el 插入 DOM 时调用。必须是由指令或实例方法（如 $appendTo()）插入，直接操作 vm.$el 不会 触发这个钩子。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"插入DOM成功\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">detached</span> :<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//触发事件 myVue.$destroy(true),其中参数true控制是否删除DOM节点或者myVue.$remove()</span></div><div class=\"line\">                  <span class=\"comment\">//在 vm.$el 从 DOM 中删除时调用。必须是由指令或实例方法删除，直接操作 vm.$el 不会 触发这个钩子。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"删除DOM成功\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">beforeDestroy</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//触发方式,在console里面打myVue.$destroy();</span></div><div class=\"line\">                  <span class=\"comment\">//在开始销毁实例时调用。此时实例仍然有功能。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"销毁前\"</span>);</div><div class=\"line\">              &#125;,</div><div class=\"line\">              <span class=\"attr\">destroyed</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;   <span class=\"comment\">//触发方式,在console里面打myVue.$destroy();其中myVue.$destroy(true)是删除DOM节点,会触发detached函数,但是实例仍然存在</span></div><div class=\"line\">                  <span class=\"comment\">//在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，注意是解绑不是销毁,所有的子实例也已经被销毁。</span></div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"已销毁\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481701398673,
				"created_by": 2,
				"updated_at": 1481701400640,
				"updated_by": 2,
				"published_at": 1481701398673,
				"published_by": 2
			},
			{
				"id": "ciwnjf8g90000c0fc7reydtdq",
				"title": "Vue语法简单示例",
				"slug": "vue-example",
				"markdown": "Vue语法简单示例\n<!--more-->\nHello World\n--\n```html\n<div id=\"app\">\n  {{ message }}\n  <button v-on:click=\"clickMe()\">点击</button>\n  <button v-on:click=\"clickMe\">无参数的简写</button>\n</div>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    clickMe: function(){}\n  }\n});\n```\n指令\n--\n循环\n循环数组\n```html\n<!-- Vue 1 这么写 -->\n<li v-for=\"item in items\"> 第{{ $index }}条:{{ item.message }}</li>\n<div v-for=\"item in items\" track-by=\"id\">\n```\n```html\n<!-- Vue 2 这么写 -->\n<li v-for=\"(item, index) in items\"> 第{{ index }}条:{{ item.message }}</li>\n<div v-for=\"item in items\" v-bind:key=\"item.id\">\n```\n循环对象\n```html\n<!-- Vue 1 这么写 -->\n<li v-for=\"(key, value) in obj\"></li>\n```\n```html\n<!-- Vue 2 这么写 -->\n\n<li v-for=\"(value, key) in obj\"></li>\n```\n循环数字\n```html\n<span v-for=\"n in 10\">{{ n }} </span>\n\n<!-- Vue 1 从0开始，Vue 2从1开始  -->\n```\n条件\n```html\n<!-- 如果ok为false, 不输出在 HTML 中 -->\n<div v-if=\"ok\">Yes</div>\n<div v-else>No</div>\n\n<!-- 如果ok为false,只是 display:none 而已 -->\n<h1 v-show=\"ok\">Hello!</h1>\n```\n事件绑定\n---\n```html\n<button v-on:click=\"say('hi')\">点击</button>\n<!-- 简写 -->\n<button @click=\"say('hi')\">点击</button>\n<!-- 传入 event 对象 -->\n<button @click=\"say('hi', $event)\">点击</button>\n<!-- 阻止单击事件冒泡 -->\n<button @click.stop=\"doSth\">点击</button>\n<!-- 阻止默认行为 -->\n<button @submit.prevent=\"doSth\">点击</button>\n<!-- 修饰符可以串联 -->\n<a @click.stop.prevent=\"doThat\"></a>\n<!-- 按键修饰符：回车时才会执行 -->\n<input @keyup.13=\"submit\"><!-- 13 为 keycode -->\n<input @keyup.enter=\"submit\">\n<!-- 支持的全部按钮为 enter, tab, delete, space, up, down, left, right 字母 -->\n```\n表单的双向绑定\n---\n```html\n<input type=\"text\" v-model=\"message\">\n<!-- 自定义选中值。否则 选中为value值，不选为空 -->\n<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  v-bind:true-value=\"a\"\n  v-bind:false-value=\"b\">\n```\n绑定属性\n---\n```html\n<div v-bind:class=\"{ 'class-a': isA, 'class-b': isB }\"></div>\n<div v-bind:class=\"classArr\"></div> <!-- classArr 是一个数组 -->\n<!-- 简写 -->\n<div :class=\"{ 'class-a': isA, 'class-b': isB }\"></div>\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n<img :src=\"imgSrc\">\n<a :href=\"baseURL + '/path'\">\n```\n在 Vue 2 中，如果属性值是变量，必须用绑定属性的写法。\n```html\n// wrong\n<img src=\"{{imgSrc}}\">\n// right\n<img :src=\"imgSrc\">\n```\n避免闪烁： v-cloak\n---\n```html\n[v-cloak] {\n  display: none;\n}\n<div v-cloak>\n  {{ message }}\n</div>\n```\n不会显示 <div> 的内容，直到编译结束。\n\n单向绑定\n--\n单向绑定的意思是，即使绑定变量的值发生变化，显示的内容仍旧就是最初绑定时候的值。\n```html\n<!-- Vue 1 这么写 -->\n<span>This will never change: {{* msg }}</span>\n<!-- Vue 2 不支持 -->\n```\n输出 HTML\n--\n```html\n<!-- Vue 1 这么写 -->\n<div>{{{ raw_html }}}</div> <!-- {{}} 中的 HTML 内容的会转为纯文本 -->\n<!-- Vue 2 这么写 -->\n<div v-html=\"raw_html\"></div>\n```\n计算属性\n--\n```html\n<div id=\"demo\">{{fullName}}</div>\nnew Vue({\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n});\n```\n自定义指令\n--\n```html\nVue.directive('my-directive', {\n  bind: function () {\n    // 准备工作\n    // 例如，添加事件处理器或只需要运行一次的高耗任务\n    this.el;// 添加指令的元素\n    this.vm.$get(name)// 获得该指令的上下文 ViewModel\n    this.expression;// 指令的表达式的值\n  },\n  update: function (newValue, oldValue) {\n    // 值更新时的工作\n    // 也会以初始值为参数调用一次\n  },\n  unbind: function () {\n    // 清理工作\n    // 例如，删除 bind() 添加的事件监听器\n  }\n})\n<div v-my-directive=\"someValue\"></div>\n```\n监听数据变化\n---\n```html\nnew Vue({\n  data: {\n    firstName: 'Foo'\n  },\n  watch: {\n    firstName: function (val, oldVal) {\n    }\n  }\n});\n```\n过滤器\n--\n```html\n{{ msg | capitalize }}// 'abc' => 'Abc'\n```\n常见内置过滤器\ncapitalize, uppercase, lowercase, json, limitBy, filterBy。所有见这里。\n\nVue 2 中把这些内置的过滤器都删除了。\n\n自定义过滤器\n---\n```html\nVue.filter('wrap', function (value, begin, end) {\n  return begin + value + end;\n});\n<!-- 'hello' => 'before hello after' -->\n<!-- Vue 1 这么写 -->\n<span v-text=\"message | wrap 'before' 'after'\"></span>\n<!-- Vue 2 这么写 -->\n<span v-text=\"message | wrap('before', 'after')\"></span>\n```\n生命周期相关的钩子函数\n---\n```html\n// Vue 1\nnew Vue({\n  created: function(){},\n  beforeCompile: function(){},\n  compiled: function(){},\n  ready: function(){},// DOM 元素已经加入到HTML中\n  beforeDestroy: function(){},\n  destroyed: function(){}\n});\n\n// Vue 2\nnew Vue({\n  created: function(){},\n  mounted : function(){},// 相对与 1 中的 ready\n  beforeDestroy: function(){},\n  destroyed: function(){}\n});\n```\n过渡效果\n--\n```html\n<!-- Vue 1 这么写 -->\n<div v-if=\"show\" transition=\"my-transition\"></div>\n<!-- Vue 2 这么写 -->\n<transition v-bind:name=\"my-transition\">\n  <!-- ... -->\n</transition>\n/* 必需 */\n.my-transition-transition {\n  transition: all .3s ease;\n}\n/* .my-transition-enter 定义进入的开始状态 */\n.my-transition-enter{}\n/* .my-transition-leave 定义离开的结束状态 */\n.my-transition-leave {}\n```\n组件\n--\nVue 2 和 Vue 1 的组件的区别有些大。\n\nVue 1\n定义和调用组件\n```html\n<my-comp\n  prop=\"literal string\"\n  :prop1=\"defaultOneWay\"\n  :prop2.sync=\"twoWay\"\n  :prop3.once=\"oneTime\">\n</my-comp>\nVue.component('my-comp', {\n  template: 'html strings',\n  props: {\n    prop: String,\n    prop1: {\n      type: Number,\n      required: true\n    },\n    prop2: {\n      type: Number,\n      default: 88\n    },\n     // 对象/数组的默认值应当由一个函数返回\n    prop3: {\n      type: Object,\n      default: function () {\n        return { msg: 'hello' }\n      }\n    },\n    // 自定义验证函数\n    prop4: {\n       validator: function (value) {\n        return value > 10\n      }\n    }\n  },\n  data: functin(){\n    return {\n\n    }\n  }\n\n}\n```\n父子组件通信\n---\n```html\n// 子组件\nvar child = new Vue.component('child', {\n  events: {\n    'parent-msg': function (msg) {}\n  }\n});\n// 子组件向父组件传消息\nchild.$dispatch('child-msg', child.msg);\n\n// 父组件\nvar parent = new Vue({\n  events: {\n    'child-msg': function (msg) {\n      // 父组件向所有子组件传消息\n      this.$broadcast('parent-msg', 'received it');\n    }\n  }\n});\n```\n\n```bash\nthis.$parent   #访问它的父组件。\nthis.$root     #访问它的根组件。\nthis.$children #访问它的子组件。\n```\n小技巧\n--\n渲染一个包含多个元素的块\n```html\n<template v-for=\"item in items\">\n  <li>{{ item.msg }}</li>\n  <li class=\"divider\"></li>\n</template>\n<template v-if=\"user\">\n  <img :src=\"user.avatarUrl\" alt=\"\">\n  <div class=\"name\">{{user.name}}</div>\n</template>\n```\ntemplate 用于包含多个元素的块,最终的渲染结果不会包含 template 元素。\n\nVue.set 和 Vue.delete\n--\n用于解决 不能检测到属性添加，属性删除的限制。\n```html\nVue.nextTick\n// 修改数据\nvm.msg = 'Hello'\n// DOM 没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n})\n```\nVue 在检测到数据变化时是异步更新 DOM 的。具体见 异步更新队列。vm 上也有 this.$nextTick。\n\nvue 插件\n--\n路由: vue-router\n官方文档\n\n定义路由\n```html\nvar Vue = require('vue');\nvar VueRouter = require('vue-router');\n\nVue.use(VueRouter);\nrouter.map({\n  '/login': {component: require('login')},\n  '/user/:': {component: ...},\n  // 异步加载组件。加载器用的 webpack\n  '/another': {component: function(resolve) {\n      require.ensure([], function(require) {\n        resolve(require('...'));\n      });\n    }},\n});\n\nrouter.redirect({ '*': '/login' }); // 默认路由\n\nrouter.beforeEach(function(transition) {\n  // console.info('show loading');\n  transition.next();\n}).afterEach(function(transition) {\n  // console.info('hide loading');\n});\n\n// 启动\nrouter.start(Vue.extend({}), '#app');\n```\n使用路由\n---\n```html\n<a v-link.literal=\"/a/b/c\"></a>\n<a v-link=\"{ path: Foo }\">Go to Foo</a>\nnew Vue({\n  ready: function(){\n    this.$route.path;\n    this.$route.params;\n    this.$route.query;\n  },\n  methods: {\n    jumpUrl: function () {\n      // 代码跳转\n      this.$route.router.go('/a');\n      this.$route.router.go({\n        path: '/a',\n        replace: true // 是否产生新的历史记录\n      });\n      this.$route.router.go({\n        name: 'a', // 具名路径\n        params: {},\n        query: {}\n      });\n    }\n  }\n});\n```\n异步请求: vue-resource\n--\n```html\nVue.http.get('/someUrl', [options]).then(successCallback, errorCallback);\nVue.http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);\n拦截\nVue.http.interceptors.push(function(request, next) {\n  var data = request.data;\n  // 添加 url 前缀\n  request.url = serverPrefix + request.url;\n  // 加请求参数\n  request.data.sessionid = localStorage.getItem('sessionid');\n\n  next(function (response) {\n    if(登陆超时){\n      setTimeout(function () {\n        router.go('/login');\n      });\n    } else {\n      // modify response\n      response.body = '...';\n    }\n  });\n});\n```\n支持 Promise\n例如\n```html\nVue.http.post('/someUrl', [optinos])\n  .then(function(res) {\n    var data = res.data;\n    return new Promise(function(resolve, reject) {\n      if (!data.error) {\n        reject()\n      } else {\n        resolve(data);\n      }\n    }.bind(this));\n  })\n  .then(function(res) {\n    var data = res.data;\n    return new Promise(function(resolve, reject) {\n      Vue.http.post('/someUrl', data).then(function (res) {\n        if(res.data){\n          resolve();\n        }\n      });\n    }.bind(this));\n  }, failFn)\n  .then(succFn, failFn);\n```\n其他\n--\nvm.$options.filters.filter名称 可以获取到具体的 filter",
				"html": "<p>Vue语法简单示例<br><a id=\"more\"></a></p>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"clickMe()\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"clickMe\"</span>&gt;</span>无参数的简写<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  el: '#app',</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    message: 'Hello Vue.js!'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    clickMe: function()&#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>循环<br>循环数组<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span> 第&#123;&#123; $index &#125;&#125;条:&#123;&#123; item.message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">track-by</span>=<span class=\"string\">\"id\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 2 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span> 第&#123;&#123; index &#125;&#125;条:&#123;&#123; item.message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>循环对象<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(key, value) in obj\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 2 这么写 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, key) in obj\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>循环数字<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 从0开始，Vue 2从1开始  --&gt;</span></div></pre></td></tr></table></figure></p>\n<p>条件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 如果ok为false, 不输出在 HTML 中 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 如果ok为false,只是 display:none 而已 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"say('hi')\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 简写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"say('hi')\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 传入 event 对象 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"say('hi', $event)\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doSth\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 阻止默认行为 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">submit.prevent</span>=<span class=\"string\">\"doSth\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 按键修饰符：回车时才会执行 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span><span class=\"comment\">&lt;!-- 13 为 keycode --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 支持的全部按钮为 enter, tab, delete, space, up, down, left, right 字母 --&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"表单的双向绑定\"><a href=\"#表单的双向绑定\" class=\"headerlink\" title=\"表单的双向绑定\"></a>表单的双向绑定</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 自定义选中值。否则 选中为value值，不选为空 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></div><div class=\"line\">  <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></div><div class=\"line\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">\"a\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">\"b\"</span>&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"绑定属性\"><a href=\"#绑定属性\" class=\"headerlink\" title=\"绑定属性\"></a>绑定属性</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; 'class-a': isA, 'class-b': isB &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classArr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!-- classArr 是一个数组 --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 简写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; 'class-a': isA, 'class-b': isB &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imgSrc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"baseURL + '/path'\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在 Vue 2 中，如果属性值是变量，必须用绑定属性的写法。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// wrong</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;imgSrc&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">// right</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imgSrc\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"避免闪烁：-v-cloak\"><a href=\"#避免闪烁：-v-cloak\" class=\"headerlink\" title=\"避免闪烁： v-cloak\"></a>避免闪烁： v-cloak</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[v-cloak] &#123;</div><div class=\"line\">  display: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>不会显示 <div> 的内容，直到编译结束。</div></p>\n<h2 id=\"单向绑定\"><a href=\"#单向绑定\" class=\"headerlink\" title=\"单向绑定\"></a>单向绑定</h2><p>单向绑定的意思是，即使绑定变量的值发生变化，显示的内容仍旧就是最初绑定时候的值。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>This will never change: &#123;&#123;* msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 2 不支持 --&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"输出-HTML\"><a href=\"#输出-HTML\" class=\"headerlink\" title=\"输出 HTML\"></a>输出 HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;&#123; raw_html &#125;&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"comment\">&lt;!-- &#123;&#123;&#125;&#125; 中的 HTML 内容的会转为纯文本 --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 2 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"raw_html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    firstName: 'Foo',</div><div class=\"line\">    lastName: 'Bar'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  computed: &#123;</div><div class=\"line\">    fullName: function () &#123;</div><div class=\"line\">      return this.firstName + ' ' + this.lastName</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.directive('my-directive', &#123;</div><div class=\"line\">  bind: function () &#123;</div><div class=\"line\">    // 准备工作</div><div class=\"line\">    // 例如，添加事件处理器或只需要运行一次的高耗任务</div><div class=\"line\">    this.el;// 添加指令的元素</div><div class=\"line\">    this.vm.$get(name)// 获得该指令的上下文 ViewModel</div><div class=\"line\">    this.expression;// 指令的表达式的值</div><div class=\"line\">  &#125;,</div><div class=\"line\">  update: function (newValue, oldValue) &#123;</div><div class=\"line\">    // 值更新时的工作</div><div class=\"line\">    // 也会以初始值为参数调用一次</div><div class=\"line\">  &#125;,</div><div class=\"line\">  unbind: function () &#123;</div><div class=\"line\">    // 清理工作</div><div class=\"line\">    // 例如，删除 bind() 添加的事件监听器</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-my-directive</span>=<span class=\"string\">\"someValue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"监听数据变化\"><a href=\"#监听数据变化\" class=\"headerlink\" title=\"监听数据变化\"></a>监听数据变化</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    firstName: 'Foo'</div><div class=\"line\">  &#125;,</div><div class=\"line\">  watch: &#123;</div><div class=\"line\">    firstName: function (val, oldVal) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; msg | capitalize &#125;&#125;// 'abc' =&gt; 'Abc'</div></pre></td></tr></table></figure>\n<p>常见内置过滤器<br>capitalize, uppercase, lowercase, json, limitBy, filterBy。所有见这里。</p>\n<p>Vue 2 中把这些内置的过滤器都删除了。</p>\n<h2 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.filter('wrap', function (value, begin, end) &#123;</div><div class=\"line\">  return begin + value + end;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">&lt;!-- 'hello' =&gt; 'before hello after' --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"message | wrap 'before' 'after'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 2 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"message | wrap('before', 'after')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"生命周期相关的钩子函数\"><a href=\"#生命周期相关的钩子函数\" class=\"headerlink\" title=\"生命周期相关的钩子函数\"></a>生命周期相关的钩子函数</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Vue 1</div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  created: function()&#123;&#125;,</div><div class=\"line\">  beforeCompile: function()&#123;&#125;,</div><div class=\"line\">  compiled: function()&#123;&#125;,</div><div class=\"line\">  ready: function()&#123;&#125;,// DOM 元素已经加入到HTML中</div><div class=\"line\">  beforeDestroy: function()&#123;&#125;,</div><div class=\"line\">  destroyed: function()&#123;&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Vue 2</div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  created: function()&#123;&#125;,</div><div class=\"line\">  mounted : function()&#123;&#125;,// 相对与 1 中的 ready</div><div class=\"line\">  beforeDestroy: function()&#123;&#125;,</div><div class=\"line\">  destroyed: function()&#123;&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 1 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"show\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"my-transition\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- Vue 2 这么写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">v-bind:name</span>=<span class=\"string\">\"my-transition\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">/* 必需 */</div><div class=\"line\">.my-transition-transition &#123;</div><div class=\"line\">  transition: all .3s ease;</div><div class=\"line\">&#125;</div><div class=\"line\">/* .my-transition-enter 定义进入的开始状态 */</div><div class=\"line\">.my-transition-enter&#123;&#125;</div><div class=\"line\">/* .my-transition-leave 定义离开的结束状态 */</div><div class=\"line\">.my-transition-leave &#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>Vue 2 和 Vue 1 的组件的区别有些大。</p>\n<p>Vue 1<br>定义和调用组件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span></span></div><div class=\"line\">  <span class=\"attr\">prop</span>=<span class=\"string\">\"literal string\"</span></div><div class=\"line\">  <span class=\"attr\">:prop1</span>=<span class=\"string\">\"defaultOneWay\"</span></div><div class=\"line\">  <span class=\"attr\">:prop2.sync</span>=<span class=\"string\">\"twoWay\"</span></div><div class=\"line\">  <span class=\"attr\">:prop3.once</span>=<span class=\"string\">\"oneTime\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></div><div class=\"line\">Vue.component('my-comp', &#123;</div><div class=\"line\">  template: 'html strings',</div><div class=\"line\">  props: &#123;</div><div class=\"line\">    prop: String,</div><div class=\"line\">    prop1: &#123;</div><div class=\"line\">      type: Number,</div><div class=\"line\">      required: true</div><div class=\"line\">    &#125;,</div><div class=\"line\">    prop2: &#123;</div><div class=\"line\">      type: Number,</div><div class=\"line\">      default: 88</div><div class=\"line\">    &#125;,</div><div class=\"line\">     // 对象/数组的默认值应当由一个函数返回</div><div class=\"line\">    prop3: &#123;</div><div class=\"line\">      type: Object,</div><div class=\"line\">      default: function () &#123;</div><div class=\"line\">        return &#123; msg: 'hello' &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    // 自定义验证函数</div><div class=\"line\">    prop4: &#123;</div><div class=\"line\">       validator: function (value) &#123;</div><div class=\"line\">        return value &gt; 10</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  data: functin()&#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 子组件</div><div class=\"line\">var child = new Vue.component('child', &#123;</div><div class=\"line\">  events: &#123;</div><div class=\"line\">    'parent-msg': function (msg) &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">// 子组件向父组件传消息</div><div class=\"line\">child.$dispatch('child-msg', child.msg);</div><div class=\"line\"></div><div class=\"line\">// 父组件</div><div class=\"line\">var parent = new Vue(&#123;</div><div class=\"line\">  events: &#123;</div><div class=\"line\">    'child-msg': function (msg) &#123;</div><div class=\"line\">      // 父组件向所有子组件传消息</div><div class=\"line\">      this.$broadcast('parent-msg', 'received it');</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.<span class=\"variable\">$parent</span>   <span class=\"comment\">#访问它的父组件。</span></div><div class=\"line\">this.<span class=\"variable\">$root</span>     <span class=\"comment\">#访问它的根组件。</span></div><div class=\"line\">this.<span class=\"variable\">$children</span> <span class=\"comment\">#访问它的子组件。</span></div></pre></td></tr></table></figure>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p>渲染一个包含多个元素的块<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"user\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"user.avatarUrl\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"name\"</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>template 用于包含多个元素的块,最终的渲染结果不会包含 template 元素。</p>\n<h2 id=\"Vue-set-和-Vue-delete\"><a href=\"#Vue-set-和-Vue-delete\" class=\"headerlink\" title=\"Vue.set 和 Vue.delete\"></a>Vue.set 和 Vue.delete</h2><p>用于解决 不能检测到属性添加，属性删除的限制。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.nextTick</div><div class=\"line\">// 修改数据</div><div class=\"line\">vm.msg = 'Hello'</div><div class=\"line\">// DOM 没有更新</div><div class=\"line\">Vue.nextTick(function () &#123;</div><div class=\"line\">  // DOM 更新了</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Vue 在检测到数据变化时是异步更新 DOM 的。具体见 异步更新队列。vm 上也有 this.$nextTick。</p>\n<h2 id=\"vue-插件\"><a href=\"#vue-插件\" class=\"headerlink\" title=\"vue 插件\"></a>vue 插件</h2><p>路由: vue-router<br>官方文档</p>\n<p>定义路由<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Vue = require('vue');</div><div class=\"line\">var VueRouter = require('vue-router');</div><div class=\"line\"></div><div class=\"line\">Vue.use(VueRouter);</div><div class=\"line\">router.map(&#123;</div><div class=\"line\">  '/login': &#123;component: require('login')&#125;,</div><div class=\"line\">  '/user/:': &#123;component: ...&#125;,</div><div class=\"line\">  // 异步加载组件。加载器用的 webpack</div><div class=\"line\">  '/another': &#123;component: function(resolve) &#123;</div><div class=\"line\">      require.ensure([], function(require) &#123;</div><div class=\"line\">        resolve(require('...'));</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;&#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.redirect(&#123; '*': '/login' &#125;); // 默认路由</div><div class=\"line\"></div><div class=\"line\">router.beforeEach(function(transition) &#123;</div><div class=\"line\">  // console.info('show loading');</div><div class=\"line\">  transition.next();</div><div class=\"line\">&#125;).afterEach(function(transition) &#123;</div><div class=\"line\">  // console.info('hide loading');</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 启动</div><div class=\"line\">router.start(Vue.extend(&#123;&#125;), '#app');</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用路由\"><a href=\"#使用路由\" class=\"headerlink\" title=\"使用路由\"></a>使用路由</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link.literal</span>=<span class=\"string\">\"/a/b/c\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: Foo &#125;\"</span>&gt;</span>Go to Foo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">new Vue(&#123;</div><div class=\"line\">  ready: function()&#123;</div><div class=\"line\">    this.$route.path;</div><div class=\"line\">    this.$route.params;</div><div class=\"line\">    this.$route.query;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    jumpUrl: function () &#123;</div><div class=\"line\">      // 代码跳转</div><div class=\"line\">      this.$route.router.go('/a');</div><div class=\"line\">      this.$route.router.go(&#123;</div><div class=\"line\">        path: '/a',</div><div class=\"line\">        replace: true // 是否产生新的历史记录</div><div class=\"line\">      &#125;);</div><div class=\"line\">      this.$route.router.go(&#123;</div><div class=\"line\">        name: 'a', // 具名路径</div><div class=\"line\">        params: &#123;&#125;,</div><div class=\"line\">        query: &#123;&#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"异步请求-vue-resource\"><a href=\"#异步请求-vue-resource\" class=\"headerlink\" title=\"异步请求: vue-resource\"></a>异步请求: vue-resource</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.http.get('/someUrl', [options]).then(successCallback, errorCallback);</div><div class=\"line\">Vue.http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);</div><div class=\"line\">拦截</div><div class=\"line\">Vue.http.interceptors.push(function(request, next) &#123;</div><div class=\"line\">  var data = request.data;</div><div class=\"line\">  // 添加 url 前缀</div><div class=\"line\">  request.url = serverPrefix + request.url;</div><div class=\"line\">  // 加请求参数</div><div class=\"line\">  request.data.sessionid = localStorage.getItem('sessionid');</div><div class=\"line\"></div><div class=\"line\">  next(function (response) &#123;</div><div class=\"line\">    if(登陆超时)&#123;</div><div class=\"line\">      setTimeout(function () &#123;</div><div class=\"line\">        router.go('/login');</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      // modify response</div><div class=\"line\">      response.body = '...';</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>支持 Promise<br>例如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.http.post('/someUrl', [optinos])</div><div class=\"line\">  .then(function(res) &#123;</div><div class=\"line\">    var data = res.data;</div><div class=\"line\">    return new Promise(function(resolve, reject) &#123;</div><div class=\"line\">      if (!data.error) &#123;</div><div class=\"line\">        reject()</div><div class=\"line\">      &#125; else &#123;</div><div class=\"line\">        resolve(data);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;.bind(this));</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(function(res) &#123;</div><div class=\"line\">    var data = res.data;</div><div class=\"line\">    return new Promise(function(resolve, reject) &#123;</div><div class=\"line\">      Vue.http.post('/someUrl', data).then(function (res) &#123;</div><div class=\"line\">        if(res.data)&#123;</div><div class=\"line\">          resolve();</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;.bind(this));</div><div class=\"line\">  &#125;, failFn)</div><div class=\"line\">  .then(succFn, failFn);</div></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>vm.$options.filters.filter名称 可以获取到具体的 filter</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481635313481,
				"created_by": 2,
				"updated_at": 1481635744925,
				"updated_by": 2,
				"published_at": 1481635313481,
				"published_by": 2
			},
			{
				"id": "ciwn1301q0000h4fc3l689ecy",
				"title": "Angular.element和$document的使用方法分析，代替jquery",
				"slug": "angular-jqlite",
				"markdown": "厉害了我的哥\nAngularJs是不直接操作DOM的，但是在平时的开发当中，我们有的时候还是需要操作一些DOM的，如果使用原生的JS的话操作过于麻烦，所以大家一般都是使用jQuery，jQuery虽然好用，但是AngularJs是不建议和JQuery同时使用的，所以AngularJs给我们也提供了一些操作DOM的方法———Jqlite\n<!--more-->\n下面以addClass（）方法为例给大家讲解一下Jqlite的使用：\n\n查阅官方提供的api，可以看到使用方法是angular.element(ele)，其中，允许传入的参数ele的类型是“HTML string or DOMElement to be wrapped into jQuery.”一般传入参数DOMElement\n\n方法一：\n--\n```js\nvar test = angular.element(document.querySelector(‘#testId’));\ntest.addClass(‘testClass’);\n```\n以原生js的document对象的querySelector方法获取元素的id，括号内的使用方法同jquery一致，#代表id，该方法返回的是当前div的DOMElement对象，通过angular.element方法即可将即转化为一个jQuery对象，从而对其操作。\n\n方法二：\n```js\nvar test = angular.element(document.getElementById(‘test’);\ntest.addClass(‘testClass’);\n```\ngetElementById的方法相信大家用到的比较多，其返回的也是一个DOMElement对象\n\n方法三：\n--\n```js\nangular.forEach(angular.element(document).find('div'),function(node){\n            if(node.id == 'testId'){\n                     node.addClass('testClass');\n            }\nif(node.className == ‘testClass’){\nnode.removeClass(‘testClass’)\n}\n           })\n```\nfind搜索的是tagName，这里使用的是div，当然也可以是p标签等等。\n\n方法四：使用$documen\n--\n注：不要忘记注入\n\n$document就和angular.element(document)是一样的，是一个整体的dom结构树，包含jqlite的所有方法，所以方法三也可以改为：\n```js\nangular.forEach($document.find('div'),function(node){\n            if(node.id == 'testId'){\n                     node.addClass('testClass');\n            }\n            if(node.className == ‘testClass’){\n                    node.removeClass(‘testClass’)\n            }\n         })\n```\n另外$document[0]和原生JS的document等效\n\n所以，方法一和方法二可以改为\n```js\nvar test = angular.element($document[0].getElementById(‘test’);\ntest.addClass(‘testClass’);\n```\n以及\n```js\nvar test = angular.element($document[0].getElementById(‘test’);\ntest.addClass(‘testClass’);\n```",
				"html": "<p>厉害了我的哥<br>AngularJs是不直接操作DOM的，但是在平时的开发当中，我们有的时候还是需要操作一些DOM的，如果使用原生的JS的话操作过于麻烦，所以大家一般都是使用jQuery，jQuery虽然好用，但是AngularJs是不建议和JQuery同时使用的，所以AngularJs给我们也提供了一些操作DOM的方法———Jqlite<br><a id=\"more\"></a><br>下面以addClass（）方法为例给大家讲解一下Jqlite的使用：</p>\n<p>查阅官方提供的api，可以看到使用方法是angular.element(ele)，其中，允许传入的参数ele的类型是“HTML string or DOMElement to be wrapped into jQuery.”一般传入参数DOMElement</p>\n<h2 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var test = angular.element(document.querySelector(‘#testId’));</div><div class=\"line\">test.addClass(‘testClass’);</div></pre></td></tr></table></figure>\n<p>以原生js的document对象的querySelector方法获取元素的id，括号内的使用方法同jquery一致，#代表id，该方法返回的是当前div的DOMElement对象，通过angular.element方法即可将即转化为一个jQuery对象，从而对其操作。</p>\n<p>方法二：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = angular.element(<span class=\"built_in\">document</span>.getElementById(‘test’);</div><div class=\"line\">test.addClass(‘testClass’);</div></pre></td></tr></table></figure></p>\n<p>getElementById的方法相信大家用到的比较多，其返回的也是一个DOMElement对象</p>\n<h2 id=\"方法三：\"><a href=\"#方法三：\" class=\"headerlink\" title=\"方法三：\"></a>方法三：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.forEach(angular.element(<span class=\"built_in\">document</span>).find(<span class=\"string\">'div'</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(node.id == <span class=\"string\">'testId'</span>)&#123;</div><div class=\"line\">                     node.addClass(<span class=\"string\">'testClass'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"><span class=\"keyword\">if</span>(node.className == ‘testClass’)&#123;</div><div class=\"line\">node.removeClass(‘testClass’)</div><div class=\"line\">&#125;</div><div class=\"line\">           &#125;)</div></pre></td></tr></table></figure>\n<p>find搜索的是tagName，这里使用的是div，当然也可以是p标签等等。</p>\n<h2 id=\"方法四：使用-documen\"><a href=\"#方法四：使用-documen\" class=\"headerlink\" title=\"方法四：使用$documen\"></a>方法四：使用$documen</h2><p>注：不要忘记注入</p>\n<p>$document就和angular.element(document)是一样的，是一个整体的dom结构树，包含jqlite的所有方法，所以方法三也可以改为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.forEach($<span class=\"built_in\">document</span>.find(<span class=\"string\">'div'</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(node.id == <span class=\"string\">'testId'</span>)&#123;</div><div class=\"line\">                     node.addClass(<span class=\"string\">'testClass'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(node.className == ‘testClass’)&#123;</div><div class=\"line\">                    node.removeClass(‘testClass’)</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;)</div></pre></td></tr></table></figure></p>\n<p>另外$document[0]和原生JS的document等效</p>\n<p>所以，方法一和方法二可以改为<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = angular.element($<span class=\"built_in\">document</span>[<span class=\"number\">0</span>].getElementById(‘test’);</div><div class=\"line\">test.addClass(‘testClass’);</div></pre></td></tr></table></figure></p>\n<p>以及<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = angular.element($<span class=\"built_in\">document</span>[<span class=\"number\">0</span>].getElementById(‘test’);</div><div class=\"line\">test.addClass(‘testClass’);</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481604510729,
				"created_by": 2,
				"updated_at": 1484054973751,
				"updated_by": 2,
				"published_at": 1481604510729,
				"published_by": 2
			},
			{
				"id": "ciwg4deqi0000hofcg5csuwwe",
				"title": "koa-响应(Response)",
				"slug": "nodejs-koa-response",
				"markdown": "\nKoa Response 对象是对 node 的 response 进一步抽象和封装，提供了日常 HTTP 服务器开发中一些有用的功能。\n<!--more-->\n# API\n\n## res.header\n\nResponse header 对象。\n\n## res.socket\n\nRequest socket。\n\n## res.status\n\n获取 response status。不同于 node 在默认情况下 res.statusCode 为200，res.status 并没有赋值。\n\n## res.statusString\n\nResponse status 字符串。\n\n## res.status=\n\n通过 数字状态码或者不区分大小写的字符串来设置response status：\n```bash\n100 \"continue\"\n101 \"switching protocols\"\n102 \"processing\"\n200 \"ok\"\n201 \"created\"\n202 \"accepted\"\n203 \"non-authoritative information\"\n204 \"no content\"\n205 \"reset content\"\n206 \"partial content\"\n207 \"multi-status\"\n300 \"multiple choices\"\n301 \"moved permanently\"\n302 \"moved temporarily\"\n303 \"see other\"\n304 \"not modified\"\n305 \"use proxy\"\n307 \"temporary redirect\"\n400 \"bad request\"\n401 \"unauthorized\"\n402 \"payment required\"\n403 \"forbidden\"\n404 \"not found\"\n405 \"method not allowed\"\n406 \"not acceptable\"\n407 \"proxy authentication required\"\n408 \"request time-out\"\n409 \"conflict\"\n410 \"gone\"\n411 \"length required\"\n412 \"precondition failed\"\n413 \"request entity too large\"\n414 \"request-uri too large\"\n415 \"unsupported media type\"\n416 \"requested range not satisfiable\"\n417 \"expectation failed\"\n418 \"i'm a teapot\"\n422 \"unprocessable entity\"\n423 \"locked\"\n424 \"failed dependency\"\n425 \"unordered collection\"\n426 \"upgrade required\"\n428 \"precondition required\"\n429 \"too many requests\"\n431 \"request header fields too large\"\n500 \"internal server error\"\n501 \"not implemented\"\n502 \"bad gateway\"\n503 \"service unavailable\"\n504 \"gateway time-out\"\n505 \"http version not supported\"\n506 \"variant also negotiates\"\n507 \"insufficient storage\"\n509 \"bandwidth limit exceeded\"\n510 \"not extended\"\n511 \"network authentication required\"\n```\n注意：不用担心记不住这些字符串，如果您设置错误，会有异常抛出，并列出该状态码表来帮助您进行更正。\n\n## res.length=\n\n通过给定值设置 response Content-Length。\n\n## res.length\n\n如果 Content-Length 作为数值存在，或者可以通过 res.body 来进行计算，则返回相应数值，否则返回 undefined。\n\n## res.body\n\n获得 response body。\n\n## res.body=\n\n设置 response body 为如下值：\n```js\nstring written\nBuffer written\nStream piped\nObject json-stringified\nnull no content response\n```\n如果 res.status 没有赋值，Koa会自动设置为 200 或 204。\n\n - String\n\n\n\nContent-Type 默认为 text/html 或者 text/plain，两种默认 charset 均为 utf-8。 Content-Length 同时会被设置。\n\n- Buffer\n\nContent-Type 默认为 application/octet-stream，Content-Length同时被设置。\n\n- Stream\n\nContent-Type 默认为 application/octet-stream。\n\n- Object\n\nContent-Type 默认为 application/json。\n\n## res.get(field)\n\n获取 response header 中字段值，field 不区分大小写。\n```js\nvar etag = this.get('ETag');\nres.set(field, value)\n```\n设置 response header 字段 field 的值为 value。\n```js\nthis.set('Cache-Control', 'no-cache');\nres.set(fields)\n```\n使用对象同时设置 response header 中多个字段的值。\n```js\nthis.set({\n  'Etag': '1234',\n  'Last-Modified': date\n});\n```\n## res.remove(field)\n\n移除 response header 中字段 filed。\n\n## res.type\n\n获取 response Content-Type，不包含像 \"charset\" 这样的参数。\n```js\nvar ct = this.type;\n// => \"image/png\"\n```\n## res.type=\n\n通过 mime 类型的字符串或者文件扩展名设置 response Content-Type\n```js\nthis.type = 'text/plain; charset=utf-8';\nthis.type = 'image/png';\nthis.type = '.png';\nthis.type = 'png';\n```\n注意：当可以根据 res.type 确定一个合适的 charset 时，charset 会自动被赋值。 比如 res.type = 'html' 时，charset 将会默认设置为 \"utf-8\"。然而当完整定义为 res.type = 'text/html'时，charset 不会自动设置。\n\n## res.redirect(url, [alt])\n\n执行 [302] 重定向到对应 url。\n\n字符串 \"back\" 是一个特殊参数，其提供了 Referrer 支持。当没有Referrer时，使用 alt 或者 / 代替。\n```js\nthis.redirect('back');\nthis.redirect('back', '/index.html');\nthis.redirect('/login');\nthis.redirect('http://google.com');\n```\n如果想要修改默认的 [302] 状态，直接在重定向之前或者之后执行即可。如果要修改 body，需要在重定向之前执行。\n```js\nthis.status = 301;\nthis.redirect('/cart');\nthis.body = 'Redirecting to shopping cart';\nres.attachment([filename])\n```\n设置 \"attachment\" 的 Content-Disposition，用于给客户端发送信号来提示下载。filename 为可选参数，用于指定下载文件名。\n\n## res.headerSent\n\n检查 response header 是否已经发送，用于在发生错误时检查客户端是否被通知。\n\n## res.lastModified\n\n如果存在 Last-Modified，则以 Date 的形式返回。\n\n## res.lastModified=\n\n以 UTC 格式设置 Last-Modified。您可以使用 Date 或 date 字符串来进行设置。\n```js\nthis.response.lastModified = new Date();\n```\n## res.etag=\n\n设置 包含 \"s 的 ETag。注意没有对应的 res.etag 来获取其值。\n```js\nthis.response.etag = crypto.createHash('md5').update(this.body).digest('hex');\n```\n## res.append(field, val)\n\n在 header 的 field 后面 追加 val。\n\n## res.vary(field)\n\n相当于执行res.append('Vary', field)。",
				"html": "<p>Koa Response 对象是对 node 的 response 进一步抽象和封装，提供了日常 HTTP 服务器开发中一些有用的功能。<br><a id=\"more\"></a></p>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><h2 id=\"res-header\"><a href=\"#res-header\" class=\"headerlink\" title=\"res.header\"></a>res.header</h2><p>Response header 对象。</p>\n<h2 id=\"res-socket\"><a href=\"#res-socket\" class=\"headerlink\" title=\"res.socket\"></a>res.socket</h2><p>Request socket。</p>\n<h2 id=\"res-status\"><a href=\"#res-status\" class=\"headerlink\" title=\"res.status\"></a>res.status</h2><p>获取 response status。不同于 node 在默认情况下 res.statusCode 为200，res.status 并没有赋值。</p>\n<h2 id=\"res-statusString\"><a href=\"#res-statusString\" class=\"headerlink\" title=\"res.statusString\"></a>res.statusString</h2><p>Response status 字符串。</p>\n<h2 id=\"res-status-1\"><a href=\"#res-status-1\" class=\"headerlink\" title=\"res.status=\"></a>res.status=</h2><p>通过 数字状态码或者不区分大小写的字符串来设置response status：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">100 <span class=\"string\">\"continue\"</span></div><div class=\"line\">101 <span class=\"string\">\"switching protocols\"</span></div><div class=\"line\">102 <span class=\"string\">\"processing\"</span></div><div class=\"line\">200 <span class=\"string\">\"ok\"</span></div><div class=\"line\">201 <span class=\"string\">\"created\"</span></div><div class=\"line\">202 <span class=\"string\">\"accepted\"</span></div><div class=\"line\">203 <span class=\"string\">\"non-authoritative information\"</span></div><div class=\"line\">204 <span class=\"string\">\"no content\"</span></div><div class=\"line\">205 <span class=\"string\">\"reset content\"</span></div><div class=\"line\">206 <span class=\"string\">\"partial content\"</span></div><div class=\"line\">207 <span class=\"string\">\"multi-status\"</span></div><div class=\"line\">300 <span class=\"string\">\"multiple choices\"</span></div><div class=\"line\">301 <span class=\"string\">\"moved permanently\"</span></div><div class=\"line\">302 <span class=\"string\">\"moved temporarily\"</span></div><div class=\"line\">303 <span class=\"string\">\"see other\"</span></div><div class=\"line\">304 <span class=\"string\">\"not modified\"</span></div><div class=\"line\">305 <span class=\"string\">\"use proxy\"</span></div><div class=\"line\">307 <span class=\"string\">\"temporary redirect\"</span></div><div class=\"line\">400 <span class=\"string\">\"bad request\"</span></div><div class=\"line\">401 <span class=\"string\">\"unauthorized\"</span></div><div class=\"line\">402 <span class=\"string\">\"payment required\"</span></div><div class=\"line\">403 <span class=\"string\">\"forbidden\"</span></div><div class=\"line\">404 <span class=\"string\">\"not found\"</span></div><div class=\"line\">405 <span class=\"string\">\"method not allowed\"</span></div><div class=\"line\">406 <span class=\"string\">\"not acceptable\"</span></div><div class=\"line\">407 <span class=\"string\">\"proxy authentication required\"</span></div><div class=\"line\">408 <span class=\"string\">\"request time-out\"</span></div><div class=\"line\">409 <span class=\"string\">\"conflict\"</span></div><div class=\"line\">410 <span class=\"string\">\"gone\"</span></div><div class=\"line\">411 <span class=\"string\">\"length required\"</span></div><div class=\"line\">412 <span class=\"string\">\"precondition failed\"</span></div><div class=\"line\">413 <span class=\"string\">\"request entity too large\"</span></div><div class=\"line\">414 <span class=\"string\">\"request-uri too large\"</span></div><div class=\"line\">415 <span class=\"string\">\"unsupported media type\"</span></div><div class=\"line\">416 <span class=\"string\">\"requested range not satisfiable\"</span></div><div class=\"line\">417 <span class=\"string\">\"expectation failed\"</span></div><div class=\"line\">418 <span class=\"string\">\"i'm a teapot\"</span></div><div class=\"line\">422 <span class=\"string\">\"unprocessable entity\"</span></div><div class=\"line\">423 <span class=\"string\">\"locked\"</span></div><div class=\"line\">424 <span class=\"string\">\"failed dependency\"</span></div><div class=\"line\">425 <span class=\"string\">\"unordered collection\"</span></div><div class=\"line\">426 <span class=\"string\">\"upgrade required\"</span></div><div class=\"line\">428 <span class=\"string\">\"precondition required\"</span></div><div class=\"line\">429 <span class=\"string\">\"too many requests\"</span></div><div class=\"line\">431 <span class=\"string\">\"request header fields too large\"</span></div><div class=\"line\">500 <span class=\"string\">\"internal server error\"</span></div><div class=\"line\">501 <span class=\"string\">\"not implemented\"</span></div><div class=\"line\">502 <span class=\"string\">\"bad gateway\"</span></div><div class=\"line\">503 <span class=\"string\">\"service unavailable\"</span></div><div class=\"line\">504 <span class=\"string\">\"gateway time-out\"</span></div><div class=\"line\">505 <span class=\"string\">\"http version not supported\"</span></div><div class=\"line\">506 <span class=\"string\">\"variant also negotiates\"</span></div><div class=\"line\">507 <span class=\"string\">\"insufficient storage\"</span></div><div class=\"line\">509 <span class=\"string\">\"bandwidth limit exceeded\"</span></div><div class=\"line\">510 <span class=\"string\">\"not extended\"</span></div><div class=\"line\">511 <span class=\"string\">\"network authentication required\"</span></div></pre></td></tr></table></figure></p>\n<p>注意：不用担心记不住这些字符串，如果您设置错误，会有异常抛出，并列出该状态码表来帮助您进行更正。</p>\n<h2 id=\"res-length\"><a href=\"#res-length\" class=\"headerlink\" title=\"res.length=\"></a>res.length=</h2><p>通过给定值设置 response Content-Length。</p>\n<h2 id=\"res-length-1\"><a href=\"#res-length-1\" class=\"headerlink\" title=\"res.length\"></a>res.length</h2><p>如果 Content-Length 作为数值存在，或者可以通过 res.body 来进行计算，则返回相应数值，否则返回 undefined。</p>\n<h2 id=\"res-body\"><a href=\"#res-body\" class=\"headerlink\" title=\"res.body\"></a>res.body</h2><p>获得 response body。</p>\n<h2 id=\"res-body-1\"><a href=\"#res-body-1\" class=\"headerlink\" title=\"res.body=\"></a>res.body=</h2><p>设置 response body 为如下值：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">string written</div><div class=\"line\">Buffer written</div><div class=\"line\">Stream piped</div><div class=\"line\"><span class=\"built_in\">Object</span> json-stringified</div><div class=\"line\"><span class=\"literal\">null</span> no content response</div></pre></td></tr></table></figure></p>\n<p>如果 res.status 没有赋值，Koa会自动设置为 200 或 204。</p>\n<ul>\n<li>String</li>\n</ul>\n<p>Content-Type 默认为 text/html 或者 text/plain，两种默认 charset 均为 utf-8。 Content-Length 同时会被设置。</p>\n<ul>\n<li>Buffer</li>\n</ul>\n<p>Content-Type 默认为 application/octet-stream，Content-Length同时被设置。</p>\n<ul>\n<li>Stream</li>\n</ul>\n<p>Content-Type 默认为 application/octet-stream。</p>\n<ul>\n<li>Object</li>\n</ul>\n<p>Content-Type 默认为 application/json。</p>\n<h2 id=\"res-get-field\"><a href=\"#res-get-field\" class=\"headerlink\" title=\"res.get(field)\"></a>res.get(field)</h2><p>获取 response header 中字段值，field 不区分大小写。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> etag = <span class=\"keyword\">this</span>.get(<span class=\"string\">'ETag'</span>);</div><div class=\"line\">res.set(field, value)</div></pre></td></tr></table></figure></p>\n<p>设置 response header 字段 field 的值为 value。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.set(<span class=\"string\">'Cache-Control'</span>, <span class=\"string\">'no-cache'</span>);</div><div class=\"line\">res.set(fields)</div></pre></td></tr></table></figure></p>\n<p>使用对象同时设置 response header 中多个字段的值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.set(&#123;</div><div class=\"line\">  <span class=\"string\">'Etag'</span>: <span class=\"string\">'1234'</span>,</div><div class=\"line\">  <span class=\"string\">'Last-Modified'</span>: date</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"res-remove-field\"><a href=\"#res-remove-field\" class=\"headerlink\" title=\"res.remove(field)\"></a>res.remove(field)</h2><p>移除 response header 中字段 filed。</p>\n<h2 id=\"res-type\"><a href=\"#res-type\" class=\"headerlink\" title=\"res.type\"></a>res.type</h2><p>获取 response Content-Type，不包含像 “charset” 这样的参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ct = <span class=\"keyword\">this</span>.type;</div><div class=\"line\"><span class=\"comment\">// =&gt; \"image/png\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"res-type-1\"><a href=\"#res-type-1\" class=\"headerlink\" title=\"res.type=\"></a>res.type=</h2><p>通过 mime 类型的字符串或者文件扩展名设置 response Content-Type<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.type = <span class=\"string\">'text/plain; charset=utf-8'</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.type = <span class=\"string\">'image/png'</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.type = <span class=\"string\">'.png'</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.type = <span class=\"string\">'png'</span>;</div></pre></td></tr></table></figure></p>\n<p>注意：当可以根据 res.type 确定一个合适的 charset 时，charset 会自动被赋值。 比如 res.type = ‘html’ 时，charset 将会默认设置为 “utf-8”。然而当完整定义为 res.type = ‘text/html’时，charset 不会自动设置。</p>\n<h2 id=\"res-redirect-url-alt\"><a href=\"#res-redirect-url-alt\" class=\"headerlink\" title=\"res.redirect(url, [alt])\"></a>res.redirect(url, [alt])</h2><p>执行 [302] 重定向到对应 url。</p>\n<p>字符串 “back” 是一个特殊参数，其提供了 Referrer 支持。当没有Referrer时，使用 alt 或者 / 代替。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.redirect(<span class=\"string\">'back'</span>);</div><div class=\"line\"><span class=\"keyword\">this</span>.redirect(<span class=\"string\">'back'</span>, <span class=\"string\">'/index.html'</span>);</div><div class=\"line\"><span class=\"keyword\">this</span>.redirect(<span class=\"string\">'/login'</span>);</div><div class=\"line\"><span class=\"keyword\">this</span>.redirect(<span class=\"string\">'http://google.com'</span>);</div></pre></td></tr></table></figure></p>\n<p>如果想要修改默认的 [302] 状态，直接在重定向之前或者之后执行即可。如果要修改 body，需要在重定向之前执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.status = <span class=\"number\">301</span>;</div><div class=\"line\"><span class=\"keyword\">this</span>.redirect(<span class=\"string\">'/cart'</span>);</div><div class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'Redirecting to shopping cart'</span>;</div><div class=\"line\">res.attachment([filename])</div></pre></td></tr></table></figure></p>\n<p>设置 “attachment” 的 Content-Disposition，用于给客户端发送信号来提示下载。filename 为可选参数，用于指定下载文件名。</p>\n<h2 id=\"res-headerSent\"><a href=\"#res-headerSent\" class=\"headerlink\" title=\"res.headerSent\"></a>res.headerSent</h2><p>检查 response header 是否已经发送，用于在发生错误时检查客户端是否被通知。</p>\n<h2 id=\"res-lastModified\"><a href=\"#res-lastModified\" class=\"headerlink\" title=\"res.lastModified\"></a>res.lastModified</h2><p>如果存在 Last-Modified，则以 Date 的形式返回。</p>\n<h2 id=\"res-lastModified-1\"><a href=\"#res-lastModified-1\" class=\"headerlink\" title=\"res.lastModified=\"></a>res.lastModified=</h2><p>以 UTC 格式设置 Last-Modified。您可以使用 Date 或 date 字符串来进行设置。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.response.lastModified = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div></pre></td></tr></table></figure></p>\n<h2 id=\"res-etag\"><a href=\"#res-etag\" class=\"headerlink\" title=\"res.etag=\"></a>res.etag=</h2><p>设置 包含 “s 的 ETag。注意没有对应的 res.etag 来获取其值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.response.etag = crypto.createHash(<span class=\"string\">'md5'</span>).update(<span class=\"keyword\">this</span>.body).digest(<span class=\"string\">'hex'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"res-append-field-val\"><a href=\"#res-append-field-val\" class=\"headerlink\" title=\"res.append(field, val)\"></a>res.append(field, val)</h2><p>在 header 的 field 后面 追加 val。</p>\n<h2 id=\"res-vary-field\"><a href=\"#res-vary-field\" class=\"headerlink\" title=\"res.vary(field)\"></a>res.vary(field)</h2><p>相当于执行res.append(‘Vary’, field)。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481186769535,
				"created_by": 2,
				"updated_at": 1482218048290,
				"updated_by": 2,
				"published_at": 1481186769535,
				"published_by": 2
			},
			{
				"id": "ciwg499th0000f8fc9nue2imi",
				"title": "koa-请求(Request)",
				"slug": "nodejs-koa-request",
				"markdown": "\nKoa Request 对象是对 node 的 request 进一步抽象和封装，提供了日常 HTTP 服务器开发中一些有用的功能。\n<!--more-->\n# API\n\n## req.header\n\n请求头对象\n\n## req.method\n\n请求方法\n\n## req.method=\n\n设置请求方法，在实现中间件时非常有用，比如 methodOverride()。\n\n## req.length\n\n以数字的形式返回 request 的内容长度(Content-Length)，或者返回 undefined。\n\n## req.url\n\n获得请求url地址。\n\n## req.url=\n\n设置请求地址，用于重写url地址时。\n\n## req.originalUrl\n\n获取请求原始地址。\n\n## req.path\n\n获取请求路径名。\n\n## req.path=\n\n设置请求路径名，并保留请求参数(就是url中?后面的部分)。\n\n## req.querystring\n\n获取查询参数字符串(url中?后面的部分)，不包含 ?。\n\n## req.querystring=\n\n设置查询参数。\n\n## req.search\n\n获取查询参数字符串，包含 ?。\n\n## req.search=\n\n设置查询参数字符串。\n\n## req.host\n\n获取 host (hostname:port)。 当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。\n\n## req.hostname\n\n获取 hostname。当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。\n\n## req.type\n\n获取请求 Content-Type，不包含像 \"charset\" 这样的参数。\n```js\nvar ct = this.request.type;\n// => \"image/png\"\n```\n## req.charset\n\n获取请求 charset，没有则返回 undefined:\n```js\nthis.request.charset\n// => \"utf-8\"\n```\n## req.query\n\n将查询参数字符串进行解析并以对象的形式返回，如果没有查询参数字字符串则返回一个空对象。\n\n注意：该方法不支持嵌套解析。\n\n比如 \"color=blue&size=small\":\n```js\n{\n  color: 'blue',\n  size: 'small'\n}\n```\n## req.query=\n\n根据给定的对象设置查询参数字符串。\n\n注意：该方法不支持嵌套对象。\n```js\nthis.query = { next: '/login' };\n```\n## req.fresh\n\n检查请求缓存是否 \"fresh\"(内容没有发生变化)。该方法用于在 If-None-Match / ETag, If-Modified-Since 和 Last-Modified 中进行缓存协调。当在 response headers 中设置一个或多个上述参数后，该方法应该被使用。\n```js\nthis.set('ETag', '123');\n\n// cache is ok\nif (this.fresh) {\n  this.status = 304;\n  return;\n}\n\n// cache is stale\n// fetch new data\nthis.body = yield db.find('something');\n```\n## req.stale\n\n与 req.fresh 相反。\n\n## req.protocol\n\n返回请求协议，\"https\" 或者 \"http\"。 当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。\n\n## req.secure\n\n简化版 this.protocol == \"https\"，用来检查请求是否通过 TLS 发送。\n\n## req.ip\n\n请求远程地址。 当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。\n\n## req.ips\n\n当 X-Forwarded-For 存在并且 app.proxy 有效，将会返回一个有序（从 upstream 到 downstream）ip 数组。 否则返回一个空数组。\n\n## req.subdomains\n\n以数组形式返回子域名。\n\n子域名是在host中逗号分隔的主域名前面的部分。默认情况下，应用的域名假设为host中最后两部分。其可通过设置 app.subdomainOffset 进行更改。\n\n举例来说，如果域名是 \"tobi.ferrets.example.com\":\n\n如果没有设置 app.subdomainOffset，其 subdomains 为 [\"ferrets\", \"tobi\"]。 如果设置 app.subdomainOffset 为3，其 subdomains 为 [\"tobi\"]。\n\n## req.is(type)\n\n检查请求所包含的 \"Content-Type\" 是否为给定的 type 值。 如果没有 request body，返回 undefined。 如果没有 content type，或者匹配失败，返回 false。 否则返回匹配的 content-type。\n```js\n// With Content-Type: text/html; charset=utf-8\nthis.is('html'); // => 'html'\nthis.is('text/html'); // => 'text/html'\nthis.is('text/*', 'text/html'); // => 'text/html'\n\n// When Content-Type is application/json\nthis.is('json', 'urlencoded'); // => 'json'\nthis.is('application/json'); // => 'application/json'\nthis.is('html', 'application/*'); // => 'application/json'\n\nthis.is('html'); // => false\n比如说您希望保证只有图片发送给指定路由：\n\nif (this.is('image/*')) {\n  // process\n} else {\n  this.throw(415, 'images only!');\n}\n```\n# Content Negotiation\n\nKoa request 对象包含 content negotiation 功能（由 accepts 和 negotiator 提供）：\n```js\nreq.accepts(types)\nreq.acceptsEncodings(types)\nreq.acceptsCharsets(charsets)\nreq.acceptsLanguages(langs)\n```\n如果没有提供 types，将会返回所有的可接受类型。\n\n如果提供多种 types，将会返回最佳匹配类型。如果没有匹配上，则返回 false，您应该给客户端返回 406 \"Not Acceptable\"。\n\n为了防止缺少 accept headers 而导致可以接受任意类型，将会返回第一种类型。因此，您提供的类型顺序非常重要。\n\n## req.accepts(types)\n\n检查给定的类型 types(s) 是否可被接受，当为 true 时返回最佳匹配，否则返回 false。type 的值可以是一个或者多个 mime 类型字符串。 比如 \"application/json\" 扩展名为 \"json\"，或者数组 [\"json\", \"html\", \"text/plain\"]。\n```js\n// Accept: text/html\nthis.accepts('html');\n// => \"html\"\n\n// Accept: text/*, application/json\nthis.accepts('html');\n// => \"html\"\nthis.accepts('text/html');\n// => \"text/html\"\nthis.accepts('json', 'text');\n// => \"json\"\nthis.accepts('application/json');\n// => \"application/json\"\n\n// Accept: text/*, application/json\nthis.accepts('image/png');\nthis.accepts('png');\n// => false\n\n// Accept: text/*;q=.5, application/json\nthis.accepts(['html', 'json']);\nthis.accepts('html', 'json');\n// => \"json\"\n\n// No Accept header\nthis.accepts('html', 'json');\n// => \"html\"\nthis.accepts('json', 'html');\n// => \"json\"\n```\nthis.accepts() 可以被调用多次，或者使用 switch:\n```js\nswitch (this.accepts('json', 'html', 'text')) {\n  case 'json': break;\n  case 'html': break;\n  case 'text': break;\n  default: this.throw(406, 'json, html, or text only');\n}\nreq.acceptsEncodings(encodings)\n```\n检查 encodings 是否可以被接受，当为 true 时返回最佳匹配，否则返回 false。 注意：您应该在 encodings 中包含 identity。\n```js\n// Accept-Encoding: gzip\nthis.acceptsEncodings('gzip', 'deflate', 'identity');\n// => \"gzip\"\n\nthis.acceptsEncodings(['gzip', 'deflate', 'identity']);\n// => \"gzip\"\n当没有传递参数时，返回包含所有可接受的 encodings 的数组：\n\n// Accept-Encoding: gzip, deflate\nthis.acceptsEncodings();\n// => [\"gzip\", \"deflate\", \"identity\"]\n```\n注意：如果客户端直接发送 identity;q=0 时，identity encoding（表示no encoding） 可以不被接受。虽然这是一个边界情况，您仍然应该处理这种情况。\n\n## req.acceptsCharsets(charsets)\n\n检查 charsets 是否可以被接受，如果为 true 则返回最佳匹配， 否则返回 false。\n```js\n// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nthis.acceptsCharsets('utf-8', 'utf-7');\n// => \"utf-8\"\n\nthis.acceptsCharsets(['utf-7', 'utf-8']);\n// => \"utf-8\"\n```\n当没有传递参数时， 返回包含所有可接受的 charsets 的数组：\n```js\n// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5\nthis.acceptsCharsets();\n// => [\"utf-8\", \"utf-7\", \"iso-8859-1\"]\nreq.acceptsLanguages(langs)\n```\n检查 langs 是否可以被接受，如果为 true 则返回最佳匹配，否则返回 false。\n```js\n// Accept-Language: en;q=0.8, es, pt\nthis.acceptsLanguages('es', 'en');\n// => \"es\"\n\nthis.acceptsLanguages(['en', 'es']);\n// => \"es\"\n```\n当没有传递参数时，返回包含所有可接受的 langs 的数组：\n```js\n// Accept-Language: en;q=0.8, es, pt\nthis.acceptsLanguages();\n// => [\"es\", \"pt\", \"en\"]\n```\n## req.idempotent\n\n检查请求是否为幂等(idempotent)。\n\n## req.socket\n\n返回请求的socket。\n\n## req.get(field)\n\n返回请求 header 中对应 field 的值。",
				"html": "<p>Koa Request 对象是对 node 的 request 进一步抽象和封装，提供了日常 HTTP 服务器开发中一些有用的功能。<br><a id=\"more\"></a></p>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><h2 id=\"req-header\"><a href=\"#req-header\" class=\"headerlink\" title=\"req.header\"></a>req.header</h2><p>请求头对象</p>\n<h2 id=\"req-method\"><a href=\"#req-method\" class=\"headerlink\" title=\"req.method\"></a>req.method</h2><p>请求方法</p>\n<h2 id=\"req-method-1\"><a href=\"#req-method-1\" class=\"headerlink\" title=\"req.method=\"></a>req.method=</h2><p>设置请求方法，在实现中间件时非常有用，比如 methodOverride()。</p>\n<h2 id=\"req-length\"><a href=\"#req-length\" class=\"headerlink\" title=\"req.length\"></a>req.length</h2><p>以数字的形式返回 request 的内容长度(Content-Length)，或者返回 undefined。</p>\n<h2 id=\"req-url\"><a href=\"#req-url\" class=\"headerlink\" title=\"req.url\"></a>req.url</h2><p>获得请求url地址。</p>\n<h2 id=\"req-url-1\"><a href=\"#req-url-1\" class=\"headerlink\" title=\"req.url=\"></a>req.url=</h2><p>设置请求地址，用于重写url地址时。</p>\n<h2 id=\"req-originalUrl\"><a href=\"#req-originalUrl\" class=\"headerlink\" title=\"req.originalUrl\"></a>req.originalUrl</h2><p>获取请求原始地址。</p>\n<h2 id=\"req-path\"><a href=\"#req-path\" class=\"headerlink\" title=\"req.path\"></a>req.path</h2><p>获取请求路径名。</p>\n<h2 id=\"req-path-1\"><a href=\"#req-path-1\" class=\"headerlink\" title=\"req.path=\"></a>req.path=</h2><p>设置请求路径名，并保留请求参数(就是url中?后面的部分)。</p>\n<h2 id=\"req-querystring\"><a href=\"#req-querystring\" class=\"headerlink\" title=\"req.querystring\"></a>req.querystring</h2><p>获取查询参数字符串(url中?后面的部分)，不包含 ?。</p>\n<h2 id=\"req-querystring-1\"><a href=\"#req-querystring-1\" class=\"headerlink\" title=\"req.querystring=\"></a>req.querystring=</h2><p>设置查询参数。</p>\n<h2 id=\"req-search\"><a href=\"#req-search\" class=\"headerlink\" title=\"req.search\"></a>req.search</h2><p>获取查询参数字符串，包含 ?。</p>\n<h2 id=\"req-search-1\"><a href=\"#req-search-1\" class=\"headerlink\" title=\"req.search=\"></a>req.search=</h2><p>设置查询参数字符串。</p>\n<h2 id=\"req-host\"><a href=\"#req-host\" class=\"headerlink\" title=\"req.host\"></a>req.host</h2><p>获取 host (hostname:port)。 当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。</p>\n<h2 id=\"req-hostname\"><a href=\"#req-hostname\" class=\"headerlink\" title=\"req.hostname\"></a>req.hostname</h2><p>获取 hostname。当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。</p>\n<h2 id=\"req-type\"><a href=\"#req-type\" class=\"headerlink\" title=\"req.type\"></a>req.type</h2><p>获取请求 Content-Type，不包含像 “charset” 这样的参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ct = <span class=\"keyword\">this</span>.request.type;</div><div class=\"line\"><span class=\"comment\">// =&gt; \"image/png\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"req-charset\"><a href=\"#req-charset\" class=\"headerlink\" title=\"req.charset\"></a>req.charset</h2><p>获取请求 charset，没有则返回 undefined:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.request.charset</div><div class=\"line\"><span class=\"comment\">// =&gt; \"utf-8\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"req-query\"><a href=\"#req-query\" class=\"headerlink\" title=\"req.query\"></a>req.query</h2><p>将查询参数字符串进行解析并以对象的形式返回，如果没有查询参数字字符串则返回一个空对象。</p>\n<p>注意：该方法不支持嵌套解析。</p>\n<p>比如 “color=blue&amp;size=small”:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span>,</div><div class=\"line\">  <span class=\"attr\">size</span>: <span class=\"string\">'small'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"req-query-1\"><a href=\"#req-query-1\" class=\"headerlink\" title=\"req.query=\"></a>req.query=</h2><p>根据给定的对象设置查询参数字符串。</p>\n<p>注意：该方法不支持嵌套对象。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.query = &#123; <span class=\"attr\">next</span>: <span class=\"string\">'/login'</span> &#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"req-fresh\"><a href=\"#req-fresh\" class=\"headerlink\" title=\"req.fresh\"></a>req.fresh</h2><p>检查请求缓存是否 “fresh”(内容没有发生变化)。该方法用于在 If-None-Match / ETag, If-Modified-Since 和 Last-Modified 中进行缓存协调。当在 response headers 中设置一个或多个上述参数后，该方法应该被使用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.set(<span class=\"string\">'ETag'</span>, <span class=\"string\">'123'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cache is ok</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fresh) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.status = <span class=\"number\">304</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cache is stale</span></div><div class=\"line\"><span class=\"comment\">// fetch new data</span></div><div class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> db.find(<span class=\"string\">'something'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"req-stale\"><a href=\"#req-stale\" class=\"headerlink\" title=\"req.stale\"></a>req.stale</h2><p>与 req.fresh 相反。</p>\n<h2 id=\"req-protocol\"><a href=\"#req-protocol\" class=\"headerlink\" title=\"req.protocol\"></a>req.protocol</h2><p>返回请求协议，”https” 或者 “http”。 当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。</p>\n<h2 id=\"req-secure\"><a href=\"#req-secure\" class=\"headerlink\" title=\"req.secure\"></a>req.secure</h2><p>简化版 this.protocol == “https”，用来检查请求是否通过 TLS 发送。</p>\n<h2 id=\"req-ip\"><a href=\"#req-ip\" class=\"headerlink\" title=\"req.ip\"></a>req.ip</h2><p>请求远程地址。 当 app.proxy 设置为 true 时，支持 X-Forwarded-Host。</p>\n<h2 id=\"req-ips\"><a href=\"#req-ips\" class=\"headerlink\" title=\"req.ips\"></a>req.ips</h2><p>当 X-Forwarded-For 存在并且 app.proxy 有效，将会返回一个有序（从 upstream 到 downstream）ip 数组。 否则返回一个空数组。</p>\n<h2 id=\"req-subdomains\"><a href=\"#req-subdomains\" class=\"headerlink\" title=\"req.subdomains\"></a>req.subdomains</h2><p>以数组形式返回子域名。</p>\n<p>子域名是在host中逗号分隔的主域名前面的部分。默认情况下，应用的域名假设为host中最后两部分。其可通过设置 app.subdomainOffset 进行更改。</p>\n<p>举例来说，如果域名是 “tobi.ferrets.example.com”:</p>\n<p>如果没有设置 app.subdomainOffset，其 subdomains 为 [“ferrets”, “tobi”]。 如果设置 app.subdomainOffset 为3，其 subdomains 为 [“tobi”]。</p>\n<h2 id=\"req-is-type\"><a href=\"#req-is-type\" class=\"headerlink\" title=\"req.is(type)\"></a>req.is(type)</h2><p>检查请求所包含的 “Content-Type” 是否为给定的 type 值。 如果没有 request body，返回 undefined。 如果没有 content type，或者匹配失败，返回 false。 否则返回匹配的 content-type。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// With Content-Type: text/html; charset=utf-8</span></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'html'</span>); <span class=\"comment\">// =&gt; 'html'</span></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'text/html'</span>); <span class=\"comment\">// =&gt; 'text/html'</span></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'text/*'</span>, <span class=\"string\">'text/html'</span>); <span class=\"comment\">// =&gt; 'text/html'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// When Content-Type is application/json</span></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'json'</span>, <span class=\"string\">'urlencoded'</span>); <span class=\"comment\">// =&gt; 'json'</span></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'application/json'</span>); <span class=\"comment\">// =&gt; 'application/json'</span></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'html'</span>, <span class=\"string\">'application/*'</span>); <span class=\"comment\">// =&gt; 'application/json'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.is(<span class=\"string\">'html'</span>); <span class=\"comment\">// =&gt; false</span></div><div class=\"line\">比如说您希望保证只有图片发送给指定路由：</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.is(<span class=\"string\">'image/*'</span>)) &#123;</div><div class=\"line\">  <span class=\"comment\">// process</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.throw(<span class=\"number\">415</span>, <span class=\"string\">'images only!'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Content-Negotiation\"><a href=\"#Content-Negotiation\" class=\"headerlink\" title=\"Content Negotiation\"></a>Content Negotiation</h1><p>Koa request 对象包含 content negotiation 功能（由 accepts 和 negotiator 提供）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">req.accepts(types)</div><div class=\"line\">req.acceptsEncodings(types)</div><div class=\"line\">req.acceptsCharsets(charsets)</div><div class=\"line\">req.acceptsLanguages(langs)</div></pre></td></tr></table></figure></p>\n<p>如果没有提供 types，将会返回所有的可接受类型。</p>\n<p>如果提供多种 types，将会返回最佳匹配类型。如果没有匹配上，则返回 false，您应该给客户端返回 406 “Not Acceptable”。</p>\n<p>为了防止缺少 accept headers 而导致可以接受任意类型，将会返回第一种类型。因此，您提供的类型顺序非常重要。</p>\n<h2 id=\"req-accepts-types\"><a href=\"#req-accepts-types\" class=\"headerlink\" title=\"req.accepts(types)\"></a>req.accepts(types)</h2><p>检查给定的类型 types(s) 是否可被接受，当为 true 时返回最佳匹配，否则返回 false。type 的值可以是一个或者多个 mime 类型字符串。 比如 “application/json” 扩展名为 “json”，或者数组 [“json”, “html”, “text/plain”]。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Accept: text/html</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'html'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"html\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Accept: text/*, application/json</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'html'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"html\"</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'text/html'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"text/html\"</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'json'</span>, <span class=\"string\">'text'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"json\"</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'application/json'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"application/json\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Accept: text/*, application/json</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'image/png'</span>);</div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'png'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Accept: text/*;q=.5, application/json</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts([<span class=\"string\">'html'</span>, <span class=\"string\">'json'</span>]);</div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'html'</span>, <span class=\"string\">'json'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"json\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// No Accept header</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'html'</span>, <span class=\"string\">'json'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"html\"</span></div><div class=\"line\"><span class=\"keyword\">this</span>.accepts(<span class=\"string\">'json'</span>, <span class=\"string\">'html'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"json\"</span></div></pre></td></tr></table></figure></p>\n<p>this.accepts() 可以被调用多次，或者使用 switch:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.accepts(<span class=\"string\">'json'</span>, <span class=\"string\">'html'</span>, <span class=\"string\">'text'</span>)) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'json'</span>: <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'html'</span>: <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'text'</span>: <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>: <span class=\"keyword\">this</span>.throw(<span class=\"number\">406</span>, <span class=\"string\">'json, html, or text only'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">req.acceptsEncodings(encodings)</div></pre></td></tr></table></figure></p>\n<p>检查 encodings 是否可以被接受，当为 true 时返回最佳匹配，否则返回 false。 注意：您应该在 encodings 中包含 identity。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Accept-Encoding: gzip</span></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsEncodings(<span class=\"string\">'gzip'</span>, <span class=\"string\">'deflate'</span>, <span class=\"string\">'identity'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"gzip\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsEncodings([<span class=\"string\">'gzip'</span>, <span class=\"string\">'deflate'</span>, <span class=\"string\">'identity'</span>]);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"gzip\"</span></div><div class=\"line\">当没有传递参数时，返回包含所有可接受的 encodings 的数组：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Accept-Encoding: gzip, deflate</span></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsEncodings();</div><div class=\"line\"><span class=\"comment\">// =&gt; [\"gzip\", \"deflate\", \"identity\"]</span></div></pre></td></tr></table></figure></p>\n<p>注意：如果客户端直接发送 identity;q=0 时，identity encoding（表示no encoding） 可以不被接受。虽然这是一个边界情况，您仍然应该处理这种情况。</p>\n<h2 id=\"req-acceptsCharsets-charsets\"><a href=\"#req-acceptsCharsets-charsets\" class=\"headerlink\" title=\"req.acceptsCharsets(charsets)\"></a>req.acceptsCharsets(charsets)</h2><p>检查 charsets 是否可以被接受，如果为 true 则返回最佳匹配， 否则返回 false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsCharsets(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'utf-7'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"utf-8\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsCharsets([<span class=\"string\">'utf-7'</span>, <span class=\"string\">'utf-8'</span>]);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"utf-8\"</span></div></pre></td></tr></table></figure></p>\n<p>当没有传递参数时， 返回包含所有可接受的 charsets 的数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsCharsets();</div><div class=\"line\"><span class=\"comment\">// =&gt; [\"utf-8\", \"utf-7\", \"iso-8859-1\"]</span></div><div class=\"line\">req.acceptsLanguages(langs)</div></pre></td></tr></table></figure></p>\n<p>检查 langs 是否可以被接受，如果为 true 则返回最佳匹配，否则返回 false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Accept-Language: en;q=0.8, es, pt</span></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsLanguages(<span class=\"string\">'es'</span>, <span class=\"string\">'en'</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"es\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsLanguages([<span class=\"string\">'en'</span>, <span class=\"string\">'es'</span>]);</div><div class=\"line\"><span class=\"comment\">// =&gt; \"es\"</span></div></pre></td></tr></table></figure></p>\n<p>当没有传递参数时，返回包含所有可接受的 langs 的数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Accept-Language: en;q=0.8, es, pt</span></div><div class=\"line\"><span class=\"keyword\">this</span>.acceptsLanguages();</div><div class=\"line\"><span class=\"comment\">// =&gt; [\"es\", \"pt\", \"en\"]</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"req-idempotent\"><a href=\"#req-idempotent\" class=\"headerlink\" title=\"req.idempotent\"></a>req.idempotent</h2><p>检查请求是否为幂等(idempotent)。</p>\n<h2 id=\"req-socket\"><a href=\"#req-socket\" class=\"headerlink\" title=\"req.socket\"></a>req.socket</h2><p>返回请求的socket。</p>\n<h2 id=\"req-get-field\"><a href=\"#req-get-field\" class=\"headerlink\" title=\"req.get(field)\"></a>req.get(field)</h2><p>返回请求 header 中对应 field 的值。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481186582388,
				"created_by": 2,
				"updated_at": 1482217999333,
				"updated_by": 2,
				"published_at": 1481186582388,
				"published_by": 2
			},
			{
				"id": "ciwg412xe0000x0fc4ona7q06",
				"title": "koa-Context(上下文)",
				"slug": "nodejs-koa-content",
				"markdown": "\nKoa Context 将 node 的 request 和 response 对象封装在一个单独的对象里面，其为编写 web 应用和 API 提供了很多有用的方法。\n\n这些操作在 HTTP 服务器开发中经常使用，因此其被添加在上下文这一层，而不是更高层框架中，因此将迫使中间件需要重新实现这些常用方法。\n<!--more-->\n\ncontext 在每个 request 请求中被创建，在中间件中作为接收器(receiver)来引用，或者通过 this 标识符来引用：\n```js\napp.use(function *(){\n  this; // is the Context\n  this.request; // is a koa Request\n  this.response; // is a koa Response\n});\n```\n许多 context 的访问器和方法为了便于访问和调用，简单的委托给他们的 ctx.request 和 ctx.response 所对应的等价方法， 比如说 ctx.type 和 ctx.length 代理了 response 对象中对应的方法，ctx.path 和 ctx.method 代理了 request 对象中对应的方法。\n\n# API\n\nContext 详细的方法和访问器。\n\n## ctx.req\n\nNode 的 request 对象。\n\n## ctx.res\n\nNode 的 response 对象。\n\nKoa 不支持 直接调用底层 res 进行响应处理。请避免使用以下 node 属性：\n```js\nres.statusCode\nres.writeHead()\nres.write()\nres.end()\nctx.request\n```\nKoa 的 Request 对象。\n\n## ctx.response\n\nKoa 的 Response 对象。\n\n## ctx.app\n\n应用实例引用。\n\n## ctx.cookies.get(name, [options])\n\n获得 cookie 中名为 name 的值，options 为可选参数：\n\n'signed': 如果为 true，表示请求时 cookie 需要进行签名。\n注意：Koa 使用了 Express 的 cookies 模块，options 参数只是简单地直接进行传递。\n\n## ctx.cookies.set(name, value, [options])\n\n设置 cookie 中名为 name 的值，options 为可选参数：\n```bash\nsigned: 是否要做签名\nexpires: cookie 有效期时间\npath: cookie 的路径，默认为 /'\ndomain: cookie 的域\nsecure: false 表示 cookie 通过 HTTP 协议发送，true 表示 cookie 通过 HTTPS 发送。\nhttpOnly: true 表示 cookie 只能通过 HTTP 协议发送\n注意：Koa 使用了 Express 的 cookies 模块，options 参数只是简单地直接进行传递。\n```\n## ctx.throw(msg, [status])\n\n抛出包含 .status 属性的错误，默认为 500。该方法可以让 Koa 准确的响应处理状态。 Koa支持以下组合：\n```js\nthis.throw(403)\nthis.throw('name required', 400)\nthis.throw(400, 'name required')\nthis.throw('something exploded')\nthis.throw('name required', 400) 等价于：\n\nvar err = new Error('name required');\nerr.status = 400;\nthrow err;\n```\n注意：这些用户级错误被标记为 err.expose，其意味着这些消息被准确描述为对客户端的响应，而并非使用在您不想泄露失败细节的场景中。\n\n## ctx.respond\n\n为了避免使用 Koa 的内置响应处理功能，您可以直接赋值 this.repond = false;。如果您不想让 Koa 来帮助您处理 reponse，而是直接操作原生 res 对象，那么请使用这种方法。\n\n注意： 这种方式是不被 Koa 支持的。其可能会破坏 Koa 中间件和 Koa 本身的一些功能。其只作为一种 hack 的方式，并只对那些想要在 Koa 方法和中间件中使用传统 fn(req, res) 方法的人来说会带来便利。\n\n# Request aliases\n\n以下访问器和别名与 Request 等价：\n```js\nctx.header\nctx.method\nctx.method=\nctx.url\nctx.url=\nctx.originalUrl\nctx.path\nctx.path=\nctx.query\nctx.query=\nctx.querystring\nctx.querystring=\nctx.host\nctx.hostname\nctx.fresh\nctx.stale\nctx.socket\nctx.protocol\nctx.secure\nctx.ip\nctx.ips\nctx.subdomains\nctx.is()\nctx.accepts()\nctx.acceptsEncodings()\nctx.acceptsCharsets()\nctx.acceptsLanguages()\nctx.get()\n```\n# Response aliases\n\n以下访问器和别名与 Response 等价：\n```js\nctx.body\nctx.body=\nctx.status\nctx.status=\nctx.length=\nctx.length\nctx.type=\nctx.type\nctx.headerSent\nctx.redirect()\nctx.attachment()\nctx.set()\nctx.remove()\nctx.lastModified=\nctx.etag=\n```",
				"html": "<p>Koa Context 将 node 的 request 和 response 对象封装在一个单独的对象里面，其为编写 web 应用和 API 提供了很多有用的方法。</p>\n<p>这些操作在 HTTP 服务器开发中经常使用，因此其被添加在上下文这一层，而不是更高层框架中，因此将迫使中间件需要重新实现这些常用方法。<br><a id=\"more\"></a></p>\n<p>context 在每个 request 请求中被创建，在中间件中作为接收器(receiver)来引用，或者通过 this 标识符来引用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>; <span class=\"comment\">// is the Context</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.request; <span class=\"comment\">// is a koa Request</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.response; <span class=\"comment\">// is a koa Response</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>许多 context 的访问器和方法为了便于访问和调用，简单的委托给他们的 ctx.request 和 ctx.response 所对应的等价方法， 比如说 ctx.type 和 ctx.length 代理了 response 对象中对应的方法，ctx.path 和 ctx.method 代理了 request 对象中对应的方法。</p>\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>Context 详细的方法和访问器。</p>\n<h2 id=\"ctx-req\"><a href=\"#ctx-req\" class=\"headerlink\" title=\"ctx.req\"></a>ctx.req</h2><p>Node 的 request 对象。</p>\n<h2 id=\"ctx-res\"><a href=\"#ctx-res\" class=\"headerlink\" title=\"ctx.res\"></a>ctx.res</h2><p>Node 的 response 对象。</p>\n<p>Koa 不支持 直接调用底层 res 进行响应处理。请避免使用以下 node 属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.statusCode</div><div class=\"line\">res.writeHead()</div><div class=\"line\">res.write()</div><div class=\"line\">res.end()</div><div class=\"line\">ctx.request</div></pre></td></tr></table></figure></p>\n<p>Koa 的 Request 对象。</p>\n<h2 id=\"ctx-response\"><a href=\"#ctx-response\" class=\"headerlink\" title=\"ctx.response\"></a>ctx.response</h2><p>Koa 的 Response 对象。</p>\n<h2 id=\"ctx-app\"><a href=\"#ctx-app\" class=\"headerlink\" title=\"ctx.app\"></a>ctx.app</h2><p>应用实例引用。</p>\n<h2 id=\"ctx-cookies-get-name-options\"><a href=\"#ctx-cookies-get-name-options\" class=\"headerlink\" title=\"ctx.cookies.get(name, [options])\"></a>ctx.cookies.get(name, [options])</h2><p>获得 cookie 中名为 name 的值，options 为可选参数：</p>\n<p>‘signed’: 如果为 true，表示请求时 cookie 需要进行签名。<br>注意：Koa 使用了 Express 的 cookies 模块，options 参数只是简单地直接进行传递。</p>\n<h2 id=\"ctx-cookies-set-name-value-options\"><a href=\"#ctx-cookies-set-name-value-options\" class=\"headerlink\" title=\"ctx.cookies.set(name, value, [options])\"></a>ctx.cookies.set(name, value, [options])</h2><p>设置 cookie 中名为 name 的值，options 为可选参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">signed: 是否要做签名</div><div class=\"line\">expires: cookie 有效期时间</div><div class=\"line\">path: cookie 的路径，默认为 /<span class=\"string\">'</span></div><div class=\"line\">domain: cookie 的域</div><div class=\"line\">secure: false 表示 cookie 通过 HTTP 协议发送，true 表示 cookie 通过 HTTPS 发送。</div><div class=\"line\">httpOnly: true 表示 cookie 只能通过 HTTP 协议发送</div><div class=\"line\">注意：Koa 使用了 Express 的 cookies 模块，options 参数只是简单地直接进行传递。</div></pre></td></tr></table></figure></p>\n<h2 id=\"ctx-throw-msg-status\"><a href=\"#ctx-throw-msg-status\" class=\"headerlink\" title=\"ctx.throw(msg, [status])\"></a>ctx.throw(msg, [status])</h2><p>抛出包含 .status 属性的错误，默认为 500。该方法可以让 Koa 准确的响应处理状态。 Koa支持以下组合：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.throw(<span class=\"number\">403</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>.throw(<span class=\"string\">'name required'</span>, <span class=\"number\">400</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>.throw(<span class=\"number\">400</span>, <span class=\"string\">'name required'</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>.throw(<span class=\"string\">'something exploded'</span>)</div><div class=\"line\"><span class=\"keyword\">this</span>.throw(<span class=\"string\">'name required'</span>, <span class=\"number\">400</span>) 等价于：</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'name required'</span>);</div><div class=\"line\">err.status = <span class=\"number\">400</span>;</div><div class=\"line\"><span class=\"keyword\">throw</span> err;</div></pre></td></tr></table></figure></p>\n<p>注意：这些用户级错误被标记为 err.expose，其意味着这些消息被准确描述为对客户端的响应，而并非使用在您不想泄露失败细节的场景中。</p>\n<h2 id=\"ctx-respond\"><a href=\"#ctx-respond\" class=\"headerlink\" title=\"ctx.respond\"></a>ctx.respond</h2><p>为了避免使用 Koa 的内置响应处理功能，您可以直接赋值 this.repond = false;。如果您不想让 Koa 来帮助您处理 reponse，而是直接操作原生 res 对象，那么请使用这种方法。</p>\n<p>注意： 这种方式是不被 Koa 支持的。其可能会破坏 Koa 中间件和 Koa 本身的一些功能。其只作为一种 hack 的方式，并只对那些想要在 Koa 方法和中间件中使用传统 fn(req, res) 方法的人来说会带来便利。</p>\n<h1 id=\"Request-aliases\"><a href=\"#Request-aliases\" class=\"headerlink\" title=\"Request aliases\"></a>Request aliases</h1><p>以下访问器和别名与 Request 等价：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.header</div><div class=\"line\">ctx.method</div><div class=\"line\">ctx.method=</div><div class=\"line\">ctx.url</div><div class=\"line\">ctx.url=</div><div class=\"line\">ctx.originalUrl</div><div class=\"line\">ctx.path</div><div class=\"line\">ctx.path=</div><div class=\"line\">ctx.query</div><div class=\"line\">ctx.query=</div><div class=\"line\">ctx.querystring</div><div class=\"line\">ctx.querystring=</div><div class=\"line\">ctx.host</div><div class=\"line\">ctx.hostname</div><div class=\"line\">ctx.fresh</div><div class=\"line\">ctx.stale</div><div class=\"line\">ctx.socket</div><div class=\"line\">ctx.protocol</div><div class=\"line\">ctx.secure</div><div class=\"line\">ctx.ip</div><div class=\"line\">ctx.ips</div><div class=\"line\">ctx.subdomains</div><div class=\"line\">ctx.is()</div><div class=\"line\">ctx.accepts()</div><div class=\"line\">ctx.acceptsEncodings()</div><div class=\"line\">ctx.acceptsCharsets()</div><div class=\"line\">ctx.acceptsLanguages()</div><div class=\"line\">ctx.get()</div></pre></td></tr></table></figure></p>\n<h1 id=\"Response-aliases\"><a href=\"#Response-aliases\" class=\"headerlink\" title=\"Response aliases\"></a>Response aliases</h1><p>以下访问器和别名与 Response 等价：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.body</div><div class=\"line\">ctx.body=</div><div class=\"line\">ctx.status</div><div class=\"line\">ctx.status=</div><div class=\"line\">ctx.length=</div><div class=\"line\">ctx.length</div><div class=\"line\">ctx.type=</div><div class=\"line\">ctx.type</div><div class=\"line\">ctx.headerSent</div><div class=\"line\">ctx.redirect()</div><div class=\"line\">ctx.attachment()</div><div class=\"line\">ctx.set()</div><div class=\"line\">ctx.remove()</div><div class=\"line\">ctx.lastModified=</div><div class=\"line\">ctx.etag=</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481186203538,
				"created_by": 2,
				"updated_at": 1482218230217,
				"updated_by": 2,
				"published_at": 1481186203538,
				"published_by": 2
			},
			{
				"id": "ciwg412y40001x0fcm6f1la08",
				"title": "koa入门",
				"slug": "nodejs-koa",
				"markdown": "\nkoa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。\n<!--more-->\n# 安装\n\nKoa 目前需要 >=0.11.x版本的 node 环境。并需要在执行 node 的时候附带 --harmony 来引入 generators 。 如果您安装了较旧版本的 node ，您可以安装 n (node版本控制器)，来快速安装 0.11.x\n```bash\n$ npm install -g n\n$ n 0.11.12\n$ node --harmony my-koa-app.js\n```\n\n# 应用\n\nKoa 应用是一个包含一系列中间件 generator 函数的对象。 这些中间件函数基于 request 请求以一个类似于栈的结构组成并依次执行。 Koa 类似于其他中间件系统（比如 Ruby's Rack 、Connect 等）， 然而 Koa 的核心设计思路是为中间件层提供高级语法糖封装，以增强其互用性和健壮性，并使得编写中间件变得相当有趣。\n\nKoa 包含了像 content-negotiation（内容协商）、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。 与提供庞大的函数支持不同，Koa只包含很小的一部分，因为Koa并不绑定任何中间件。\n\n任何教程都是从 hello world 开始的，Koa也不例外^_^\n```js\nvar koa = require('koa');\nvar app = koa();\n\napp.use(function *(){\n  this.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n\n# 中间件级联\n\nKoa 的中间件通过一种更加传统（您也许会很熟悉）的方式进行级联，摒弃了以往 node 频繁的回调函数造成的复杂代码逻辑。 我们通过 generators 来实现“真正”的中间件。 Connect 简单地将控制权交给一系列函数来处理，直到函数返回。 与之不同，当执行到 yield next 语句时，Koa 暂停了该中间件，继续执行下一个符合请求的中间件('downstrem')，然后控制权再逐级返回给上层中间件('upstream')。\n\n下面的例子在页面中返回 \"Hello World\"，然而当请求开始时，请求先经过 x-response-time 和 logging 中间件，并记录中间件执行起始时间。 然后将控制权交给 reponse 中间件。当中间件运行到 yield next 时，函数挂起并将控制前交给下一个中间件。当没有中间件执行 yield next 时，程序栈会逆序唤起被挂起的中间件来执行接下来的代码。\n```js\nvar koa = require('koa');\nvar app = koa();\n\n// x-response-time\n\napp.use(function *(next){\n  var start = new Date;\n  yield next;\n  var ms = new Date - start;\n  this.set('X-Response-Time', ms + 'ms');\n});\n\n// logger\n\napp.use(function *(next){\n  var start = new Date;\n  yield next;\n  var ms = new Date - start;\n  console.log('%s %s - %s', this.method, this.url, ms);\n});\n\n// response\n\napp.use(function *(){\n  this.body = 'Hello World';\n});\n\napp.listen(3000);\n```\n# 配置\n\n应用配置是 app 实例属性，目前支持的配置项如下：\n```bash\napp.name 应用名称（可选项）\napp.env 默认为 NODE_ENV 或者 development\napp.proxy 如果为 true，则解析 \"Host\" 的 header 域，并支持 X-Forwarded-Host\napp.subdomainOffset 默认为2，表示 .subdomains 所忽略的字符偏移量。\n\n```\n```js\napp.listen(...)\n```\nKoa 应用并非是一个 1-to-1 表征关系的 HTTP 服务器。 一个或多个Koa应用可以被挂载到一起组成一个包含单一 HTTP 服务器的大型应用群。\n\n如下为一个绑定3000端口的简单 Koa 应用，其创建并返回了一个 HTTP 服务器，为 Server#listen() 传递指定参数（参数的详细文档请查看nodejs.org）。\n```js\nvar koa = require('koa');\nvar app = koa();\napp.listen(3000);\napp.listen(...) 实际上是以下代码的语法糖:\n\nvar http = require('http');\nvar koa = require('koa');\nvar app = koa();\nhttp.createServer(app.callback()).listen(3000);\n```\n这意味着您可以同时支持 HTTPS 和 HTTPS，或者在多个端口监听同一个应用。\n```js\nvar http = require('http');\nvar koa = require('koa');\nvar app = koa();\nhttp.createServer(app.callback()).listen(3000);\nhttp.createServer(app.callback()).listen(3001);\napp.callback()\n```\n返回一个适合 http.createServer() 方法的回调函数用来处理请求。 您也可以使用这个回调函数将您的app挂载在 Connect/Express 应用上。\n```js\napp.use(function)\n```\n为应用添加指定的中间件，详情请看 Middleware\n```js\napp.keys=\n```\n设置签名Cookie密钥，该密钥会被传递给 KeyGrip。\n\n当然，您也可以自己生成 KeyGrip 实例：\n```js\napp.keys = ['im a newer secret', 'i like turtle'];\napp.keys = new KeyGrip(['im a newer secret', 'i like turtle'], 'sha256');\n```\n在进行cookie签名时，只有设置 signed 为 true 的时候，才会使用密钥进行加密：\n\n```js\nthis.cookies.set('name', 'tobi', { signed: true });\n```\n# 错误处理\n\n默认情况下Koa会将所有错误信息输出到 stderr，除非 NODE_ENV 是 \"test\"。为了实现自定义错误处理逻辑（比如 centralized logging），您可以添加 \"error\" 事件监听器。\n```js\napp.on('error', function(err){\n  log.error('server error', err);\n});\n```\n如果错误发生在 请求/响应 环节，并且其不能够响应客户端时，Contenxt 实例也会被传递到 error 事件监听器的回调函数里。\n```js\napp.on('error', function(err, ctx){\n  log.error('server error', err, ctx);\n});\n```\n当发生错误但仍能够响应客户端时（比如没有数据写到socket中），Koa会返回一个500错误(Internal Server Error)。\n\n",
				"html": "<p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。<br><a id=\"more\"></a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>Koa 目前需要 &gt;=0.11.x版本的 node 环境。并需要在执行 node 的时候附带 –harmony 来引入 generators 。 如果您安装了较旧版本的 node ，您可以安装 n (node版本控制器)，来快速安装 0.11.x<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g n</div><div class=\"line\">$ n 0.11.12</div><div class=\"line\">$ node --harmony my-koa-app.js</div></pre></td></tr></table></figure></p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>Koa 应用是一个包含一系列中间件 generator 函数的对象。 这些中间件函数基于 request 请求以一个类似于栈的结构组成并依次执行。 Koa 类似于其他中间件系统（比如 Ruby’s Rack 、Connect 等）， 然而 Koa 的核心设计思路是为中间件层提供高级语法糖封装，以增强其互用性和健壮性，并使得编写中间件变得相当有趣。</p>\n<p>Koa 包含了像 content-negotiation（内容协商）、cache freshness（缓存刷新）、proxy support（代理支持）和 redirection（重定向）等常用任务方法。 与提供庞大的函数支持不同，Koa只包含很小的一部分，因为Koa并不绑定任何中间件。</p>\n<p>任何教程都是从 hello world 开始的，Koa也不例外^_^<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<h1 id=\"中间件级联\"><a href=\"#中间件级联\" class=\"headerlink\" title=\"中间件级联\"></a>中间件级联</h1><p>Koa 的中间件通过一种更加传统（您也许会很熟悉）的方式进行级联，摒弃了以往 node 频繁的回调函数造成的复杂代码逻辑。 我们通过 generators 来实现“真正”的中间件。 Connect 简单地将控制权交给一系列函数来处理，直到函数返回。 与之不同，当执行到 yield next 语句时，Koa 暂停了该中间件，继续执行下一个符合请求的中间件(‘downstrem’)，然后控制权再逐级返回给上层中间件(‘upstream’)。</p>\n<p>下面的例子在页面中返回 “Hello World”，然而当请求开始时，请求先经过 x-response-time 和 logging 中间件，并记录中间件执行起始时间。 然后将控制权交给 reponse 中间件。当中间件运行到 yield next 时，函数挂起并将控制前交给下一个中间件。当没有中间件执行 yield next 时，程序栈会逆序唤起被挂起的中间件来执行接下来的代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// x-response-time</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> next;</div><div class=\"line\">  <span class=\"keyword\">var</span> ms = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span> - start;</div><div class=\"line\">  <span class=\"keyword\">this</span>.set(<span class=\"string\">'X-Response-Time'</span>, ms + <span class=\"string\">'ms'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// logger</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> next;</div><div class=\"line\">  <span class=\"keyword\">var</span> ms = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span> - start;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'%s %s - %s'</span>, <span class=\"keyword\">this</span>.method, <span class=\"keyword\">this</span>.url, ms);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// response</span></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>应用配置是 app 实例属性，目前支持的配置项如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.name 应用名称（可选项）</div><div class=\"line\">app.env 默认为 NODE_ENV 或者 development</div><div class=\"line\">app.proxy 如果为 <span class=\"literal\">true</span>，则解析 <span class=\"string\">\"Host\"</span> 的 header 域，并支持 X-Forwarded-Host</div><div class=\"line\">app.subdomainOffset 默认为2，表示 .subdomains 所忽略的字符偏移量。</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.listen(...)</div></pre></td></tr></table></figure>\n<p>Koa 应用并非是一个 1-to-1 表征关系的 HTTP 服务器。 一个或多个Koa应用可以被挂载到一起组成一个包含单一 HTTP 服务器的大型应用群。</p>\n<p>如下为一个绑定3000端口的简单 Koa 应用，其创建并返回了一个 HTTP 服务器，为 Server#listen() 传递指定参数（参数的详细文档请查看nodejs.org）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\">app.listen(...) 实际上是以下代码的语法糖:</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">http.createServer(app.callback()).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>这意味着您可以同时支持 HTTPS 和 HTTPS，或者在多个端口监听同一个应用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">http.createServer(app.callback()).listen(<span class=\"number\">3000</span>);</div><div class=\"line\">http.createServer(app.callback()).listen(<span class=\"number\">3001</span>);</div><div class=\"line\">app.callback()</div></pre></td></tr></table></figure></p>\n<p>返回一个适合 http.createServer() 方法的回调函数用来处理请求。 您也可以使用这个回调函数将您的app挂载在 Connect/Express 应用上。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>)</span></div></pre></td></tr></table></figure></p>\n<p>为应用添加指定的中间件，详情请看 Middleware<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.keys=</div></pre></td></tr></table></figure></p>\n<p>设置签名Cookie密钥，该密钥会被传递给 KeyGrip。</p>\n<p>当然，您也可以自己生成 KeyGrip 实例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.keys = [<span class=\"string\">'im a newer secret'</span>, <span class=\"string\">'i like turtle'</span>];</div><div class=\"line\">app.keys = <span class=\"keyword\">new</span> KeyGrip([<span class=\"string\">'im a newer secret'</span>, <span class=\"string\">'i like turtle'</span>], <span class=\"string\">'sha256'</span>);</div></pre></td></tr></table></figure></p>\n<p>在进行cookie签名时，只有设置 signed 为 true 的时候，才会使用密钥进行加密：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.cookies.set(<span class=\"string\">'name'</span>, <span class=\"string\">'tobi'</span>, &#123; <span class=\"attr\">signed</span>: <span class=\"literal\">true</span> &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h1><p>默认情况下Koa会将所有错误信息输出到 stderr，除非 NODE_ENV 是 “test”。为了实现自定义错误处理逻辑（比如 centralized logging），您可以添加 “error” 事件监听器。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  log.error(<span class=\"string\">'server error'</span>, err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果错误发生在 请求/响应 环节，并且其不能够响应客户端时，Contenxt 实例也会被传递到 error 事件监听器的回调函数里。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, ctx</span>)</span>&#123;</div><div class=\"line\">  log.error(<span class=\"string\">'server error'</span>, err, ctx);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>当发生错误但仍能够响应客户端时（比如没有数据写到socket中），Koa会返回一个500错误(Internal Server Error)。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481186040053,
				"created_by": 2,
				"updated_at": 1482217881088,
				"updated_by": 2,
				"published_at": 1481186040053,
				"published_by": 2
			},
			{
				"id": "ciwg0zxst0005q0fc7uuds8i3",
				"title": "Express-错误处理",
				"slug": "express-error",
				"markdown": "错误处理\n--\n定义错误处理中间件和定义其他中间件一样，除了需要 4 个参数，而不是 3 个，其格式如下 (err, req, res, next)。例如：\n```js\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n```\n<!--more-->\n在其他 app.use() 和路由调用后，最后定义错误处理中间件，比如：\n```js\nvar bodyParser = require('body-parser');\nvar methodOverride = require('method-override');\n\napp.use(bodyParser());\napp.use(methodOverride());\napp.use(function(err, req, res, next) {\n  // 业务逻辑\n});\n```\n中间件返回的响应是随意的，可以响应一个 HTML 错误页面、一句简单的话、一个 JSON 字符串，或者其他任何您想要的东西。\n\n为了便于组织（更高级的框架），您可能会像定义常规中间件一样，定义多个错误处理中间件。比如您想为使用 XHR 的请求定义一个，还想为没有使用的定义一个，那么：\n```js\nvar bodyParser = require('body-parser');\nvar methodOverride = require('method-override');\n\napp.use(bodyParser());\napp.use(methodOverride());\napp.use(logErrors);\napp.use(clientErrorHandler);\napp.use(errorHandler);\n```\nlogErrors 将请求和错误信息写入标准错误输出、日志或类似服务：\n```js\nfunction logErrors(err, req, res, next) {\n  console.error(err.stack);\n  next(err);\n}\n```\nclientErrorHandler 的定义如下（注意这里将错误直接传给了 next）：\n```js\nfunction clientErrorHandler(err, req, res, next) {\n  if (req.xhr) {\n    res.status(500).send({ error: 'Something blew up!' });\n  } else {\n    next(err);\n  }\n}\n```\nerrorHandler 能捕获所有错误，其定义如下：\n```js\nfunction errorHandler(err, req, res, next) {\n  res.status(500);\n  res.render('error', { error: err });\n}\n```\n如果向 next() 传入参数（除了 ‘route’ 字符串），Express 会认为当前请求有错误的输出，因此跳过后续其他非错误处理和路由/中间件函数。如果需做特殊处理，需要创建新的错误处理路由，如下节所示。\n\n如果路由句柄有多个回调函数，可使用 ‘route’ 参数跳到下一个路由句柄。比如：\n```js\napp.get('/a_route_behind_paywall',\n  function checkIfPaidSubscriber(req, res, next) {\n    if(!req.user.hasPaid) {\n\n      // 继续处理该请求\n      next('route');\n    }\n  }, function getPaidContent(req, res, next) {\n    PaidContent.find(function(err, doc) {\n      if(err) return next(err);\n      res.json(doc);\n    });\n  });\n```\n在这个例子中，句柄 getPaidContent 会被跳过，但 app 中为 /a_route_behind_paywall 定义的其他句柄则会继续执行。\n\nnext() 和 next(err) 类似于 Promise.resolve() 和 Promise.reject()。它们让您可以向 Express 发信号，告诉它当前句柄执行结束并且处于什么状态。next(err) 会跳过后续句柄，除了那些用来处理错误的句柄。\n缺省错误处理句柄\n--\nExpress 内置了一个错误处理句柄，它可以捕获应用中可能出现的任意错误。这个缺省的错误处理中间件将被添加到中间件堆栈的底部。\n\n如果你向 next() 传递了一个 error ，而你并没有在错误处理句柄中处理这个 error，Express 内置的缺省错误处理句柄就是最后兜底的。最后错误将被连同堆栈追踪信息一同反馈到客户端。堆栈追踪信息并不会在生产环境中反馈到客户端。\n\n设置环境变量 NODE_ENV 为 “production” 就可以让应用运行在生产环境模式下。\n如果你已经开始向 response 输出数据了，这时才调用 next() 并传递了一个 error，比如你在将向客户端输出数据流时遇到一个错误，Express 内置的缺省错误处理句柄将帮你关闭连接并告知 request 请求失败。\n\n因此，当你添加了一个自定义的错误处理句柄后，如果已经向客户端发送包头信息了，你还可以将错误处理交给 Express 内置的错误处理机制。\n```js\nfunction errorHandler(err, req, res, next) {\n  if (res.headersSent) {\n    return next(err);\n  }\n  res.status(500);\n  res.render('error', { error: err });\n}\n```\n\n",
				"html": "<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>定义错误处理中间件和定义其他中间件一样，除了需要 4 个参数，而不是 3 个，其格式如下 (err, req, res, next)。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</div><div class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>在其他 app.use() 和路由调用后，最后定义错误处理中间件，比如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> methodOverride = <span class=\"built_in\">require</span>(<span class=\"string\">'method-override'</span>);</div><div class=\"line\"></div><div class=\"line\">app.use(bodyParser());</div><div class=\"line\">app.use(methodOverride());</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 业务逻辑</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>中间件返回的响应是随意的，可以响应一个 HTML 错误页面、一句简单的话、一个 JSON 字符串，或者其他任何您想要的东西。</p>\n<p>为了便于组织（更高级的框架），您可能会像定义常规中间件一样，定义多个错误处理中间件。比如您想为使用 XHR 的请求定义一个，还想为没有使用的定义一个，那么：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> methodOverride = <span class=\"built_in\">require</span>(<span class=\"string\">'method-override'</span>);</div><div class=\"line\"></div><div class=\"line\">app.use(bodyParser());</div><div class=\"line\">app.use(methodOverride());</div><div class=\"line\">app.use(logErrors);</div><div class=\"line\">app.use(clientErrorHandler);</div><div class=\"line\">app.use(errorHandler);</div></pre></td></tr></table></figure></p>\n<p>logErrors 将请求和错误信息写入标准错误输出、日志或类似服务：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logErrors</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</div><div class=\"line\">  next(err);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>clientErrorHandler 的定义如下（注意这里将错误直接传给了 next）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clientErrorHandler</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.xhr) &#123;</div><div class=\"line\">    res.status(<span class=\"number\">500</span>).send(&#123; <span class=\"attr\">error</span>: <span class=\"string\">'Something blew up!'</span> &#125;);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    next(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>errorHandler 能捕获所有错误，其定义如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorHandler</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  res.status(<span class=\"number\">500</span>);</div><div class=\"line\">  res.render(<span class=\"string\">'error'</span>, &#123; <span class=\"attr\">error</span>: err &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果向 next() 传入参数（除了 ‘route’ 字符串），Express 会认为当前请求有错误的输出，因此跳过后续其他非错误处理和路由/中间件函数。如果需做特殊处理，需要创建新的错误处理路由，如下节所示。</p>\n<p>如果路由句柄有多个回调函数，可使用 ‘route’ 参数跳到下一个路由句柄。比如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/a_route_behind_paywall'</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIfPaidSubscriber</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!req.user.hasPaid) &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 继续处理该请求</span></div><div class=\"line\">      next(<span class=\"string\">'route'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPaidContent</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    PaidContent.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, doc</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err);</div><div class=\"line\">      res.json(doc);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，句柄 getPaidContent 会被跳过，但 app 中为 /a_route_behind_paywall 定义的其他句柄则会继续执行。</p>\n<p>next() 和 next(err) 类似于 Promise.resolve() 和 Promise.reject()。它们让您可以向 Express 发信号，告诉它当前句柄执行结束并且处于什么状态。next(err) 会跳过后续句柄，除了那些用来处理错误的句柄。</p>\n<h2 id=\"缺省错误处理句柄\"><a href=\"#缺省错误处理句柄\" class=\"headerlink\" title=\"缺省错误处理句柄\"></a>缺省错误处理句柄</h2><p>Express 内置了一个错误处理句柄，它可以捕获应用中可能出现的任意错误。这个缺省的错误处理中间件将被添加到中间件堆栈的底部。</p>\n<p>如果你向 next() 传递了一个 error ，而你并没有在错误处理句柄中处理这个 error，Express 内置的缺省错误处理句柄就是最后兜底的。最后错误将被连同堆栈追踪信息一同反馈到客户端。堆栈追踪信息并不会在生产环境中反馈到客户端。</p>\n<p>设置环境变量 NODE_ENV 为 “production” 就可以让应用运行在生产环境模式下。<br>如果你已经开始向 response 输出数据了，这时才调用 next() 并传递了一个 error，比如你在将向客户端输出数据流时遇到一个错误，Express 内置的缺省错误处理句柄将帮你关闭连接并告知 request 请求失败。</p>\n<p>因此，当你添加了一个自定义的错误处理句柄后，如果已经向客户端发送包头信息了，你还可以将错误处理交给 Express 内置的错误处理机制。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorHandler</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (res.headersSent) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> next(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">  res.status(<span class=\"number\">500</span>);</div><div class=\"line\">  res.render(<span class=\"string\">'error'</span>, &#123; <span class=\"attr\">error</span>: err &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481161652085,
				"created_by": 2,
				"updated_at": 1481183262734,
				"updated_by": 2,
				"published_at": 1481161652085,
				"published_by": 2
			},
			{
				"id": "ciwg0zxtz000aq0fcy1biihb4",
				"title": "Express-中间件",
				"slug": "express-middle-utils",
				"markdown": "使用中间件\n---\nExpress 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。\n\n中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。\n\n中间件的功能包括：\n```bash\n执行任何代码。\n修改请求和响应对象。\n终结请求-响应循环。\n调用堆栈中的下一个中间件。\n如果当前中间件没有终结请求-响应循环，则必须调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。\n```\n<!--more-->\nExpress 应用可使用如下几种中间件：\n\n应用级中间件\n路由级中间件\n错误处理中间件\n内置中间件\n第三方中间件\n使用可选则挂载路径，可在应用级别或路由级别装载中间件。另外，你还可以同时装在一系列中间件函数，从而在一个挂载点上创建一个子中间件栈。\n\n应用级中间件\n--\n应用级中间件绑定到 app 对象 使用 app.use() 和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等，全部小写。例如：\n```js\nvar app = express();\n\n// 没有挂载路径的中间件，应用的每个请求都会执行该中间件\napp.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 挂载至 /user/:id 的中间件，任何指向 /user/:id 的请求都会执行它\napp.use('/user/:id', function (req, res, next) {\n  console.log('Request Type:', req.method);\n  next();\n});\n\n// 路由和句柄函数(中间件系统)，处理指向 /user/:id 的 GET 请求\napp.get('/user/:id', function (req, res, next) {\n  res.send('USER');\n});\n```\n下面这个例子展示了在一个挂载点装载一组中间件。\n```js\n// 一个中间件栈，对任何指向 /user/:id 的 HTTP 请求打印出相关信息\napp.use('/user/:id', function(req, res, next) {\n  console.log('Request URL:', req.originalUrl);\n  next();\n}, function (req, res, next) {\n  console.log('Request Type:', req.method);\n  next();\n});\n```\n作为中间件系统的路由句柄，使得为路径定义多个路由成为可能。在下面的例子中，为指向 /user/:id 的 GET 请求定义了两个路由。第二个路由虽然不会带来任何问题，但却永远不会被调用，因为第一个路由已经终止了请求-响应循环。\n```js\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\napp.get('/user/:id', function (req, res, next) {\n  console.log('ID:', req.params.id);\n  next();\n}, function (req, res, next) {\n  res.send('User Info');\n});\n\n// 处理 /user/:id， 打印出用户 id\napp.get('/user/:id', function (req, res, next) {\n  res.end(req.params.id);\n});\n```\n如果需要在中间件栈中跳过剩余中间件，调用 next('route') 方法将控制权交给下一个路由。 注意： next('route') 只对使用 app.VERB() 或 router.VERB() 加载的中间件有效。\n```js\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\napp.get('/user/:id', function (req, res, next) {\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0) next('route');\n  // 否则将控制权交给栈中下一个中间件\n  else next(); //\n}, function (req, res, next) {\n  // 渲染常规页面\n  res.render('regular');\n});\n\n// 处理 /user/:id， 渲染一个特殊页面\napp.get('/user/:id', function (req, res, next) {\n  res.render('special');\n});\n```\n路由级中间件\n--\n路由级中间件和应用级中间件一样，只是它绑定的对象为 express.Router()。\n```js\nvar router = express.Router();\n路由级使用 router.use() 或 router.VERB() 加载。\n\n上述在应用级创建的中间件系统，可通过如下代码改写为路由级：\n\nvar app = express();\nvar router = express.Router();\n\n// 没有挂载路径的中间件，通过该路由的每个请求都会执行该中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n  console.log('Request URL:', req.originalUrl);\n  next();\n}, function (req, res, next) {\n  console.log('Request Type:', req.method);\n  next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0) next('route');\n  // 负责将控制权交给栈中下一个中间件\n  else next(); //\n}, function (req, res, next) {\n  // 渲染常规页面\n  res.render('regular');\n});\n\n// 处理 /user/:id， 渲染一个特殊页面\nrouter.get('/user/:id', function (req, res, next) {\n  console.log(req.params.id);\n  res.render('special');\n});\n\n// 将路由挂载至应用\napp.use('/', router);\n```\n错误处理中间件\n--\n错误处理中间件有 4 个参数，定义错误处理中间件时必须使用这 4 个参数。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。\n错误处理中间件和其他中间件定义类似，只是要使用 4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。\n```js\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n```\n请参考 错误处理 一章了解更多关于错误处理中间件的内容。\n\n内置中间件\n---\n从 4.x 版本开始，, Express 已经不再依赖 Connect 了。除了 express.static, Express 以前内置的中间件现在已经全部单独作为模块安装使用了。请参考 中间件列表。\n```js\nexpress.static(root, [options])\n```\nexpress.static 是 Express 唯一内置的中间件。它基于 serve-static，负责在 Express 应用中提托管静态资源。\n\n参数 root 指提供静态资源的根目录。\n\n可选的 options 参数拥有如下属性。\n\n|属性\t|描述\t|类型|\t缺省值|\n| ------------- |:-------------:| -----:|----:|\n|dotfiles\t|是否对外输出文件名以点（.）开头的文件。可选值为 “allow”、“deny” 和 “ignore”|\tString\t|“ignore”|\n|etag\t|是否启用 etag 生成|\tBoolean|\ttrue|\n|extensions|\t设置文件扩展名备份选项\t|Array|\t[]|\n|index\t|发送目录索引文件，设置为 false 禁用目录索引。|\tMixed\t|“index.html”|\n|lastModified\t|设置 Last-Modified 头为文件在操作系统上的最后修改日期。可能值为 true 或 false。|\tBoolean\t|true|\n|maxAge|\t以毫秒或者其字符串格式设置 Cache-Control 头的 max-age 属性。\t|Number\t|0|\n|redirect|\t当路径为目录时，重定向至 “/”。|\tBoolean\t|true|\n|setHeaders|\t设置 HTTP 头以提供文件的函数。\t|Function\t ||\n下面的例子使用了 express.static 中间件，其中的 options 对象经过了精心的设计。\n```js\nvar options = {\n  dotfiles: 'ignore',\n  etag: false,\n  extensions: ['htm', 'html'],\n  index: false,\n  maxAge: '1d',\n  redirect: false,\n  setHeaders: function (res, path, stat) {\n    res.set('x-timestamp', Date.now());\n  }\n}\n\napp.use(express.static('public', options));\n```\n每个应用可有多个静态目录。\n```js\napp.use(express.static('public'));\napp.use(express.static('uploads'));\napp.use(express.static('files'));\n```\n更多关于 serve-static 和其参数的信息，请参考 serve-static 文档。\n\n第三方中间件\n通过使用第三方中间件从而为 Express 应用增加更多功能。\n\n安装所需功能的 node 模块，并在应用中加载，可以在应用级加载，也可以在路由级加载。\n\n下面的例子安装并加载了一个解析 cookie 的中间件： cookie-parser\n```bash\n$ npm install cookie-parser\n```\n```js\nvar express = require('express');\nvar app = express();\nvar cookieParser = require('cookie-parser');\n\n// 加载用于解析 cookie 的中间件\napp.use(cookieParser());\n```\n\n请参考 第三方中间件 获取 Express 中经常用到的第三方中间件列表。",
				"html": "<h2 id=\"使用中间件\"><a href=\"#使用中间件\" class=\"headerlink\" title=\"使用中间件\"></a>使用中间件</h2><p>Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。</p>\n<p>中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。</p>\n<p>中间件的功能包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">执行任何代码。</div><div class=\"line\">修改请求和响应对象。</div><div class=\"line\">终结请求-响应循环。</div><div class=\"line\">调用堆栈中的下一个中间件。</div><div class=\"line\">如果当前中间件没有终结请求-响应循环，则必须调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>Express 应用可使用如下几种中间件：</p>\n<p>应用级中间件<br>路由级中间件<br>错误处理中间件<br>内置中间件<br>第三方中间件<br>使用可选则挂载路径，可在应用级别或路由级别装载中间件。另外，你还可以同时装在一系列中间件函数，从而在一个挂载点上创建一个子中间件栈。</p>\n<h2 id=\"应用级中间件\"><a href=\"#应用级中间件\" class=\"headerlink\" title=\"应用级中间件\"></a>应用级中间件</h2><p>应用级中间件绑定到 app 对象 使用 app.use() 和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等，全部小写。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 没有挂载路径的中间件，应用的每个请求都会执行该中间件</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 挂载至 /user/:id 的中间件，任何指向 /user/:id 的请求都会执行它</span></div><div class=\"line\">app.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路由和句柄函数(中间件系统)，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'USER'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>下面这个例子展示了在一个挂载点装载一组中间件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个中间件栈，对任何指向 /user/:id 的 HTTP 请求打印出相关信息</span></div><div class=\"line\">app.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>作为中间件系统的路由句柄，使得为路径定义多个路由成为可能。在下面的例子中，为指向 /user/:id 的 GET 请求定义了两个路由。第二个路由虽然不会带来任何问题，但却永远不会被调用，因为第一个路由已经终止了请求-响应循环。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'ID:'</span>, req.params.id);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'User Info'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理 /user/:id， 打印出用户 id</span></div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  res.end(req.params.id);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果需要在中间件栈中跳过剩余中间件，调用 next(‘route’) 方法将控制权交给下一个路由。 注意： next(‘route’) 只对使用 app.VERB() 或 router.VERB() 加载的中间件有效。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>) next(<span class=\"string\">'route'</span>);</div><div class=\"line\">  <span class=\"comment\">// 否则将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span> next(); <span class=\"comment\">//</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">  res.render(<span class=\"string\">'regular'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理 /user/:id， 渲染一个特殊页面</span></div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  res.render(<span class=\"string\">'special'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"路由级中间件\"><a href=\"#路由级中间件\" class=\"headerlink\" title=\"路由级中间件\"></a>路由级中间件</h2><p>路由级中间件和应用级中间件一样，只是它绑定的对象为 express.Router()。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\">路由级使用 router.use() 或 router.VERB() 加载。</div><div class=\"line\"></div><div class=\"line\">上述在应用级创建的中间件系统，可通过如下代码改写为路由级：</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 没有挂载路径的中间件，通过该路由的每个请求都会执行该中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>) next(<span class=\"string\">'route'</span>);</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span> next(); <span class=\"comment\">//</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">  res.render(<span class=\"string\">'regular'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理 /user/:id， 渲染一个特殊页面</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(req.params.id);</div><div class=\"line\">  res.render(<span class=\"string\">'special'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将路由挂载至应用</span></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, router);</div></pre></td></tr></table></figure></p>\n<h2 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h2><p>错误处理中间件有 4 个参数，定义错误处理中间件时必须使用这 4 个参数。即使不需要 next 对象，也必须在签名中声明它，否则中间件会被识别为一个常规中间件，不能处理错误。<br>错误处理中间件和其他中间件定义类似，只是要使用 4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</div><div class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>请参考 错误处理 一章了解更多关于错误处理中间件的内容。</p>\n<h2 id=\"内置中间件\"><a href=\"#内置中间件\" class=\"headerlink\" title=\"内置中间件\"></a>内置中间件</h2><p>从 4.x 版本开始，, Express 已经不再依赖 Connect 了。除了 express.static, Express 以前内置的中间件现在已经全部单独作为模块安装使用了。请参考 中间件列表。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">express.static(root, [options])</div></pre></td></tr></table></figure></p>\n<p>express.static 是 Express 唯一内置的中间件。它基于 serve-static，负责在 Express 应用中提托管静态资源。</p>\n<p>参数 root 指提供静态资源的根目录。</p>\n<p>可选的 options 参数拥有如下属性。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:right\">类型</th>\n<th style=\"text-align:right\">缺省值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dotfiles</td>\n<td style=\"text-align:center\">是否对外输出文件名以点（.）开头的文件。可选值为 “allow”、“deny” 和 “ignore”</td>\n<td style=\"text-align:right\">String</td>\n<td style=\"text-align:right\">“ignore”</td>\n</tr>\n<tr>\n<td>etag</td>\n<td style=\"text-align:center\">是否启用 etag 生成</td>\n<td style=\"text-align:right\">Boolean</td>\n<td style=\"text-align:right\">true</td>\n</tr>\n<tr>\n<td>extensions</td>\n<td style=\"text-align:center\">设置文件扩展名备份选项</td>\n<td style=\"text-align:right\">Array</td>\n<td style=\"text-align:right\">[]</td>\n</tr>\n<tr>\n<td>index</td>\n<td style=\"text-align:center\">发送目录索引文件，设置为 false 禁用目录索引。</td>\n<td style=\"text-align:right\">Mixed</td>\n<td style=\"text-align:right\">“index.html”</td>\n</tr>\n<tr>\n<td>lastModified</td>\n<td style=\"text-align:center\">设置 Last-Modified 头为文件在操作系统上的最后修改日期。可能值为 true 或 false。</td>\n<td style=\"text-align:right\">Boolean</td>\n<td style=\"text-align:right\">true</td>\n</tr>\n<tr>\n<td>maxAge</td>\n<td style=\"text-align:center\">以毫秒或者其字符串格式设置 Cache-Control 头的 max-age 属性。</td>\n<td style=\"text-align:right\">Number</td>\n<td style=\"text-align:right\">0</td>\n</tr>\n<tr>\n<td>redirect</td>\n<td style=\"text-align:center\">当路径为目录时，重定向至 “/”。</td>\n<td style=\"text-align:right\">Boolean</td>\n<td style=\"text-align:right\">true</td>\n</tr>\n<tr>\n<td>setHeaders</td>\n<td style=\"text-align:center\">设置 HTTP 头以提供文件的函数。</td>\n<td style=\"text-align:right\">Function</td>\n</tr>\n</tbody>\n</table>\n<p>下面的例子使用了 express.static 中间件，其中的 options 对象经过了精心的设计。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">  <span class=\"attr\">dotfiles</span>: <span class=\"string\">'ignore'</span>,</div><div class=\"line\">  <span class=\"attr\">etag</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">extensions</span>: [<span class=\"string\">'htm'</span>, <span class=\"string\">'html'</span>],</div><div class=\"line\">  <span class=\"attr\">index</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">maxAge</span>: <span class=\"string\">'1d'</span>,</div><div class=\"line\">  <span class=\"attr\">redirect</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">setHeaders</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res, path, stat</span>) </span>&#123;</div><div class=\"line\">    res.set(<span class=\"string\">'x-timestamp'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>, options));</div></pre></td></tr></table></figure></p>\n<p>每个应用可有多个静态目录。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.use(express.static(<span class=\"string\">'uploads'</span>));</div><div class=\"line\">app.use(express.static(<span class=\"string\">'files'</span>));</div></pre></td></tr></table></figure></p>\n<p>更多关于 serve-static 和其参数的信息，请参考 serve-static 文档。</p>\n<p>第三方中间件<br>通过使用第三方中间件从而为 Express 应用增加更多功能。</p>\n<p>安装所需功能的 node 模块，并在应用中加载，可以在应用级加载，也可以在路由级加载。</p>\n<p>下面的例子安装并加载了一个解析 cookie 的中间件： cookie-parser<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install cookie-parser</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加载用于解析 cookie 的中间件</span></div><div class=\"line\">app.use(cookieParser());</div></pre></td></tr></table></figure>\n<p>请参考 第三方中间件 获取 Express 中经常用到的第三方中间件列表。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481161394794,
				"created_by": 2,
				"updated_at": 1481183267544,
				"updated_by": 2,
				"published_at": 1481161394794,
				"published_by": 2
			},
			{
				"id": "ciwg0zxt10006q0fckjygi6iw",
				"title": "Express-Router",
				"slug": "express-router",
				"markdown": "路由\n\n路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。\n\n路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下： app.METHOD(path, [callback...], callback)， app 是 express 对象的一个实例， METHOD 是一个 HTTP 请求方法， path 是服务器上的路径， callback 是当路由匹配时要执行的函数。\n<!--more-->\n下面是一个基本的路由示例：\n```js\nvar express = require('express');\nvar app = express();\n\n// respond with \"hello world\" when a GET request is made to the homepage\napp.get('/', function(req, res) {\n  res.send('hello world');\n});\n```\n路由方法\n--\n路由方法源于 HTTP 请求方法，和 express 实例相关联。\n\n下面这个例子展示了为应用跟路径定义的 GET 和 POST 请求：\n```js\n// GET method route\napp.get('/', function (req, res) {\n  res.send('GET request to the homepage');\n});\n\n// POST method route\napp.post('/', function (req, res) {\n  res.send('POST request to the homepage');\n});\n```\nExpress 定义了如下和 HTTP 请求对应的路由方法： get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search, 和 connect。\n\n有些路由方法名不是合规的 JavaScript 变量名，此时使用括号记法，比如： app['m-search']('/', function ...\napp.all() 是一个特殊的路由方法，没有任何 HTTP 方法与其对应，它的作用是对于一个路径上的所有请求加载中间件。\n\n在下面的例子中，来自 “/secret” 的请求，不管使用 GET、POST、PUT、DELETE 或其他任何 http 模块支持的 HTTP 请求，句柄都会得到执行。\n```js\napp.all('/secret', function (req, res, next) {\n  console.log('Accessing the secret section ...');\n  next(); // pass control to the next handler\n});\n```\n路由路径\n--\n路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式。\n\nExpress 使用 path-to-regexp 匹配路由路径，请参考文档查阅所有定义路由路径的方法。 Express Route Tester 是测试基本 Express 路径的好工具，但不支持模式匹配。\n查询字符串不是路由路径的一部分。\n使用字符串的路由路径示例：\n```js\n// 匹配根路径的请求\napp.get('/', function (req, res) {\n  res.send('root');\n});\n\n// 匹配 /about 路径的请求\napp.get('/about', function (req, res) {\n  res.send('about');\n});\n\n// 匹配 /random.text 路径的请求\napp.get('/random.text', function (req, res) {\n  res.send('random.text');\n});\n```\n使用字符串模式的路由路径示例：\n```js\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res) {\n  res.send('ab?cd');\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res) {\n  res.send('ab+cd');\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res) {\n  res.send('ab*cd');\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res) {\n res.send('ab(cd)?e');\n});\n```\n字符 ?、+、* 和 () 是正则表达式的子集，- 和 . 在基于字符串的路径中按照字面值解释。\n使用正则表达式的路由路径示例：\n```js\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res) {\n  res.send('/a/');\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res) {\n  res.send('/.*fly$/');\n});\n```\n路由句柄\n--\n可以为请求处理提供多个回调函数，其行为类似 中间件。唯一的区别是这些回调函数有可能调用 next('route') 方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。\n\n路由句柄有多种形式，可以是一个函数、一个函数数组，或者是两者混合，如下所示.\n\n使用一个回调函数处理路由：\n```js\napp.get('/example/a', function (req, res) {\n  res.send('Hello from A!');\n});\n```\n使用多个回调函数处理路由（记得指定 next 对象）：\n```js\napp.get('/example/b', function (req, res, next) {\n  console.log('response will be sent by the next function ...');\n  next();\n}, function (req, res) {\n  res.send('Hello from B!');\n});\n```\n使用回调函数数组处理路由：\n```js\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/example/c', [cb0, cb1, cb2]);\n```\n混合使用函数和函数数组处理路由：\n```js\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\napp.get('/example/d', [cb0, cb1], function (req, res, next) {\n  console.log('response will be sent by the next function ...');\n  next();\n}, function (req, res) {\n  res.send('Hello from D!');\n});\n```\n响应方法\n--\n下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。\n\n方法\t描述\n```bash\nres.download()\t  #提示下载文件。\nres.end()\t      #终结响应处理流程。\nres.json()\t      #发送一个 JSON 格式的响应。\nres.jsonp()\t      #发送一个支持 JSONP 的 JSON 格式的响应。\nres.redirect()\t  #重定向请求。\nres.render()\t  #渲染视图模板。\nres.send()\t      #发送各种类型的响应。\nres.sendFile\t  #以八位字节流的形式发送文件。\nres.sendStatus()  #设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。\n```\napp.route()\n--\n可使用 app.route() 创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化的路由，而且减少了代码冗余和拼写错误。请参考 Router() 文档 了解更多有关路由的信息。\n\n下面这个示例程序使用 app.route() 定义了链式路由句柄。\n```js\napp.route('/book')\n  .get(function(req, res) {\n    res.send('Get a random book');\n  })\n  .post(function(req, res) {\n    res.send('Add a book');\n  })\n  .put(function(req, res) {\n    res.send('Update the book');\n  });\n```\nexpress.Router\n---\n可使用 express.Router 类创建模块化、可挂载的路由句柄。Router 实例是一个完整的中间件和路由系统，因此常称其为一个 “mini-app”。\n\n下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。\n\n在 app 目录下创建名为 birds.js 的文件，内容如下：\n```js\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function timeLog(req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;\n```\n然后在应用中加载路由模块：\n```js\nvar birds = require('./birds');\napp.use('/birds', birds);\n```\n应用即可处理发自 /birds 和 /birds/about 的请求，并且调用为该路由指定的 timeLog 中间件。",
				"html": "<p>路由</p>\n<p>路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</p>\n<p>路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下： app.METHOD(path, [callback…], callback)， app 是 express 对象的一个实例， METHOD 是一个 HTTP 请求方法， path 是服务器上的路径， callback 是当路由匹配时要执行的函数。<br><a id=\"more\"></a><br>下面是一个基本的路由示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// respond with \"hello world\" when a GET request is made to the homepage</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"路由方法\"><a href=\"#路由方法\" class=\"headerlink\" title=\"路由方法\"></a>路由方法</h2><p>路由方法源于 HTTP 请求方法，和 express 实例相关联。</p>\n<p>下面这个例子展示了为应用跟路径定义的 GET 和 POST 请求：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GET method route</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'GET request to the homepage'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// POST method route</span></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'POST request to the homepage'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Express 定义了如下和 HTTP 请求对应的路由方法： get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search, 和 connect。</p>\n<p>有些路由方法名不是合规的 JavaScript 变量名，此时使用括号记法，比如： app<a href=\"&#39;/&#39;, function ...\napp.all(\">‘m-search’</a> 是一个特殊的路由方法，没有任何 HTTP 方法与其对应，它的作用是对于一个路径上的所有请求加载中间件。</p>\n<p>在下面的例子中，来自 “/secret” 的请求，不管使用 GET、POST、PUT、DELETE 或其他任何 http 模块支持的 HTTP 请求，句柄都会得到执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.all(<span class=\"string\">'/secret'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing the secret section ...'</span>);</div><div class=\"line\">  next(); <span class=\"comment\">// pass control to the next handler</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"路由路径\"><a href=\"#路由路径\" class=\"headerlink\" title=\"路由路径\"></a>路由路径</h2><p>路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式。</p>\n<p>Express 使用 path-to-regexp 匹配路由路径，请参考文档查阅所有定义路由路径的方法。 Express Route Tester 是测试基本 Express 路径的好工具，但不支持模式匹配。<br>查询字符串不是路由路径的一部分。<br>使用字符串的路由路径示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 匹配根路径的请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'root'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /about 路径的请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'about'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /random.text 路径的请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/random.text'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'random.text'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用字符串模式的路由路径示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\"> res.send(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>字符 ?、+、* 和 () 是正则表达式的子集，- 和 . 在基于字符串的路径中按照字面值解释。<br>使用正则表达式的路由路径示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"路由句柄\"><a href=\"#路由句柄\" class=\"headerlink\" title=\"路由句柄\"></a>路由句柄</h2><p>可以为请求处理提供多个回调函数，其行为类似 中间件。唯一的区别是这些回调函数有可能调用 next(‘route’) 方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。</p>\n<p>路由句柄有多种形式，可以是一个函数、一个函数数组，或者是两者混合，如下所示.</p>\n<p>使用一个回调函数处理路由：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/example/a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from A!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用多个回调函数处理路由（记得指定 next 对象）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/example/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'response will be sent by the next function ...'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用回调函数数组处理路由：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/example/c'</span>, [cb0, cb1, cb2]);</div></pre></td></tr></table></figure></p>\n<p>混合使用函数和函数数组处理路由：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/example/d'</span>, [cb0, cb1], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'response will be sent by the next function ...'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from D!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"响应方法\"><a href=\"#响应方法\" class=\"headerlink\" title=\"响应方法\"></a>响应方法</h2><p>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。</p>\n<p>方法    描述<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.download()\t  <span class=\"comment\">#提示下载文件。</span></div><div class=\"line\">res.end()\t      <span class=\"comment\">#终结响应处理流程。</span></div><div class=\"line\">res.json()\t      <span class=\"comment\">#发送一个 JSON 格式的响应。</span></div><div class=\"line\">res.jsonp()\t      <span class=\"comment\">#发送一个支持 JSONP 的 JSON 格式的响应。</span></div><div class=\"line\">res.redirect()\t  <span class=\"comment\">#重定向请求。</span></div><div class=\"line\">res.render()\t  <span class=\"comment\">#渲染视图模板。</span></div><div class=\"line\">res.send()\t      <span class=\"comment\">#发送各种类型的响应。</span></div><div class=\"line\">res.sendFile\t  <span class=\"comment\">#以八位字节流的形式发送文件。</span></div><div class=\"line\">res.sendStatus()  <span class=\"comment\">#设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"app-route\"><a href=\"#app-route\" class=\"headerlink\" title=\"app.route()\"></a>app.route()</h2><p>可使用 app.route() 创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化的路由，而且减少了代码冗余和拼写错误。请参考 Router() 文档 了解更多有关路由的信息。</p>\n<p>下面这个示例程序使用 app.route() 定义了链式路由句柄。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.route(<span class=\"string\">'/book'</span>)</div><div class=\"line\">  .get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Get a random book'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .post(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Add a book'</span>);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .put(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Update the book'</span>);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"express-Router\"><a href=\"#express-Router\" class=\"headerlink\" title=\"express.Router\"></a>express.Router</h2><p>可使用 express.Router 类创建模块化、可挂载的路由句柄。Router 实例是一个完整的中间件和路由系统，因此常称其为一个 “mini-app”。</p>\n<p>下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。</p>\n<p>在 app 目录下创建名为 birds.js 的文件，内容如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeLog</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time: '</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure></p>\n<p>然后在应用中加载路由模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> birds = <span class=\"built_in\">require</span>(<span class=\"string\">'./birds'</span>);</div><div class=\"line\">app.use(<span class=\"string\">'/birds'</span>, birds);</div></pre></td></tr></table></figure></p>\n<p>应用即可处理发自 /birds 和 /birds/about 的请求，并且调用为该路由指定的 timeLog 中间件。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481161008856,
				"created_by": 2,
				"updated_at": 1481183273591,
				"updated_by": 2,
				"published_at": 1481161008856,
				"published_by": 2
			},
			{
				"id": "ciwg0zxub000cq0fchsdstdk1",
				"title": "Git问题Everything up-to-date解决",
				"slug": "git-everything-up-to-data",
				"markdown": "\n今天提交代码的时候遇到了一个小问题，这里解决了记下小记。\n\n提交代码遇到『Everything up-to-date』\n\n出现这个问题的原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。\n<!--more-->\n这里有种特殊的情况是如果你是fork别人的仓库再clone到本地的话，即使git上只有一个主分支，他还是可能出现这个错误。那么我们就需要新建分支提交改动然后合并分支。\n\n接下来先创建一个新分支提交改动\n```bash\n$ git branch newbranch\n```\n然后输入这条命令检查是否创建成功\n```bash\n$ git branch\n```\n这时终端输出\n```bash\n  newbranch\n* master\n```\n这样就创建成功了，前面的*代表的是当前你所在的工作分支。我们接下来就要切换工作分支。\n```bash\n$ git checkout newbranch\n```\n这样就切换完了，可以 $ git branch 确认下。然后你要将你的改动提交到新的分支上。\n```bash\n$ git add .\n$ git commit -a\n```\n此时可以 $ git status 检查下提交情况。如果提交成功，我们接下来就要回主分支了，代码和之前一样。\n```bash\n$ git checkout master\n```\n然后我们要将新分支提交的改动合并到主分支上\n```bash\n$ git merge newbranch\n```\n合并分支可能产生冲突这是正常的，虽然我们这是新建的分支不会产生冲突，但还是在这里记录下。下面的代码可以查看产生冲突的文件，然后做对应的修改再提交一次就可以了。\n```bash\n$ git diff\n```\n我们的问题就解决了，接下来就可以push代码了。\n```bash\n$ git push -u origin master\n```\n删除新建的这个分支\n```bash\n$ git branch -D newbranch\n```\n如果想保留分支只是想删除已经合并的部分只要把大写的D改成小写的d就行了。",
				"html": "<p>今天提交代码的时候遇到了一个小问题，这里解决了记下小记。</p>\n<p>提交代码遇到『Everything up-to-date』</p>\n<p>出现这个问题的原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。<br><a id=\"more\"></a><br>这里有种特殊的情况是如果你是fork别人的仓库再clone到本地的话，即使git上只有一个主分支，他还是可能出现这个错误。那么我们就需要新建分支提交改动然后合并分支。</p>\n<p>接下来先创建一个新分支提交改动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch newbranch</div></pre></td></tr></table></figure></p>\n<p>然后输入这条命令检查是否创建成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>这时终端输出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  newbranch</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>这样就创建成功了，前面的*代表的是当前你所在的工作分支。我们接下来就要切换工作分支。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout newbranch</div></pre></td></tr></table></figure></p>\n<p>这样就切换完了，可以 $ git branch 确认下。然后你要将你的改动提交到新的分支上。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>此时可以 $ git status 检查下提交情况。如果提交成功，我们接下来就要回主分支了，代码和之前一样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure></p>\n<p>然后我们要将新分支提交的改动合并到主分支上<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge newbranch</div></pre></td></tr></table></figure></p>\n<p>合并分支可能产生冲突这是正常的，虽然我们这是新建的分支不会产生冲突，但还是在这里记录下。下面的代码可以查看产生冲突的文件，然后做对应的修改再提交一次就可以了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure></p>\n<p>我们的问题就解决了，接下来就可以push代码了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push -u origin master</div></pre></td></tr></table></figure></p>\n<p>删除新建的这个分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -D newbranch</div></pre></td></tr></table></figure></p>\n<p>如果想保留分支只是想删除已经合并的部分只要把大写的D改成小写的d就行了。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481120503112,
				"created_by": 2,
				"updated_at": 1481183284685,
				"updated_by": 2,
				"published_at": 1481120503112,
				"published_by": 2
			},
			{
				"id": "ciwg0zxyc0018q0fcip5w3aml",
				"title": "Webpack配置模块详解",
				"slug": "webpack-module",
				"markdown": "\n# 开始使用webpack\n\n首先新建一个webpack101的项目，我们将在webpack101这里开展我们接下来的各项学习。\n<!--more-->\n```bash\n$ npm init // 用于初始化项目的package.json\n```\n//初始化文件目录：\n```bash\nwebpack101\n     src\n         entry.js\n         module1.js\n     index.html\n     package.json\n     webpack.config.js\n```\n\n# 安装webpack\n\n我们通过npm来将webpack安装到全局\n```bash\n$ npm install webpack -g\n```\n# webpack配置\n\nwebpack是需要进行配置的，我们在使用webpack的时候，会默认webpack.config.js为我们的配置文件。所以接下来，我们新建这个js文件。\n```js\n// webpack.config.js\nvar path = require(\"path\");\n\nmodule.exports = {\n    entry: '../src/entry.js', //演示单入口文件\n    output: {\n        path: path.join(__dirname, 'out'),  //打包输出的路径\n        filename: 'bundle.js',              //打包后的名字\n        publicPath: \"./out/\"                //html引用路径，在这里是本地地址。\n    }\n};\n```\n\n## 编写入口文件\n接下来就编写我们的入口文件entry.js和第一个模块文件module1.js。我们一切从简，里面只用来加载一个Js模块\n```js\n// entry.js\nrequire(\"./module1\"); // 使用CommonJs来加载模块\n下一个文件\n```\n```js\n// module1.js\nconsole.log(\"Hello Webpack!\");\n```\n## 启动webpack\n一切准备好后，我们仅需要在项目根目录下，用命令行webpack执行一下即可\n```bash\n#webpack 命令行的几种基本命令\n\n$ webpack    #最基本的启动webpack方法\n$ webpack -w #提供watch方法，实时进行打包更新\n$ webpack -p #对打包后的文件进行压缩，提供production\n$ webpack -d #提供source map，方便调试。\n```\nwebpack成功运行后，我们就可以看到根目录出现了out文件夹，里面有我们打包生成的bundle.js。我们最后通过在index.html里对这个文件引入就可以了。我们可以在控制台看到我们想要的结果，Hello Webpack !\n\n## 多模块依赖\n刚才的例子，我们仅仅是跑通了webpack通过entry.js入口文件进行打包的例子。下面我们就来看一下它是否真的支持CommonJs和AMD两种模块机制呢？下面我们新建多几个js文件吧！\n```js\n// 修改module1.js\nrequire([\"./module3\"], function(){\n    console.log(\"Hello Webpack!\");\n});\n```\n下一个文件\n```js\n// module2.js，使用的是CommonJs机制导出包\nmodule.exports = function(a, b){\n    return a + b;\n}\n```\n下一个文件\n```js\n// module3.js，使用AMD模块机制\ndefine(['./module2.js'], function(sum){\n    return console.log(\"1 + 2 = \" + sum(1, 2));\n})\n```\n其实像上面这样混用两种不同机制非常不好，这里仅仅是展示用的，在开发新项目时还是推荐CommonJs或ES2015的Module。当然我个人更倾向于ES2015的模块机制的～\n\n# loader加载器\n\n到了我最喜欢也是最激动人心的功能了！我们先想想应用场景，前端社区有许多预处理器供我们使用。我们可以使用这些预处理器做一些强大的事情，大家都听过的就是CoffeeScript和Sass了。我们以前要编译这些预处理器，就是用gulp进行编译。但是我们对这些文件处理其实也挺繁琐的，webpack可以一次性解决！\n\n在这里我们用Sass和babel编译ES2015为例子，看一下loader是如何使用的\n\n## 安装loader\n\n我们第一步就是先要安装好各个必须的loader，我们直接看看需要通过npm安装什么\n```bash\n$ npm install style-loader css-loader url-loader babel-loader sass-loader file-loader --save-dev\n```\n## 配置loader\n安装完各个loader后，我们就需要配置一下我们的webpack.config.js，载入我们的loader\n```js\n// webpack.config.js\nmodule.exports = {\n    entry: path.join(__dirname, 'src/entry.js'),\n    output: {\n        path: path.join(__dirname, 'out'),\n        publicPath: \"./out/\",\n        filename: 'bundle.js'\n    },\n    // 新添加的module属性\n    module: {\n        loaders: [\n            {test: /\\.js$/, loader: \"babel\"},\n            {test: /\\.css$/, loader: \"style!css\"},\n            {test: /\\.(jpgpng)$/, loader: \"url?limit=8192\"},\n            {test: /\\.scss$/, loader: \"style!css!sass\"}\n        ]\n    }\n};\n```\n我们主要看看module的loaders。loaders是一个数组，里面的每一个对象都用正则表达式，对应着一种配对方案。比如匹配到js后缀名就用babel-loader，匹配到scss后缀名的就先用sass，再用css，最后用style处理，不同的处理器通过!分隔并串联起来。这里的loader是可以省略掉-loader这样的，也就是原本应该写成style-loader!css-loader!sass-loader，当然我们必须惜字如金，所以都去掉后面的东东。\n\n我们仅仅是配置一下，已经是可以直接用ES2015和SASS去写我们的前端代码了。在此之前，我们对src文件夹里再细分成js，css，image三个文件夹，处理好分层。话不多说，赶紧试试。\n\n# 稍微复杂的webpack项目\n\n## bebel-loader\n```js\n// js/es6-module.js\nclass People{\n    constructor(name){\n        this.name = name;\n    }\n    sayhi(){\n        console.log(`hi ${this.name} !`);\n    }\n}\nexports.module = People;\n```\n写好模块后，我们直接在entry.js入口文件中引入该模块。\n\n```js\n// entry.js\n\n// javascript\nrequire('./js/module1');\nlet People = require('./js/es6-module');\nlet p = new People(\"Yika\");\np.sayHi();\n\n// css\nrequire('./css/main.scss');\n```\n哈，不能再爽！这下子我们可以使用很多优秀的ES6特性去构建大型的web了。\n\n## sass-loader\n大家或许注意到了下方的css的require，那就是用来加载Sass样式的。我们通过启动style-loader会将css代码转化到 style\n标签内，我们看一下里面的内容\n```css\n// css/main.scss\nhtml, body{\n    background: #dfdfdf;\n}\n```\n最后我们打开index.html观察我们所有的结果，首先背景已经是淡灰色的，并且控制台也有我们想要的内容。我们通过查看DOM结构，可以发现head标签里多出了style标签，里面正是我们想要定制的样式\n\n## 关于对图片的打包\n\n我们之前也说，webpack对与静态资源来说，也是看作模块来加载的。CSS我们是已经看过了，那图片是怎么作为模块打包加载进来呢？这里我们可以想到，图片我们是用url-loader加载的。我们在css文件里的url属性，其实就是一种封装处理过require操作。当然我们还有一种方式就是直接对元素的src属性进行require赋值\n\n```css\ndiv.img{\n    background: url(../image/xxx.jpg)\n}\n```\n```js\n//或者\nvar img = document.createElement(\"img\");\nimg.src = require(\"../image/xxx.jpg\");\ndocument.body.appendChild(img);\n```\n上述两种方法都会对符合要求的图片进行处理。而要求就是在url-loader后面通过query参数的方式实现的，这里就是说只有不大于8kb的图片才会打包处理成Base64的图片。关于query，请看文档：Query parameters\n```js\n{test: /\\.(jpgpng)$/, loader: \"url?limit=8192\"}\n```\n###打包成多个资源文件\n\n我们在开发多页面的站点的时候，还是需要希望能有多个资源文件的。这样我们就可以有效利用缓存提升性能，做到文件按需加载。如何写入口文件，这里就不再赘述了，我们直接看如何对webpack.config.js进行修改\n\n```js\n// webpack.config.js\n\nentry: {\n    page1: \"entry.js\",\n    page2: \"entry2.js\"\n},\noutput: {\n    path: path.join(__dirname, 'out'),\n    publicPath: \"./out/\",\n    filename: '[name].js'\n}\n```\n这里重点关注两个地方，entry属性可以是一个对象，而对象名也就是key会作为下面output的filename属性的[name]。当然entry也可以是一个数组，更多用法都可以去webpack的官方文档进行查看。\n\n当然webpack也考虑到公共模块的利用，我们利用插件就可以智能提取公共部分，以提供我们浏览器的缓存复用。我们只需要在webpack.config.js添加下面的代码即可\n\n```js\n// 修改添加，webpack.config.js\nvar webpack = require('webpack');\nmodule.exports = {\n    // ....省略各种代码\n        plugins: [\n            new webpack.optimize.CommonsChunkPlugin('common.js')\n        ]\n}\n```\n我们做个小测试，让第二个入口文件也加载我们之前的es6-module.js。然后我们用webpack进行打包，就发现生成的common.js里是有相应代码的。我们需要手动在html上去加载common.js，并且是必须要最先加载\n\n## 独立出css样式\n如果我们希望样式通过 link 引入，而不是放在 style 标签内呢，即使这样做会多一个请求。这个时候我们就要配合插件一起使用啦，我们一起来看看\n```bash\n$ npm install extract-text-webpack-plugin --save-dev\n```\n安装完插件就要配置webpack.config.js了。我们添加以下代码\n\n```js\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nmodule.exports = {\n    // ...省略各种代码\n    module: {\n        loaders: [\n            {test: /\\.js$/, loader: \"babel\"},\n            {test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")},\n            {test: /\\.(jpgpngsvg)$/, loader: \"url?limit=8192\"},\n            {test: /\\.scss$/, loader: \"style!css!sass\"}\n        ]\n    },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin('common.js'),\n        new ExtractTextPlugin(\"[name].css\")\n    ]\n}\n```",
				"html": "<h1 id=\"开始使用webpack\"><a href=\"#开始使用webpack\" class=\"headerlink\" title=\"开始使用webpack\"></a>开始使用webpack</h1><p>首先新建一个webpack101的项目，我们将在webpack101这里开展我们接下来的各项学习。<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm init // 用于初始化项目的package.json</div></pre></td></tr></table></figure></p>\n<p>//初始化文件目录：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack101</div><div class=\"line\">     src</div><div class=\"line\">         entry.js</div><div class=\"line\">         module1.js</div><div class=\"line\">     index.html</div><div class=\"line\">     package.json</div><div class=\"line\">     webpack.config.js</div></pre></td></tr></table></figure></p>\n<h1 id=\"安装webpack\"><a href=\"#安装webpack\" class=\"headerlink\" title=\"安装webpack\"></a>安装webpack</h1><p>我们通过npm来将webpack安装到全局<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack -g</div></pre></td></tr></table></figure></p>\n<h1 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h1><p>webpack是需要进行配置的，我们在使用webpack的时候，会默认webpack.config.js为我们的配置文件。所以接下来，我们新建这个js文件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">'../src/entry.js'</span>, <span class=\"comment\">//演示单入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">'out'</span>),  <span class=\"comment\">//打包输出的路径</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span>,              <span class=\"comment\">//打包后的名字</span></div><div class=\"line\">        publicPath: <span class=\"string\">\"./out/\"</span>                <span class=\"comment\">//html引用路径，在这里是本地地址。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"编写入口文件\"><a href=\"#编写入口文件\" class=\"headerlink\" title=\"编写入口文件\"></a>编写入口文件</h2><p>接下来就编写我们的入口文件entry.js和第一个模块文件module1.js。我们一切从简，里面只用来加载一个Js模块<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// entry.js</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./module1\"</span>); <span class=\"comment\">// 使用CommonJs来加载模块</span></div><div class=\"line\">下一个文件</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module1.js</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello Webpack!\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"启动webpack\"><a href=\"#启动webpack\" class=\"headerlink\" title=\"启动webpack\"></a>启动webpack</h2><p>一切准备好后，我们仅需要在项目根目录下，用命令行webpack执行一下即可<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#webpack 命令行的几种基本命令</span></div><div class=\"line\"></div><div class=\"line\">$ webpack    <span class=\"comment\">#最基本的启动webpack方法</span></div><div class=\"line\">$ webpack -w <span class=\"comment\">#提供watch方法，实时进行打包更新</span></div><div class=\"line\">$ webpack -p <span class=\"comment\">#对打包后的文件进行压缩，提供production</span></div><div class=\"line\">$ webpack <span class=\"_\">-d</span> <span class=\"comment\">#提供source map，方便调试。</span></div></pre></td></tr></table></figure></p>\n<p>webpack成功运行后，我们就可以看到根目录出现了out文件夹，里面有我们打包生成的bundle.js。我们最后通过在index.html里对这个文件引入就可以了。我们可以在控制台看到我们想要的结果，Hello Webpack !</p>\n<h2 id=\"多模块依赖\"><a href=\"#多模块依赖\" class=\"headerlink\" title=\"多模块依赖\"></a>多模块依赖</h2><p>刚才的例子，我们仅仅是跑通了webpack通过entry.js入口文件进行打包的例子。下面我们就来看一下它是否真的支持CommonJs和AMD两种模块机制呢？下面我们新建多几个js文件吧！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 修改module1.js</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"./module3\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello Webpack!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>下一个文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module2.js，使用的是CommonJs机制导出包</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一个文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// module3.js，使用AMD模块机制</span></div><div class=\"line\">define([<span class=\"string\">'./module2.js'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 + 2 = \"</span> + sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其实像上面这样混用两种不同机制非常不好，这里仅仅是展示用的，在开发新项目时还是推荐CommonJs或ES2015的Module。当然我个人更倾向于ES2015的模块机制的～</p>\n<h1 id=\"loader加载器\"><a href=\"#loader加载器\" class=\"headerlink\" title=\"loader加载器\"></a>loader加载器</h1><p>到了我最喜欢也是最激动人心的功能了！我们先想想应用场景，前端社区有许多预处理器供我们使用。我们可以使用这些预处理器做一些强大的事情，大家都听过的就是CoffeeScript和Sass了。我们以前要编译这些预处理器，就是用gulp进行编译。但是我们对这些文件处理其实也挺繁琐的，webpack可以一次性解决！</p>\n<p>在这里我们用Sass和babel编译ES2015为例子，看一下loader是如何使用的</p>\n<h2 id=\"安装loader\"><a href=\"#安装loader\" class=\"headerlink\" title=\"安装loader\"></a>安装loader</h2><p>我们第一步就是先要安装好各个必须的loader，我们直接看看需要通过npm安装什么<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install style-loader css-loader url-loader babel-loader sass-loader file-loader --save-dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置loader\"><a href=\"#配置loader\" class=\"headerlink\" title=\"配置loader\"></a>配置loader</h2><p>安装完各个loader后，我们就需要配置一下我们的webpack.config.js，载入我们的loader<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: path.join(__dirname, <span class=\"string\">'src/entry.js'</span>),</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">'out'</span>),</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">\"./out/\"</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 新添加的module属性</span></div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"babel\"</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style!css\"</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(jpgpng)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"url?limit=8192\"</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style!css!sass\"</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们主要看看module的loaders。loaders是一个数组，里面的每一个对象都用正则表达式，对应着一种配对方案。比如匹配到js后缀名就用babel-loader，匹配到scss后缀名的就先用sass，再用css，最后用style处理，不同的处理器通过!分隔并串联起来。这里的loader是可以省略掉-loader这样的，也就是原本应该写成style-loader!css-loader!sass-loader，当然我们必须惜字如金，所以都去掉后面的东东。</p>\n<p>我们仅仅是配置一下，已经是可以直接用ES2015和SASS去写我们的前端代码了。在此之前，我们对src文件夹里再细分成js，css，image三个文件夹，处理好分层。话不多说，赶紧试试。</p>\n<h1 id=\"稍微复杂的webpack项目\"><a href=\"#稍微复杂的webpack项目\" class=\"headerlink\" title=\"稍微复杂的webpack项目\"></a>稍微复杂的webpack项目</h1><h2 id=\"bebel-loader\"><a href=\"#bebel-loader\" class=\"headerlink\" title=\"bebel-loader\"></a>bebel-loader</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js/es6-module.js</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    sayhi()&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`hi <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> !`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">exports.module = People;</div></pre></td></tr></table></figure>\n<p>写好模块后，我们直接在entry.js入口文件中引入该模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// entry.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./js/module1'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> People = <span class=\"built_in\">require</span>(<span class=\"string\">'./js/es6-module'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> People(<span class=\"string\">\"Yika\"</span>);</div><div class=\"line\">p.sayHi();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// css</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./css/main.scss'</span>);</div></pre></td></tr></table></figure>\n<p>哈，不能再爽！这下子我们可以使用很多优秀的ES6特性去构建大型的web了。</p>\n<h2 id=\"sass-loader\"><a href=\"#sass-loader\" class=\"headerlink\" title=\"sass-loader\"></a>sass-loader</h2><p>大家或许注意到了下方的css的require，那就是用来加载Sass样式的。我们通过启动style-loader会将css代码转化到 style<br>标签内，我们看一下里面的内容<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// css/main.scss</div><div class=\"line\">html, body&#123;</div><div class=\"line\">    background: #dfdfdf;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后我们打开index.html观察我们所有的结果，首先背景已经是淡灰色的，并且控制台也有我们想要的内容。我们通过查看DOM结构，可以发现head标签里多出了style标签，里面正是我们想要定制的样式</p>\n<h2 id=\"关于对图片的打包\"><a href=\"#关于对图片的打包\" class=\"headerlink\" title=\"关于对图片的打包\"></a>关于对图片的打包</h2><p>我们之前也说，webpack对与静态资源来说，也是看作模块来加载的。CSS我们是已经看过了，那图片是怎么作为模块打包加载进来呢？这里我们可以想到，图片我们是用url-loader加载的。我们在css文件里的url属性，其实就是一种封装处理过require操作。当然我们还有一种方式就是直接对元素的src属性进行require赋值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.img</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(../image/xxx.jpg)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">img.src = <span class=\"built_in\">require</span>(<span class=\"string\">\"../image/xxx.jpg\"</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(img);</div></pre></td></tr></table></figure>\n<p>上述两种方法都会对符合要求的图片进行处理。而要求就是在url-loader后面通过query参数的方式实现的，这里就是说只有不大于8kb的图片才会打包处理成Base64的图片。关于query，请看文档：Query parameters<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(jpgpng)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"url?limit=8192\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>###打包成多个资源文件</p>\n<p>我们在开发多页面的站点的时候，还是需要希望能有多个资源文件的。这样我们就可以有效利用缓存提升性能，做到文件按需加载。如何写入口文件，这里就不再赘述了，我们直接看如何对webpack.config.js进行修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"></div><div class=\"line\">entry: &#123;</div><div class=\"line\">    <span class=\"attr\">page1</span>: <span class=\"string\">\"entry.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">page2</span>: <span class=\"string\">\"entry2.js\"</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: path.join(__dirname, <span class=\"string\">'out'</span>),</div><div class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">\"./out/\"</span>,</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里重点关注两个地方，entry属性可以是一个对象，而对象名也就是key会作为下面output的filename属性的[name]。当然entry也可以是一个数组，更多用法都可以去webpack的官方文档进行查看。</p>\n<p>当然webpack也考虑到公共模块的利用，我们利用插件就可以智能提取公共部分，以提供我们浏览器的缓存复用。我们只需要在webpack.config.js添加下面的代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 修改添加，webpack.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"comment\">// ....省略各种代码</span></div><div class=\"line\">        plugins: [</div><div class=\"line\">            <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>)</div><div class=\"line\">        ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们做个小测试，让第二个入口文件也加载我们之前的es6-module.js。然后我们用webpack进行打包，就发现生成的common.js里是有相应代码的。我们需要手动在html上去加载common.js，并且是必须要最先加载</p>\n<h2 id=\"独立出css样式\"><a href=\"#独立出css样式\" class=\"headerlink\" title=\"独立出css样式\"></a>独立出css样式</h2><p>如果我们希望样式通过 link 引入，而不是放在 style 标签内呢，即使这样做会多一个请求。这个时候我们就要配合插件一起使用啦，我们一起来看看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install extract-text-webpack-plugin --save-dev</div></pre></td></tr></table></figure></p>\n<p>安装完插件就要配置webpack.config.js了。我们添加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...省略各种代码</span></div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"babel\"</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>)&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(jpgpngsvg)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"url?limit=8192\"</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style!css!sass\"</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name].css\"</span>)</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481119223787,
				"created_by": 2,
				"updated_at": 1482218410816,
				"updated_by": 2,
				"published_at": 1481119223787,
				"published_by": 2
			},
			{
				"id": "ciwg0zxyi0019q0fcaduv3bxp",
				"title": "Webpack与react",
				"slug": "webpack-react",
				"markdown": "\n# webpack特性\n\nwebpack具有requireJs和browserify的功能，但仍有很多自己的新特性：\n```bash\n1. 对 CommonJS 、 AMD 、ES6的语法做了兼容\n2. 对js、css、图片等资源文件都支持打包\n3. 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持\n4. 有独立的配置文件webpack.config.js\n5. 可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间\n6. 支持 SourceUrls 和 SourceMaps，易于调试\n7. 具有强大的Plugin接口，大多是内部插件，使用起来比较灵活\n8.webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快\n\n```\n<!--more-->\n# React-sample\n\n以 react-sample 为例，简单说明 webpack 如何打包一个 React 组件，其目录结构如下：\n\n\n\n其中Hello.js定义了一个简单的React组件，使用ES6语法：\n```js\n/**\n * Created by pomy on 15/11/4.\n */\n\nimport React, {Component} from 'react';\n\nclass Hello extends Component {\n    render(){\n        return (\n            <div>Hello, {this.props.name}!</div>\n        );\n    }\n}\n```\nentry.js是入口文件，将一个Hello组件输出到界面：\n```js\n/**\n * Created by pomy on 15/11/4.\n */\n\nimport React from 'react';\nimport Hello from './hello';\n\nReact.render(<Hello name=\"Nate\" />, document.body);\n```\nindex.html的内容如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>React Sample</title>\n</head>\n<body>\n<script src=\"./assets/bundle.js\"></script>\n</body>\n</html>\n```\nwebpack.config.js文件通常放在项目的根目录中，它本身也是一个标准的Commonjs规范的模块：\n```js\n/**\n * Created by pomy on 15/11/4.\n */\n\nvar path = require('path');\n\nmodule.exports = {\n    entry: path.resolve(__dirname, './src/entry.js'),\n    output: {\n        path: path.resolve(__dirname, './assets'),\n        filename: 'bundle.js'\n    },\n\n    module: {\n        loaders: [\n            { test: /\\.js?$/, loaders: ['babel'], exclude: /node_modules/ },\n            { test: /\\.js$/, loader: 'babel-loader', exclude: /node_modules/}\n        ]\n    },\n\n    resolve:{\n        extensions:['','.js','.json']\n    },\n};\n```\n整个代码在 这里，clone之后，切换到react-sample目录下，在终端运行 npm i && npm run build 进行打包，打包后的文件名是 bundle.js， 所在相对目录是 /assets。至此，webpack打包过程就Ok了。\n\n# Webpack安装和配置\n\n## 安装\n\nwebpack 可以作为全局的npm模块安装，也可以在当前项目中安装。\n```bash\nnpm install -g webpack\nnpm install --save-dev webpack\n```\n对于全局安装的webpack，直接执行此命令会默认使用当前目录的webpack.config.js作为配置文件。如果要指定另外的配置文件，可以执行：\n```bash\nwebpack —config webpack.custom.config.js\n```\n## 配置\n\n每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。\n\n前文说了，webpack.config.js文件通常放在项目的根目录中，它本身也是一个标准的Commonjs规范的模块。在导出的配置对象中有几个关键的参数：\n\n## entry\n\nentry参数定义了打包后的入口文件，可以是个字符串或数组或者是对象；如果是数组，数组中的所有文件会打包生成一个filename文件；如果是对象，可以将不同的文件构建成不同的文件:\n```js\n{\n    entry: {\n        page1: \"./page1\",\n\n        //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出\n        page2: [\"./entry1\", \"./entry2\"]\n    },\n    output: {\n        path: \"dist/js/page\",\n        publicPath: \"/output/\",\n        filename: \"[name].bundle.js\"\n    }\n}\n```\n该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下\n\n## output\n\noutput参数是个对象，定义了输出文件的位置及名字：\n```js\noutput: {\n        path: \"dist/js/page\",\n        publicPath: \"/output/\",\n        filename: \"[name].bundle.js\"\n    }\n```\n```bash\npath: 打包文件存放的绝对路径\npublicPath: 网站运行时的访问路径\nfilename:打包后的文件名\n```\n当我们在entry中定义构建多个文件时，filename可以对应的更改为[name].js用于定义不同文件构建后的名字。\n\n## module\n\n在webpack中JavaScript，CSS，LESS，TypeScript，JSX，CoffeeScript，图片等静态文件都是模块，不同模块的加载是通过模块加载器（webpack-loader）来统一管理的。loaders之间是可以串联的，一个加载器的输出可以作为下一个加载器的输入，最终返回到JavaScript上：\n```js\nmodule: {\n        //加载器配置\n        loaders: [\n            //.css 文件使用 style-loader 和 css-loader 来处理\n            { test: /\\.css$/, loader: 'style-loader!css-loader' },\n\n            //.js 文件使用 jsx-loader 来编译处理\n            { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n\n            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理\n            { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n\n            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n            { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n        ]\n    }\n```\ntest项表示匹配的资源类型，loader或loaders项表示用来加载这种类型的资源的loader，loader的使用可以参考 using loaders，更多的loader可以参考 list of loaders。\n\n！用来定义loader的串联关系，\"-loader\"是可以省略不写的，多个loader之间用“!”连接起来，但所有的加载器都需要通过 npm 来加载。\n\n此外，还可以添加用来定义png、jpg这样的图片资源在小于10k时自动处理为base64图片的加载器：\n```js\n{ test: /\\.(png|jpg)$/,loader: 'url-loader?limit=10000'}\n```\n给css和less还有图片添加了loader之后，我们不仅可以像在node中那样require js文件了，我们还可以require css、less甚至图片文件：\n```js\n require('./bootstrap.css');\n require('./myapp.less');\n var img = document.createElement('img');\n img.src = require('./glyph.png');\n```\n注意，require()还支持在资源path前面指定loader，即require(![loaders list]![source path])形式：\n```js\nrequire(\"!style!css!less!bootstrap/less/bootstrap.less\");\n// “bootstrap.less”这个资源会先被\"less-loader\"处理，\n// 其结果又会被\"css-loader\"处理，接着是\"style-loader\"\n// 可类比pipe操作\n```\nrequire()时指定的loader会覆盖配置文件里对应的loader配置项。\n\n## resolve\n\nwebpack在构建包的时候会按目录的进行文件的查找，resolve属性中的extensions数组中用于配置程序可以自行补全哪些文件后缀：\n```js\n resolve: {\n        //查找module的话从这里开始查找\n        root: '/pomy/github/flux-example/src', //绝对路径\n\n        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n        extensions: ['', '.js', '.json', '.scss'],\n\n        //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n        alias: {\n            AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n            ActionType : 'js/actions/ActionType.js',\n            AppAction : 'js/actions/AppAction.js'\n        }\n    }\n```\n然后我们想要加载一个js文件时，只要require('common')就可以加载common.js文件了。\n\n注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.\n\n## plugin\n\nwebpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：\n```js\nplugins: [\n     //your plugins list\n ]\n```\n在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。\n```js\nnpm install extract-text-webpack-plugin –save-dev\n```\n```js\nplugins: [\n    new ExtractTextPlugin('styles.css')\n]\n```\n## externals\n\n当我们想在项目中require一些其他的类库或者API，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。此时我们就可以通过配置externals参数来解决这个问题：\n```js\n externals: {\n     \"jquery\": \"jQuery\"\n }\n```\n这样我们就可以放心的在项目中使用这些API了：var jQuery = require(\"jquery\");\n\n## context\n\n当我们在require一个模块的时候，如果在require中包含变量，像这样：\n```js\nrequire(\"./mods/\" + name + \".js\");\n```\n那么在编译的时候我们是不能知道具体的模块的。但这个时候，webpack也会为我们做些分析工作：\n```bash\n1.分析目录：'./mods'；\n2.提取正则表达式：'/^.*\\.js$/'；\n```\n于是这个时候为了更好地配合wenpack进行编译，我们可以给它指明路径，像在cake-webpack-config中所做的那样（我们在这里先忽略abcoption的作用）：\n```js\n var currentBase = process.cwd();\n var context = abcOptions.options.context ? abcOptions.options.context :\n path.isAbsolute(entryDir) ? entryDir : path.join(currentBase, entryDir);\n```\n关于 webpack.config.js 更详尽的配置可以参考这里\n\n# webpack常用命令\n\n## webpack的使用通常有三种方式：\n\n1、命令行使用：webpack <entry.js> <result.js> 其中entry.js是入口文件，result.js是打包后的输出文件\n2、node.js API使用：\n```js\nvar webpack = require('webpack');\nwebpack({\n//configuration\n}, function(err, stats){});\n```\n3、默认使用当前目录的webpack.config.js作为配置文件。如果要指定另外的配置文件，可以执行：\n```js\nwebpack --config webpack.custom.config.js\n```\nwebpack 的执行也很简单，直接执行\n```js\n$ webpack --display-error-details\n```\n即可，后面的参数“--display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。\n常用命令\nwebpack的使用和browserify有些类似，下面列举几个常用命令：\n```bash\nwebpack    #最基本的启动webpack命令\nwebpack -w #提供watch方法，实时进行打包更新\nwebpack -p #对打包后的文件进行压缩\nwebpack -d #提供SourceMaps，方便调试\nwebpack --colors #输出结果带彩色，比如：会用红色显示耗时较长的步骤\nwebpack --profile #输出性能数据，可以看到每一步的耗时\nwebpack --display-modules #默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块\n```\n前面的四个命令比较基础，使用频率会比较大，后面的命令主要是用来定位打包时间较长的原因，方便改进配置文件，提高打包效率。\n\n图片打包和静态资源服务器\n--\n## 图片打包\n\nwebpack中对于图片的处理，可以通过url-loader来实现图片的压缩。\n```css\ndiv.img{\n    background: url(../image/xxx.jpg)\n}\n```\n```js\n//或者\nvar img = document.createElement(\"img\");\nimg.src = require(\"../image/xxx.jpg\");\ndocument.body.appendChild(img);\n```\n针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。\n```js\nmodule: {\n    {\n      test: /\\.(png|jpg)$/,\n      loader: 'url-loader?limit=10000&name=build/[name].[ext]'\n    }]\n}\n```\n对于上面的配置，如果图片资源小于10kb就会转化成 base64 格式的 dataUrl，其他的图片会存放在build/文件夹下。\n\n## 静态资源服务器\n\n除了提供模块打包功能，Webpack还提供了一个基于Node.js Express框架的开发服务器，它是一个静态资源Web服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。\n\nWebpack开发服务器需要单独安装，同样是通过npm进行：\n```js\nnpm install -g webpack-dev-server\n```\n可以使用webpack-dev-server直接启动，也可以增加参数来获取更多的功能，具体配置可以参见官方文档。默认启动端口8080，通过localhost:8080/webpack-dev-server/可以访问页面，文件修改后保存时会在页面头部看到sever的状态变化，并且会进行热替换，实现页面的自动刷新。",
				"html": "<h1 id=\"webpack特性\"><a href=\"#webpack特性\" class=\"headerlink\" title=\"webpack特性\"></a>webpack特性</h1><p>webpack具有requireJs和browserify的功能，但仍有很多自己的新特性：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 对 CommonJS 、 AMD 、ES6的语法做了兼容</div><div class=\"line\">2. 对js、css、图片等资源文件都支持打包</div><div class=\"line\">3. 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持</div><div class=\"line\">4. 有独立的配置文件webpack.config.js</div><div class=\"line\">5. 可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间</div><div class=\"line\">6. 支持 SourceUrls 和 SourceMaps，易于调试</div><div class=\"line\">7. 具有强大的Plugin接口，大多是内部插件，使用起来比较灵活</div><div class=\"line\">8.webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"React-sample\"><a href=\"#React-sample\" class=\"headerlink\" title=\"React-sample\"></a>React-sample</h1><p>以 react-sample 为例，简单说明 webpack 如何打包一个 React 组件，其目录结构如下：</p>\n<p>其中Hello.js定义了一个简单的React组件，使用ES6语法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by pomy on 15/11/4.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;div&gt;Hello, &#123;this.props.name&#125;!&lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>entry.js是入口文件，将一个Hello组件输出到界面：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by pomy on 15/11/4.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./hello'</span>;</div><div class=\"line\"></div><div class=\"line\">React.render(&lt;Hello name=\"Nate\" /&gt;, document.body);</div></pre></td></tr></table></figure></p>\n<p>index.html的内容如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React Sample<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webpack.config.js文件通常放在项目的根目录中，它本身也是一个标准的Commonjs规范的模块：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by pomy on 15/11/4.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: path.resolve(__dirname, <span class=\"string\">'./src/entry.js'</span>),</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'./assets'</span>),</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js?$/</span>, <span class=\"attr\">loaders</span>: [<span class=\"string\">'babel'</span>], <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">resolve</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">extensions</span>:[<span class=\"string\">''</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>整个代码在 这里，clone之后，切换到react-sample目录下，在终端运行 npm i &amp;&amp; npm run build 进行打包，打包后的文件名是 bundle.js， 所在相对目录是 /assets。至此，webpack打包过程就Ok了。</p>\n<h1 id=\"Webpack安装和配置\"><a href=\"#Webpack安装和配置\" class=\"headerlink\" title=\"Webpack安装和配置\"></a>Webpack安装和配置</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>webpack 可以作为全局的npm模块安装，也可以在当前项目中安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g webpack</div><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure></p>\n<p>对于全局安装的webpack，直接执行此命令会默认使用当前目录的webpack.config.js作为配置文件。如果要指定另外的配置文件，可以执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack —config webpack.custom.config.js</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。</p>\n<p>前文说了，webpack.config.js文件通常放在项目的根目录中，它本身也是一个标准的Commonjs规范的模块。在导出的配置对象中有几个关键的参数：</p>\n<h2 id=\"entry\"><a href=\"#entry\" class=\"headerlink\" title=\"entry\"></a>entry</h2><p>entry参数定义了打包后的入口文件，可以是个字符串或数组或者是对象；如果是数组，数组中的所有文件会打包生成一个filename文件；如果是对象，可以将不同的文件构建成不同的文件:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">page1</span>: <span class=\"string\">\"./page1\"</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出</span></div><div class=\"line\">        page2: [<span class=\"string\">\"./entry1\"</span>, <span class=\"string\">\"./entry2\"</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">\"dist/js/page\"</span>,</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">\"/output/\"</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">\"[name].bundle.js\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下</p>\n<h2 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a>output</h2><p>output参数是个对象，定义了输出文件的位置及名字：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">\"dist/js/page\"</span>,</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">\"/output/\"</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">\"[name].bundle.js\"</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path: 打包文件存放的绝对路径</div><div class=\"line\">publicPath: 网站运行时的访问路径</div><div class=\"line\">filename:打包后的文件名</div></pre></td></tr></table></figure>\n<p>当我们在entry中定义构建多个文件时，filename可以对应的更改为[name].js用于定义不同文件构建后的名字。</p>\n<h2 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h2><p>在webpack中JavaScript，CSS，LESS，TypeScript，JSX，CoffeeScript，图片等静态文件都是模块，不同模块的加载是通过模块加载器（webpack-loader）来统一管理的。loaders之间是可以串联的，一个加载器的输出可以作为下一个加载器的输入，最终返回到JavaScript上：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">        <span class=\"comment\">//加载器配置</span></div><div class=\"line\">        loaders: [</div><div class=\"line\">            <span class=\"comment\">//.css 文件使用 style-loader 和 css-loader 来处理</span></div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader!css-loader'</span> &#125;,</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//.js 文件使用 jsx-loader 来编译处理</span></div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'jsx-loader?harmony'</span> &#125;,</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</span></div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style!css!sass?sourceMap'</span>&#125;,</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span></div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=8192'</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>test项表示匹配的资源类型，loader或loaders项表示用来加载这种类型的资源的loader，loader的使用可以参考 using loaders，更多的loader可以参考 list of loaders。</p>\n<p>！用来定义loader的串联关系，”-loader”是可以省略不写的，多个loader之间用“!”连接起来，但所有的加载器都需要通过 npm 来加载。</p>\n<p>此外，还可以添加用来定义png、jpg这样的图片资源在小于10k时自动处理为base64图片的加载器：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg)$/</span>,<span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=10000'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>给css和less还有图片添加了loader之后，我们不仅可以像在node中那样require js文件了，我们还可以require css、less甚至图片文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./bootstrap.css'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./myapp.less'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">img.src = <span class=\"built_in\">require</span>(<span class=\"string\">'./glyph.png'</span>);</div></pre></td></tr></table></figure></p>\n<p>注意，require()还支持在资源path前面指定loader，即require(![loaders list]![source path])形式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"!style!css!less!bootstrap/less/bootstrap.less\"</span>);</div><div class=\"line\"><span class=\"comment\">// “bootstrap.less”这个资源会先被\"less-loader\"处理，</span></div><div class=\"line\"><span class=\"comment\">// 其结果又会被\"css-loader\"处理，接着是\"style-loader\"</span></div><div class=\"line\"><span class=\"comment\">// 可类比pipe操作</span></div></pre></td></tr></table></figure></p>\n<p>require()时指定的loader会覆盖配置文件里对应的loader配置项。</p>\n<h2 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a>resolve</h2><p>webpack在构建包的时候会按目录的进行文件的查找，resolve属性中的extensions数组中用于配置程序可以自行补全哪些文件后缀：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">       <span class=\"comment\">//查找module的话从这里开始查找</span></div><div class=\"line\">       root: <span class=\"string\">'/pomy/github/flux-example/src'</span>, <span class=\"comment\">//绝对路径</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></div><div class=\"line\">       extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.scss'</span>],</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></div><div class=\"line\">       alias: &#123;</div><div class=\"line\">           <span class=\"attr\">AppStore</span> : <span class=\"string\">'js/stores/AppStores.js'</span>,<span class=\"comment\">//后续直接 require('AppStore') 即可</span></div><div class=\"line\">           ActionType : <span class=\"string\">'js/actions/ActionType.js'</span>,</div><div class=\"line\">           <span class=\"attr\">AppAction</span> : <span class=\"string\">'js/actions/AppAction.js'</span></div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们想要加载一个js文件时，只要require(‘common’)就可以加载common.js文件了。</p>\n<p>注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</p>\n<h2 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h2><p>webpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">     <span class=\"comment\">//your plugins list</span></div><div class=\"line\"> ]</div></pre></td></tr></table></figure></p>\n<p>在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install extract-text-webpack-plugin –save-dev</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'styles.css'</span>)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h2><p>当我们想在项目中require一些其他的类库或者API，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。此时我们就可以通过配置externals参数来解决这个问题：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">externals: &#123;</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jQuery\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样我们就可以放心的在项目中使用这些API了：var jQuery = require(“jquery”);</p>\n<h2 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h2><p>当我们在require一个模块的时候，如果在require中包含变量，像这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./mods/\"</span> + name + <span class=\"string\">\".js\"</span>);</div></pre></td></tr></table></figure></p>\n<p>那么在编译的时候我们是不能知道具体的模块的。但这个时候，webpack也会为我们做些分析工作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.分析目录：<span class=\"string\">'./mods'</span>；</div><div class=\"line\">2.提取正则表达式：<span class=\"string\">'/^.*\\.js$/'</span>；</div></pre></td></tr></table></figure></p>\n<p>于是这个时候为了更好地配合wenpack进行编译，我们可以给它指明路径，像在cake-webpack-config中所做的那样（我们在这里先忽略abcoption的作用）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> currentBase = process.cwd();</div><div class=\"line\"><span class=\"keyword\">var</span> context = abcOptions.options.context ? abcOptions.options.context :</div><div class=\"line\">path.isAbsolute(entryDir) ? entryDir : path.join(currentBase, entryDir);</div></pre></td></tr></table></figure></p>\n<p>关于 webpack.config.js 更详尽的配置可以参考这里</p>\n<h1 id=\"webpack常用命令\"><a href=\"#webpack常用命令\" class=\"headerlink\" title=\"webpack常用命令\"></a>webpack常用命令</h1><h2 id=\"webpack的使用通常有三种方式：\"><a href=\"#webpack的使用通常有三种方式：\" class=\"headerlink\" title=\"webpack的使用通常有三种方式：\"></a>webpack的使用通常有三种方式：</h2><p>1、命令行使用：webpack <entry.js> <result.js> 其中entry.js是入口文件，result.js是打包后的输出文件<br>2、node.js API使用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\">webpack(&#123;</div><div class=\"line\"><span class=\"comment\">//configuration</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure></result.js></entry.js></p>\n<p>3、默认使用当前目录的webpack.config.js作为配置文件。如果要指定另外的配置文件，可以执行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --config webpack.custom.config.js</div></pre></td></tr></table></figure></p>\n<p>webpack 的执行也很简单，直接执行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack --display-error-details</div></pre></td></tr></table></figure></p>\n<p>即可，后面的参数“–display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。<br>常用命令<br>webpack的使用和browserify有些类似，下面列举几个常用命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack    <span class=\"comment\">#最基本的启动webpack命令</span></div><div class=\"line\">webpack -w <span class=\"comment\">#提供watch方法，实时进行打包更新</span></div><div class=\"line\">webpack -p <span class=\"comment\">#对打包后的文件进行压缩</span></div><div class=\"line\">webpack <span class=\"_\">-d</span> <span class=\"comment\">#提供SourceMaps，方便调试</span></div><div class=\"line\">webpack --colors <span class=\"comment\">#输出结果带彩色，比如：会用红色显示耗时较长的步骤</span></div><div class=\"line\">webpack --profile <span class=\"comment\">#输出性能数据，可以看到每一步的耗时</span></div><div class=\"line\">webpack --display-modules <span class=\"comment\">#默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</span></div></pre></td></tr></table></figure></p>\n<p>前面的四个命令比较基础，使用频率会比较大，后面的命令主要是用来定位打包时间较长的原因，方便改进配置文件，提高打包效率。</p>\n<h2 id=\"图片打包和静态资源服务器\"><a href=\"#图片打包和静态资源服务器\" class=\"headerlink\" title=\"图片打包和静态资源服务器\"></a>图片打包和静态资源服务器</h2><h2 id=\"图片打包\"><a href=\"#图片打包\" class=\"headerlink\" title=\"图片打包\"></a>图片打包</h2><p>webpack中对于图片的处理，可以通过url-loader来实现图片的压缩。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.img</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(../image/xxx.jpg)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">img.src = <span class=\"built_in\">require</span>(<span class=\"string\">\"../image/xxx.jpg\"</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(img);</div></pre></td></tr></table></figure>\n<p>针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</div><div class=\"line\">      <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=10000&amp;name=build/[name].[ext]'</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于上面的配置，如果图片资源小于10kb就会转化成 base64 格式的 dataUrl，其他的图片会存放在build/文件夹下。</p>\n<h2 id=\"静态资源服务器\"><a href=\"#静态资源服务器\" class=\"headerlink\" title=\"静态资源服务器\"></a>静态资源服务器</h2><p>除了提供模块打包功能，Webpack还提供了一个基于Node.js Express框架的开发服务器，它是一个静态资源Web服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。</p>\n<p>Webpack开发服务器需要单独安装，同样是通过npm进行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g webpack-dev-server</div></pre></td></tr></table></figure></p>\n<p>可以使用webpack-dev-server直接启动，也可以增加参数来获取更多的功能，具体配置可以参见官方文档。默认启动端口8080，通过localhost:8080/webpack-dev-server/可以访问页面，文件修改后保存时会在页面头部看到sever的状态变化，并且会进行热替换，实现页面的自动刷新。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481118726987,
				"created_by": 2,
				"updated_at": 1482218505301,
				"updated_by": 2,
				"published_at": 1481118726987,
				"published_by": 2
			},
			{
				"id": "ciwg0zy26001sq0fck31w7oe1",
				"title": "正则表达式",
				"slug": "zhengze",
				"markdown": "\n正则表达式基础\n<!--more-->\n```bash\n1.正则表达式基本语法\n\n\n两个特殊的符号'^'和'$'。他们的作用是分别指出一个字符串的开始和结束。例子如下：\n\n\"^The\"：表示所有以\"The\"开始的字符串（\"There\"，\"The cat\"等）；\n\"of despair$\"：表示所以以\"of despair\"结尾的字符串；\n\"^abc$\"：表示开始和结尾都是\"abc\"的字符串——呵呵，只有\"abc\"自己了；\n\"notice\"：表示任何包含\"notice\"的字符串。\n\n象最后那个例子，如果你不使用两个特殊字符，你就在表示要查找的串在被查找串的任意部分——你并\n不把它定位在某一个顶端。\n\n其它还有'*'，'+'和'?'这三个符号，表示一个或一序列字符重复出现的次数。它们分别表示“没有或\n更多”，“一次或更多”还有“没有或一次”。下面是几个例子：\n\n\"ab*\"：表示一个字符串有一个a后面跟着零个或若干个b。（\"a\", \"ab\", \"abbb\",……）；\n\"ab+\"：表示一个字符串有一个a后面跟着至少一个b或者更多；\n\"ab?\"：表示一个字符串有一个a后面跟着零个或者一个b；\n\"a?b+$\"：表示在字符串的末尾有零个或一个a跟着一个或几个b。\n\n你也可以使用范围，用大括号括起，用以表示重复次数的范围。\n\n\"ab{2}\"：表示一个字符串有一个a跟着2个b（\"abb\"）；\n\"ab{2,}\"：表示一个字符串有一个a跟着至少2个b；\n\"ab{3,5}\"：表示一个字符串有一个a跟着3到5个b。\n\n请注意，你必须指定范围的下限（如：\"{0,2}\"而不是\"{,2}\"）。还有，你可能注意到了，'*'，'+'和\n'?'相当于\"{0,}\"，\"{1,}\"和\"{0,1}\"。\n还有一个'¦'，表示“或”操作：\n\n\"hi¦hello\"：表示一个字符串里有\"hi\"或者\"hello\"；\n\"(b¦cd)ef\"：表示\"bef\"或\"cdef\"；\n\"(a¦b)*c\"：表示一串\"a\"\"b\"混合的字符串后面跟一个\"c\"；\n\n'.'可以替代任何字符：\n\n\"a.[0-9]\"：表示一个字符串有一个\"a\"后面跟着一个任意字符和一个数字；\n\"^.{3}$\"：表示有任意三个字符的字符串（长度为3个字符）；\n\n方括号表示某些字符允许在一个字符串中的某一特定位置出现：\n\n\"[ab]\"：表示一个字符串有一个\"a\"或\"b\"（相当于\"a¦b\"）；\n\"[a-d]\"：表示一个字符串包含小写的'a'到'd'中的一个（相当于\"a¦b¦c¦d\"或者\"[abcd]\"）；\n\"^[a-zA-Z]\"：表示一个以字母开头的字符串；\n\"[0-9]%\"：表示一个百分号前有一位的数字；\n\",[a-zA-Z0-9]$\"：表示一个字符串以一个逗号后面跟着一个字母或数字结束。\n\n你也可以在方括号里用'^'表示不希望出现的字符，'^'应在方括号里的第一位。（如：\"%[^a-zA-Z]%\"表\n示两个百分号中不应该出现字母）。\n\n为了逐字表达，你必须在\"^.$()¦*+?{\\\"这些字符前加上转移字符'\\'。\n请注意在方括号中，不需要转义字符。\n\n\n\n2.正则表达式验证控制文本框的输入字符类型\n1.只能输入数字和英文的：\n<input onkeyup=\"value=value.replace(/[\\W]/g,'') \" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))\" ID=\"Text1\" NAME=\"Text1\">\n\n2.只能输入数字的：\n<input onkeyup=\"value=value.replace(/[^\\d]/g,'') \" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))\" ID=\"Text2\" NAME=\"Text2\">\n\n3.只能输入全角的：\n<input onkeyup=\"value=value.replace(/[^\\uFF00-\\uFFFF]/g,'')\" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\uFF00-\\uFFFF]/g,''))\" ID=\"Text3\" NAME=\"Text3\">\n\n4.只能输入汉字的：\n<input onkeyup=\"value=value.replace(/[^\\u4E00-\\u9FA5]/g,'')\" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\u4E00-\\u9FA5]/g,''))\" ID=\"Text4\" NAME=\"Text4\">\n\n\n3.正则表达式的应用实例通俗说明\n\n*******************************************************************************\n\n//校验是否全由数字组成\n\n/^[0-9]{1,20}$/\n\n\n\n^ 表示打头的字符要匹配紧跟^后面的规则\n\n$ 表示打头的字符要匹配紧靠$前面的规则\n\n[ ] 中的内容是可选字符集\n\n[0-9] 表示要求字符范围在0-9之间\n\n{1,20}表示数字字符串长度合法为1到20，即为[0-9]中的字符出现次数的范围是1到20次。\n\n\n\n/^ 和 $/成对使用应该是表示要求整个字符串完全匹配定义的规则，而不是只匹配字符串中的一个子串。\n\n\n\n*******************************************************************************\n\n//校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串\n\n/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/\n\n\n\n^[a-zA-Z]{1} 表示第一个字符要求是字母。\n\n([a-zA-Z0-9]|[._]){4,19} 表示从第二位开始（因为它紧跟在上个表达式后面）的一个长度为4到9位的字符串，它要求是由大小写字母、数字或者特殊字符集[._]组成。\n\n\n\n*******************************************************************************\n\n//校验用户姓名：只能输入1-30个以字母开头的字串\n\n/^[a-zA-Z]{1,30}$/\n\n\n\n*******************************************************************************\n\n//校验密码：只能输入6-20个字母、数字、下划线\n\n/^(\\w){6,20}$/\n\n\n\n\\w：用于匹配字母，数字或下划线字符\n\n\n\n*******************************************************************************\n\n//校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”\n\n/^[+]{0,1}(\\d){1,3}[ ]?([-]?((\\d)|[ ]){1,12})+$/\n\n\n\n\\d：用于匹配从0到9的数字；\n\n“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次\n\n\n\n可以匹配的字符串如：+123 -999 999 ； +123-999 999 ；123 999 999 ；+123 999999等\n\n\n\n\n\n\n\n\n\n\n\n\n\n*******************************************************************************\n\n//校验URL\n\n/^http[s]{0,1}:\\/\\/.+$/ 或 /^http[s]{0,1}:\\/\\/.{1,n}$/ (表示url串的长度为length(“https://”) + n )\n\n\n\n\\ / ：表示字符“/”。\n\n. 表示所有字符的集\n\n+ 等同于{1,}，就是1到正无穷吧。\n\n\n\n*******************************************************************************\n\n//校验纯中文字符\n\n/^[\\u4E00-\\u9FA5]+$/\n\n\n\n[\\u4E00-\\u9FA5] ：估计是中文字符集的范围吧\n\n\n\n以上表达式均在下面的javascript中测试通过\n\n\n\n<html>\n\n<script language=\"JavaScript\">\n\n<!--\n\nfunction regx(r,s)\n\n{\n\n       if (r == null || r == \"\"){\n\n              return false;\n\n       }\n\n       var patrn= new RegExp(r);\n\n       if (patrn.exec(s))\n\n              return true\n\n       return false\n\n}\n\n\n\n-->\n\n</script>\n\n<body>\n\n<form>\n\n       规则表达式 ： <input type=\"input\" name=\"regxStr\" value=\"\" > (填写/ /之间的表达式)\n\n<br>\n\n       校验字符串 ： <input type=\"input\" name=\"str\" value=\"\" >\n\n\n\n       <input type=\"button\" name=\"match\" value=\"匹配\" onClick=\"alert(regx(regxStr.value,str.value));\">\n\n</form>\n\n</body>\n\n</html>\n\n4.正則表達式應用\n\n\n\"^\\d+$\"　　//非负整数（正整数 + 0）\n\"^[0-9]*[1-9][0-9]*$\"　　//正整数\n\"^((-\\d+)|(0+))$\"　　//非正整数（负整数 + 0）\n\"^-[0-9]*[1-9][0-9]*$\"　　//负整数\n\"^-?\\d+$\"　　　　//整数\n\"^\\d+(\\.\\d+)?$\"　　//非负浮点数（正浮点数 + 0）\n\"^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\"　　//正浮点数\n\"^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$\"　　//非正浮点数（负浮点数 + 0）\n\"^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\"　　//负浮点数\n\"^(-?\\d+)(\\.\\d+)?$\"　　//浮点数\n\"^[A-Za-z]+$\"　　//由26个英文字母组成的字符串\n\"^[A-Z]+$\"　　//由26个英文字母的大写组成的字符串\n\"^[a-z]+$\"　　//由26个英文字母的小写组成的字符串\n\"^[A-Za-z0-9]+$\"　　//由数字和26个英文字母组成的字符串\n\"^\\w+$\"　　//由数字、26个英文字母或者下划线组成的字符串\n\"^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$\"　　　　//email地址\n\"^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$\"　　//url\n/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/   //  年-月-日\n/^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/   // 月/日/年\n\"^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$\"   //Emil\n\"(d+-)?(d{4}-?d{7}|d{3}-?d{8}|^d{7,8})(-d+)?\"     //电话号码\n\"^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$\"   //IP地址\n\n^([0-9A-F]{2})(-[0-9A-F]{2}){5}$   //MAC地址的正则表达式\n^[-+]?\\d+(\\.\\d+)?$  //值类型正则表达式\n\n\n5.javascript正则表达式检验\n//校验是否全由数字组成\nfunction isDigit(s)\n{\nvar patrn=/^[0-9]{1,20}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串\nfunction isRegisterUserName(s)\n{\nvar patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验用户姓名：只能输入1-30个以字母开头的字串\nfunction isTrueName(s)\n{\nvar patrn=/^[a-zA-Z]{1,30}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验密码：只能输入6-20个字母、数字、下划线\nfunction isPasswd(s)\n{\nvar patrn=/^(\\w){6,20}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”\nfunction isTel(s)\n{\n//var patrn=/^[+]{0,1}(\\d){1,3}[ ]?([-]?(\\d){1,12})+$/;\nvar patrn=/^[+]{0,1}(\\d){1,3}[ ]?([-]?((\\d)|[ ]){1,12})+$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验手机号码：必须以数字开头，除数字外，可含有“-”\nfunction isMobil(s)\n{\nvar patrn=/^[+]{0,1}(\\d){1,3}[ ]?([-]?((\\d)|[ ]){1,12})+$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验邮政编码\nfunction isPostalCode(s)\n{\n//var patrn=/^[a-zA-Z0-9]{3,12}$/;\nvar patrn=/^[a-zA-Z0-9 ]{3,12}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n//校验搜索关键字\nfunction isSearch(s)\n{\nvar patrn=/^[^`~!@#$%^&*()+=|\\\\\\][\\]\\{\\}:;\\'\\,.<>/?]{1}[^`~!@$%^&()+=|\\\\\\][\\]\\{\\}:;\\'\\,.<>?]{0,19}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\nfunction isIP(s) //by zergling\n{\nvar patrn=/^[0-9.]{1,20}$/;\nif (!patrn.exec(s)) return false\nreturn true\n}\n\n\n/*********************************************************************************\n* FUNCTION: isBetween\n* PARAMETERS: val AS any value\n* lo AS Lower limit to check\n* hi AS Higher limit to check\n* CALLS: NOTHING\n* RETURNS: TRUE if val is between lo and hi both inclusive, otherwise false.\n**********************************************************************************/\nfunction isBetween (val, lo, hi) {\nif ((val < lo) || (val > hi)) { return(false); }\nelse { return(true); }\n}\n\n/*********************************************************************************\n* FUNCTION: isDate checks a valid date\n* PARAMETERS: theStr AS String\n* CALLS: isBetween, isInt\n* RETURNS: TRUE if theStr is a valid date otherwise false.\n**********************************************************************************/\nfunction isDate (theStr) {\nvar the1st = theStr.indexOf('-');\nvar the2nd = theStr.lastIndexOf('-');\n\nif (the1st == the2nd) { return(false); }\nelse {\nvar y = theStr.substring(0,the1st);\nvar m = theStr.substring(the1st+1,the2nd);\nvar d = theStr.substring(the2nd+1,theStr.length);\nvar maxDays = 31;\n\nif (isInt(m)==false || isInt(d)==false || isInt(y)==false) {\nreturn(false); }\nelse if (y.length < 4) { return(false); }\nelse if (!isBetween (m, 1, 12)) { return(false); }\nelse if (m==4 || m==6 || m==9 || m==11) maxDays = 30;\nelse if (m==2) {\nif (y % 4 > 0) maxDays = 28;\nelse if (y % 100 == 0 && y % 400 > 0) maxDays = 28;\nelse maxDays = 29;\n}\nif (isBetween(d, 1, maxDays) == false) { return(false); }\nelse { return(true); }\n}\n}\n/*********************************************************************************\n* FUNCTION: isEuDate checks a valid date in British format\n* PARAMETERS: theStr AS String\n* CALLS: isBetween, isInt\n* RETURNS: TRUE if theStr is a valid date otherwise false.\n**********************************************************************************/\nfunction isEuDate (theStr) {\nif (isBetween(theStr.length, 8, 10) == false) { return(false); }\nelse {\nvar the1st = theStr.indexOf('/');\nvar the2nd = theStr.lastIndexOf('/');\n\nif (the1st == the2nd) { return(false); }\nelse {\nvar m = theStr.substring(the1st+1,the2nd);\nvar d = theStr.substring(0,the1st);\nvar y = theStr.substring(the2nd+1,theStr.length);\nvar maxDays = 31;\n\nif (isInt(m)==false || isInt(d)==false || isInt(y)==false) {\nreturn(false); }\nelse if (y.length < 4) { return(false); }\nelse if (isBetween (m, 1, 12) == false) { return(false); }\nelse if (m==4 || m==6 || m==9 || m==11) maxDays = 30;\nelse if (m==2) {\nif (y % 4 > 0) maxDays = 28;\nelse if (y % 100 == 0 && y % 400 > 0) maxDays = 28;\nelse maxDays = 29;\n}\n\nif (isBetween(d, 1, maxDays) == false) { return(false); }\nelse { return(true); }\n}\n}\n\n}\n/********************************************************************************\n* FUNCTION: Compare Date! Which is the latest!\n* PARAMETERS: lessDate,moreDate AS String\n* CALLS: isDate,isBetween\n* RETURNS: TRUE if lessDate<moreDate\n*********************************************************************************/\nfunction isComdate (lessDate , moreDate)\n{\nif (!isDate(lessDate)) { return(false);}\nif (!isDate(moreDate)) { return(false);}\nvar less1st = lessDate.indexOf('-');\nvar less2nd = lessDate.lastIndexOf('-');\nvar more1st = moreDate.indexOf('-');\nvar more2nd = moreDate.lastIndexOf('-');\nvar lessy = lessDate.substring(0,less1st);\nvar lessm = lessDate.substring(less1st+1,less2nd);\nvar lessd = lessDate.substring(less2nd+1,lessDate.length);\nvar morey = moreDate.substring(0,more1st);\nvar morem = moreDate.substring(more1st+1,more2nd);\nvar mored = moreDate.substring(more2nd+1,moreDate.length);\nvar Date1 = new Date(lessy,lessm,lessd);\nvar Date2 = new Date(morey,morem,mored);\nif (Date1>Date2) { return(false);}\nreturn(true);\n\n}\n\n/*********************************************************************************\n* FUNCTION isEmpty checks if the parameter is empty or null\n* PARAMETER str AS String\n**********************************************************************************/\nfunction isEmpty (str) {\nif ((str==null)||(str.length==0)) return true;\nelse return(false);\n}\n\n/*********************************************************************************\n* FUNCTION: isInt\n* PARAMETER: theStr AS String\n* RETURNS: TRUE if the passed parameter is an integer, otherwise FALSE\n* CALLS: isDigit\n**********************************************************************************/\nfunction isInt (theStr) {\nvar flag = true;\n\nif (isEmpty(theStr)) { flag=false; }\nelse\n{ for (var i=0; i<theStr.length; i++) {\nif (isDigit(theStr.substring(i,i+1)) == false) {\nflag = false; break;\n}\n}\n}\nreturn(flag);\n}\n\n/*********************************************************************************\n* FUNCTION: isReal\n* PARAMETER: heStr AS String\ndecLen AS Integer (how many digits after period)\n* RETURNS: TRUE if theStr is a float, otherwise FALSE\n* CALLS: isInt\n**********************************************************************************/\nfunction isReal (theStr, decLen) {\nvar dot1st = theStr.indexOf('.');\nvar dot2nd = theStr.lastIndexOf('.');\nvar OK = true;\n\nif (isEmpty(theStr)) return false;\n\nif (dot1st == -1) {\nif (!isInt(theStr)) return(false);\nelse return(true);\n}\n\nelse if (dot1st != dot2nd) return (false);\nelse if (dot1st==0) return (false);\nelse {\nvar intPart = theStr.substring(0, dot1st);\nvar decPart = theStr.substring(dot2nd+1);\n\nif (decPart.length > decLen) return(false);\nelse if (!isInt(intPart) || !isInt(decPart)) return (false);\nelse if (isEmpty(decPart)) return (false);\nelse return(true);\n}\n}\n\n/*********************************************************************************\n* FUNCTION: isEmail\n* PARAMETER: String (Email Address)\n* RETURNS: TRUE if the String is a valid Email address\n* FALSE if the passed string is not a valid Email Address\n* EMAIL FORMAT: AnyName@EmailServer e.g; webmaster@hotmail.com\n* @ sign can appear only once in the email address.\n*********************************************************************************/\nfunction isEmail (theStr) {\nvar atIndex = theStr.indexOf('@');\nvar dotIndex = theStr.indexOf('.', atIndex);\nvar flag = true;\ntheSub = theStr.substring(0, dotIndex+1)\n\nif ((atIndex < 1)||(atIndex != theStr.lastIndexOf('@'))||(dotIndex < atIndex + 2)||(theStr.length <= theSub.length))\n{ return(false); }\nelse { return(true); }\n}\n/*********************************************************************************\n* FUNCTION: newWindow\n* PARAMETERS: doc -> Document to open in the new window\nhite -> Height of the new window\nwide -> Width of the new window\nbars -> 1-Scroll bars = YES 0-Scroll Bars = NO\nresize -> 1-Resizable = YES 0-Resizable = NO\n* CALLS: NONE\n* RETURNS: New window instance\n**********************************************************************************/\nfunction newWindow (doc, hite, wide, bars, resize) {\nvar winNew=\"_blank\";\nvar opt=\"toolbar=0,location=0,directories=0,status=0,menubar=0,\";\nopt+=(\"scrollbars=\"+bars+\",\");\nopt+=(\"resizable=\"+resize+\",\");\nopt+=(\"width=\"+wide+\",\");\nopt+=(\"height=\"+hite);\nwinHandle=window.open(doc,winNew,opt);\nreturn;\n}\n/*********************************************************************************\n* FUNCTION: DecimalFormat\n* PARAMETERS: paramValue -> Field value\n* CALLS: NONE\n* RETURNS: Formated string\n**********************************************************************************/\nfunction DecimalFormat (paramValue) {\nvar intPart = parseInt(paramValue);\nvar decPart =parseFloat(paramValue) - intPart;\n\nstr = \"\";\nif ((decPart == 0) || (decPart == null)) str += (intPart + \".00\");\nelse str += (intPart + decPart);\n\nreturn (str);\n}\n\n\n\n\"^\\\\d+$\"　　//非负整数（正整数 + 0）\n\"^[0-9]*[1-9][0-9]*$\"　　//正整数\n\"^((-\\\\d+)|(0+))$\"　　//非正整数（负整数 + 0）\n\"^-[0-9]*[1-9][0-9]*$\"　　//负整数\n\"^-?\\\\d+$\"　　　　//整数\n\"^\\\\d+(\\\\.\\\\d+)?$\"　　//非负浮点数（正浮点数 + 0）\n\"^(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\"　　//正浮点数\n\"^((-\\\\d+(\\\\.\\\\d+)?)|(0+(\\\\.0+)?))$\"　　//非正浮点数（负浮点数 + 0）\n\"^(-(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\"　　//负浮点数\n\"^(-?\\\\d+)(\\\\.\\\\d+)?$\"　　//浮点数\n\"^[A-Za-z]+$\"　　//由26个英文字母组成的字符串\n\"^[A-Z]+$\"　　//由26个英文字母的大写组成的字符串\n\"^[a-z]+$\"　　//由26个英文字母的小写组成的字符串\n\"^[A-Za-z0-9]+$\"　　//由数字和26个英文字母组成的字符串\n\"^\\\\w+$\"　　//由数字、26个英文字母或者下划线组成的字符串\n\"^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+$\"　　　　//email地址\n\"^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?$\"　　//url\n```",
				"html": "<p>正则表达式基础<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.正则表达式基本语法</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">两个特殊的符号<span class=\"string\">'^'</span>和<span class=\"string\">'$'</span>。他们的作用是分别指出一个字符串的开始和结束。例子如下：</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"^The\"</span>：表示所有以<span class=\"string\">\"The\"</span>开始的字符串（<span class=\"string\">\"There\"</span>，<span class=\"string\">\"The cat\"</span>等）；</div><div class=\"line\"><span class=\"string\">\"of despair$\"</span>：表示所以以<span class=\"string\">\"of despair\"</span>结尾的字符串；</div><div class=\"line\"><span class=\"string\">\"^abc$\"</span>：表示开始和结尾都是<span class=\"string\">\"abc\"</span>的字符串——呵呵，只有<span class=\"string\">\"abc\"</span>自己了；</div><div class=\"line\"><span class=\"string\">\"notice\"</span>：表示任何包含<span class=\"string\">\"notice\"</span>的字符串。</div><div class=\"line\"></div><div class=\"line\">象最后那个例子，如果你不使用两个特殊字符，你就在表示要查找的串在被查找串的任意部分——你并</div><div class=\"line\">不把它定位在某一个顶端。</div><div class=\"line\"></div><div class=\"line\">其它还有<span class=\"string\">'*'</span>，<span class=\"string\">'+'</span>和<span class=\"string\">'?'</span>这三个符号，表示一个或一序列字符重复出现的次数。它们分别表示“没有或</div><div class=\"line\">更多”，“一次或更多”还有“没有或一次”。下面是几个例子：</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"ab*\"</span>：表示一个字符串有一个a后面跟着零个或若干个b。（<span class=\"string\">\"a\"</span>, <span class=\"string\">\"ab\"</span>, <span class=\"string\">\"abbb\"</span>,……）；</div><div class=\"line\"><span class=\"string\">\"ab+\"</span>：表示一个字符串有一个a后面跟着至少一个b或者更多；</div><div class=\"line\"><span class=\"string\">\"ab?\"</span>：表示一个字符串有一个a后面跟着零个或者一个b；</div><div class=\"line\"><span class=\"string\">\"a?b+$\"</span>：表示在字符串的末尾有零个或一个a跟着一个或几个b。</div><div class=\"line\"></div><div class=\"line\">你也可以使用范围，用大括号括起，用以表示重复次数的范围。</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"ab&#123;2&#125;\"</span>：表示一个字符串有一个a跟着2个b（<span class=\"string\">\"abb\"</span>）；</div><div class=\"line\"><span class=\"string\">\"ab&#123;2,&#125;\"</span>：表示一个字符串有一个a跟着至少2个b；</div><div class=\"line\"><span class=\"string\">\"ab&#123;3,5&#125;\"</span>：表示一个字符串有一个a跟着3到5个b。</div><div class=\"line\"></div><div class=\"line\">请注意，你必须指定范围的下限（如：<span class=\"string\">\"&#123;0,2&#125;\"</span>而不是<span class=\"string\">\"&#123;,2&#125;\"</span>）。还有，你可能注意到了，<span class=\"string\">'*'</span>，<span class=\"string\">'+'</span>和</div><div class=\"line\"><span class=\"string\">'?'</span>相当于<span class=\"string\">\"&#123;0,&#125;\"</span>，<span class=\"string\">\"&#123;1,&#125;\"</span>和<span class=\"string\">\"&#123;0,1&#125;\"</span>。</div><div class=\"line\">还有一个<span class=\"string\">'¦'</span>，表示“或”操作：</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"hi¦hello\"</span>：表示一个字符串里有<span class=\"string\">\"hi\"</span>或者<span class=\"string\">\"hello\"</span>；</div><div class=\"line\"><span class=\"string\">\"(b¦cd)ef\"</span>：表示<span class=\"string\">\"bef\"</span>或<span class=\"string\">\"cdef\"</span>；</div><div class=\"line\"><span class=\"string\">\"(a¦b)*c\"</span>：表示一串<span class=\"string\">\"a\"</span><span class=\"string\">\"b\"</span>混合的字符串后面跟一个<span class=\"string\">\"c\"</span>；</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">'.'</span>可以替代任何字符：</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"a.[0-9]\"</span>：表示一个字符串有一个<span class=\"string\">\"a\"</span>后面跟着一个任意字符和一个数字；</div><div class=\"line\"><span class=\"string\">\"^.&#123;3&#125;$\"</span>：表示有任意三个字符的字符串（长度为3个字符）；</div><div class=\"line\"></div><div class=\"line\">方括号表示某些字符允许在一个字符串中的某一特定位置出现：</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"[ab]\"</span>：表示一个字符串有一个<span class=\"string\">\"a\"</span>或<span class=\"string\">\"b\"</span>（相当于<span class=\"string\">\"a¦b\"</span>）；</div><div class=\"line\"><span class=\"string\">\"[a-d]\"</span>：表示一个字符串包含小写的<span class=\"string\">'a'</span>到<span class=\"string\">'d'</span>中的一个（相当于<span class=\"string\">\"a¦b¦c¦d\"</span>或者<span class=\"string\">\"[abcd]\"</span>）；</div><div class=\"line\"><span class=\"string\">\"^[a-zA-Z]\"</span>：表示一个以字母开头的字符串；</div><div class=\"line\"><span class=\"string\">\"[0-9]%\"</span>：表示一个百分号前有一位的数字；</div><div class=\"line\"><span class=\"string\">\",[a-zA-Z0-9]$\"</span>：表示一个字符串以一个逗号后面跟着一个字母或数字结束。</div><div class=\"line\"></div><div class=\"line\">你也可以在方括号里用<span class=\"string\">'^'</span>表示不希望出现的字符，<span class=\"string\">'^'</span>应在方括号里的第一位。（如：<span class=\"string\">\"%[^a-zA-Z]%\"</span>表</div><div class=\"line\">示两个百分号中不应该出现字母）。</div><div class=\"line\"></div><div class=\"line\">为了逐字表达，你必须在<span class=\"string\">\"^.<span class=\"variable\">$()</span>¦*+?&#123;\\\"这些字符前加上转移字符'\\'。</span></div><div class=\"line\">请注意在方括号中，不需要转义字符。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">2.正则表达式验证控制文本框的输入字符类型</div><div class=\"line\">1.只能输入数字和英文的：</div><div class=\"line\">&lt;input onkeyup=\"value=value.replace(/[\\W]/g,<span class=\"string\">''</span>) <span class=\"string\">\" onbeforepaste=\"</span>clipboardData.setData(<span class=\"string\">'text'</span>,clipboardData.getData(<span class=\"string\">'text'</span>).replace(/[^\\d]/g,<span class=\"string\">''</span>))<span class=\"string\">\" ID=\"</span>Text1<span class=\"string\">\" NAME=\"</span>Text1<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">2.只能输入数字的：</div><div class=\"line\">&lt;input onkeyup=\"value=value.replace(/[^\\d]/g,<span class=\"string\">''</span>) <span class=\"string\">\" onbeforepaste=\"</span>clipboardData.setData(<span class=\"string\">'text'</span>,clipboardData.getData(<span class=\"string\">'text'</span>).replace(/[^\\d]/g,<span class=\"string\">''</span>))<span class=\"string\">\" ID=\"</span>Text2<span class=\"string\">\" NAME=\"</span>Text2<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">3.只能输入全角的：</div><div class=\"line\">&lt;input onkeyup=\"value=value.replace(/[^\\uFF00-\\uFFFF]/g,<span class=\"string\">''</span>)<span class=\"string\">\" onbeforepaste=\"</span>clipboardData.setData(<span class=\"string\">'text'</span>,clipboardData.getData(<span class=\"string\">'text'</span>).replace(/[^\\uFF00-\\uFFFF]/g,<span class=\"string\">''</span>))<span class=\"string\">\" ID=\"</span>Text3<span class=\"string\">\" NAME=\"</span>Text3<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">4.只能输入汉字的：</div><div class=\"line\">&lt;input onkeyup=\"value=value.replace(/[^\\u4E00-\\u9FA5]/g,<span class=\"string\">''</span>)<span class=\"string\">\" onbeforepaste=\"</span>clipboardData.setData(<span class=\"string\">'text'</span>,clipboardData.getData(<span class=\"string\">'text'</span>).replace(/[^\\u4E00-\\u9FA5]/g,<span class=\"string\">''</span>))<span class=\"string\">\" ID=\"</span>Text4<span class=\"string\">\" NAME=\"</span>Text4<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">3.正则表达式的应用实例通俗说明</div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验是否全由数字组成</div><div class=\"line\"></div><div class=\"line\">/^[0-9]&#123;1,20&#125;$/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">^ 表示打头的字符要匹配紧跟^后面的规则</div><div class=\"line\"></div><div class=\"line\">$ 表示打头的字符要匹配紧靠$前面的规则</div><div class=\"line\"></div><div class=\"line\">[ ] 中的内容是可选字符集</div><div class=\"line\"></div><div class=\"line\">[0-9] 表示要求字符范围在0-9之间</div><div class=\"line\"></div><div class=\"line\">&#123;1,20&#125;表示数字字符串长度合法为1到20，即为[0-9]中的字符出现次数的范围是1到20次。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/^ 和 $/成对使用应该是表示要求整个字符串完全匹配定义的规则，而不是只匹配字符串中的一个子串。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串</div><div class=\"line\"></div><div class=\"line\">/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">^[a-zA-Z]&#123;1&#125; 表示第一个字符要求是字母。</div><div class=\"line\"></div><div class=\"line\">([a-zA-Z0-9]|[._])&#123;4,19&#125; 表示从第二位开始（因为它紧跟在上个表达式后面）的一个长度为4到9位的字符串，它要求是由大小写字母、数字或者特殊字符集[._]组成。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验用户姓名：只能输入1-30个以字母开头的字串</div><div class=\"line\"></div><div class=\"line\">/^[a-zA-Z]&#123;1,30&#125;$/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验密码：只能输入6-20个字母、数字、下划线</div><div class=\"line\"></div><div class=\"line\">/^(\\w)&#123;6,20&#125;$/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\\w：用于匹配字母，数字或下划线字符</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”</div><div class=\"line\"></div><div class=\"line\">/^[+]&#123;0,1&#125;(\\d)&#123;1,3&#125;[ ]?([-]?((\\d)|[ ])&#123;1,12&#125;)+$/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\\d：用于匹配从0到9的数字；</div><div class=\"line\"></div><div class=\"line\">“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">可以匹配的字符串如：+123 -999 999 ； +123-999 999 ；123 999 999 ；+123 999999等</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验URL</div><div class=\"line\"></div><div class=\"line\">/^http[s]&#123;0,1&#125;:\\/\\/.+$/ 或 /^http[s]&#123;0,1&#125;:\\/\\/.&#123;1,n&#125;$/ (表示url串的长度为length(“https://”) + n )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\\ / ：表示字符“/”。</div><div class=\"line\"></div><div class=\"line\">. 表示所有字符的集</div><div class=\"line\"></div><div class=\"line\">+ 等同于&#123;1,&#125;，就是1到正无穷吧。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">*******************************************************************************</div><div class=\"line\"></div><div class=\"line\">//校验纯中文字符</div><div class=\"line\"></div><div class=\"line\">/^[\\u4E00-\\u9FA5]+$/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">[\\u4E00-\\u9FA5] ：估计是中文字符集的范围吧</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">以上表达式均在下面的javascript中测试通过</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;html&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script language=\"JavaScript<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;!--</div><div class=\"line\"></div><div class=\"line\">function regx(r,s)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">       if (r == null || r == \"<span class=\"string\">\")&#123;</span></div><div class=\"line\"></div><div class=\"line\">              return false;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       var patrn= new RegExp(r);</div><div class=\"line\"></div><div class=\"line\">       if (patrn.exec(s))</div><div class=\"line\"></div><div class=\"line\">              return true</div><div class=\"line\"></div><div class=\"line\">       return false</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">--&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form&gt;</div><div class=\"line\"></div><div class=\"line\">       规则表达式 ： &lt;input type=\"input<span class=\"string\">\" name=\"</span>regxStr<span class=\"string\">\" value=\"</span><span class=\"string\">\" &gt; (填写/ /之间的表达式)</span></div><div class=\"line\"></div><div class=\"line\">&lt;br&gt;</div><div class=\"line\"></div><div class=\"line\">       校验字符串 ： &lt;input type=\"input<span class=\"string\">\" name=\"</span>str<span class=\"string\">\" value=\"</span><span class=\"string\">\" &gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       &lt;input type=\"button<span class=\"string\">\" name=\"</span>match<span class=\"string\">\" value=\"</span>匹配<span class=\"string\">\" onClick=\"</span>alert(regx(regxStr.value,str.value));<span class=\"string\">\"&gt;</span></div><div class=\"line\"></div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/html&gt;</div><div class=\"line\"></div><div class=\"line\">4.正則表達式應用</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\"^\\d+$<span class=\"string\">\"　　//非负整数（正整数 + 0）</span></div><div class=\"line\">\"^[0-9]*[1-9][0-9]*$<span class=\"string\">\"　　//正整数</span></div><div class=\"line\">\"^((-\\d+)|(0+))$<span class=\"string\">\"　　//非正整数（负整数 + 0）</span></div><div class=\"line\">\"^-[0-9]*[1-9][0-9]*$<span class=\"string\">\"　　//负整数</span></div><div class=\"line\">\"^-?\\d+$<span class=\"string\">\"　　　　//整数</span></div><div class=\"line\">\"^\\d+(\\.\\d+)?$<span class=\"string\">\"　　//非负浮点数（正浮点数 + 0）</span></div><div class=\"line\">\"^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$<span class=\"string\">\"　　//正浮点数</span></div><div class=\"line\">\"^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$<span class=\"string\">\"　　//非正浮点数（负浮点数 + 0）</span></div><div class=\"line\">\"^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$<span class=\"string\">\"　　//负浮点数</span></div><div class=\"line\">\"^(-?\\d+)(\\.\\d+)?$<span class=\"string\">\"　　//浮点数</span></div><div class=\"line\">\"^[A-Za-z]+$<span class=\"string\">\"　　//由26个英文字母组成的字符串</span></div><div class=\"line\">\"^[A-Z]+$<span class=\"string\">\"　　//由26个英文字母的大写组成的字符串</span></div><div class=\"line\">\"^[a-z]+$<span class=\"string\">\"　　//由26个英文字母的小写组成的字符串</span></div><div class=\"line\">\"^[A-Za-z0-9]+$<span class=\"string\">\"　　//由数字和26个英文字母组成的字符串</span></div><div class=\"line\">\"^\\w+$<span class=\"string\">\"　　//由数字、26个英文字母或者下划线组成的字符串</span></div><div class=\"line\">\"^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$<span class=\"string\">\"　　　　//email地址</span></div><div class=\"line\">\"^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$<span class=\"string\">\"　　//url</span></div><div class=\"line\">/^(d&#123;2&#125;|d&#123;4&#125;)-((0([1-9]&#123;1&#125;))|(1[1|2]))-(([0-2]([1-9]&#123;1&#125;))|(3[0|1]))$/   //  年-月-日</div><div class=\"line\">/^((0([1-9]&#123;1&#125;))|(1[1|2]))/(([0-2]([1-9]&#123;1&#125;))|(3[0|1]))/(d&#123;2&#125;|d&#123;4&#125;)$/   // 月/日/年</div><div class=\"line\">\"^([w-.]+)@(([[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.)|(([w-]+.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)(]?)$<span class=\"string\">\"   //Emil</span></div><div class=\"line\">\"(d+-)?(d&#123;4&#125;-?d&#123;7&#125;|d&#123;3&#125;-?d&#123;8&#125;|^d&#123;7,8&#125;)(<span class=\"_\">-d</span>+)?<span class=\"string\">\"     //电话号码</span></div><div class=\"line\">\"^(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5])$<span class=\"string\">\"   //IP地址</span></div><div class=\"line\"></div><div class=\"line\">^([0-9A-F]&#123;2&#125;)(-[0-9A-F]&#123;2&#125;)&#123;5&#125;$   //MAC地址的正则表达式</div><div class=\"line\">^[-+]?\\d+(\\.\\d+)?$  //值类型正则表达式</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">5.javascript正则表达式检验</div><div class=\"line\">//校验是否全由数字组成</div><div class=\"line\">function isDigit(s)</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^[0-9]&#123;1,20&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串</div><div class=\"line\">function isRegisterUserName(s)</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验用户姓名：只能输入1-30个以字母开头的字串</div><div class=\"line\">function isTrueName(s)</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^[a-zA-Z]&#123;1,30&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验密码：只能输入6-20个字母、数字、下划线</div><div class=\"line\">function isPasswd(s)</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^(\\w)&#123;6,20&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验普通电话、传真号码：可以“+”开头，除数字外，可含有“-”</div><div class=\"line\">function isTel(s)</div><div class=\"line\">&#123;</div><div class=\"line\">//var patrn=/^[+]&#123;0,1&#125;(\\d)&#123;1,3&#125;[ ]?([-]?(\\d)&#123;1,12&#125;)+$/;</div><div class=\"line\">var patrn=/^[+]&#123;0,1&#125;(\\d)&#123;1,3&#125;[ ]?([-]?((\\d)|[ ])&#123;1,12&#125;)+$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验手机号码：必须以数字开头，除数字外，可含有“-”</div><div class=\"line\">function isMobil(s)</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^[+]&#123;0,1&#125;(\\d)&#123;1,3&#125;[ ]?([-]?((\\d)|[ ])&#123;1,12&#125;)+$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验邮政编码</div><div class=\"line\">function isPostalCode(s)</div><div class=\"line\">&#123;</div><div class=\"line\">//var patrn=/^[a-zA-Z0-9]&#123;3,12&#125;$/;</div><div class=\"line\">var patrn=/^[a-zA-Z0-9 ]&#123;3,12&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//校验搜索关键字</div><div class=\"line\">function isSearch(s)</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^[^`~!@#$%^&amp;*()+=|\\\\\\][\\]\\&#123;\\&#125;:;\\'\\,.&lt;&gt;/?]&#123;1&#125;[^`~!@$%^&amp;()+=|\\\\\\][\\]\\&#123;\\&#125;:;\\'\\,.&lt;&gt;?]&#123;0,19&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function isIP(s) //by zergling</div><div class=\"line\">&#123;</div><div class=\"line\">var patrn=/^[0-9.]&#123;1,20&#125;$/;</div><div class=\"line\">if (!patrn.exec(s)) return false</div><div class=\"line\">return true</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: isBetween</div><div class=\"line\">* PARAMETERS: val AS any value</div><div class=\"line\">* lo AS Lower limit to check</div><div class=\"line\">* hi AS Higher limit to check</div><div class=\"line\">* CALLS: NOTHING</div><div class=\"line\">* RETURNS: TRUE if val is between lo and hi both inclusive, otherwise false.</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function isBetween (val, lo, hi) &#123;</div><div class=\"line\">if ((val &lt; lo) || (val &gt; hi)) &#123; return(false); &#125;</div><div class=\"line\">else &#123; return(true); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: isDate checks a valid date</div><div class=\"line\">* PARAMETERS: theStr AS String</div><div class=\"line\">* CALLS: isBetween, isInt</div><div class=\"line\">* RETURNS: TRUE if theStr is a valid date otherwise false.</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function isDate (theStr) &#123;</div><div class=\"line\">var the1st = theStr.indexOf('-');</div><div class=\"line\">var the2nd = theStr.lastIndexOf('-');</div><div class=\"line\"></div><div class=\"line\">if (the1st == the2nd) &#123; return(false); &#125;</div><div class=\"line\">else &#123;</div><div class=\"line\">var y = theStr.substring(0,the1st);</div><div class=\"line\">var m = theStr.substring(the1st+1,the2nd);</div><div class=\"line\">var d = theStr.substring(the2nd+1,theStr.length);</div><div class=\"line\">var maxDays = 31;</div><div class=\"line\"></div><div class=\"line\">if (isInt(m)==false || isInt(d)==false || isInt(y)==false) &#123;</div><div class=\"line\">return(false); &#125;</div><div class=\"line\">else if (y.length &lt; 4) &#123; return(false); &#125;</div><div class=\"line\">else if (!isBetween (m, 1, 12)) &#123; return(false); &#125;</div><div class=\"line\">else if (m==4 || m==6 || m==9 || m==11) maxDays = 30;</div><div class=\"line\">else if (m==2) &#123;</div><div class=\"line\">if (y % 4 &gt; 0) maxDays = 28;</div><div class=\"line\">else if (y % 100 == 0 &amp;&amp; y % 400 &gt; 0) maxDays = 28;</div><div class=\"line\">else maxDays = 29;</div><div class=\"line\">&#125;</div><div class=\"line\">if (isBetween(d, 1, maxDays) == false) &#123; return(false); &#125;</div><div class=\"line\">else &#123; return(true); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: isEuDate checks a valid date in British format</div><div class=\"line\">* PARAMETERS: theStr AS String</div><div class=\"line\">* CALLS: isBetween, isInt</div><div class=\"line\">* RETURNS: TRUE if theStr is a valid date otherwise false.</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function isEuDate (theStr) &#123;</div><div class=\"line\">if (isBetween(theStr.length, 8, 10) == false) &#123; return(false); &#125;</div><div class=\"line\">else &#123;</div><div class=\"line\">var the1st = theStr.indexOf('/');</div><div class=\"line\">var the2nd = theStr.lastIndexOf('/');</div><div class=\"line\"></div><div class=\"line\">if (the1st == the2nd) &#123; return(false); &#125;</div><div class=\"line\">else &#123;</div><div class=\"line\">var m = theStr.substring(the1st+1,the2nd);</div><div class=\"line\">var d = theStr.substring(0,the1st);</div><div class=\"line\">var y = theStr.substring(the2nd+1,theStr.length);</div><div class=\"line\">var maxDays = 31;</div><div class=\"line\"></div><div class=\"line\">if (isInt(m)==false || isInt(d)==false || isInt(y)==false) &#123;</div><div class=\"line\">return(false); &#125;</div><div class=\"line\">else if (y.length &lt; 4) &#123; return(false); &#125;</div><div class=\"line\">else if (isBetween (m, 1, 12) == false) &#123; return(false); &#125;</div><div class=\"line\">else if (m==4 || m==6 || m==9 || m==11) maxDays = 30;</div><div class=\"line\">else if (m==2) &#123;</div><div class=\"line\">if (y % 4 &gt; 0) maxDays = 28;</div><div class=\"line\">else if (y % 100 == 0 &amp;&amp; y % 400 &gt; 0) maxDays = 28;</div><div class=\"line\">else maxDays = 29;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">if (isBetween(d, 1, maxDays) == false) &#123; return(false); &#125;</div><div class=\"line\">else &#123; return(true); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">/********************************************************************************</div><div class=\"line\">* FUNCTION: Compare Date! Which is the latest!</div><div class=\"line\">* PARAMETERS: lessDate,moreDate AS String</div><div class=\"line\">* CALLS: isDate,isBetween</div><div class=\"line\">* RETURNS: TRUE if lessDate&lt;moreDate</div><div class=\"line\">*********************************************************************************/</div><div class=\"line\">function isComdate (lessDate , moreDate)</div><div class=\"line\">&#123;</div><div class=\"line\">if (!isDate(lessDate)) &#123; return(false);&#125;</div><div class=\"line\">if (!isDate(moreDate)) &#123; return(false);&#125;</div><div class=\"line\">var less1st = lessDate.indexOf('-');</div><div class=\"line\">var less2nd = lessDate.lastIndexOf('-');</div><div class=\"line\">var more1st = moreDate.indexOf('-');</div><div class=\"line\">var more2nd = moreDate.lastIndexOf('-');</div><div class=\"line\">var lessy = lessDate.substring(0,less1st);</div><div class=\"line\">var lessm = lessDate.substring(less1st+1,less2nd);</div><div class=\"line\">var lessd = lessDate.substring(less2nd+1,lessDate.length);</div><div class=\"line\">var morey = moreDate.substring(0,more1st);</div><div class=\"line\">var morem = moreDate.substring(more1st+1,more2nd);</div><div class=\"line\">var mored = moreDate.substring(more2nd+1,moreDate.length);</div><div class=\"line\">var Date1 = new Date(lessy,lessm,lessd);</div><div class=\"line\">var Date2 = new Date(morey,morem,mored);</div><div class=\"line\">if (Date1&gt;Date2) &#123; return(false);&#125;</div><div class=\"line\">return(true);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION isEmpty checks if the parameter is empty or null</div><div class=\"line\">* PARAMETER str AS String</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function isEmpty (str) &#123;</div><div class=\"line\">if ((str==null)||(str.length==0)) return true;</div><div class=\"line\">else return(false);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: isInt</div><div class=\"line\">* PARAMETER: theStr AS String</div><div class=\"line\">* RETURNS: TRUE if the passed parameter is an integer, otherwise FALSE</div><div class=\"line\">* CALLS: isDigit</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function isInt (theStr) &#123;</div><div class=\"line\">var flag = true;</div><div class=\"line\"></div><div class=\"line\">if (isEmpty(theStr)) &#123; flag=false; &#125;</div><div class=\"line\">else</div><div class=\"line\">&#123; for (var i=0; i&lt;theStr.length; i++) &#123;</div><div class=\"line\">if (isDigit(theStr.substring(i,i+1)) == false) &#123;</div><div class=\"line\">flag = false; break;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">return(flag);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: isReal</div><div class=\"line\">* PARAMETER: heStr AS String</div><div class=\"line\">decLen AS Integer (how many digits after period)</div><div class=\"line\">* RETURNS: TRUE if theStr is a float, otherwise FALSE</div><div class=\"line\">* CALLS: isInt</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function isReal (theStr, decLen) &#123;</div><div class=\"line\">var dot1st = theStr.indexOf('.');</div><div class=\"line\">var dot2nd = theStr.lastIndexOf('.');</div><div class=\"line\">var OK = true;</div><div class=\"line\"></div><div class=\"line\">if (isEmpty(theStr)) return false;</div><div class=\"line\"></div><div class=\"line\">if (dot1st == -1) &#123;</div><div class=\"line\">if (!isInt(theStr)) return(false);</div><div class=\"line\">else return(true);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">else if (dot1st != dot2nd) return (false);</div><div class=\"line\">else if (dot1st==0) return (false);</div><div class=\"line\">else &#123;</div><div class=\"line\">var intPart = theStr.substring(0, dot1st);</div><div class=\"line\">var decPart = theStr.substring(dot2nd+1);</div><div class=\"line\"></div><div class=\"line\">if (decPart.length &gt; decLen) return(false);</div><div class=\"line\">else if (!isInt(intPart) || !isInt(decPart)) return (false);</div><div class=\"line\">else if (isEmpty(decPart)) return (false);</div><div class=\"line\">else return(true);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: isEmail</div><div class=\"line\">* PARAMETER: String (Email Address)</div><div class=\"line\">* RETURNS: TRUE if the String is a valid Email address</div><div class=\"line\">* FALSE if the passed string is not a valid Email Address</div><div class=\"line\">* EMAIL FORMAT: AnyName@EmailServer e.g; webmaster@hotmail.com</div><div class=\"line\">* @ sign can appear only once in the email address.</div><div class=\"line\">*********************************************************************************/</div><div class=\"line\">function isEmail (theStr) &#123;</div><div class=\"line\">var atIndex = theStr.indexOf('@');</div><div class=\"line\">var dotIndex = theStr.indexOf('.', atIndex);</div><div class=\"line\">var flag = true;</div><div class=\"line\">theSub = theStr.substring(0, dotIndex+1)</div><div class=\"line\"></div><div class=\"line\">if ((atIndex &lt; 1)||(atIndex != theStr.lastIndexOf('@'))||(dotIndex &lt; atIndex + 2)||(theStr.length &lt;= theSub.length))</div><div class=\"line\">&#123; return(false); &#125;</div><div class=\"line\">else &#123; return(true); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: newWindow</div><div class=\"line\">* PARAMETERS: doc -&gt; Document to open in the new window</div><div class=\"line\">hite -&gt; Height of the new window</div><div class=\"line\">wide -&gt; Width of the new window</div><div class=\"line\">bars -&gt; 1-Scroll bars = YES 0-Scroll Bars = NO</div><div class=\"line\">resize -&gt; 1-Resizable = YES 0-Resizable = NO</div><div class=\"line\">* CALLS: NONE</div><div class=\"line\">* RETURNS: New window instance</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function newWindow (doc, hite, wide, bars, resize) &#123;</div><div class=\"line\">var winNew=\"_blank<span class=\"string\">\";</span></div><div class=\"line\">var opt=\"toolbar=0,location=0,directories=0,status=0,menubar=0,<span class=\"string\">\";</span></div><div class=\"line\">opt+=(\"scrollbars=<span class=\"string\">\"+bars+\"</span>,<span class=\"string\">\");</span></div><div class=\"line\">opt+=(\"resizable=<span class=\"string\">\"+resize+\"</span>,<span class=\"string\">\");</span></div><div class=\"line\">opt+=(\"width=<span class=\"string\">\"+wide+\"</span>,<span class=\"string\">\");</span></div><div class=\"line\">opt+=(\"height=<span class=\"string\">\"+hite);</span></div><div class=\"line\">winHandle=window.open(doc,winNew,opt);</div><div class=\"line\">return;</div><div class=\"line\">&#125;</div><div class=\"line\">/*********************************************************************************</div><div class=\"line\">* FUNCTION: DecimalFormat</div><div class=\"line\">* PARAMETERS: paramValue -&gt; Field value</div><div class=\"line\">* CALLS: NONE</div><div class=\"line\">* RETURNS: Formated string</div><div class=\"line\">**********************************************************************************/</div><div class=\"line\">function DecimalFormat (paramValue) &#123;</div><div class=\"line\">var intPart = parseInt(paramValue);</div><div class=\"line\">var decPart =parseFloat(paramValue) - intPart;</div><div class=\"line\"></div><div class=\"line\">str = \"<span class=\"string\">\";</span></div><div class=\"line\">if ((decPart == 0) || (decPart == null)) str += (intPart + \".00<span class=\"string\">\");</span></div><div class=\"line\">else str += (intPart + decPart);</div><div class=\"line\"></div><div class=\"line\">return (str);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\"^\\\\d+$<span class=\"string\">\"　　//非负整数（正整数 + 0）</span></div><div class=\"line\">\"^[0-9]*[1-9][0-9]*$<span class=\"string\">\"　　//正整数</span></div><div class=\"line\">\"^((-\\\\d+)|(0+))$<span class=\"string\">\"　　//非正整数（负整数 + 0）</span></div><div class=\"line\">\"^-[0-9]*[1-9][0-9]*$<span class=\"string\">\"　　//负整数</span></div><div class=\"line\">\"^-?\\\\d+$<span class=\"string\">\"　　　　//整数</span></div><div class=\"line\">\"^\\\\d+(\\\\.\\\\d+)?$<span class=\"string\">\"　　//非负浮点数（正浮点数 + 0）</span></div><div class=\"line\">\"^(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*))$<span class=\"string\">\"　　//正浮点数</span></div><div class=\"line\">\"^((-\\\\d+(\\\\.\\\\d+)?)|(0+(\\\\.0+)?))$<span class=\"string\">\"　　//非正浮点数（负浮点数 + 0）</span></div><div class=\"line\">\"^(-(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$<span class=\"string\">\"　　//负浮点数</span></div><div class=\"line\">\"^(-?\\\\d+)(\\\\.\\\\d+)?$<span class=\"string\">\"　　//浮点数</span></div><div class=\"line\">\"^[A-Za-z]+$<span class=\"string\">\"　　//由26个英文字母组成的字符串</span></div><div class=\"line\">\"^[A-Z]+$<span class=\"string\">\"　　//由26个英文字母的大写组成的字符串</span></div><div class=\"line\">\"^[a-z]+$<span class=\"string\">\"　　//由26个英文字母的小写组成的字符串</span></div><div class=\"line\">\"^[A-Za-z0-9]+$<span class=\"string\">\"　　//由数字和26个英文字母组成的字符串</span></div><div class=\"line\">\"^\\\\w+$<span class=\"string\">\"　　//由数字、26个英文字母或者下划线组成的字符串</span></div><div class=\"line\">\"^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+$<span class=\"string\">\"　　　　//email地址</span></div><div class=\"line\">\"^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?$<span class=\"string\">\"　　//url</span></div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481117613797,
				"created_by": 2,
				"updated_at": 1481183385142,
				"updated_by": 2,
				"published_at": 1481117613797,
				"published_by": 2
			},
			{
				"id": "ciwg0zxwo000tq0fcqxsfq0d0",
				"title": "Javascript函数、递归与闭包",
				"slug": "js-close-bag",
				"markdown": "# 函数表达式\n\nJavaScript中定义函数有2钟方法：\n## 函数声明\n```js\nfunction funcName(arg1,arg2,arg3){\n  //函数体\n}\n```\n      ①name属性：可读取函数名。非标准，浏览器支持:FF、Chrome、safari、Opera。\n      ②函数声明提升：指执行代码之前会先读取函数声明。即函数调用可置于函数声明之前。\n## 函数表达式\n```js\nvar funcName = function(arg1,arg2,arg3){\n  //函数体\n};\n```\n<!--more-->\n　　　　 ①匿名函数(anonymous function，或拉姆达函数)：function关键字后无标识符，name属性值为空字符串。在把函数当成值使用时，都可用匿名函数。\n　　　　 ②类似其他表达式，函数表达式使用前需先赋值，故不存在\"函数声明提升\"那样的作用。\n　　　　 ③ECMAScript中的无效函数语法：\n\n\nif判断中的重复函数声明\n```js\nif(condition){\n    function sayHi(){\n        alert(\"Hi!\");\n    }\n} else {\n    function sayHi(){\n        alert(\"Yo!\");\n    }\n}\n```\n　　　　　　浏览器JavaScript引擎修正错误差异：大多浏览器会返回第二个声明，忽略condition；FF则会在condition为true时返回第一个声明。\n　　　　　　使用函数表达式可解决并实现：\n\n\nif判断 函数表达式\n```js\nvar sayHi;\nif(condition){\n    sayHi = function(){\n        alert(\"Hi!\");\n    }\n} else {\n    sayHi = function(){\n        alert(\"Yo!\");\n    }\n}\n```\n# 递归\n\n　　递归函数，是在一个函数中通过名字调用自身的情况下构成的。\n```js\nfunction factorial(num){   //一个经典的递归阶乘函数\n    if (num <= 1){\n        return 1;\n    } else {\n        return num * factorial(num-1);\n    }\n}\n```\n 　　　　①若使用下列代码调用该函数，会出错：\n```js\nvar anotherFactorial = factorial;\nfactorial = null;\nalert(anotherFactorial(4));\n```\n　　　将factorial()函数保存到变量anotherFactorial中后，将factorial变量设为null后不再引用函数，而anotherFactorial(4)中要执行factorial()函数，故出错。\n　　　使用argument.callee(指向正在执行的函数的指针)可解决：\n\n```js\n//解决方案\nfunction factorial(num){\n    if (num <= 1){\n        return 1;\n    } else {\n        return num * arguments.callee(num-1);\n    }\n}\nvar anotherFactorial = factorial;\nfactorial = null;\nalert(anotherFactorial(4));  //24\n```\n　　　　在非严格模式，使用递归函数时，用argument.callee代替函数名更保险\n　　　　在严格模式下，使用argument.callee会出错，可用函数表达式 代替 函数声明：\n\n函数表达式代替函数声明\n```js\nvar factorial = function f(num){\n    if (num <= 1){\n        return 1;\n    } else {\n        return num * f(num-1);\n    }\n}\n```\n# 闭包\n\n　　指有权访问另一个函数作用域中的变量的函数。(常见形式为函数嵌套)\n复制代码代码如下:\n```js\nfunction wai(pro){\n    return function(obj1,obj2){\n        var val1 = obj1[pro];\n        var val2 = obj2[pro];\n        if(val1<val2){\n            return -1;\n        }else if(val1>val2){\n            return 1;\n        }else{\n            return 0;\n        };\n    }\n}\n```\n　　　　return匿名函数时，匿名函数的作用域链初始化为包含函数的活动对象和全局变量对象。即匿名函数包含wai()函数的作用域。\n　　每个函数被调用时，会创建一个执行环境、一个变量对象 及 相应的作用域链。\n##执行环境 及 作用域\n　　执行环境execution context简称环境，定义了变量和函数有权访问的其他数据，并决定他们的各自行为。\n　　①每个执行环境都有一个变量对象variable object，保存环境定义的所有变量和函数。该对象无法编码访问，但解析器在处理数据时会在后台使用它。\n　　  全局变量对象是最外围的一个执行环境。在Web浏览器中被认为是window对象，故所有全局对象和函数都是window对象的属性和方法创建的。\n　　  执行环境中的代码执行完后，该环境就被销毁，保存其中的变量和函数定义也随之销毁。\n　　②代码在环境中执行时，会创建变量对象的一个作用域链scope chain，用于保证对执行环境有权访问的所有变量和函数的有序访问。\n　　  作用域链前端，始终是当前执行的代码所在环境的变量对象。当该环境为函数时，会将活动对象作为变量对象。\n　　  活动对象最开始只包含一个变量，即argumnt对象。\n　　  作用域链中的下一个变量对象来自包含环境，而下一个变量对象来自下一个包含环境，直至延续到全局执行环境。\n　　③标识符解析：从前段开始，沿着作用域链一级一级地搜索标识符的过程。【找不到通常会导致错误发生】\n##函数创建、执行时：\n```js\nfunction compare(val1,val2){\n     if(val1<val2){\n        return -1;\n    }else if(val1>val2){\n        return 1;\n    }else{\n        return 0;\n    };\n}\nvar result = compare(5 , 10);\n```\n　　①创建函数compare()时，会创建一个预先包含全局变量对象的作用域链，并保存在内部[[scope]]属性中。\n　　②局部函数compare()的变量对象，只在函数执行的过程中存在。\n　　　当调函数时，会创建一个执行环境，再通过复制函数的[[scope]]属性中的对象 构建起执行环境的作用域链。\n　　③第一次调用函数时，如compare()，会创建一个包含this、argument、val1 和 val2的活动对象。\n　　④全局执行环境的变量对象(包括this、result、compare)在compare()执行环境的作用域链中处于第二位。\n　　⑤作用域链 本质是一个指向变量对象的指针列表，只引用但不实际包含变量对象。\n　　⑥无论什么时候在函数中访问一个变量，都会行作用域链中搜索具有相应名字的变量。\n## 闭包的作用域链\n　　在另外一个函数内部定义的函数会将包含函数的活动对象添加到它的作用域链中。\n　　①将函数对象赋值null，等于通知垃圾回收例程将其清除，随着函数作用域链被销毁，其作用域链(不除了全局作用域)也会被安全销毁。\n　　②由于闭包会携带包含函数的作用域，所以会比其他函数占用更多内存。\n## 闭包与变量\n　　作用域链的一个副作用：闭包只能取得包含函数中任何变量的最后一个值。\n```js\nfunction createFunctions(){\n    var result = new Array();\n    for (var i=0; i < 10; i++){\n        result[i] = function(){\n            return i;\n        };\n    }\n    return result;\n}\n```\n　　①createFunctions()函数，将10个闭包赋值给数组result，再返回result数组。每个闭包都返回自己的索引，但实际上都返回10。\n　　　因为每个函数(闭包)的作用域链中都保存着createFunctions()函数的活动对象，所以它们引用的是同一个变量i，当createFunctions函数执行完后i的值10，故闭包中的i也都为10。\n　　②解决办法，不使用闭包，创建一个匿名函数，将i值赋值给其参数：\n```js\nfunction createFunctions(){\n    var result = new Array();\n    for (var i=0; i < 10; i++){\n        result[i] = function(num){\n            return function(){\n                return num;\n            };\n        }(i);\n    }\n    return result;\n}\n```\n　　创建一个每次循环都会执行一次的匿名函数：将每次循环时包围函数的i值作为参数，存入匿名函数中。因为函数参数是按值传递的，而非引用，所以每个匿名函数中的num值 都为每此循环时i值的一个副本。\n## this对象\n　　this对象是在运行时基于函数的执行环境绑定的。\n　　　　在全局函数中，this等于window；当函数被某对象调用时，this为该对象。\n　　　　匿名函数的执行环境有全局性，其this对象通常指window。通过call()或spply()改变函数执行环境时，this指向其对象。\n　　①每个函数在被调用时，都会自动取得两个特殊变量：this和argument。内部函数在搜索这两个变量时，只会搜索到期活动对象为止，永远不可能访问外部函数的这两个变量。\n　　　　不过将外部作用域的this对象保存在一个闭包能访问的变量里，就可让闭包访问该对象。\n\n## 访问外部函数的this对象\n```js\nvar name = \"The Window\";\nvar object = {\n    name : \"My Object\",\n    getNameFunc : function(){\n        var that = this;\n        return function(){\n            return that.name;\n        };\n    }\n};\nalert(object.getNameFunc()());  //\"MyObject\"\n```\n　　　包围函数的argument对象 也可通过此方法被闭包访问。\n5、函数声明 转换为 函数表达式\n　　JavaScript将function关键字昨晚函数声明的开始，但函数声明后面不能跟圆括号，所以function(){......}();会出错。\n　　要将函数声明转换为函数表达式，需为函数声明加一对圆括号：\n```js\n(function(){\n   //块级作用域\n})();\n```",
				"html": "<h1 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h1><p>JavaScript中定义函数有2钟方法：</p>\n<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\">arg1,arg2,arg3</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>①name属性：可读取函数名。非标准，浏览器支持:FF、Chrome、safari、Opera。\n②函数声明提升：指执行代码之前会先读取函数声明。即函数调用可置于函数声明之前。\n</code></pre><h2 id=\"函数表达式-1\"><a href=\"#函数表达式-1\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1,arg2,arg3</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>　　　　 ①匿名函数(anonymous function，或拉姆达函数)：function关键字后无标识符，name属性值为空字符串。在把函数当成值使用时，都可用匿名函数。<br>　　　　 ②类似其他表达式，函数表达式使用前需先赋值，故不存在”函数声明提升”那样的作用。<br>　　　　 ③ECMAScript中的无效函数语法：</p>\n<p>if判断中的重复函数声明<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(condition)&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Hi!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Yo!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　　　　　浏览器JavaScript引擎修正错误差异：大多浏览器会返回第二个声明，忽略condition；FF则会在condition为true时返回第一个声明。<br>　　　　　　使用函数表达式可解决并实现：</p>\n<p>if判断 函数表达式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sayHi;</div><div class=\"line\"><span class=\"keyword\">if</span>(condition)&#123;</div><div class=\"line\">    sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Hi!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Yo!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><p>　　递归函数，是在一个函数中通过名字调用自身的情况下构成的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>)</span>&#123;   <span class=\"comment\">//一个经典的递归阶乘函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * factorial(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 　　　　①若使用下列代码调用该函数，会出错：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anotherFactorial = factorial;</div><div class=\"line\">factorial = <span class=\"literal\">null</span>;</div><div class=\"line\">alert(anotherFactorial(<span class=\"number\">4</span>));</div></pre></td></tr></table></figure></p>\n<p>　　　将factorial()函数保存到变量anotherFactorial中后，将factorial变量设为null后不再引用函数，而anotherFactorial(4)中要执行factorial()函数，故出错。<br>　　　使用argument.callee(指向正在执行的函数的指针)可解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解决方案</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> anotherFactorial = factorial;</div><div class=\"line\">factorial = <span class=\"literal\">null</span>;</div><div class=\"line\">alert(anotherFactorial(<span class=\"number\">4</span>));  <span class=\"comment\">//24</span></div></pre></td></tr></table></figure>\n<p>　　　　在非严格模式，使用递归函数时，用argument.callee代替函数名更保险<br>　　　　在严格模式下，使用argument.callee会出错，可用函数表达式 代替 函数声明：</p>\n<p>函数表达式代替函数声明<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> factorial = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * f(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><p>　　指有权访问另一个函数作用域中的变量的函数。(常见形式为函数嵌套)<br>复制代码代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wai</span>(<span class=\"params\">pro</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj1,obj2</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> val1 = obj1[pro];</div><div class=\"line\">        <span class=\"keyword\">var</span> val2 = obj2[pro];</div><div class=\"line\">        <span class=\"keyword\">if</span>(val1&lt;val2)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val1&gt;val2)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　　　return匿名函数时，匿名函数的作用域链初始化为包含函数的活动对象和全局变量对象。即匿名函数包含wai()函数的作用域。<br>　　每个函数被调用时，会创建一个执行环境、一个变量对象 及 相应的作用域链。</p>\n<p>##执行环境 及 作用域<br>　　执行环境execution context简称环境，定义了变量和函数有权访问的其他数据，并决定他们的各自行为。<br>　　①每个执行环境都有一个变量对象variable object，保存环境定义的所有变量和函数。该对象无法编码访问，但解析器在处理数据时会在后台使用它。<br>　　  全局变量对象是最外围的一个执行环境。在Web浏览器中被认为是window对象，故所有全局对象和函数都是window对象的属性和方法创建的。<br>　　  执行环境中的代码执行完后，该环境就被销毁，保存其中的变量和函数定义也随之销毁。<br>　　②代码在环境中执行时，会创建变量对象的一个作用域链scope chain，用于保证对执行环境有权访问的所有变量和函数的有序访问。<br>　　  作用域链前端，始终是当前执行的代码所在环境的变量对象。当该环境为函数时，会将活动对象作为变量对象。<br>　　  活动对象最开始只包含一个变量，即argumnt对象。<br>　　  作用域链中的下一个变量对象来自包含环境，而下一个变量对象来自下一个包含环境，直至延续到全局执行环境。<br>　　③标识符解析：从前段开始，沿着作用域链一级一级地搜索标识符的过程。【找不到通常会导致错误发生】</p>\n<p>##函数创建、执行时：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">val1,val2</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>(val1&lt;val2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val1&gt;val2)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> result = compare(<span class=\"number\">5</span> , <span class=\"number\">10</span>);</div></pre></td></tr></table></figure></p>\n<p>　　①创建函数compare()时，会创建一个预先包含全局变量对象的作用域链，并保存在内部[[scope]]属性中。<br>　　②局部函数compare()的变量对象，只在函数执行的过程中存在。<br>　　　当调函数时，会创建一个执行环境，再通过复制函数的[[scope]]属性中的对象 构建起执行环境的作用域链。<br>　　③第一次调用函数时，如compare()，会创建一个包含this、argument、val1 和 val2的活动对象。<br>　　④全局执行环境的变量对象(包括this、result、compare)在compare()执行环境的作用域链中处于第二位。<br>　　⑤作用域链 本质是一个指向变量对象的指针列表，只引用但不实际包含变量对象。<br>　　⑥无论什么时候在函数中访问一个变量，都会行作用域链中搜索具有相应名字的变量。</p>\n<h2 id=\"闭包的作用域链\"><a href=\"#闭包的作用域链\" class=\"headerlink\" title=\"闭包的作用域链\"></a>闭包的作用域链</h2><p>　　在另外一个函数内部定义的函数会将包含函数的活动对象添加到它的作用域链中。<br>　　①将函数对象赋值null，等于通知垃圾回收例程将其清除，随着函数作用域链被销毁，其作用域链(不除了全局作用域)也会被安全销毁。<br>　　②由于闭包会携带包含函数的作用域，所以会比其他函数占用更多内存。</p>\n<h2 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h2><p>　　作用域链的一个副作用：闭包只能取得包含函数中任何变量的最后一个值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　①createFunctions()函数，将10个闭包赋值给数组result，再返回result数组。每个闭包都返回自己的索引，但实际上都返回10。<br>　　　因为每个函数(闭包)的作用域链中都保存着createFunctions()函数的活动对象，所以它们引用的是同一个变量i，当createFunctions函数执行完后i的值10，故闭包中的i也都为10。<br>　　②解决办法，不使用闭包，创建一个匿名函数，将i值赋值给其参数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunctions</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> num;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;(i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　创建一个每次循环都会执行一次的匿名函数：将每次循环时包围函数的i值作为参数，存入匿名函数中。因为函数参数是按值传递的，而非引用，所以每个匿名函数中的num值 都为每此循环时i值的一个副本。</p>\n<h2 id=\"this对象\"><a href=\"#this对象\" class=\"headerlink\" title=\"this对象\"></a>this对象</h2><p>　　this对象是在运行时基于函数的执行环境绑定的。<br>　　　　在全局函数中，this等于window；当函数被某对象调用时，this为该对象。<br>　　　　匿名函数的执行环境有全局性，其this对象通常指window。通过call()或spply()改变函数执行环境时，this指向其对象。<br>　　①每个函数在被调用时，都会自动取得两个特殊变量：this和argument。内部函数在搜索这两个变量时，只会搜索到期活动对象为止，永远不可能访问外部函数的这两个变量。<br>　　　　不过将外部作用域的this对象保存在一个闭包能访问的变量里，就可让闭包访问该对象。</p>\n<h2 id=\"访问外部函数的this对象\"><a href=\"#访问外部函数的this对象\" class=\"headerlink\" title=\"访问外部函数的this对象\"></a>访问外部函数的this对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">    <span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> that.name;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(object.getNameFunc()());  <span class=\"comment\">//\"MyObject\"</span></div></pre></td></tr></table></figure>\n<p>　　　包围函数的argument对象 也可通过此方法被闭包访问。<br>5、函数声明 转换为 函数表达式<br>　　JavaScript将function关键字昨晚函数声明的开始，但函数声明后面不能跟圆括号，所以function(){……}();会出错。<br>　　要将函数声明转换为函数表达式，需为函数声明加一对圆括号：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//块级作用域</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481116862304,
				"created_by": 2,
				"updated_at": 1487207799812,
				"updated_by": 2,
				"published_at": 1481116862304,
				"published_by": 2
			},
			{
				"id": "ciwg0zxwd000qq0fc2d180ggy",
				"title": "JS中的 call和apply的区别和作用",
				"slug": "js-call-apply",
				"markdown": "\nJavascript的每个Function对象中有一个apply方法：\n```js\nfunction.apply([thisObj[,argArray]])\n```\n<!--more-->\n还有一个类似功能的call方法：\n\n```js\nfunction.call([thisObj[,arg1[, arg2[, [,.argN]]]]])\n```\n它们各自的定义：\n\napply：应用某一对象的一个方法，用另一个对象替换当前对象。\n\ncall：调用一个对象的一个方法，以另一个对象替换当前对象。\n\n它们的共同之处：\n\n\n\n都“可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。”\n\n它们的不同之处：\n\n\n\napply：\n\n最多只能有两个参数——新this对象和一个数组 argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里面。如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj，并且无法被传递任何参数。\n\ncall：\n\n则是直接的参数列表，主要用在js对象各方法互相调用的时候，使当前this实例指针保持一致,或在特殊情况下需要改变this指针。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。\n\n更简单地说，apply和call功能一样，只是传入的参数列表形式不同：如 func.call(func1,var1,var2,var3)   对应的apply写法为：func.apply(func1,[var1,var2,var3])\n\n也就是说：call调用的为单个，apply调用的参数为数组\n\n```js\nfunction sum(a,b){\n    console.log(this === window);//true\n    console.log(a + b);\n }\n sum(1,2);\n sum.call(null,1,2);\n sum.apply(null,[1,2]);\n```\n\n作用　　\n\n调用函数\n--\n```js\nvar info = 'tom';\nfunction foo(){\n    //this指向window\n    var info = 'jerry';\n    console.log(this.info);  //tom\n    console.log(this===window)   //true\n}\nfoo();\nfoo.call();\nfoo.apply();\n```\n\ncall和apply可以改变函数中this的指向　　\n--\n```js\nvar obj = {\n        info:'spike'\n};\nfoo.call(obj);    //这里foo函数里面的this就指向了obj\nfoo.apply(obj);\n```\nc、借用别的对象的方法\n求数组中的最大值\n\n```js\nvar arr = [123,34,5,23,3434,23];\n//方法一\nvar arr1 = arr.sort(function(a,b){\n    return b-a;\n});\nconsole.log(arr1[0]);\n//方法二\nvar max = Math.max.apply(null,arr)   //借用别的对象的方法\nconsole.log(max);\n```",
				"html": "<p>Javascript的每个Function对象中有一个apply方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">[thisObj[,argArray]]</span>)</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>还有一个类似功能的call方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">[thisObj[,arg1[, arg2[, [,.argN]]]]]</span>)</span></div></pre></td></tr></table></figure>\n<p>它们各自的定义：</p>\n<p>apply：应用某一对象的一个方法，用另一个对象替换当前对象。</p>\n<p>call：调用一个对象的一个方法，以另一个对象替换当前对象。</p>\n<p>它们的共同之处：</p>\n<p>都“可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。”</p>\n<p>它们的不同之处：</p>\n<p>apply：</p>\n<p>最多只能有两个参数——新this对象和一个数组 argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里面。如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj，并且无法被传递任何参数。</p>\n<p>call：</p>\n<p>则是直接的参数列表，主要用在js对象各方法互相调用的时候，使当前this实例指针保持一致,或在特殊情况下需要改变this指针。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。</p>\n<p>更简单地说，apply和call功能一样，只是传入的参数列表形式不同：如 func.call(func1,var1,var2,var3)   对应的apply写法为：func.apply(func1,[var1,var2,var3])</p>\n<p>也就是说：call调用的为单个，apply调用的参数为数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);<span class=\"comment\">//true</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a + b);</div><div class=\"line\"> &#125;</div><div class=\"line\"> sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\"> sum.call(<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\"> sum.apply(<span class=\"literal\">null</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</div></pre></td></tr></table></figure>\n<p>作用　　</p>\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> info = <span class=\"string\">'tom'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//this指向window</span></div><div class=\"line\">    <span class=\"keyword\">var</span> info = <span class=\"string\">'jerry'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.info);  <span class=\"comment\">//tom</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>===<span class=\"built_in\">window</span>)   <span class=\"comment\">//true</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\">foo.call();</div><div class=\"line\">foo.apply();</div></pre></td></tr></table></figure>\n<h2 id=\"call和apply可以改变函数中this的指向\"><a href=\"#call和apply可以改变函数中this的指向\" class=\"headerlink\" title=\"call和apply可以改变函数中this的指向　　\"></a>call和apply可以改变函数中this的指向　　</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">        <span class=\"attr\">info</span>:<span class=\"string\">'spike'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">foo.call(obj);    <span class=\"comment\">//这里foo函数里面的this就指向了obj</span></div><div class=\"line\">foo.apply(obj);</div></pre></td></tr></table></figure>\n<p>c、借用别的对象的方法<br>求数组中的最大值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">123</span>,<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">23</span>,<span class=\"number\">3434</span>,<span class=\"number\">23</span>];</div><div class=\"line\"><span class=\"comment\">//方法一</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b-a;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr1[<span class=\"number\">0</span>]);</div><div class=\"line\"><span class=\"comment\">//方法二</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,arr)   <span class=\"comment\">//借用别的对象的方法</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(max);</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481103498614,
				"created_by": 2,
				"updated_at": 1487207795710,
				"updated_by": 2,
				"published_at": 1481103498614,
				"published_by": 2
			},
			{
				"id": "ciwg0zxvw000oq0fc3x0ftmaw",
				"title": "js使用 arguments 参数实现函数重载",
				"slug": "js-arguments",
				"markdown": "\narguments\n--\njs进行函数调用时，除了指定的参数外，还创建一个隐含的对象——arguments。\n<!--more-->\n\narguments可以用arguments[index]这样的语法取值，拥有长度属性length。arguments对\n象存储的是实际传递给函数的参数，而不局限于函数声明所定义的参数列表，例如：\n```js\n  function func(a,b){\n　　alert(a);\n　　alert(b);\n　　for(var i=0;i<arguments.length;i++){\n      alert(arguments[i]);\n　　}\n  }\n　func(1,2,3,4);\n```\n代码运行时会依次显示：1，2，1，2，3，4。函数定义了两个参数，但是在调用的时候传递了4个参数。\n\narguments的callee属性\n--\n它表示对函数对象本身的引用，这有利于实现无名函数的递归或者保证函数的封装性。例如：用递归来计算1到n的自然数之和：\n```js\n   var sum=function(n){\n　   if(1==n) {\n       return 1;\n　   } else {\n       return n + arguments.callee(n-1);\n     }\n　 }\n　 alert(sum(100));\n```",
				"html": "<h2 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h2><p>js进行函数调用时，除了指定的参数外，还创建一个隐含的对象——arguments。<br><a id=\"more\"></a></p>\n<p>arguments可以用arguments[index]这样的语法取值，拥有长度属性length。arguments对<br>象存储的是实际传递给函数的参数，而不局限于函数声明所定义的参数列表，例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">　　alert(a);</div><div class=\"line\">　　alert(b);</div><div class=\"line\">　　<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"built_in\">arguments</span>.length;i++)&#123;</div><div class=\"line\">    alert(<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">　　&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">　func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure></p>\n<p>代码运行时会依次显示：1，2，1，2，3，4。函数定义了两个参数，但是在调用的时候传递了4个参数。</p>\n<h2 id=\"arguments的callee属性\"><a href=\"#arguments的callee属性\" class=\"headerlink\" title=\"arguments的callee属性\"></a>arguments的callee属性</h2><p>它表示对函数对象本身的引用，这有利于实现无名函数的递归或者保证函数的封装性。例如：用递归来计算1到n的自然数之和：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">　   <span class=\"keyword\">if</span>(<span class=\"number\">1</span>==n) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">　   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"built_in\">arguments</span>.callee(n<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">　 &#125;</div><div class=\"line\">　 alert(sum(<span class=\"number\">100</span>));</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481102833469,
				"created_by": 2,
				"updated_at": 1487207792363,
				"updated_by": 2,
				"published_at": 1481102833469,
				"published_by": 2
			},
			{
				"id": "ciwg0zxv2000iq0fcrxlu4g1a",
				"title": "js模块化的几种写法",
				"slug": "how-to-write-module-js",
				"markdown": "原始写法\n--\n模块就是实现特定功能的一组方法。\n只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。\n```js\n　　function m1(){\n　　　　//...\n　　}\n　　function m2(){\n　　　　//...\n　　}\n```\n<!--more-->\n上面的函数m1()和m2()，组成一个模块。使用的时候，直接调用就行了。\n这种做法的缺点很明显：\"污染\"了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。\n对象写法\n--\n为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面。\n```js\n　　var module1 = new Object({\n　　　　_count : 0,\n　　　　m1 : function (){\n　　　　　　//...\n　　　　},\n　　　　m2 : function (){\n　　　　　　//...\n　　　　}\n　　});\n```\n上面的函数m1()和m2(），都封装在module1对象里。使用的时候，就是调用这个对象的属性。\n```js\n　　module1.m1();\n```\n但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。\n```js\n　　module1._count = 5;\n```\n立即执行函数写法\n--\n使用\"立即执行函数\"（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。\n```js\n　　var module1 = (function(){\n　　　　var _count = 0;\n　　　　var m1 = function(){\n　　　　　　//...\n　　　　};\n　　　　var m2 = function(){\n　　　　　　//...\n　　　　};\n　　　　return {\n　　　　　　m1 : m1,\n　　　　　　m2 : m2\n　　　　};\n　　})();\n```\n使用上面的写法，外部代码无法读取内部的_count变量。\n```js\n　　console.info(module1._count); //undefined\n```\nmodule1就是Javascript模块的基本写法。下面，再对这种写法进行加工。\n放大模式\n---\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用\"放大模式\"（augmentation）。\n```js\n　　var module1 = (function (mod){\n　　　　mod.m3 = function () {\n　　　　　　//...\n　　　　};\n　　　　return mod;\n　　})(module1);\n```\n上面的代码为module1模块添加了一个新方法m3()，然后返回新的module1模块。\n宽放大模式（Loose augmentation）\n---\n在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用\"宽放大模式\"。\n```js　\n　　var module1 = ( function (mod){\n　　　　//...\n　　　　return mod;\n　　})(window.module1 || {});\n```\n与\"放大模式\"相比，＂宽放大模式＂就是\"立即执行函数\"的参数可以是空对象。\n输入全局变量\n---\n独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。\n为了在模块内部调用全局变量，必须显式地将其他变量输入模块。\n```js\n　　var module1 = (function ($, YAHOO) {\n　　　　//...\n　　})(jQuery, YAHOO);\n```\n上面的module1模块需要使用jQuery库和YUI库，就把这两个库（其实是两个模块）当作参数输入module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。这方面更多的讨论，参见Ben Cherry的著名文章《JavaScript Module Pattern: In-Depth》。\n模块的规范\n---\n先想一想，为什么模块很重要？\n因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n目前，通行的Javascript模块规范共有两种：CommonJS和AMD。我主要介绍AMD，但是要先从CommonJS讲起。\n八、CommonJS\n2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。\n\n这标志\"Javascript模块化编程\"正式诞生。因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。\nnode.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。\n```js\n　　var math = require('math');\n```\n然后，就可以调用模块提供的方法：\n```js　\n　　var math = require('math');\n　　math.add(2,3); // 5\n```\n因为这个系列主要针对浏览器编程，不涉及node.js，所以对CommonJS就不多做介绍了。我们在这里只要知道，require()用于加载模块就行了。\n浏览器环境\n--\n有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。\n但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题，你能看出来吗？\n```js\n　　var math = require('math');\n　　math.add(2, 3);\n```\n第二行math.add(2, 3)，在第一行require('math')之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\nAMD\n--\nAMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\nAMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：\n```js\n　　require([module], callback);\n```\n第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：\n```js\n　　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。",
				"html": "<h2 id=\"原始写法\"><a href=\"#原始写法\" class=\"headerlink\" title=\"原始写法\"></a>原始写法</h2><p>模块就是实现特定功能的一组方法。<br>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　&#125;</div><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>上面的函数m1()和m2()，组成一个模块。使用的时候，直接调用就行了。<br>这种做法的缺点很明显：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p>\n<h2 id=\"对象写法\"><a href=\"#对象写法\" class=\"headerlink\" title=\"对象写法\"></a>对象写法</h2><p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> module1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(&#123;</div><div class=\"line\">　　　　<span class=\"attr\">_count</span> : <span class=\"number\">0</span>,</div><div class=\"line\">　　　　<span class=\"attr\">m1</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　　　&#125;,</div><div class=\"line\">　　　　<span class=\"attr\">m2</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的函数m1()和m2(），都封装在module1对象里。使用的时候，就是调用这个对象的属性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　module1.m1();</div></pre></td></tr></table></figure></p>\n<p>但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　module1._count = <span class=\"number\">5</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"立即执行函数写法\"><a href=\"#立即执行函数写法\" class=\"headerlink\" title=\"立即执行函数写法\"></a>立即执行函数写法</h2><p>使用”立即执行函数”（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> _count = <span class=\"number\">0</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> m1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> m2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">　　　　　　<span class=\"attr\">m1</span> : m1,</div><div class=\"line\">　　　　　　<span class=\"attr\">m2</span> : m2</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;)();</div></pre></td></tr></table></figure></p>\n<p>使用上面的写法，外部代码无法读取内部的_count变量。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"built_in\">console</span>.info(module1._count); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>module1就是Javascript模块的基本写法。下面，再对这种写法进行加工。</p>\n<h2 id=\"放大模式\"><a href=\"#放大模式\" class=\"headerlink\" title=\"放大模式\"></a>放大模式</h2><p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”（augmentation）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mod</span>)</span>&#123;</div><div class=\"line\">　　　　mod.m3 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> mod;</div><div class=\"line\">　　&#125;)(module1);</div></pre></td></tr></table></figure></p>\n<p>上面的代码为module1模块添加了一个新方法m3()，然后返回新的module1模块。</p>\n<h2 id=\"宽放大模式（Loose-augmentation）\"><a href=\"#宽放大模式（Loose-augmentation）\" class=\"headerlink\" title=\"宽放大模式（Loose augmentation）\"></a>宽放大模式（Loose augmentation）</h2><p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> module1 = ( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mod</span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　　　<span class=\"keyword\">return</span> mod;</div><div class=\"line\">　　&#125;)(<span class=\"built_in\">window</span>.module1 || &#123;&#125;);</div></pre></td></tr></table></figure></p>\n<p>与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p>\n<h2 id=\"输入全局变量\"><a href=\"#输入全局变量\" class=\"headerlink\" title=\"输入全局变量\"></a>输入全局变量</h2><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<br>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, YAHOO</span>) </span>&#123;</div><div class=\"line\">　　　　<span class=\"comment\">//...</span></div><div class=\"line\">　　&#125;)(jQuery, YAHOO);</div></pre></td></tr></table></figure></p>\n<p>上面的module1模块需要使用jQuery库和YUI库，就把这两个库（其实是两个模块）当作参数输入module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。这方面更多的讨论，参见Ben Cherry的著名文章《JavaScript Module Pattern: In-Depth》。</p>\n<h2 id=\"模块的规范\"><a href=\"#模块的规范\" class=\"headerlink\" title=\"模块的规范\"></a>模块的规范</h2><p>先想一想，为什么模块很重要？<br>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。<br>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。<br>目前，通行的Javascript模块规范共有两种：CommonJS和AMD。我主要介绍AMD，但是要先从CommonJS讲起。<br>八、CommonJS<br>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。</p>\n<p>这标志”Javascript模块化编程”正式诞生。因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。<br>node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div></pre></td></tr></table></figure></p>\n<p>然后，就可以调用模块提供的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div><div class=\"line\">　　math.add(<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure></p>\n<p>因为这个系列主要针对浏览器编程，不涉及node.js，所以对CommonJS就不多做介绍了。我们在这里只要知道，require()用于加载模块就行了。</p>\n<h2 id=\"浏览器环境\"><a href=\"#浏览器环境\" class=\"headerlink\" title=\"浏览器环境\"></a>浏览器环境</h2><p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。<br>但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题，你能看出来吗？<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</div><div class=\"line\">　　math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</div></pre></td></tr></table></figure></p>\n<p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<br>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。<br>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"built_in\">require</span>([<span class=\"built_in\">module</span>], callback);</div></pre></td></tr></table></figure></p>\n<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>) </span>&#123;</div><div class=\"line\">　　　　math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481102595810,
				"created_by": 2,
				"updated_at": 1481183308456,
				"updated_by": 2,
				"published_at": 1481102595810,
				"published_by": 2
			},
			{
				"id": "ciwg0zxwt000vq0fc5a64kbj1",
				"title": "JavaScript 模块化编程 - Module Pattern",
				"slug": "js-modden-coder",
				"markdown": "前言\n\nThe Module Pattern，模块模式，也译为模组模式，是一种通用的对代码进行模块化组织与定义的方式。这里所说的模块（Modules），是指实现某特定功能的一组方法和代码。许多现代语言都定义了代码的模块化组织方式，比如 Golang 和 Java，它们都使用 package 与 import 来管理与使用模块，而目前版本的 JavaScript 并未提供一种原生的、语言级别的模块化组织模式，而是将模块化的方法交由开发者来实现。因此，出现了很多种 JavaScript 模块化的实现方式，比如，CommonJS Modules、AMD 等。\n<!--more-->\n以 AMD 为例，该规范使用 define 函数来定义模块。使用 AMD 规范进行模块化编程是很简单的，大致上的结构是这样的：\n\n```js\ndefine(factory(){\n  // 模块代码\n  // return something;\n});\n```\n目前尚在制定中的 Harmony/ECMAScript 6（也称为 ES.next），会对模块作出语言级别的定义，但距离实用尚遥不可及，这里暂时不讨论它。\n\n作为一种模式，模块模式其实一直伴随着 JavaScript 存在，与 ES 6 无关。最近我需要重构自己的一些代码，因此我参考和总结了一些实用的模块化编程实践，以便更好的组织我的代码。需要注意的是，本文只是个人的一个总结，比较简单和片面，详尽的内容与剖析请参看文后的参考资料，它们写得很好。本文并不关心模块如何载入，只关心现今该如何组织模块化的代码。还有，不必过于纠结所谓的模式，真正重要的其实还是模块代码及思想。所谓模式，不过是我们书写代码的一些技巧和经验的总结，是一些惯用法，实践中应灵活运用。\n\n模块模式\n--\n### 闭包与 IIFE (Immediately-Invoked Function Expression)\n\n模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。现今流行的一些 JS 库中经常见到以下形式的代码：\n\n```js\n;(function (参数) {\n  // 模块代码\n  // return something;\n})(参数);\n```\n上面的代码定义了一个匿名函数，并立即调用自己，这叫做自调用匿名函数（SIAF），更准确一点，称为立即调用的函数表达 (Immediately-Invoked Function Expression, IIFE–读做“iffy”)。\n\n在闭包中，可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。而通过返回对象或函数，或是将某对象作为参数传入，在函数体内对该对象进行操作，就可以公开我们所希望对外暴露的公开的方法与数据。\n\n这，其实就是模块模式的本质。\n\n注1：上面的代码中，最后的一对括号是对匿名函数的调用，因此必不可少。而前面的一对围绕着函数表达式的一对括号并不是必需的，但它可以用来给开发人员一个指示 -- 这是一个 IIFE。也有一些开发者在函数表达式前面加上一个惊叹号（!）或分号（;)，而不是用括号包起来。比如 knockoutjs 的源码大致就是这样的：\n\n```js\n!function (参数) {\n  // 代码\n  // return something\n}(参数);\n```\n还有些人喜欢用括号将整个 IIFE 围起来，这样就变成了以下的形式：\n\n```js\n(function (参数) {\n  // 代码\n  // return something\n}(参数));\n```\n注2：在有些人的代码中，将 undefined 作为上面代码中的一个参数，他们那样做是因为 undefined 并不是 JavaScript 的保留字，用户也可以定义它，这样，当判断某个值是否是 undefined 的时候，判断可能会是错误的。将 undefined 作为一个参数传入，是希望代码能按预期那样运行。不过我认为，一般情况下那样做并没太大意义。\n\n### 参数输入\n\nJavaScript 有一个特性叫做隐式全局变量（implied globals），当使用一个变量名时，JavaScript 解释器将反向遍历作用域链来查找变量的声明，如果没有找到，就假定该变量是全局变量。这种特性使得我们可以在闭包里随处引用全局变量，比如 jQuery 或 window。然而，这是一种不好的方式。\n\n考虑模块的独立性和封装，对其它对象的引用应该通过参数来引入。如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们，而非在模块内直接引用这些对象的名字。以 jQuery 为例，若在参数中没有输入 jQuery 对象就在模块内直接引用 $ 这个对象，是有出错的可能的。正确的方式大致应该是这样的：\n```js\n;(function (q, w) {\n  // q is jQuery\n  // w is window\n  // 局部变量及代码\n  // 返回\n})(jQuery, window);\n```\n相比隐式全局变量，将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来。这样做还有个好处，我们可以给那些全局对象起一个别名，比如上例中的 \"q\"。现在看看你的代码，是否没有经过对 jQuery 的引用就到处都是\"$\"？\n\n### 模块输出（Module Export）\n\n有时我们不只是要使用全局变量，我们也要声明和输出模块中的对象，这可以通过匿名函数的 return 语句来达成，而这也构成了一个完整的模块模式。来看一个完整的例子：\n\n```js\nvar MODULE = (function () {\n    var my = {},\n        privateVariable = 1;\n\n    function privateMethod() {\n        // ...\n    }\n\n    my.moduleProperty = 1;\n    my.moduleMethod = function () {\n        // ...\n    };\n\n    return my;\n}());\n```\n这段代码声明了一个变量 MODULE，它带有两个可访问的属性：moduleProperty 和 moduleMethod，其它的代码都封装在闭包中保持着私有状态。参考以前提过的参数输入，我们还可以通过参数引用其它全局变量。\n\n#### 输出简单对象\n\n很多时候我们 return 一个对象作为模块的输出，比如上例就是。\n\n另外，使用对象直接量（Object Literal Notation）来表达 JavaScript 对象是很常见的。比如：var x = { p1: 1, p2: \"2\", f: function(){ /*... */ } }\n\n很多时候我们都能见到这样的模块化代码：\n\n```js\nvar Module1 = (function () {\n  var private_variable = 1;\n  function private_method() { /*...*/ }\n\n  var my = {\n    property1: 1,\n    property2: private_variable,\n    method1: private_method,\n    method2: function () {\n        // ...\n    }\n  };\n  return my;\n}());\n```\n另外，对于简单的模块化代码，若不涉及私有成员等，其实也可以直接使用对象直接量来表达一个模块：\n\n```js\nvar Widget1 = {\n  name: \"who am i?\",\n  settings: {\n    x: 0,\n    y: 0\n  },\n  call_me: function () {\n    // ...\n  }\n};\n```\n有一篇文章讲解了这种形式： How Do You Structure JavaScript? The Module Pattern Edition\n\n不过这只是一种简单的形式，你可以将它看作是模块模式的一种基础的简单表达形式，而把闭包形式看作是对它的一个封装。\n\n#### 输出函数\n\n有时候我们希望返回的并不是一个对象，而是一个函数。有两种需求要求我们返回一个函数，一种情况是我们需要它是一个函数，比如 jQuery，它是一个函数而不是一个简单对象；另一种情况是我们需要的是一个“类”而不是一个直接量，之后我们可以用 \"new\" 来实例它。目前版本的 JavaScript 并没有专门的“类”定义，但它却可以通过 function 来表达。\n\n```js\nvar Cat = (function () {\n  // 私有成员及代码 ...\n\n  return function(name) {\n    this.name = name;\n    this.bark = function() { /*...*/ }\n  };\n}());\n\nvar tomcat = new Cat(\"Tom\");\ntomcat.bark();\n```\n为什么不直接定义一个 function 而要把它放在闭包里呢？简单点的情况，确实不需要使用 IIFE 这种形式，但复杂点的情况，在构造我们所需要的函数或是“类”时，若需要定义一些私有的函数，就有必要使用 IIFE 这种形式了。\n\n另外，在 ECMAScript 第五版中，提出了 Object.create() 方法。这时可以将一个对象视作“类”，并使用 Object.create() 进行实例化，不需使用 \"new\"。\n\n### Revealing Module Pattern\n\n前面已经提到一种形式是输出对象直接量（Object Literal Notation），而 Revealing Module Pattern 其实就是这种形式，只是做了一些限定。这种模式要求在私有范围内中定义变量和函数，然后返回一个匿名对象，在该对象中指定要公开的成员。参见下面的代码：\n\n```js\nvar MODULE = (function () {\n  // 私有变量及函数\n  var x = 1;\n  function f1() {}\n  function f2() {}\n\n  return {\n    public_method1: f1,\n    public_method2: f2\n  };\n}());\n```\n 模块模式的变化\n---\n### 扩展\n\n上面的举例都是在一个地方定义模块，如果我们需要在数个文件中分别编写一个模块的不同部分该怎么办呢？或者说，如果我们需要对已有的模块作出扩展该怎么办呢？其实也很简单，将模块对象作为参数输入，扩展后再返回自己就可以了。比如：\n\n```js\nvar MODULE = (function (my) {\n  my.anotherMethod = function () {\n    // added method...\n  };\n\n  return my;\n}(MODULE));\n```\n上面的代码为对象 MODULE 增加了一个 \"anotherMethod\" 方法。\n\n\n### 松耦合扩展（Loose Augmentation）\n\n上面的代码要求 MODULE 对象是已经定义过的。如果这个模块的各个组成部分并没有加载顺序要求的话，其实可以允许输入的参数为空对象，那么我们将上例中的参数由 MODULE 改为 MODULE || {} 就可以了：\n\n```js\nvar MODULE = (function (my) {\n  // add capabilities...\n  return my;\n}(MODULE || {}));\n```\n\n### 紧耦合扩展（Tight Augmentation）\n\n与上例不同，有时我们要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法。这时，对模块的定义顺序是有要求的。\n\n```js\nvar MODULE = (function (my) {\n  var old_moduleMethod = my.moduleMethod;\n\n  my.moduleMethod = function () {\n    // 方法重载\n    // 可通过 old_moduleMethod 调用以前的方法...\n  };\n\n  return my;\n}(MODULE));\n```\n\n### 克隆与继承（Cloning and Inheritance）\n\n\n\n\n```js\nvar MODULE_TWO = (function (old) {\n    var my = {},\n        key;\n\n    for (key in old) {\n        if (old.hasOwnProperty(key)) {\n            my[key] = old[key];\n        }\n    }\n\n    var super_moduleMethod = old.moduleMethod;\n    my.moduleMethod = function () {\n        // override method on the clone, access to super through super_moduleMethod\n    };\n\n    return my;\n}(MODULE));\n```\n有时我们需要复制和继承原对象，上面的代码演示了这种操作，但未必完美。如果你可以使用 Object.create() 的话，请使用 Object.create() 来改写上面的代码：\n\n```js\nvar MODULE_TWO = (function (old) {\n  var my = Object.create(old);\n\n  var super_moduleMethod = old.moduleMethod;\n  my.moduleMethod = function () {\n    // override method ...\n  };\n\n  return my;\n}(MODULE));\n```\n\n### 子模块（Sub-modules）\n\n模块对象当然可以再包含子模块，形如 MODULE.Sub=(function(){}()) 之类，这里不再展开叙述了。\n\n### 各种形式的混合\n\n以上介绍了常见的几种模块化形式，实际应用中有可能是这些形式的混合体。比如：\n\n```js\nvar UTIL = (function (parent, $) {\n    var my = parent.ajax = parent.ajax || {};\n\n    my.get = function (url, params, callback) {\n        // ok, so I'm cheating a bit :)\n        return $.getJSON(url, params, callback);\n    };\n\n    // etc...\n\n    return parent;\n}(UTIL || {}, jQuery));\n```\n\n与其它模块规范或 JS 库的适配\n---\n### 模块环境探测\n\n现今，CommonJS Modules 与 AMD 有着广泛的应用，如果确定 AMD 的 define 是可用的，我们当然可以使用 define 来编写模块化的代码。然而，我们不能假定我们的代码必然运行于 AMD 环境下。有没有办法可以让我们的代码既兼容于 CommonJS Modules 或 AMD 规范，又能在一般环境下运行呢？\n\n其实我们只需要在某个地方加上对 CommonJS Modules 与 AMD 的探测并根据探测结果来“注册”自己就可以了，以上那些模块模式仍然有用。\n\nAMD 定义了 define 函数，我们可以使用 typeof 探测该函数是否已定义。若要更严格一点，可以继续判断 define.amd 是否有定义。另外，SeaJS 也使用了 define 函数，但和 AMD 的 define 又不太一样。\n\n对于 CommonJS，可以检查 exports 或是 module.exports 是否有定义。\n\n现在，我写一个比较直白的例子来展示这个过程：\n\n```js\nvar MODULE = (function () {\n  var my = {};\n  // 代码 ...\n\n  if (typeof define == 'function') {\n    define( function(){ return my; } );\n  }else if (typeof module != 'undefined' && module.exports) {\n    module.exports = my;\n  }\n  return my;\n}());\n```\n上面的代码在返回 my 对象之前，先检测自己是否是运行在 AMD 环境之中（检测 define 函数是否有定义），如果是，就使用 define 来定义模块，否则，继续检测是否运行于 CommonJS 中，比如 NodeJS，如果是，则将 my 赋值给 module.exports。因此，这段代码应该可以同时运行于 AMD、CommonJS 以及一般的环境之中。另外，我们的这种写法应该也可在 SeaJS 中正确执行。\n\n### 其它一些 JS 库的做法\n\n现在许多 JS 库都加入了对 AMD 或 CommonJS Modules 的适应，比如 jQuery, Mustache, doT, Juicer 等。\n\njQuery 的写法可参考 exports.js:\n\n```js\nif ( typeof module === \"object\" && module && typeof module.exports === \"object\" ) {\n    module.exports = jQuery;\n} else {\n    if ( typeof define === \"function\" && define.amd ) {\n        define( \"jquery\", [], function () { return jQuery; } );\n    }\n}\n\nif ( typeof window === \"object\" && typeof window.document === \"object\" ) {\n    window.jQuery = window.$ = jQuery;\n}\n```\n与前面我写的那段代码有些不同，在对 AMD 和 CommonJS 探测之后，它将 jQuery 注册成了 window 对象的成员。\n\n然而，jQuery 是一个浏览器端的 JS 库，它那样写当然没问题。但如果我们所写的是一个通用的库，就不应使用 window 对象了，而应该使用全局对象，而这一般可以使用 this 来得到。\n\n我们看看 Mustache 是怎么做的：\n\n```js\n(function (root, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else {\n    var mustache = {};\n    factory(mustache);\n    if (typeof define === \"function\" && define.amd) {\n      define(mustache); // AMD\n    } else {\n      root.Mustache = mustache; // <script>\n    }\n  }\n}(this, function (mustache) {\n  // 模块主要的代码放在这儿\n});\n```\n这段代码与前面介绍的方式不太一样，它使用了两个匿名函数。后面那个函数可以看作是模块代码的工厂函数，它是模块的主体部分。前面那个函数对运行环境进行检测，根据检测的结果对模块的工厂函数进行调用。另外，作为一个通用库，它并没使用 window 对象，而是使用了 this，因为在简单的函数调用中，this 其实就是全局对象。\n\n再看看 doT 的做法。doT 的做法与 Mustache 不同，而是更接近于我在前面介绍 AMD 环境探测的那段代码：\n\n```js\n(function() {\n    \"use strict\";\n\n    var doT = {\n        version: '1.0.0',\n        templateSettings: { /*...*/ },\n        template: undefined, //fn, compile template\n        compile:  undefined  //fn, for express\n    };\n\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = doT;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function(){return doT;});\n    } else {\n        (function(){ return this || (0,eval)('this'); }()).doT = doT;\n    }\n    // ...\n}());\n```\n这段代码里的 (0, eval)('this') 是一个小技巧，这个表达式用来得到 Global 对象，'this' 其实是传递给 eval 的参数，但由于 eval 是经由 (0, eval) 这个表达式间接得到的，因此 eval 将会在全局对象作用域中查找 this，结果得到的是全局对象。若是代码运行于浏览器中，那么得到的其实是 window 对象。这里有一个针对它的讨论： http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\n\n其实也有其它办法来获取全局对象的，比如，使用函数的 call 或 apply，但不给参数，或是传入 null：\n\n```js\nvar global_object = (function(){ return this; }).call();\n```\n你可以参考这篇文章： Javascript的this用法\n\nJuicer 则没有检测 AMD，它使用了如下的语句来检测 CommonJS Modules：\n\n```js\ntypeof(module) !== 'undefined' && module.exports ? module.exports = juicer : this.juicer = juicer;\n```\n另外，你还可以参考一下这个： https://gist.github.com/kitcambridge/1251221\n```js\n(function (root, Library) {\n  // The square bracket notation is used to avoid property munging by the Closure Compiler.\n  if (typeof define == \"function\" && typeof define[\"amd\"] == \"object\" && define[\"amd\"]) {\n    // Export for asynchronous module loaders (e.g., RequireJS, `curl.js`).\n    define([\"exports\"], Library);\n  } else {\n    // Export for CommonJS environments, web browsers, and JavaScript engines.\n    Library = Library(typeof exports == \"object\" && exports || (root[\"Library\"] = {\n      \"noConflict\": (function (original) {\n        function noConflict() {\n          root[\"Library\"] = original;\n          // `noConflict` can't be invoked more than once.\n          delete Library.noConflict;\n          return Library;\n        }\n        return noConflict;\n      })(root[\"Library\"])\n    }));\n  }\n})(this, function (exports) {\n  // ...\n  return exports;\n});\n```\n我觉得这个写得有些复杂了，我也未必需要我的库带有 noConflict 方法。不过，它也可以是个不错的参考。\n\n JavaScript 模块化的未来\n--\n未来的模块化方案会是什么样的？我不知道，但不管将来如何演化，作为一种模式，模块模式是不会过时和消失的。\n\n如前所述，尚在制定中的 ES 6 会对模块作出语言级别的定义。我们来看一个实例，以下的代码段摘自“ES6:JavaScript中将会有的几个新东西”：\n\n```js\nmodule Car {\n  // 内部变量\n  var licensePlateNo = '556-343';\n  // 暴露到外部的变量和函数\n  export function drive(speed, direction) {\n    console.log('details:', speed, direction);\n  }\n  export module engine{\n    export function check() { }\n  }\n  export var miles = 5000;\n  export var color = 'silver';\n};\n```\n我不知道 ES 6 将来会否对此作出改变，对上面的这种代码形式，不同的人会有不同的看法。就我个人而言，我十分不喜欢这种形式！\n\n确实，我们可能需要有一种统一的模块化定义方式。发明 AMD 和 RequireJS 的人也说过 AMD 和 RequireJS 应该被淘汰了，运行环境应该提供模块的原生支持。然而，ES 6 中的模块定义是否是正确的？它是否是一个好的解决方案呢？我不知道，但我个人真的很不喜欢那种方式。很多人十分喜欢把其它语言的一些东西生搬硬套到 JavaScript 中，或是孜孜不倦地要把 JavaScript 变成另外一种语言，我相当讨厌这种行为。我并非一个保守的人，我乐意接受新概念、新语法，只要它是好的。但是，ES 6 草案中的模块规范是我不喜欢的，起码，我认为它脱离了现实，否定了开源社区的实践和经验，是一种意淫出来的东西，这使得它在目前不能解决任何实际问题，反而是来添乱的。\n\n按目前的 ES6 草案所给出的模块化规范，它并没有采用既有的 CommonJS Modules 和 AMD 规范，而是定义了一种新的规范，而且这种规范修改了 JavaScript 既有的语法形式，使得它没有办法像 ES5 中的 Object.create、Array.forEach 那样可以利用现有版本的 JavaScript 编写一些代码来实现它。这也使得 ES 6 的模块化语法将在一段时期内处于不可用的状态。\n\n引入新的语法也不算是问题，然而，为了模块而大费周折引出那么多新的语法和定义，真的是一种好的选择么？话说，它解决了什么实质性的问题而非如此不可？现今流行的 AMD 其实简单到只定义了一个 \"define\" 函数，它有什么重大问题？就算那些专家因种种原因或目的而无法接受 AMD 或其它开源社区的方案，稍作出一些修改和中和总是可以的吧，非要把 JavaScript 改头换面不可么？确实有人写了一些观点来解释为何不用 AMD，然而，那些解释和观点其实大都站不住脚。比如说，其中一个解释是 AMD 规范不兼容于 ES 6！可笑不可笑？ES 6 尚未正式推出，完全实现了 ES 6 的 JavaScript 运行时也没几个，而 AMD 在开源社区中早已十分流行，这个时候说 AMD 不兼容 ES 6，我不知道这是什么意思。\n\n就我看来，现今各种形形色色的所谓标准化工作组，很多时候像是高高在上的神仙，他们拉不下脸全身心地参与到开源社区之中，他们就是要作出与开源社区不同的规范，以此来彰显他们的工作、专业与权威。而且，很多时候他们过于官僚，又或者夹杂在各大商业集团之间举棋不定。我不否认他们工作的重要性，然而，以专家自居而脱离或否定开源社区的实践，以及商业与政治的利益均衡等，使得他们的工作与开源社区相比，在技术的推动与发展上成效不足甚至添乱。\n\n回到 ES 6 中的模块，想想看，我需要修改我的代码，在其中加上诸如 module, export, import 之类的新的语法，修改之后的代码却没办法在现今版本的 JavaScript 中运行，而且，与现今流行的模块化方案相比，这些工作也没什么实质性的帮助，想想这些，我只感觉像是吃了一个苍蝇。\n\nES 6 的发展当然不会因为我的吐嘈而有任何变化，我也不愿再展开讨论。未来的模块化方案具体是什么样的无法知晓，但起码我可以得到以下的结论：\n\n模块模式不会过时\nES 6 不会接纳 AMD 等现有方案，但不管如何，JavaScript 将会有语言级别的模块定义\nES 6 中的模块在一段时期内是不可用的\n即使 ES 6 已达到实用阶段，现今的模块化方案仍会存在和发展\n\n",
				"html": "<p>前言</p>\n<p>The Module Pattern，模块模式，也译为模组模式，是一种通用的对代码进行模块化组织与定义的方式。这里所说的模块（Modules），是指实现某特定功能的一组方法和代码。许多现代语言都定义了代码的模块化组织方式，比如 Golang 和 Java，它们都使用 package 与 import 来管理与使用模块，而目前版本的 JavaScript 并未提供一种原生的、语言级别的模块化组织模式，而是将模块化的方法交由开发者来实现。因此，出现了很多种 JavaScript 模块化的实现方式，比如，CommonJS Modules、AMD 等。<br><a id=\"more\"></a><br>以 AMD 为例，该规范使用 define 函数来定义模块。使用 AMD 规范进行模块化编程是很简单的，大致上的结构是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(factory()&#123;</div><div class=\"line\">  <span class=\"comment\">// 模块代码</span></div><div class=\"line\">  <span class=\"comment\">// return something;</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>目前尚在制定中的 Harmony/ECMAScript 6（也称为 ES.next），会对模块作出语言级别的定义，但距离实用尚遥不可及，这里暂时不讨论它。</p>\n<p>作为一种模式，模块模式其实一直伴随着 JavaScript 存在，与 ES 6 无关。最近我需要重构自己的一些代码，因此我参考和总结了一些实用的模块化编程实践，以便更好的组织我的代码。需要注意的是，本文只是个人的一个总结，比较简单和片面，详尽的内容与剖析请参看文后的参考资料，它们写得很好。本文并不关心模块如何载入，只关心现今该如何组织模块化的代码。还有，不必过于纠结所谓的模式，真正重要的其实还是模块代码及思想。所谓模式，不过是我们书写代码的一些技巧和经验的总结，是一些惯用法，实践中应灵活运用。</p>\n<h2 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h2><h3 id=\"闭包与-IIFE-Immediately-Invoked-Function-Expression\"><a href=\"#闭包与-IIFE-Immediately-Invoked-Function-Expression\" class=\"headerlink\" title=\"闭包与 IIFE (Immediately-Invoked Function Expression)\"></a>闭包与 IIFE (Immediately-Invoked Function Expression)</h3><p>模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。现今流行的一些 JS 库中经常见到以下形式的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">参数</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 模块代码</span></div><div class=\"line\">  <span class=\"comment\">// return something;</span></div><div class=\"line\">&#125;)(参数);</div></pre></td></tr></table></figure>\n<p>上面的代码定义了一个匿名函数，并立即调用自己，这叫做自调用匿名函数（SIAF），更准确一点，称为立即调用的函数表达 (Immediately-Invoked Function Expression, IIFE–读做“iffy”)。</p>\n<p>在闭包中，可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。而通过返回对象或函数，或是将某对象作为参数传入，在函数体内对该对象进行操作，就可以公开我们所希望对外暴露的公开的方法与数据。</p>\n<p>这，其实就是模块模式的本质。</p>\n<p>注1：上面的代码中，最后的一对括号是对匿名函数的调用，因此必不可少。而前面的一对围绕着函数表达式的一对括号并不是必需的，但它可以用来给开发人员一个指示 – 这是一个 IIFE。也有一些开发者在函数表达式前面加上一个惊叹号（!）或分号（;)，而不是用括号包起来。比如 knockoutjs 的源码大致就是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">参数</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 代码</span></div><div class=\"line\">  <span class=\"comment\">// return something</span></div><div class=\"line\">&#125;(参数);</div></pre></td></tr></table></figure>\n<p>还有些人喜欢用括号将整个 IIFE 围起来，这样就变成了以下的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">参数</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 代码</span></div><div class=\"line\">  <span class=\"comment\">// return something</span></div><div class=\"line\">&#125;(参数));</div></pre></td></tr></table></figure>\n<p>注2：在有些人的代码中，将 undefined 作为上面代码中的一个参数，他们那样做是因为 undefined 并不是 JavaScript 的保留字，用户也可以定义它，这样，当判断某个值是否是 undefined 的时候，判断可能会是错误的。将 undefined 作为一个参数传入，是希望代码能按预期那样运行。不过我认为，一般情况下那样做并没太大意义。</p>\n<h3 id=\"参数输入\"><a href=\"#参数输入\" class=\"headerlink\" title=\"参数输入\"></a>参数输入</h3><p>JavaScript 有一个特性叫做隐式全局变量（implied globals），当使用一个变量名时，JavaScript 解释器将反向遍历作用域链来查找变量的声明，如果没有找到，就假定该变量是全局变量。这种特性使得我们可以在闭包里随处引用全局变量，比如 jQuery 或 window。然而，这是一种不好的方式。</p>\n<p>考虑模块的独立性和封装，对其它对象的引用应该通过参数来引入。如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们，而非在模块内直接引用这些对象的名字。以 jQuery 为例，若在参数中没有输入 jQuery 对象就在模块内直接引用 $ 这个对象，是有出错的可能的。正确的方式大致应该是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">q, w</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// q is jQuery</span></div><div class=\"line\">  <span class=\"comment\">// w is window</span></div><div class=\"line\">  <span class=\"comment\">// 局部变量及代码</span></div><div class=\"line\">  <span class=\"comment\">// 返回</span></div><div class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure></p>\n<p>相比隐式全局变量，将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来。这样做还有个好处，我们可以给那些全局对象起一个别名，比如上例中的 “q”。现在看看你的代码，是否没有经过对 jQuery 的引用就到处都是”$”？</p>\n<h3 id=\"模块输出（Module-Export）\"><a href=\"#模块输出（Module-Export）\" class=\"headerlink\" title=\"模块输出（Module Export）\"></a>模块输出（Module Export）</h3><p>有时我们不只是要使用全局变量，我们也要声明和输出模块中的对象，这可以通过匿名函数的 return 语句来达成，而这也构成了一个完整的模块模式。来看一个完整的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> my = &#123;&#125;,</div><div class=\"line\">        privateVariable = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    my.moduleProperty = <span class=\"number\">1</span>;</div><div class=\"line\">    my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>这段代码声明了一个变量 MODULE，它带有两个可访问的属性：moduleProperty 和 moduleMethod，其它的代码都封装在闭包中保持着私有状态。参考以前提过的参数输入，我们还可以通过参数引用其它全局变量。</p>\n<h4 id=\"输出简单对象\"><a href=\"#输出简单对象\" class=\"headerlink\" title=\"输出简单对象\"></a>输出简单对象</h4><p>很多时候我们 return 一个对象作为模块的输出，比如上例就是。</p>\n<p>另外，使用对象直接量（Object Literal Notation）来表达 JavaScript 对象是很常见的。比如：var x = { p1: 1, p2: “2”, f: function(){ /<em>… </em>/ } }</p>\n<p>很多时候我们都能见到这样的模块化代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Module1 = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> private_variable = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">private_method</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/*...*/</span> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> my = &#123;</div><div class=\"line\">    <span class=\"attr\">property1</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">property2</span>: private_variable,</div><div class=\"line\">    <span class=\"attr\">method1</span>: private_method,</div><div class=\"line\">    <span class=\"attr\">method2</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>另外，对于简单的模块化代码，若不涉及私有成员等，其实也可以直接使用对象直接量来表达一个模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Widget1 = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">\"who am i?\"</span>,</div><div class=\"line\">  <span class=\"attr\">settings</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">x</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">y</span>: <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">call_me</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>有一篇文章讲解了这种形式： How Do You Structure JavaScript? The Module Pattern Edition</p>\n<p>不过这只是一种简单的形式，你可以将它看作是模块模式的一种基础的简单表达形式，而把闭包形式看作是对它的一个封装。</p>\n<h4 id=\"输出函数\"><a href=\"#输出函数\" class=\"headerlink\" title=\"输出函数\"></a>输出函数</h4><p>有时候我们希望返回的并不是一个对象，而是一个函数。有两种需求要求我们返回一个函数，一种情况是我们需要它是一个函数，比如 jQuery，它是一个函数而不是一个简单对象；另一种情况是我们需要的是一个“类”而不是一个直接量，之后我们可以用 “new” 来实例它。目前版本的 JavaScript 并没有专门的“类”定义，但它却可以通过 function 来表达。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Cat = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 私有成员及代码 ...</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/*...*/</span> &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tomcat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Tom\"</span>);</div><div class=\"line\">tomcat.bark();</div></pre></td></tr></table></figure>\n<p>为什么不直接定义一个 function 而要把它放在闭包里呢？简单点的情况，确实不需要使用 IIFE 这种形式，但复杂点的情况，在构造我们所需要的函数或是“类”时，若需要定义一些私有的函数，就有必要使用 IIFE 这种形式了。</p>\n<p>另外，在 ECMAScript 第五版中，提出了 Object.create() 方法。这时可以将一个对象视作“类”，并使用 Object.create() 进行实例化，不需使用 “new”。</p>\n<h3 id=\"Revealing-Module-Pattern\"><a href=\"#Revealing-Module-Pattern\" class=\"headerlink\" title=\"Revealing Module Pattern\"></a>Revealing Module Pattern</h3><p>前面已经提到一种形式是输出对象直接量（Object Literal Notation），而 Revealing Module Pattern 其实就是这种形式，只是做了一些限定。这种模式要求在私有范围内中定义变量和函数，然后返回一个匿名对象，在该对象中指定要公开的成员。参见下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 私有变量及函数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">public_method1</span>: f1,</div><div class=\"line\">    <span class=\"attr\">public_method2</span>: f2</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h2 id=\"模块模式的变化\"><a href=\"#模块模式的变化\" class=\"headerlink\" title=\" 模块模式的变化\"></a> 模块模式的变化</h2><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>上面的举例都是在一个地方定义模块，如果我们需要在数个文件中分别编写一个模块的不同部分该怎么办呢？或者说，如果我们需要对已有的模块作出扩展该怎么办呢？其实也很简单，将模块对象作为参数输入，扩展后再返回自己就可以了。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</div><div class=\"line\">  my.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// added method...</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>上面的代码为对象 MODULE 增加了一个 “anotherMethod” 方法。</p>\n<h3 id=\"松耦合扩展（Loose-Augmentation）\"><a href=\"#松耦合扩展（Loose-Augmentation）\" class=\"headerlink\" title=\"松耦合扩展（Loose Augmentation）\"></a>松耦合扩展（Loose Augmentation）</h3><p>上面的代码要求 MODULE 对象是已经定义过的。如果这个模块的各个组成部分并没有加载顺序要求的话，其实可以允许输入的参数为空对象，那么我们将上例中的参数由 MODULE 改为 MODULE || {} 就可以了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// add capabilities...</span></div><div class=\"line\">  <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE || &#123;&#125;));</div></pre></td></tr></table></figure>\n<h3 id=\"紧耦合扩展（Tight-Augmentation）\"><a href=\"#紧耦合扩展（Tight-Augmentation）\" class=\"headerlink\" title=\"紧耦合扩展（Tight Augmentation）\"></a>紧耦合扩展（Tight Augmentation）</h3><p>与上例不同，有时我们要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法。这时，对模块的定义顺序是有要求的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">my</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> old_moduleMethod = my.moduleMethod;</div><div class=\"line\"></div><div class=\"line\">  my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 方法重载</span></div><div class=\"line\">    <span class=\"comment\">// 可通过 old_moduleMethod 调用以前的方法...</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<h3 id=\"克隆与继承（Cloning-and-Inheritance）\"><a href=\"#克隆与继承（Cloning-and-Inheritance）\" class=\"headerlink\" title=\"克隆与继承（Cloning and Inheritance）\"></a>克隆与继承（Cloning and Inheritance）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> my = &#123;&#125;,</div><div class=\"line\">        key;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> old) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (old.hasOwnProperty(key)) &#123;</div><div class=\"line\">            my[key] = old[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</div><div class=\"line\">    my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// override method on the clone, access to super through super_moduleMethod</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>有时我们需要复制和继承原对象，上面的代码演示了这种操作，但未必完美。如果你可以使用 Object.create() 的话，请使用 Object.create() 来改写上面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> my = <span class=\"built_in\">Object</span>.create(old);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</div><div class=\"line\">  my.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// override method ...</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<h3 id=\"子模块（Sub-modules）\"><a href=\"#子模块（Sub-modules）\" class=\"headerlink\" title=\"子模块（Sub-modules）\"></a>子模块（Sub-modules）</h3><p>模块对象当然可以再包含子模块，形如 MODULE.Sub=(function(){}()) 之类，这里不再展开叙述了。</p>\n<h3 id=\"各种形式的混合\"><a href=\"#各种形式的混合\" class=\"headerlink\" title=\"各种形式的混合\"></a>各种形式的混合</h3><p>以上介绍了常见的几种模块化形式，实际应用中有可能是这些形式的混合体。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UTIL = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, $</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> my = parent.ajax = parent.ajax || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    my.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, params, callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ok, so I'm cheating a bit :)</span></div><div class=\"line\">        <span class=\"keyword\">return</span> $.getJSON(url, params, callback);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// etc...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> parent;</div><div class=\"line\">&#125;(UTIL || &#123;&#125;, jQuery));</div></pre></td></tr></table></figure>\n<h2 id=\"与其它模块规范或-JS-库的适配\"><a href=\"#与其它模块规范或-JS-库的适配\" class=\"headerlink\" title=\"与其它模块规范或 JS 库的适配\"></a>与其它模块规范或 JS 库的适配</h2><h3 id=\"模块环境探测\"><a href=\"#模块环境探测\" class=\"headerlink\" title=\"模块环境探测\"></a>模块环境探测</h3><p>现今，CommonJS Modules 与 AMD 有着广泛的应用，如果确定 AMD 的 define 是可用的，我们当然可以使用 define 来编写模块化的代码。然而，我们不能假定我们的代码必然运行于 AMD 环境下。有没有办法可以让我们的代码既兼容于 CommonJS Modules 或 AMD 规范，又能在一般环境下运行呢？</p>\n<p>其实我们只需要在某个地方加上对 CommonJS Modules 与 AMD 的探测并根据探测结果来“注册”自己就可以了，以上那些模块模式仍然有用。</p>\n<p>AMD 定义了 define 函数，我们可以使用 typeof 探测该函数是否已定义。若要更严格一点，可以继续判断 define.amd 是否有定义。另外，SeaJS 也使用了 define 函数，但和 AMD 的 define 又不太一样。</p>\n<p>对于 CommonJS，可以检查 exports 或是 module.exports 是否有定义。</p>\n<p>现在，我写一个比较直白的例子来展示这个过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> my = &#123;&#125;;</div><div class=\"line\">  <span class=\"comment\">// 代码 ...</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define == <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    define( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> my; &#125; );</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> != <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = my;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>上面的代码在返回 my 对象之前，先检测自己是否是运行在 AMD 环境之中（检测 define 函数是否有定义），如果是，就使用 define 来定义模块，否则，继续检测是否运行于 CommonJS 中，比如 NodeJS，如果是，则将 my 赋值给 module.exports。因此，这段代码应该可以同时运行于 AMD、CommonJS 以及一般的环境之中。另外，我们的这种写法应该也可在 SeaJS 中正确执行。</p>\n<h3 id=\"其它一些-JS-库的做法\"><a href=\"#其它一些-JS-库的做法\" class=\"headerlink\" title=\"其它一些 JS 库的做法\"></a>其它一些 JS 库的做法</h3><p>现在许多 JS 库都加入了对 AMD 或 CommonJS Modules 的适应，比如 jQuery, Mustache, doT, Juicer 等。</p>\n<p>jQuery 的写法可参考 exports.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"built_in\">module</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span>.exports === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = jQuery;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd ) &#123;</div><div class=\"line\">        define( <span class=\"string\">\"jquery\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> jQuery; &#125; );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.document === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与前面我写的那段代码有些不同，在对 AMD 和 CommonJS 探测之后，它将 jQuery 注册成了 window 对象的成员。</p>\n<p>然而，jQuery 是一个浏览器端的 JS 库，它那样写当然没问题。但如果我们所写的是一个通用的库，就不应使用 window 对象了，而应该使用全局对象，而这一般可以使用 this 来得到。</p>\n<p>我们看看 Mustache 是怎么做的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span> &amp;&amp; exports) &#123;</div><div class=\"line\">    factory(exports); <span class=\"comment\">// CommonJS</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mustache = &#123;&#125;;</div><div class=\"line\">    factory(mustache);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">      define(mustache); <span class=\"comment\">// AMD</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      root.Mustache = mustache; <span class=\"comment\">// &lt;script&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mustache</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 模块主要的代码放在这儿</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这段代码与前面介绍的方式不太一样，它使用了两个匿名函数。后面那个函数可以看作是模块代码的工厂函数，它是模块的主体部分。前面那个函数对运行环境进行检测，根据检测的结果对模块的工厂函数进行调用。另外，作为一个通用库，它并没使用 window 对象，而是使用了 this，因为在简单的函数调用中，this 其实就是全局对象。</p>\n<p>再看看 doT 的做法。doT 的做法与 Mustache 不同，而是更接近于我在前面介绍 AMD 环境探测的那段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> doT = &#123;</div><div class=\"line\">        <span class=\"attr\">version</span>: <span class=\"string\">'1.0.0'</span>,</div><div class=\"line\">        <span class=\"attr\">templateSettings</span>: &#123; <span class=\"comment\">/*...*/</span> &#125;,</div><div class=\"line\">        <span class=\"attr\">template</span>: <span class=\"literal\">undefined</span>, <span class=\"comment\">//fn, compile template</span></div><div class=\"line\">        compile:  <span class=\"literal\">undefined</span>  <span class=\"comment\">//fn, for express</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = doT;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> doT;&#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> || (<span class=\"number\">0</span>,<span class=\"built_in\">eval</span>)(<span class=\"string\">'this'</span>); &#125;()).doT = doT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>这段代码里的 (0, eval)(‘this’) 是一个小技巧，这个表达式用来得到 Global 对象，’this’ 其实是传递给 eval 的参数，但由于 eval 是经由 (0, eval) 这个表达式间接得到的，因此 eval 将会在全局对象作用域中查找 this，结果得到的是全局对象。若是代码运行于浏览器中，那么得到的其实是 window 对象。这里有一个针对它的讨论： <a href=\"http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023</a></p>\n<p>其实也有其它办法来获取全局对象的，比如，使用函数的 call 或 apply，但不给参数，或是传入 null：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global_object = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;).call();</div></pre></td></tr></table></figure>\n<p>你可以参考这篇文章： Javascript的this用法</p>\n<p>Juicer 则没有检测 AMD，它使用了如下的语句来检测 CommonJS Modules：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"built_in\">module</span>) !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ? <span class=\"built_in\">module</span>.exports = juicer : <span class=\"keyword\">this</span>.juicer = juicer;</div></pre></td></tr></table></figure>\n<p>另外，你还可以参考一下这个： <a href=\"https://gist.github.com/kitcambridge/1251221\" target=\"_blank\" rel=\"external\">https://gist.github.com/kitcambridge/1251221</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, Library</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// The square bracket notation is used to avoid property munging by the Closure Compiler.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define == <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> define[<span class=\"string\">\"amd\"</span>] == <span class=\"string\">\"object\"</span> &amp;&amp; define[<span class=\"string\">\"amd\"</span>]) &#123;</div><div class=\"line\">    <span class=\"comment\">// Export for asynchronous module loaders (e.g., RequireJS, `curl.js`).</span></div><div class=\"line\">    define([<span class=\"string\">\"exports\"</span>], Library);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Export for CommonJS environments, web browsers, and JavaScript engines.</span></div><div class=\"line\">    Library = Library(<span class=\"keyword\">typeof</span> exports == <span class=\"string\">\"object\"</span> &amp;&amp; exports || (root[<span class=\"string\">\"Library\"</span>] = &#123;</div><div class=\"line\">      <span class=\"string\">\"noConflict\"</span>: (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">original</span>) </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noConflict</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          root[<span class=\"string\">\"Library\"</span>] = original;</div><div class=\"line\">          <span class=\"comment\">// `noConflict` can't be invoked more than once.</span></div><div class=\"line\">          <span class=\"keyword\">delete</span> Library.noConflict;</div><div class=\"line\">          <span class=\"keyword\">return</span> Library;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> noConflict;</div><div class=\"line\">      &#125;)(root[<span class=\"string\">\"Library\"</span>])</div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"keyword\">return</span> exports;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我觉得这个写得有些复杂了，我也未必需要我的库带有 noConflict 方法。不过，它也可以是个不错的参考。</p>\n<h2 id=\"JavaScript-模块化的未来\"><a href=\"#JavaScript-模块化的未来\" class=\"headerlink\" title=\" JavaScript 模块化的未来\"></a> JavaScript 模块化的未来</h2><p>未来的模块化方案会是什么样的？我不知道，但不管将来如何演化，作为一种模式，模块模式是不会过时和消失的。</p>\n<p>如前所述，尚在制定中的 ES 6 会对模块作出语言级别的定义。我们来看一个实例，以下的代码段摘自“ES6:JavaScript中将会有的几个新东西”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span> Car &#123;</div><div class=\"line\">  <span class=\"comment\">// 内部变量</span></div><div class=\"line\">  <span class=\"keyword\">var</span> licensePlateNo = <span class=\"string\">'556-343'</span>;</div><div class=\"line\">  <span class=\"comment\">// 暴露到外部的变量和函数</span></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drive</span>(<span class=\"params\">speed, direction</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'details:'</span>, speed, direction);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"built_in\">module</span> engine&#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>) </span>&#123; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">var</span> miles = <span class=\"number\">5000</span>;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">var</span> color = <span class=\"string\">'silver'</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我不知道 ES 6 将来会否对此作出改变，对上面的这种代码形式，不同的人会有不同的看法。就我个人而言，我十分不喜欢这种形式！</p>\n<p>确实，我们可能需要有一种统一的模块化定义方式。发明 AMD 和 RequireJS 的人也说过 AMD 和 RequireJS 应该被淘汰了，运行环境应该提供模块的原生支持。然而，ES 6 中的模块定义是否是正确的？它是否是一个好的解决方案呢？我不知道，但我个人真的很不喜欢那种方式。很多人十分喜欢把其它语言的一些东西生搬硬套到 JavaScript 中，或是孜孜不倦地要把 JavaScript 变成另外一种语言，我相当讨厌这种行为。我并非一个保守的人，我乐意接受新概念、新语法，只要它是好的。但是，ES 6 草案中的模块规范是我不喜欢的，起码，我认为它脱离了现实，否定了开源社区的实践和经验，是一种意淫出来的东西，这使得它在目前不能解决任何实际问题，反而是来添乱的。</p>\n<p>按目前的 ES6 草案所给出的模块化规范，它并没有采用既有的 CommonJS Modules 和 AMD 规范，而是定义了一种新的规范，而且这种规范修改了 JavaScript 既有的语法形式，使得它没有办法像 ES5 中的 Object.create、Array.forEach 那样可以利用现有版本的 JavaScript 编写一些代码来实现它。这也使得 ES 6 的模块化语法将在一段时期内处于不可用的状态。</p>\n<p>引入新的语法也不算是问题，然而，为了模块而大费周折引出那么多新的语法和定义，真的是一种好的选择么？话说，它解决了什么实质性的问题而非如此不可？现今流行的 AMD 其实简单到只定义了一个 “define” 函数，它有什么重大问题？就算那些专家因种种原因或目的而无法接受 AMD 或其它开源社区的方案，稍作出一些修改和中和总是可以的吧，非要把 JavaScript 改头换面不可么？确实有人写了一些观点来解释为何不用 AMD，然而，那些解释和观点其实大都站不住脚。比如说，其中一个解释是 AMD 规范不兼容于 ES 6！可笑不可笑？ES 6 尚未正式推出，完全实现了 ES 6 的 JavaScript 运行时也没几个，而 AMD 在开源社区中早已十分流行，这个时候说 AMD 不兼容 ES 6，我不知道这是什么意思。</p>\n<p>就我看来，现今各种形形色色的所谓标准化工作组，很多时候像是高高在上的神仙，他们拉不下脸全身心地参与到开源社区之中，他们就是要作出与开源社区不同的规范，以此来彰显他们的工作、专业与权威。而且，很多时候他们过于官僚，又或者夹杂在各大商业集团之间举棋不定。我不否认他们工作的重要性，然而，以专家自居而脱离或否定开源社区的实践，以及商业与政治的利益均衡等，使得他们的工作与开源社区相比，在技术的推动与发展上成效不足甚至添乱。</p>\n<p>回到 ES 6 中的模块，想想看，我需要修改我的代码，在其中加上诸如 module, export, import 之类的新的语法，修改之后的代码却没办法在现今版本的 JavaScript 中运行，而且，与现今流行的模块化方案相比，这些工作也没什么实质性的帮助，想想这些，我只感觉像是吃了一个苍蝇。</p>\n<p>ES 6 的发展当然不会因为我的吐嘈而有任何变化，我也不愿再展开讨论。未来的模块化方案具体是什么样的无法知晓，但起码我可以得到以下的结论：</p>\n<p>模块模式不会过时<br>ES 6 不会接纳 AMD 等现有方案，但不管如何，JavaScript 将会有语言级别的模块定义<br>ES 6 中的模块在一段时期内是不可用的<br>即使 ES 6 已达到实用阶段，现今的模块化方案仍会存在和发展</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481101913312,
				"created_by": 2,
				"updated_at": 1487207806108,
				"updated_by": 2,
				"published_at": 1481101913312,
				"published_by": 2
			},
			{
				"id": "ciwg0zxva000kq0fce4xf7392",
				"title": "AMD、CMD、UMD 模块的写法",
				"slug": "how-to-write-amd-cmd-umd",
				"markdown": "\n简介\n\n最近几年，我们可以选择的Javascript组件的生态系统一直在稳步增长。虽然陡增的选择范围是极好的，但当组件混合匹配使用时就会出现很尴尬的局面。开发新手们会很快发现不是所有组件都能彼此“和平相处”。\n\n为了解决这个问题，两种竞争关系的模块规范AMD和CommonJS问世了，它们允许开发者遵照一种约定的沙箱化和模块化的方式来写代码，这样就能避免“污染生态系统”。\n<!--more-->\nAMD\n---\n随着RequireJS成为最流行的实现方式，异步模块规范（AMD）在前端界已经被广泛认同。\n\n下面是只依赖jquery的模块foo的代码：\n\nJavaScript\n```js\n//    文件名: foo.js\ndefine(['jquery'], function ($) {\n    //    方法\n    function myFunc(){};\n\n    //    暴露公共方法\n    return myFunc;\n});\n```\n```js\n//    文件名: foo.js\ndefine(['jquery'], function ($) {\n    //    方法\n    function myFunc(){};\n\n    //    暴露公共方法\n    return myFunc;\n});\n```\n还有稍微复杂点的例子，下面的代码依赖了多个组件并且暴露多个方法:\n\nJavaScript\n```js\n// 文件名: foo.js\ndefine(['jquery', 'underscore'], function ($, _) {\n// 方法\nfunction a(){}; // 私有方法，因为没有被返回(见下面)\nfunction b(){}; // 公共方法，因为被返回了\nfunction c(){}; // 公共方法，因为被返回了\n     //    暴露公共方法\n    return {\n        b: b,\n        c: c\n    }\n});\n```\n```js\n// 文件名: foo.js\ndefine(['jquery', 'underscore'], function ($, _) {\n// 方法\nfunction a(){}; // 私有方法，因为没有被返回(见下面)\nfunction b(){}; // 公共方法，因为被返回了\nfunction c(){}; // 公共方法，因为被返回了\n     //    暴露公共方法\n    return {\n        b: b,\n        c: c\n    }\n});\n```\n定义的第一个部分是一个依赖数组，第二个部分是回调函数，只有当依赖的组件可用时（像RequireJS这样的脚本加载器会负责这一部分，包括找到文件路径）回调函数才被执行。\n\n注意，依赖组件和变量的顺序是一一对应的（例如，jquery->$, underscore->_）。\n\n同时注意，我们可以用任意的变量名来表示依赖组件。假如我们把$改成$$，在函数体里面的所有对jQuery的引用都由$变成了$$。\n\n还要注意，最重要的是你不能在回调函数外面引用变量$和_，因为它相对其它代码是独立的。这正是模块化的目的所在！\n\nCommonJS\n--\n如果你用Node写过东西的话，你可能会熟悉CommonJS的风格（node使用的格式与之相差无几）。因为有Browserify，它也一直被前端界广泛认同。\n\n就像前面的格式一样，下面是用CommonJS规范实现的foo模块的写法：\n\nJavaScript\n```js\n//    文件名: foo.js\n//    依赖\nvar $ = require('jquery');\n//    方法\nfunction myFunc(){};\n\n//    暴露公共方法（一个）\nmodule.exports = myFunc;\n```\n```js\n//    文件名: foo.js\n//    依赖\nvar $ = require('jquery');\n//    方法\nfunction myFunc(){};\n\n//    暴露公共方法（一个）\nmodule.exports = myFunc;\n```\n还有更复杂的例子，下面的代码依赖了多个组件并且暴露多个方法：\n\nJavaScript\n```js\n//    文件名: foo.js\nvar $ = require('jquery');\nvar _ = require('underscore');\n\n//    methods\nfunction a(){};    //    私有方法，因为它没在module.exports中 (见下面)\nfunction b(){};    //    公共方法，因为它在module.exports中定义了\nfunction c(){};    //    公共方法，因为它在module.exports中定义了\n\n//    暴露公共方法\nmodule.exports = {\n    b: b,\n    c: c\n};\n```\n```js\n//    文件名: foo.js\nvar $ = require('jquery');\nvar _ = require('underscore');\n\n//    methods\nfunction a(){};    //    私有方法，因为它没在module.exports中 (见下面)\nfunction b(){};    //    公共方法，因为它在module.exports中定义了\nfunction c(){};    //    公共方法，因为它在module.exports中定义了\n\n//    暴露公共方法\nmodule.exports = {\n    b: b,\n    c: c\n};\n```\nUMD: 通用模块规范\n--\n既然CommonJs和AMD风格一样流行，似乎缺少一个统一的规范。所以人们产生了这样的需求，希望有支持两种风格的“通用”模式，于是通用模块规范（UMD）诞生了。\n\n不得不承认，这个模式略难看，但是它兼容了AMD和CommonJS，同时还支持老式的“全局”变量规范：\nJavaScript\n```js\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS之类的\n        module.exports = factory(require('jquery'));\n    } else {\n        // 浏览器全局变量(root 即 window)\n        root.returnExports = factory(root.jQuery);\n    }\n}(this, function ($) {\n    //    方法\n    function myFunc(){};\n\n    //    暴露公共方法\n    return myFunc;\n}));\n```\n```js\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS之类的\n        module.exports = factory(require('jquery'));\n    } else {\n        // 浏览器全局变量(root 即 window)\n        root.returnExports = factory(root.jQuery);\n    }\n}(this, function ($) {\n    //    方法\n    function myFunc(){};\n\n    //    暴露公共方法\n    return myFunc;\n}));\n```\n保持跟上面例子一样的模式，下面是更复杂的例子，它依赖了多个组件并且暴露多个方法:\nJavaScript\n```js\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS之类的\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        // 浏览器全局变量(root 即 window)\n        root.returnExports = factory(root.jQuery, root._);\n    }\n}(this, function ($, _) {\n    //    方法\n    function a(){};    //    私有方法，因为它没被返回 (见下面)\n    function b(){};    //    公共方法，因为被返回了\n    function c(){};    //    公共方法，因为被返回了\n\n    //    暴露公共方法\n    return {\n        b: b,\n        c: c\n    }\n}));\n```\n```js\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS之类的\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        // 浏览器全局变量(root 即 window)\n        root.returnExports = factory(root.jQuery, root._);\n    }\n}(this, function ($, _) {\n    //    方法\n    function a(){};    //    私有方法，因为它没被返回 (见下面)\n    function b(){};    //    公共方法，因为被返回了\n    function c(){};    //    公共方法，因为被返回了\n\n    //    暴露公共方法\n    return {\n        b: b,\n        c: c\n    }\n}));\n```",
				"html": "<p>简介</p>\n<p>最近几年，我们可以选择的Javascript组件的生态系统一直在稳步增长。虽然陡增的选择范围是极好的，但当组件混合匹配使用时就会出现很尴尬的局面。开发新手们会很快发现不是所有组件都能彼此“和平相处”。</p>\n<p>为了解决这个问题，两种竞争关系的模块规范AMD和CommonJS问世了，它们允许开发者遵照一种约定的沙箱化和模块化的方式来写代码，这样就能避免“污染生态系统”。<br><a id=\"more\"></a></p>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>随着RequireJS成为最流行的实现方式，异步模块规范（AMD）在前端界已经被广泛认同。</p>\n<p>下面是只依赖jquery的模块foo的代码：</p>\n<p>JavaScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    文件名: foo.js</span></div><div class=\"line\">define([<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    文件名: foo.js</span></div><div class=\"line\">define([<span class=\"string\">'jquery'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>还有稍微复杂点的例子，下面的代码依赖了多个组件并且暴露多个方法:</p>\n<p>JavaScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 文件名: foo.js</span></div><div class=\"line\">define([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 私有方法，因为没有被返回(见下面)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 公共方法，因为被返回了</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 公共方法，因为被返回了</span></div><div class=\"line\">     <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">b</span>: b,</div><div class=\"line\">        <span class=\"attr\">c</span>: c</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 文件名: foo.js</span></div><div class=\"line\">define([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 私有方法，因为没有被返回(见下面)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 公共方法，因为被返回了</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 公共方法，因为被返回了</span></div><div class=\"line\">     <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">b</span>: b,</div><div class=\"line\">        <span class=\"attr\">c</span>: c</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>定义的第一个部分是一个依赖数组，第二个部分是回调函数，只有当依赖的组件可用时（像RequireJS这样的脚本加载器会负责这一部分，包括找到文件路径）回调函数才被执行。</p>\n<p>注意，依赖组件和变量的顺序是一一对应的（例如，jquery-&gt;$, underscore-&gt;_）。</p>\n<p>同时注意，我们可以用任意的变量名来表示依赖组件。假如我们把$改成$$，在函数体里面的所有对jQuery的引用都由$变成了$$。</p>\n<p>还要注意，最重要的是你不能在回调函数外面引用变量$和_，因为它相对其它代码是独立的。这正是模块化的目的所在！</p>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p>如果你用Node写过东西的话，你可能会熟悉CommonJS的风格（node使用的格式与之相差无几）。因为有Browserify，它也一直被前端界广泛认同。</p>\n<p>就像前面的格式一样，下面是用CommonJS规范实现的foo模块的写法：</p>\n<p>JavaScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    文件名: foo.js</span></div><div class=\"line\"><span class=\"comment\">//    依赖</span></div><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"><span class=\"comment\">//    方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    暴露公共方法（一个）</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = myFunc;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    文件名: foo.js</span></div><div class=\"line\"><span class=\"comment\">//    依赖</span></div><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"><span class=\"comment\">//    方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    暴露公共方法（一个）</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = myFunc;</div></pre></td></tr></table></figure>\n<p>还有更复杂的例子，下面的代码依赖了多个组件并且暴露多个方法：</p>\n<p>JavaScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    文件名: foo.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    methods</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    私有方法，因为它没在module.exports中 (见下面)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为它在module.exports中定义了</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为它在module.exports中定义了</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: b,</div><div class=\"line\">    <span class=\"attr\">c</span>: c</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//    文件名: foo.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    methods</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    私有方法，因为它没在module.exports中 (见下面)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为它在module.exports中定义了</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为它在module.exports中定义了</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>: b,</div><div class=\"line\">    <span class=\"attr\">c</span>: c</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"UMD-通用模块规范\"><a href=\"#UMD-通用模块规范\" class=\"headerlink\" title=\"UMD: 通用模块规范\"></a>UMD: 通用模块规范</h2><p>既然CommonJs和AMD风格一样流行，似乎缺少一个统一的规范。所以人们产生了这样的需求，希望有支持两种风格的“通用”模式，于是通用模块规范（UMD）诞生了。</p>\n<p>不得不承认，这个模式略难看，但是它兼容了AMD和CommonJS，同时还支持老式的“全局”变量规范：<br>JavaScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS之类的</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 浏览器全局变量(root 即 window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS之类的</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 浏览器全局变量(root 即 window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<p>保持跟上面例子一样的模式，下面是更复杂的例子，它依赖了多个组件并且暴露多个方法:<br>JavaScript<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS之类的</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>), <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 浏览器全局变量(root 即 window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery, root._);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    私有方法，因为它没被返回 (见下面)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为被返回了</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为被返回了</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">b</span>: b,</div><div class=\"line\">        <span class=\"attr\">c</span>: c</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS之类的</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>), <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 浏览器全局变量(root 即 window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery, root._);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    私有方法，因为它没被返回 (见下面)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为被返回了</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    公共方法，因为被返回了</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    暴露公共方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">b</span>: b,</div><div class=\"line\">        <span class=\"attr\">c</span>: c</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481101528543,
				"created_by": 2,
				"updated_at": 1481183302318,
				"updated_by": 2,
				"published_at": 1481101528543,
				"published_by": 2
			},
			{
				"id": "ciwg0zy1n001qq0fcfm0gjm6d",
				"title": "解决Webpack打包慢的问题",
				"slug": "webpack-slow-problem",
				"markdown": "\n问题分析\n---\n我们先来看一下完全没有任何优化的时候，Webpack 的打包速度（使用了jsx和babel的loader）。下面是我们的测试文件：\n```js\n//test.js\nvar react = require('react');\nvar ReactAddonsCssTransitionGroup = require('react-addons-css-transition-group');\nvar reactDOM = require('react-dom');\nvar reactRouter = require('react-router');\nvar superagent = require(\"superagent\");\nvar eventproxy = require(\"eventproxy\");\n```\n<!--more-->\n运行\n```js\nwebpack test.js\n```\n在我的2015款RMBP13，i5处理器，全SSD下，性能是这样的：\n\n\n\n没错你没有看错，这几个第三方轮子加起来有整整668个模块，全部打包需要20多秒。\n\n这意味着什么呢？你每次对业务代码的修改，gulp 或者 Webpack 监测到后都会重新打包，你要足足等20秒才能看到自己的修改结果。\n\n但是需要重新打包的只有你的业务代码，这些第三方库是完全不用重新打包的，它们的存在只会拖累打包性能。所以我们要找一些方法来优化这个过程。\n\n配置externals\n---\nWebpack 可以配置 externals 来将依赖的库指向全局变量，从而不再打包这个库，比如对于这样一个文件：\n```js\nimport React from 'react';\nconsole.log(React);\n如果你在 Webpack.config.js 中配置了externals：\n\nmodule.exports = {\n    externals: {\n        'react': 'window.React'\n    }\n    //其它配置忽略......\n};\n```\n等于让 Webpack 知道，对于 react 这个模块就不要打包啦，直接指向 window.React 就好。不过别忘了加载 react.min.js，让全局中有 React 这个变量。\n\n我们来看看性能，因为不用打包 React 了所以速度自然超级快，包也很小：\n\n\n\n配置externals的缺陷\n---\n问题如果就这么简单地解决了的话，那我就没必要写这篇文章了，下面我们加一个 react 的动画库 react-addons-css-transition-group 来试一试：\n```js\nimport React from 'react';\nimport ReactAddonsCssTransitionGroup from 'react-addons-css-transition-group';\nconsole.log(React);\n```\n\n对，你没有看错，我也没有截错图，新加了一个很小很小的动画库之后，性能又爆炸了。从模块数来看，一定是 Webpack 又把 react 重新打包了一遍。\n\n我们来看一下为什么一个很小很小的动画库会导致 Webpack 又傻傻地把 react 重新打包了一遍。找到 react-addons-css-transition-group 这个模块，然后看看它是怎么写的：\n```js\n// react-addons-css-transition-group模块\n// 入口文件 index.js\nmodule.exports = require('react/lib/ReactCSSTransitionGroup');\n这个动画模块就只有一行代码，唯一的作用就是指向 react 下面的一个子模块，我们再来看看这个子模块是怎么写的：\n\n// react模块\n// react/lib/ReactCSSTransitionGroup.js\nvar React = require('./React');\nvar ReactTransitionGroup = require('./ReactTransitionGroup');\nvar ReactCSSTransitionGroupChild = require('./ReactCSSTransitionGroupChild');\n//....剩余代码忽略\n```\n这个子模块又反回去依赖了 react 整个库的入口，这就是拖累 Webpack 的罪魁祸首。\n\n总而言之，问题是这样产生的：\n\nWebpack 发现我们依赖了 react-addons-css-transition-group\nWebpack 去打包 react-addons-css-transition-group 的时候发现它依赖了 react 模块下的一个叫 ReactTransitionGroup.js 的文件，于是 Webpack 去打包这个文件。\nReactTransitionGroup.js 依赖了整个 react 的入口文件 React.js，虽然我们设置了 externals ，但是 Webpack 不知道这个入口文件等效于 react 模块本身，于是我们可爱又敬业的 Webpack 就把整个 react 又重新打包了一遍。\n读到这里你可能会有疑问，为什么不能把这个动画库也设置到 externals 里，这样不是就不用打包了吗？\n\n问题就在于，这个动画库并没有提供生产环境的文件，或者说这个库根本没有提供 react-addons-css-transition-group.min.js 这个文件。\n\n这个问题不只存在于 react-addons-css-transition-group 中，对于 react 的大多数现有库来说都有这个依赖关系复杂的问题。\n\n初级解决方法\n---\n所以对于这个问题的解决方法就是，手工打包这些 module，然后设置 externals ，让 Webpack 不再打包它们。\n\n我们需要这样一个 lib-bundle.js 文件：\n```js\nwindow.__LIB[\"react\"] = require(\"react\");\nwindow.__LIB[\"react-addons-css-transition-group\"] = require(\"react-addons-css-transition-group\");\n// ...其它依赖包\n```\n我们在这里把一些第三方库注册到了 window.__LIB 下，这些库可以作为底层的基础库，免于重复打包。\n\n然后执行 webpack lib-bundle.js lib.js，得到打包好的 lib.js。然后去设置我们的 externals ：\n```js\nvar webpack = require('webpack');\nmodule.exports = {\n    externals: {\n        'react': 'window.__LIB[\"react\"]',\n        'react-addons-css-transition-group': 'window.__LIB[\"react-addons-css-transition-group\"]',\n        // 其它库\n    }\n    //其它配置忽略......\n};\n```\n这时由于 externals 的存在，Webpack 打包的时候就会避开这些模块超多，依赖关系复杂的库，把这些第三方 module 的入口指向预先打包好的 lib.js 的入口 window.__LIB，从而只打包我们的业务代码。\n\n终极解决方法\n---\n上面我们提到的方法本质上就是一种动态链接库（dll）”的思想，这在 windows 系统下面是一种很常见的思想。一个dll包，就是一个很纯净的依赖库，它本身不能运行，是用来给你的 app 或者业务代码引用的。\n\n同样的 Webpack 最近也新加入了这个功能：webpack.DllPlugin。使用这个功能需要把打包过程分成两步：\n\n打包ddl包\n引用ddl包，打包业务代码\n首先我们来打包ddl包，首先配置一个这样的 ddl.config.js：\n```js\nconst webpack = require('webpack');\n\nconst vendors = [\n    'react',\n    'react-dom',\n    'react-router',\n    // ...其它库\n];\n\nmodule.exports = {\n    output: {\n        path: 'build',\n        filename: '[name].js',\n        library: '[name]',\n    },\n    entry: {\n        \"lib\": vendors,\n    },\n    plugins: [\n        new webpack.DllPlugin({\n            path: 'manifest.json',\n            name: '[name]',\n            context: __dirname,\n        }),\n    ],\n};\n```\nwebpack.DllPlugin 的选项中：\n\npath 是 manifest.json 文件的输出路径，这个文件会用于后续的业务代码打包；\nname 是dll暴露的对象名，要跟 output.library 保持一致；\ncontext 是解析包路径的上下文，这个要跟接下来配置的 webpack.config.js 一致。\n运行Webpack，会输出两个文件一个是打包好的 lib.js，一个就是 manifest.json，它里面的内容大概是这样的：\n```js\n{\n    \"name\": \"vendor_ac51ba426d4f259b8b18\",\n    \"content\": {\n        \"./node_modules/react/react.js\": 1,\n        \"./node_modules/react/lib/React.js\": 2,\n        \"./node_modules/react/node_modules/object-assign/index.js\": 3,\n        \"./node_modules/react/lib/ReactChildren.js\": 4,\n        \"./node_modules/react/lib/PooledClass.js\": 5,\n        \"./node_modules/react/lib/reactProdInvariant.js\": 6,\n        // ............\n    }\n}\n```\n接下来我们就可以快乐地打包业务代码啦，首先写好打包配置文件 webpack.config.js：\n```js\nconst webpack = require('webpack');\nmodule.exports = {\n    output: {\n        path: 'build',\n        filename: '[name].js',\n    },\n    entry: {\n        app: './src/index.js',\n    },\n    plugins: [\n        new webpack.DllReferencePlugin({\n            context: __dirname,\n            manifest: require('./manifest.json'),\n        }),\n    ],\n};\n```\nwebpack.DllReferencePlugin 的选项中：\n\ncontext 需要跟之前保持一致，这个用来指导 Webpack 匹配 manifest 中库的路径；\nmanifest 用来引入刚才输出的 manifest.json 文件。\nDllPlugin 本质上的做法和我们手动分离这些第三方库是一样的，但是对于包极多的应用来说，自动化明显加快了生产效率。\n\nPS:\n其实还有一个速度的优化点，就是配置babel，让它排除一些文件，当loader这些文件时不进行转换，自动跳过；可在.babelrc文件中配置，示例：\n```js\n{\n    \"presets\": [\n        \"es2015\"\n    ],\n    \"ignore\":[\n        \"jquery.js\",\n        \"jquery.min.js\",\n        \"angular.js\",\n        \"angular.min.js\",\n        \"bootstrap.js\",\n        \"bootstrap.min.js\"\n    ]\n}\n```",
				"html": "<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>我们先来看一下完全没有任何优化的时候，Webpack 的打包速度（使用了jsx和babel的loader）。下面是我们的测试文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//test.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ReactAddonsCssTransitionGroup = <span class=\"built_in\">require</span>(<span class=\"string\">'react-addons-css-transition-group'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> reactDOM = <span class=\"built_in\">require</span>(<span class=\"string\">'react-dom'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> reactRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'react-router'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">\"superagent\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eventproxy = <span class=\"built_in\">require</span>(<span class=\"string\">\"eventproxy\"</span>);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>运行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack test.js</div></pre></td></tr></table></figure></p>\n<p>在我的2015款RMBP13，i5处理器，全SSD下，性能是这样的：</p>\n<p>没错你没有看错，这几个第三方轮子加起来有整整668个模块，全部打包需要20多秒。</p>\n<p>这意味着什么呢？你每次对业务代码的修改，gulp 或者 Webpack 监测到后都会重新打包，你要足足等20秒才能看到自己的修改结果。</p>\n<p>但是需要重新打包的只有你的业务代码，这些第三方库是完全不用重新打包的，它们的存在只会拖累打包性能。所以我们要找一些方法来优化这个过程。</p>\n<h2 id=\"配置externals\"><a href=\"#配置externals\" class=\"headerlink\" title=\"配置externals\"></a>配置externals</h2><p>Webpack 可以配置 externals 来将依赖的库指向全局变量，从而不再打包这个库，比如对于这样一个文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(React);</div><div class=\"line\">如果你在 Webpack.config.js 中配置了externals：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">externals</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'react'</span>: <span class=\"string\">'window.React'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//其它配置忽略......</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>等于让 Webpack 知道，对于 react 这个模块就不要打包啦，直接指向 window.React 就好。不过别忘了加载 react.min.js，让全局中有 React 这个变量。</p>\n<p>我们来看看性能，因为不用打包 React 了所以速度自然超级快，包也很小：</p>\n<h2 id=\"配置externals的缺陷\"><a href=\"#配置externals的缺陷\" class=\"headerlink\" title=\"配置externals的缺陷\"></a>配置externals的缺陷</h2><p>问题如果就这么简单地解决了的话，那我就没必要写这篇文章了，下面我们加一个 react 的动画库 react-addons-css-transition-group 来试一试：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactAddonsCssTransitionGroup <span class=\"keyword\">from</span> <span class=\"string\">'react-addons-css-transition-group'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(React);</div></pre></td></tr></table></figure></p>\n<p>对，你没有看错，我也没有截错图，新加了一个很小很小的动画库之后，性能又爆炸了。从模块数来看，一定是 Webpack 又把 react 重新打包了一遍。</p>\n<p>我们来看一下为什么一个很小很小的动画库会导致 Webpack 又傻傻地把 react 重新打包了一遍。找到 react-addons-css-transition-group 这个模块，然后看看它是怎么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// react-addons-css-transition-group模块</span></div><div class=\"line\"><span class=\"comment\">// 入口文件 index.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(<span class=\"string\">'react/lib/ReactCSSTransitionGroup'</span>);</div><div class=\"line\">这个动画模块就只有一行代码，唯一的作用就是指向 react 下面的一个子模块，我们再来看看这个子模块是怎么写的：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// react模块</span></div><div class=\"line\"><span class=\"comment\">// react/lib/ReactCSSTransitionGroup.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'./React'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ReactTransitionGroup = <span class=\"built_in\">require</span>(<span class=\"string\">'./ReactTransitionGroup'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ReactCSSTransitionGroupChild = <span class=\"built_in\">require</span>(<span class=\"string\">'./ReactCSSTransitionGroupChild'</span>);</div><div class=\"line\"><span class=\"comment\">//....剩余代码忽略</span></div></pre></td></tr></table></figure></p>\n<p>这个子模块又反回去依赖了 react 整个库的入口，这就是拖累 Webpack 的罪魁祸首。</p>\n<p>总而言之，问题是这样产生的：</p>\n<p>Webpack 发现我们依赖了 react-addons-css-transition-group<br>Webpack 去打包 react-addons-css-transition-group 的时候发现它依赖了 react 模块下的一个叫 ReactTransitionGroup.js 的文件，于是 Webpack 去打包这个文件。<br>ReactTransitionGroup.js 依赖了整个 react 的入口文件 React.js，虽然我们设置了 externals ，但是 Webpack 不知道这个入口文件等效于 react 模块本身，于是我们可爱又敬业的 Webpack 就把整个 react 又重新打包了一遍。<br>读到这里你可能会有疑问，为什么不能把这个动画库也设置到 externals 里，这样不是就不用打包了吗？</p>\n<p>问题就在于，这个动画库并没有提供生产环境的文件，或者说这个库根本没有提供 react-addons-css-transition-group.min.js 这个文件。</p>\n<p>这个问题不只存在于 react-addons-css-transition-group 中，对于 react 的大多数现有库来说都有这个依赖关系复杂的问题。</p>\n<h2 id=\"初级解决方法\"><a href=\"#初级解决方法\" class=\"headerlink\" title=\"初级解决方法\"></a>初级解决方法</h2><p>所以对于这个问题的解决方法就是，手工打包这些 module，然后设置 externals ，让 Webpack 不再打包它们。</p>\n<p>我们需要这样一个 lib-bundle.js 文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.__LIB[<span class=\"string\">\"react\"</span>] = <span class=\"built_in\">require</span>(<span class=\"string\">\"react\"</span>);</div><div class=\"line\"><span class=\"built_in\">window</span>.__LIB[<span class=\"string\">\"react-addons-css-transition-group\"</span>] = <span class=\"built_in\">require</span>(<span class=\"string\">\"react-addons-css-transition-group\"</span>);</div><div class=\"line\"><span class=\"comment\">// ...其它依赖包</span></div></pre></td></tr></table></figure></p>\n<p>我们在这里把一些第三方库注册到了 window.__LIB 下，这些库可以作为底层的基础库，免于重复打包。</p>\n<p>然后执行 webpack lib-bundle.js lib.js，得到打包好的 lib.js。然后去设置我们的 externals ：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">externals</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'react'</span>: <span class=\"string\">'window.__LIB[\"react\"]'</span>,</div><div class=\"line\">        <span class=\"string\">'react-addons-css-transition-group'</span>: <span class=\"string\">'window.__LIB[\"react-addons-css-transition-group\"]'</span>,</div><div class=\"line\">        <span class=\"comment\">// 其它库</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//其它配置忽略......</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这时由于 externals 的存在，Webpack 打包的时候就会避开这些模块超多，依赖关系复杂的库，把这些第三方 module 的入口指向预先打包好的 lib.js 的入口 window.__LIB，从而只打包我们的业务代码。</p>\n<h2 id=\"终极解决方法\"><a href=\"#终极解决方法\" class=\"headerlink\" title=\"终极解决方法\"></a>终极解决方法</h2><p>上面我们提到的方法本质上就是一种动态链接库（dll）”的思想，这在 windows 系统下面是一种很常见的思想。一个dll包，就是一个很纯净的依赖库，它本身不能运行，是用来给你的 app 或者业务代码引用的。</p>\n<p>同样的 Webpack 最近也新加入了这个功能：webpack.DllPlugin。使用这个功能需要把打包过程分成两步：</p>\n<p>打包ddl包<br>引用ddl包，打包业务代码<br>首先我们来打包ddl包，首先配置一个这样的 ddl.config.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> vendors = [</div><div class=\"line\">    <span class=\"string\">'react'</span>,</div><div class=\"line\">    <span class=\"string\">'react-dom'</span>,</div><div class=\"line\">    <span class=\"string\">'react-router'</span>,</div><div class=\"line\">    <span class=\"comment\">// ...其它库</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'build'</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span>,</div><div class=\"line\">        <span class=\"attr\">library</span>: <span class=\"string\">'[name]'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"lib\"</span>: vendors,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">'manifest.json'</span>,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'[name]'</span>,</div><div class=\"line\">            <span class=\"attr\">context</span>: __dirname,</div><div class=\"line\">        &#125;),</div><div class=\"line\">    ],</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>webpack.DllPlugin 的选项中：</p>\n<p>path 是 manifest.json 文件的输出路径，这个文件会用于后续的业务代码打包；<br>name 是dll暴露的对象名，要跟 output.library 保持一致；<br>context 是解析包路径的上下文，这个要跟接下来配置的 webpack.config.js 一致。<br>运行Webpack，会输出两个文件一个是打包好的 lib.js，一个就是 manifest.json，它里面的内容大概是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"vendor_ac51ba426d4f259b8b18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"content\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"./node_modules/react/react.js\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"./node_modules/react/lib/React.js\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"string\">\"./node_modules/react/node_modules/object-assign/index.js\"</span>: <span class=\"number\">3</span>,</div><div class=\"line\">        <span class=\"string\">\"./node_modules/react/lib/ReactChildren.js\"</span>: <span class=\"number\">4</span>,</div><div class=\"line\">        <span class=\"string\">\"./node_modules/react/lib/PooledClass.js\"</span>: <span class=\"number\">5</span>,</div><div class=\"line\">        <span class=\"string\">\"./node_modules/react/lib/reactProdInvariant.js\"</span>: <span class=\"number\">6</span>,</div><div class=\"line\">        <span class=\"comment\">// ............</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来我们就可以快乐地打包业务代码啦，首先写好打包配置文件 webpack.config.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'build'</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'[name].js'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">app</span>: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">context</span>: __dirname,</div><div class=\"line\">            <span class=\"attr\">manifest</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./manifest.json'</span>),</div><div class=\"line\">        &#125;),</div><div class=\"line\">    ],</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>webpack.DllReferencePlugin 的选项中：</p>\n<p>context 需要跟之前保持一致，这个用来指导 Webpack 匹配 manifest 中库的路径；<br>manifest 用来引入刚才输出的 manifest.json 文件。<br>DllPlugin 本质上的做法和我们手动分离这些第三方库是一样的，但是对于包极多的应用来说，自动化明显加快了生产效率。</p>\n<p>PS:<br>其实还有一个速度的优化点，就是配置babel，让它排除一些文件，当loader这些文件时不进行转换，自动跳过；可在.babelrc文件中配置，示例：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"presets\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"es2015\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"ignore\"</span>:[</div><div class=\"line\">        <span class=\"string\">\"jquery.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"jquery.min.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"angular.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"angular.min.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"bootstrap.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"bootstrap.min.js\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481100948739,
				"created_by": 2,
				"updated_at": 1481183378967,
				"updated_by": 2,
				"published_at": 1481100948739,
				"published_by": 2
			},
			{
				"id": "ciwg0zxro0002q0fcuvn2bnhy",
				"title": "babel5升级到babel6总结",
				"slug": "babel5-to-babel6",
				"markdown": "babel5 to babel6\n\n为什么要升级？\n---\n性能提升：据说compile速度提升20%（但在测试后发现，速度慢了20%+）。\n可配置的插件：更强的灵活性，以及更简单的插件API。\n更简洁的配置。\n<!--more-->\n重大变化\n---\n不再提供babel包\n命令行工具由babel-cli包提供\nnode api由babel-core提供\npolyfill由babel-polyfill提供\n.babelrc配置变化\n移除“blacklist”、“whitelist”、“optional”、“nonStandard”和“modules”等\n增加plugins：转码逻辑通过一系列插件实现，默认不使用任何插件\n增加presets配置，提供一些预设的插件集合\nexternal-helper选项由插件实现\n项目升级过程中遇到问题\n\nbabel官方未提供decorator transfrom插件\n\ndecorator是es7的提案，如果要是用的话，需要用用非官方插件：transform-decorators-legacy。\n\nbabel提供的es2015插件集默认包含transform-es2015-modules-commonjs插件\n\n项目系统需要将es6模块转成AMD模块，需要在plugins中指定使用transform-es2015-modules-amd.\n\nbabel提供的AMD模块转码插件默认开启strict mode\n\n关闭strict mode的方法：\n\n不使用preset-es2015，需要自定义preset或者在plugins中引入所有需要的插件;\n插件中做如下配置：\n```js\n{\n    \"plugins\": [\n        [\"transform-es2015-modules-amd\", {\"strict\": false}]\n    ]\n}\n```\nNotes：如果不提供es2015相关插件的preset，preset-stage-x也不能使用\n备注下：preset是一系列plugin 的集合，而stage-x代表着支持es6哪个阶段的语法。\n```js\nstage-0 - Strawman: just an idea, possible Babel plugin.\nstage-1 - Proposal: this is worth working on.\nstage-2 - Draft: initial spec.\nstage-3 - Candidate: complete spec and initial browser implementations.\nstage-4 - Finished: will be added to the next yearly release.\n```\nes6代码中有require时会导致转码失败\n\nes6代码中出现require时，babel5能正确转码，但babel6会报如下错误：\n\nProperty object of MemberExpression expected node to be of a type [\"Expression\"] but instead got null.\n解决方法：讲require变更为import。\n\nwindows7下会出现Couldn’t find preset\n\n当安装babel插件的是时候，在windows7环境上不能使用如下命令来安装，会报”Couldn’t find preset “es2015” relative to directory”。\n\nnpm install --save-dev babel-preset-es2015\n解决方法：升级node版本至5+，npm3+或者安装preset安装的时候，使用\n\nnpm install --save babel-preset-es2015\n原因是不同的操作系统cache策略不同。\n\nCache files are stored in ~/.npm on Posix, or ~/npm-cache on Windows.\nThis is controlled by the cache configuration param.\n\n使用babel-core提供的api转码时，如果以对象形式传入配置，转码后AMD模块会有两层define\n\n解决方法：传入配置中需要增加babelrc=false。\n\n原因是：构建过程中，babel自身会去基于.babelrc来进行构建，如果我们不想让babel执行这个文件需要在调试的时候将babelrc设置为false，在构建的时候还是需要使用默认的true来调用和执行。\n\nES6 module to AMD的转码逻辑变更\n--\nbabel6提供的AMD转码插件对export default的转码逻辑做了修改，详情如下：\n针对如下代码：\n```js\nexport default {\n    foo: 1\n};\n```\n使用babel5转码后：\n```js\ndefine([\"exports\", \"module\"], function (exports, module) {\n    module.exports = {\n        foo: 1\n    };;\n});\n```\n使用babel6转码后：\n```js\ndefine([\"exports\"], function (exports) {\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.default = {\n        foo: 1\n    };\n});\n```\n在AMD模块依赖es6模块的场景下，AMD模块代码会不能运行。\n\n备注：\n主要的大坑就是项目里面既有es5的代码也有es6的代码，然后在5里面require es6文件就会出问题，会多一层未经处理的default….解决核心就是把这层default给干掉。\n\n结论\n---\n升级最大的阻碍是：ES6 module to AMD的转码逻辑变更并且暂时没有什么好的办法解决这个问题，所以暂不升级。\n\nIoC支持插件后，可以考虑实施方法2解决模块转码问题，相比方法1代价更小。\n\n总体来说方法3代价最小，但babel5的转码存在问题是：导致不符合es6模块使用规范的代码出现。如下：\n```js\n// foo.js\nconst foo = {baz: 42, bar: false}\nexport default foo\n// bar.js\nimport {baz} from './foo'\n```\n项目可用的BABEL6 转码配置\n---\n不考虑ES6 module to AMD的转码逻辑变更问题，通过一下配置可以在项目中使用babel6\n\n.babelrc\n```js\n{\n    \"compact\": false,\n    \"ast\": false,\n    \"sourceMaps\": \"inline\",\n    \"highlightCode\": true,\n    \"plugins\": [\n        [\"transform-es2015-modules-amd\", {\"strict\": false}],\n        \"transform-decorators-legacy\"\n    ],\n    \"presets\": [\"es2015\", \"stage-0\", \"stage-3\"],\n    \"ignore\": [\n        \"biz/report/**\",\n        \"dsp-base/**/biz/tool/keywords/**\"\n    ]\n}\n```\npackage.json\n```js\n\"dependencies\": {\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\"\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\"\n  }\n```",
				"html": "<p>babel5 to babel6</p>\n<h2 id=\"为什么要升级？\"><a href=\"#为什么要升级？\" class=\"headerlink\" title=\"为什么要升级？\"></a>为什么要升级？</h2><p>性能提升：据说compile速度提升20%（但在测试后发现，速度慢了20%+）。<br>可配置的插件：更强的灵活性，以及更简单的插件API。<br>更简洁的配置。<br><a id=\"more\"></a></p>\n<h2 id=\"重大变化\"><a href=\"#重大变化\" class=\"headerlink\" title=\"重大变化\"></a>重大变化</h2><p>不再提供babel包<br>命令行工具由babel-cli包提供<br>node api由babel-core提供<br>polyfill由babel-polyfill提供<br>.babelrc配置变化<br>移除“blacklist”、“whitelist”、“optional”、“nonStandard”和“modules”等<br>增加plugins：转码逻辑通过一系列插件实现，默认不使用任何插件<br>增加presets配置，提供一些预设的插件集合<br>external-helper选项由插件实现<br>项目升级过程中遇到问题</p>\n<p>babel官方未提供decorator transfrom插件</p>\n<p>decorator是es7的提案，如果要是用的话，需要用用非官方插件：transform-decorators-legacy。</p>\n<p>babel提供的es2015插件集默认包含transform-es2015-modules-commonjs插件</p>\n<p>项目系统需要将es6模块转成AMD模块，需要在plugins中指定使用transform-es2015-modules-amd.</p>\n<p>babel提供的AMD模块转码插件默认开启strict mode</p>\n<p>关闭strict mode的方法：</p>\n<p>不使用preset-es2015，需要自定义preset或者在plugins中引入所有需要的插件;<br>插件中做如下配置：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"plugins\"</span>: [</div><div class=\"line\">        [<span class=\"string\">\"transform-es2015-modules-amd\"</span>, &#123;<span class=\"string\">\"strict\"</span>: <span class=\"literal\">false</span>&#125;]</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Notes：如果不提供es2015相关插件的preset，preset-stage-x也不能使用<br>备注下：preset是一系列plugin 的集合，而stage-x代表着支持es6哪个阶段的语法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">stage<span class=\"number\">-0</span> - Strawman: just an idea, possible Babel plugin.</div><div class=\"line\">stage<span class=\"number\">-1</span> - Proposal: <span class=\"keyword\">this</span> is worth working on.</div><div class=\"line\">stage<span class=\"number\">-2</span> - Draft: initial spec.</div><div class=\"line\">stage<span class=\"number\">-3</span> - Candidate: complete spec and initial browser implementations.</div><div class=\"line\">stage<span class=\"number\">-4</span> - Finished: will be added to the next yearly release.</div></pre></td></tr></table></figure></p>\n<p>es6代码中有require时会导致转码失败</p>\n<p>es6代码中出现require时，babel5能正确转码，但babel6会报如下错误：</p>\n<p>Property object of MemberExpression expected node to be of a type [“Expression”] but instead got null.<br>解决方法：讲require变更为import。</p>\n<p>windows7下会出现Couldn’t find preset</p>\n<p>当安装babel插件的是时候，在windows7环境上不能使用如下命令来安装，会报”Couldn’t find preset “es2015” relative to directory”。</p>\n<p>npm install –save-dev babel-preset-es2015<br>解决方法：升级node版本至5+，npm3+或者安装preset安装的时候，使用</p>\n<p>npm install –save babel-preset-es2015<br>原因是不同的操作系统cache策略不同。</p>\n<p>Cache files are stored in ~/.npm on Posix, or ~/npm-cache on Windows.<br>This is controlled by the cache configuration param.</p>\n<p>使用babel-core提供的api转码时，如果以对象形式传入配置，转码后AMD模块会有两层define</p>\n<p>解决方法：传入配置中需要增加babelrc=false。</p>\n<p>原因是：构建过程中，babel自身会去基于.babelrc来进行构建，如果我们不想让babel执行这个文件需要在调试的时候将babelrc设置为false，在构建的时候还是需要使用默认的true来调用和执行。</p>\n<h2 id=\"ES6-module-to-AMD的转码逻辑变更\"><a href=\"#ES6-module-to-AMD的转码逻辑变更\" class=\"headerlink\" title=\"ES6 module to AMD的转码逻辑变更\"></a>ES6 module to AMD的转码逻辑变更</h2><p>babel6提供的AMD转码插件对export default的转码逻辑做了修改，详情如下：<br>针对如下代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用babel5转码后：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">\"exports\"</span>, <span class=\"string\">\"module\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports, module</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用babel6转码后：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">\"exports\"</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(exports, <span class=\"string\">\"__esModule\"</span>, &#123;</div><div class=\"line\">        <span class=\"attr\">value</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    exports.default = &#123;</div><div class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"number\">1</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在AMD模块依赖es6模块的场景下，AMD模块代码会不能运行。</p>\n<p>备注：<br>主要的大坑就是项目里面既有es5的代码也有es6的代码，然后在5里面require es6文件就会出问题，会多一层未经处理的default….解决核心就是把这层default给干掉。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>升级最大的阻碍是：ES6 module to AMD的转码逻辑变更并且暂时没有什么好的办法解决这个问题，所以暂不升级。</p>\n<p>IoC支持插件后，可以考虑实施方法2解决模块转码问题，相比方法1代价更小。</p>\n<p>总体来说方法3代价最小，但babel5的转码存在问题是：导致不符合es6模块使用规范的代码出现。如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// foo.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;<span class=\"attr\">baz</span>: <span class=\"number\">42</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">false</span>&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo</div><div class=\"line\"><span class=\"comment\">// bar.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;baz&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"项目可用的BABEL6-转码配置\"><a href=\"#项目可用的BABEL6-转码配置\" class=\"headerlink\" title=\"项目可用的BABEL6 转码配置\"></a>项目可用的BABEL6 转码配置</h2><p>不考虑ES6 module to AMD的转码逻辑变更问题，通过一下配置可以在项目中使用babel6</p>\n<p>.babelrc<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"compact\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"ast\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"sourceMaps\"</span>: <span class=\"string\">\"inline\"</span>,</div><div class=\"line\">    <span class=\"string\">\"highlightCode\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"plugins\"</span>: [</div><div class=\"line\">        [<span class=\"string\">\"transform-es2015-modules-amd\"</span>, &#123;<span class=\"string\">\"strict\"</span>: <span class=\"literal\">false</span>&#125;],</div><div class=\"line\">        <span class=\"string\">\"transform-decorators-legacy\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"stage-0\"</span>, <span class=\"string\">\"stage-3\"</span>],</div><div class=\"line\">    <span class=\"string\">\"ignore\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"biz/report/**\"</span>,</div><div class=\"line\">        <span class=\"string\">\"dsp-base/**/biz/tool/keywords/**\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>package.json<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.4\"</span></div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.6.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.5.0\"</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481100656471,
				"created_by": 2,
				"updated_at": 1481183242294,
				"updated_by": 2,
				"published_at": 1481100656471,
				"published_by": 2
			},
			{
				"id": "ciwg0zxsi0004q0fcd2ob9wzc",
				"title": "ES6编程规范",
				"slug": "es6-coder-rules",
				"markdown": "\nlet取代var\n--\nES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。\n```js\n'use strict';\n\nif (true) {\nlet x = 'hello';\n}\n\nfor (let i = 0; i < 10; i++) {\nconsole.log(i);\n}\n```\n<!--more-->\n上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。\n\nvar命令存在变量提升效用，let命令没有这个问题。\n```js\n'use strict';\n\nif(true) {\nconsole.log(x); // ReferenceError\nlet x = 'hello';\n}\n```\n上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。\n\n所以，建议不再使用var命令，而是使用let命令取代。\n\n全局常量和线程安全\n--\n在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。\n```js\n// bad\nvar a = 1, b = 2, c = 3;\n\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// best\nconst [a, b, c] = [1, 2, 3];\n```\nconst声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。\n\n所有的函数都应该设置为常量。\n\n长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。\n\n字符串\n---\n静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。\n```js\n// bad\nconst a = \"foobar\";\nconst b = 'foo' + a + 'bar';\n\n// acceptable\nconst c = `foobar`;\n\n// good\nconst a = 'foobar';\nconst b = `foo${a}bar`;\nconst c = 'foobar';\n```\n解构赋值\n---\n使用数组成员对变量赋值时，优先使用解构赋值。\n```js\nconst arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n```\n函数的参数如果是对象的成员，优先使用解构赋值。\n```js\n// bad\nfunction getFullName(user) {\nconst firstName = user.firstName;\nconst lastName = user.lastName;\n}\n\n// good\nfunction getFullName(obj) {\nconst { firstName, lastName } = obj;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n```\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n```js\n// bad\nfunction processInput(input) {\nreturn [left, right, top, bottom];\n}\n\n// good\nfunction processInput(input) {\nreturn { left, right, top, bottom };\n}\n\nconst { left, right } = processInput(input);\n```\n对象\n--\n单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。\n```js\n// bad\nconst a = { k1: v1, k2: v2, };\nconst b = {\nk1: v1,\nk2: v2\n};\n\n// good\nconst a = { k1: v1, k2: v2 };\nconst b = {\nk1: v1,\nk2: v2,\n};\n```\n对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。\n```js\n// bad\nconst a = {};\na.x = 3;\n\n// if reshape unavoidable\nconst a = {};\nObject.assign(a, { x: 3 });\n\n// good\nconst a = { x: null };\na.x = 3;\n```\n如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。\n```js\n// bad\nconst obj = {\nid: 5,\nname: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n\n// good\nconst obj = {\nid: 5,\nname: 'San Francisco',\n[getKey('enabled')]: true,\n};\n```\n上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。\n\n另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。\n```js\nvar ref = 'some value';\n\n// bad\nconst atom = {\nref: ref,\n\nvalue: 1,\n\naddValue: function (value) {\nreturn atom.value + value;\n},\n};\n\n// good\nconst atom = {\nref,\n\nvalue: 1,\n\naddValue(value) {\nreturn atom.value + value;\n},\n};\n```\n数组\n--\n使用扩展运算符（...）拷贝数组。\n```js\n// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i++) {\nitemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n```\n使用Array.from方法，将类似数组的对象转为数组。\n```js\nconst foo = document.querySelectorAll('.foo');\nconst nodes = Array.from(foo);\n函数\n立即执行函数可以写成箭头函数的形式。\n\n(() => {\nconsole.log('Welcome to the Internet.');\n})();\n```\n那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。\n```js\n// bad\n[1, 2, 3].map(function (x) {\nreturn x * x;\n});\n\n// good\n[1, 2, 3].map((x) => {\nreturn x * x;\n});\n\n// best\n[1, 2, 3].map(x => x * x);\n```\n箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。\n```js\n// bad\nconst self = this;\nconst boundMethod = function(...params) {\nreturn method.apply(self, params);\n}\n\n// acceptable\nconst boundMethod = method.bind(this);\n\n// best\nconst boundMethod = (...params) => method.apply(this, params);\n```\n简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。\n\n所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。\n```js\n// bad\nfunction divide(a, b, option = false ) {\n}\n\n// good\nfunction divide(a, b, { option = false } = {}) {\n}\n```\n不要在函数体内使用arguments变量，使用rest运算符（...）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。\n```js\n// bad\nfunction concatenateAll() {\nconst args = Array.prototype.slice.call(arguments);\nreturn args.join('');\n}\n\n// good\nfunction concatenateAll(...args) {\nreturn args.join('');\n}\n```\n使用默认值语法设置函数参数的默认值。\n```js\n// bad\nfunction handleThings(opts) {\nopts = opts || {};\n}\n\n// good\nfunction handleThings(opts = {}) {\n// ...\n}\n```\nMap结构\n--\n注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。\n```js\nlet map = new Map(arr);\n\nfor (let key of map.keys()) {\nconsole.log(key);\n}\n\nfor (let value of map.values()) {\nconsole.log(value);\n}\n\nfor (let item of map.entries()) {\nconsole.log(item[0], item[1]);\n}\n```\nClass\n--\n总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。\n```\n// bad\nfunction Queue(contents = []) {\nthis._queue = [...contents];\n}\nQueue.prototype.pop = function() {\nconst value = this._queue[0];\nthis._queue.splice(0, 1);\nreturn value;\n}\n\n// good\nclass Queue {\nconstructor(contents = []) {\nthis._queue = [...contents];\n}\npop() {\nconst value = this._queue[0];\nthis._queue.splice(0, 1);\nreturn value;\n}\n}\n```\n使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。\n```js\n// bad\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\nQueue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function() {\nreturn this._queue[0];\n}\n\n// good\nclass PeekableQueue extends Queue {\npeek() {\nreturn this._queue[0];\n}\n}\n```\n模块\n--\n首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。\n```js\n// bad\nconst moduleA = require('moduleA');\nconst func1 = moduleA.func1;\nconst func2 = moduleA.func2;\n\n// good\nimport { func1, func2 } from 'moduleA';\n使用export取代module.exports。\n\n// commonJS的写法\nvar React = require('react');\n\nvar Breadcrumbs = React.createClass({\nrender() {\nreturn <nav />;\n}\n});\n\nmodule.exports = Breadcrumbs;\n\n// ES6的写法\nimport React from 'react';\n\nconst Breadcrumbs = React.createClass({\nrender() {\nreturn <nav />;\n}\n});\n```\nexport default Breadcrumbs\n---\n如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。\n\n不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。\n```js\n// bad\nimport * as myObject './importModule';\n\n// good\nimport myObject from './importModule';\n如果模块默认输出一个函数，函数名的首字母应该小写。\n\nfunction makeStyleGuide() {\n}\n\nexport default makeStyleGuide;\n```\n如果模块默认输出一个对象，对象名的首字母应该大写。\n```js\nconst StyleGuide = {\nes6: {\n}\n};\n\nexport default StyleGuide;\n```\nESLint的使用\n---\nESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。\n\n首先，安装ESLint。\n```js\n$ npm i -g eslint\n然后，安装Airbnb语法规则。\n\n$ npm i -g eslint-config-airbnb\n```\n最后，在项目的根目录下新建一个.eslintrc文件，配置ESLint。\n```js\n{\n\"extends\": \"eslint-config-airbnb\"\n}\n```\n现在就可以检查，当前项目的代码是否符合预设的规则。\n\nindex.js文件的代码如下。\n```js\nvar unusued = 'I have no purpose!';\n\nfunction greet() {\nvar message = 'Hello, World!';\nalert(message);\n}\n\ngreet();\n```\n使用ESLint检查这个文件。\n```js\n$ eslint index.js\nindex.js\n1:5 error unusued is defined but never used no-unused-vars\n4:5 error Expected indentation of 2 characters but found 4 indent\n5:5 error Expected indentation of 2 characters but found 4 indent\n\n✖ 3 problems (3 errors, 0 warnings)\n```\n上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。\n",
				"html": "<h2 id=\"let取代var\"><a href=\"#let取代var\" class=\"headerlink\" title=\"let取代var\"></a>let取代var</h2><p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。</p>\n<p>var命令存在变量提升效用，let命令没有这个问题。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'hello'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>\n<p>所以，建议不再使用var命令，而是使用let命令取代。</p>\n<h2 id=\"全局常量和线程安全\"><a href=\"#全局常量和线程安全\" class=\"headerlink\" title=\"全局常量和线程安全\"></a>全局常量和线程安全</h2><p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div></pre></td></tr></table></figure></p>\n<p>const声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>\n<p>所有的函数都应该设置为常量。</p>\n<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"foobar\"</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">'foo'</span> + a + <span class=\"string\">'bar'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// acceptable</span></div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">`foobar`</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">'foobar'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">`foo<span class=\"subst\">$&#123;a&#125;</span>bar`</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"string\">'foobar'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> first = arr[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> second = arr[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> [first, second] = arr;</div></pre></td></tr></table></figure></p>\n<p>函数的参数如果是对象的成员，优先使用解构赋值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">const</span> firstName = user.firstName;</div><div class=\"line\"><span class=\"keyword\">const</span> lastName = user.lastName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; firstName, lastName &#125; = obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFullName</span>(<span class=\"params\">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> [left, right, top, bottom];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processInput</span>(<span class=\"params\">input</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> &#123; left, right, top, bottom &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">k1</span>: v1, <span class=\"attr\">k2</span>: v2, &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> b = &#123;</div><div class=\"line\"><span class=\"attr\">k1</span>: v1,</div><div class=\"line\"><span class=\"attr\">k2</span>: v2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">k1</span>: v1, <span class=\"attr\">k2</span>: v2 &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> b = &#123;</div><div class=\"line\"><span class=\"attr\">k1</span>: v1,</div><div class=\"line\"><span class=\"attr\">k2</span>: v2,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123;&#125;;</div><div class=\"line\">a.x = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if reshape unavoidable</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(a, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;;</div><div class=\"line\">a.x = <span class=\"number\">3</span>;</div></pre></td></tr></table></figure></p>\n<p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\"><span class=\"attr\">id</span>: <span class=\"number\">5</span>,</div><div class=\"line\"><span class=\"attr\">name</span>: <span class=\"string\">'San Francisco'</span>,</div><div class=\"line\">&#125;;</div><div class=\"line\">obj[getKey(<span class=\"string\">'enabled'</span>)] = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</div><div class=\"line\"><span class=\"attr\">id</span>: <span class=\"number\">5</span>,</div><div class=\"line\"><span class=\"attr\">name</span>: <span class=\"string\">'San Francisco'</span>,</div><div class=\"line\">[getKey(<span class=\"string\">'enabled'</span>)]: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p>\n<p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"string\">'some value'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> atom = &#123;</div><div class=\"line\"><span class=\"attr\">ref</span>: ref,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">value</span>: <span class=\"number\">1</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">addValue</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> atom.value + value;</div><div class=\"line\">&#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> atom = &#123;</div><div class=\"line\">ref,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">value</span>: <span class=\"number\">1</span>,</div><div class=\"line\"></div><div class=\"line\">addValue(value) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> atom.value + value;</div><div class=\"line\">&#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>使用扩展运算符（…）拷贝数组。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> len = items.length;</div><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [];</div><div class=\"line\"><span class=\"keyword\">let</span> i;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">itemsCopy[i] = items[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure></p>\n<p>使用Array.from方法，将类似数组的对象转为数组。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.foo'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> nodes = <span class=\"built_in\">Array</span>.from(foo);</div><div class=\"line\">函数</div><div class=\"line\">立即执行函数可以写成箭头函数的形式。</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Welcome to the Internet.'</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div></pre></td></tr></table></figure></p>\n<p>箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> boundMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> method.apply(self, params);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// acceptable</span></div><div class=\"line\"><span class=\"keyword\">const</span> boundMethod = method.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// best</span></div><div class=\"line\"><span class=\"keyword\">const</span> boundMethod = <span class=\"function\">(<span class=\"params\">...params</span>) =&gt;</span> method.apply(<span class=\"keyword\">this</span>, params);</div></pre></td></tr></table></figure></p>\n<p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p>\n<p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divide</span>(<span class=\"params\">a, b, option = false </span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divide</span>(<span class=\"params\">a, b, &#123; option = false &#125; = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concatenateAll</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\"><span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concatenateAll</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用默认值语法设置函数参数的默认值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleThings</span>(<span class=\"params\">opts</span>) </span>&#123;</div><div class=\"line\">opts = opts || &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleThings</span>(<span class=\"params\">opts = &#123;&#125;</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Map结构\"><a href=\"#Map结构\" class=\"headerlink\" title=\"Map结构\"></a>Map结构</h2><p>注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys()) &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> map.values()) &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> map.entries()) &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(item[<span class=\"number\">0</span>], item[<span class=\"number\">1</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// bad</div><div class=\"line\">function Queue(contents = []) &#123;</div><div class=\"line\">this._queue = [...contents];</div><div class=\"line\">&#125;</div><div class=\"line\">Queue.prototype.pop = function() &#123;</div><div class=\"line\">const value = this._queue[0];</div><div class=\"line\">this._queue.splice(0, 1);</div><div class=\"line\">return value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">class Queue &#123;</div><div class=\"line\">constructor(contents = []) &#123;</div><div class=\"line\">this._queue = [...contents];</div><div class=\"line\">&#125;</div><div class=\"line\">pop() &#123;</div><div class=\"line\">const value = this._queue[0];</div><div class=\"line\">this._queue.splice(0, 1);</div><div class=\"line\">return value;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> inherits = <span class=\"built_in\">require</span>(<span class=\"string\">'inherits'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PeekableQueue</span>(<span class=\"params\">contents</span>) </span>&#123;</div><div class=\"line\">Queue.apply(<span class=\"keyword\">this</span>, contents);</div><div class=\"line\">&#125;</div><div class=\"line\">inherits(PeekableQueue, Queue);</div><div class=\"line\">PeekableQueue.prototype.peek = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._queue[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeekableQueue</span> <span class=\"keyword\">extends</span> <span class=\"title\">Queue</span> </span>&#123;</div><div class=\"line\">peek() &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._queue[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">const</span> moduleA = <span class=\"built_in\">require</span>(<span class=\"string\">'moduleA'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> func1 = moduleA.func1;</div><div class=\"line\"><span class=\"keyword\">const</span> func2 = moduleA.func2;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; func1, func2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">'moduleA'</span>;</div><div class=\"line\">使用<span class=\"keyword\">export</span>取代<span class=\"built_in\">module</span>.exports。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// commonJS的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Breadcrumbs = React.createClass(&#123;</div><div class=\"line\">render() &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> &lt;nav /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = Breadcrumbs;</div><div class=\"line\"></div><div class=\"line\">// ES6的写法</div><div class=\"line\">import React from 'react';</div><div class=\"line\"></div><div class=\"line\">const Breadcrumbs = React.createClass(&#123;</div><div class=\"line\">render() &#123;</div><div class=\"line\">return &lt;nav /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"export-default-Breadcrumbs\"><a href=\"#export-default-Breadcrumbs\" class=\"headerlink\" title=\"export default Breadcrumbs\"></a>export default Breadcrumbs</h2><p>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。</p>\n<p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> myObject <span class=\"string\">'./importModule'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">import</span> myObject <span class=\"keyword\">from</span> <span class=\"string\">'./importModule'</span>;</div><div class=\"line\">如果模块默认输出一个函数，函数名的首字母应该小写。</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeStyleGuide</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> makeStyleGuide;</div></pre></td></tr></table></figure></p>\n<p>如果模块默认输出一个对象，对象名的首字母应该大写。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> StyleGuide = &#123;</div><div class=\"line\"><span class=\"attr\">es6</span>: &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> StyleGuide;</div></pre></td></tr></table></figure></p>\n<h2 id=\"ESLint的使用\"><a href=\"#ESLint的使用\" class=\"headerlink\" title=\"ESLint的使用\"></a>ESLint的使用</h2><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p>\n<p>首先，安装ESLint。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm i -g eslint</div><div class=\"line\">然后，安装Airbnb语法规则。</div><div class=\"line\"></div><div class=\"line\">$ npm i -g eslint-config-airbnb</div></pre></td></tr></table></figure></p>\n<p>最后，在项目的根目录下新建一个.eslintrc文件，配置ESLint。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"extends\"</span>: <span class=\"string\">\"eslint-config-airbnb\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在就可以检查，当前项目的代码是否符合预设的规则。</p>\n<p>index.js文件的代码如下。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unusued = <span class=\"string\">'I have no purpose!'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'Hello, World!'</span>;</div><div class=\"line\">alert(message);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">greet();</div></pre></td></tr></table></figure></p>\n<p>使用ESLint检查这个文件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ eslint index.js</div><div class=\"line\">index.js</div><div class=\"line\"><span class=\"number\">1</span>:<span class=\"number\">5</span> error unusued is defined but never used no-unused-vars</div><div class=\"line\"><span class=\"number\">4</span>:<span class=\"number\">5</span> error Expected indentation <span class=\"keyword\">of</span> <span class=\"number\">2</span> characters but found <span class=\"number\">4</span> indent</div><div class=\"line\"><span class=\"number\">5</span>:<span class=\"number\">5</span> error Expected indentation <span class=\"keyword\">of</span> <span class=\"number\">2</span> characters but found <span class=\"number\">4</span> indent</div><div class=\"line\"></div><div class=\"line\">✖ <span class=\"number\">3</span> problems (<span class=\"number\">3</span> errors, <span class=\"number\">0</span> warnings)</div></pre></td></tr></table></figure></p>\n<p>上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481100247061,
				"created_by": 2,
				"updated_at": 1481183256583,
				"updated_by": 2,
				"published_at": 1481100247061,
				"published_by": 2
			},
			{
				"id": "ciwg0zxqu0001q0fckotbu2s9",
				"title": "ES5中获取顶层变量的方法",
				"slug": "es5-get-top-param",
				"markdown": "ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。\n\n浏览器里面，顶层对象是window，但Node和Web Worker没有window。\n浏览器和Web Worker里面，self也指向顶层对象，但是Node没有self。\nNode里面，顶层对象是global，但其他环境都不支持。\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n<!--more-->\n\n\n\n全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。\n函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。\n综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。\n```js\n// 方法一\n(typeof window !== 'undefined'\n? window\n: (typeof process === 'object' &&\ntypeof require === 'function' &&\ntypeof global === 'object')\n? global\n: this);\n\n// 方法二\nvar getGlobal = function () {\nif (typeof self !== 'undefined') { return self; }\nif (typeof window !== 'undefined') { return window; }\nif (typeof global !== 'undefined') { return global; }\nthrow new Error('unable to locate global object');\n};\n```\n现在有一个提案，在语言标准的层面，引入global作为顶层对象。也就是说，在所有环境下，global都是存在的，都可以从它拿到顶层对象。\n\n垫片库system.global模拟了这个提案，可以在所有环境拿到global。\n```js\n// CommonJS的写法\n require('system.global/shim')();\n // ES6模块的写法\n import shim from 'system.global/shim'; shim();\n```\n上面代码可以保证各种环境里面，global对象都是存在的。\n```js\n// CommonJS的写法\n var global = require('system.global')();\n // ES6模块的写法\n import getGlobal from 'system.global';\n const global = getGlobal();\n```\n上面代码将顶层对象放入变量global。",
				"html": "<p>ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。</p>\n<p>浏览器里面，顶层对象是window，但Node和Web Worker没有window。<br>浏览器和Web Worker里面，self也指向顶层对象，但是Node没有self。<br>Node里面，顶层对象是global，但其他环境都不支持。<br>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。<br><a id=\"more\"></a></p>\n<p>全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。<br>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。<br>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。<br>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 方法一</span></div><div class=\"line\">(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span></div><div class=\"line\">? <span class=\"built_in\">window</span></div><div class=\"line\">: (<span class=\"keyword\">typeof</span> process === <span class=\"string\">'object'</span> &amp;&amp;</div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> === <span class=\"string\">'function'</span> &amp;&amp;</div><div class=\"line\"><span class=\"keyword\">typeof</span> global === <span class=\"string\">'object'</span>)</div><div class=\"line\">? global</div><div class=\"line\">: <span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法二</span></div><div class=\"line\"><span class=\"keyword\">var</span> getGlobal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> self; &#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"keyword\">return</span> global; &#125;</div><div class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'unable to locate global object'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在有一个提案，在语言标准的层面，引入global作为顶层对象。也就是说，在所有环境下，global都是存在的，都可以从它拿到顶层对象。</p>\n<p>垫片库system.global模拟了这个提案，可以在所有环境拿到global。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// CommonJS的写法</span></div><div class=\"line\"> <span class=\"built_in\">require</span>(<span class=\"string\">'system.global/shim'</span>)();</div><div class=\"line\"> <span class=\"comment\">// ES6模块的写法</span></div><div class=\"line\"> <span class=\"keyword\">import</span> shim <span class=\"keyword\">from</span> <span class=\"string\">'system.global/shim'</span>; shim();</div></pre></td></tr></table></figure></p>\n<p>上面代码可以保证各种环境里面，global对象都是存在的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// CommonJS的写法</span></div><div class=\"line\"> <span class=\"keyword\">var</span> global = <span class=\"built_in\">require</span>(<span class=\"string\">'system.global'</span>)();</div><div class=\"line\"> <span class=\"comment\">// ES6模块的写法</span></div><div class=\"line\"> <span class=\"keyword\">import</span> getGlobal <span class=\"keyword\">from</span> <span class=\"string\">'system.global'</span>;</div><div class=\"line\"> <span class=\"keyword\">const</span> global = getGlobal();</div></pre></td></tr></table></figure></p>\n<p>上面代码将顶层对象放入变量global。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481099807675,
				"created_by": 2,
				"updated_at": 1490079100757,
				"updated_by": 2,
				"published_at": 1481099807675,
				"published_by": 2
			},
			{
				"id": "ciwg0zxxf0010q0fcx7vybo2w",
				"title": "Nodejs基于mongoose模块的增删改查",
				"slug": "node-mongoose",
				"markdown": "安装模块mongoose\n\n```\nnpm install mongoose\n```\n[注意] mongoose模块依赖mongodb\n<!--more-->\nnpm常用命令\n--\n```\nnpm install <name> -g      #将包安装到全局环境中\n\nnpm install <name> –-save  #安装的同时，将信息写入package.json中,便于后期维护查看\n\nnpm remove <name>          #移除\n\nnpm update <name>          #更新\n\nnpm root -g                #查看全局的包安装路径\n\nnpm -v                     #查看npm的版本\n```\n开启mongodb数据库\n--\n进入mongod所在目录 执行命令 ./mongod --dbpath=存放数据的位置\n```\n例1：./mongod --dbpath=../data/dbname\n例2：./mongod --dbpath=../data/dbname --port 自定义端口号，默认27017(了解即可，不推荐使用，修改默认端口号后期维护麻烦)\n```\n插入数据\n--\n```js\n// 引入模块\nvar mongoose = require('mongoose');\n// 连接数据库\nvar db = mongoose.createConnection('mongodb://127.0.0.1:27017/test');\n// 设置数据类型\nvar monSchema = new mongooose.Schema({\n    name:{type:String,default:\"username\"},\n    age：{type:Number},\n    sex:{type:String}\n});\n// 选择集合\nvar monModel = db.model('user',monSchema);\n// 数据集\nvar content = {name:\"Nick\",age:23,sex:'男'};\n// 实例化对象并插入数据\nvar monInsert = new monModel(content);\nmonInsert.save(function(err){\n  if(err){\n    console.log(err);\n  }else{\n    console.log('成功插入数据');\n  }\n  db.close();\n});\n```\n删除数据\n--\n```js\n// 引入模块\nvar mongoose = require('mongoose');\n// 连接数据库\nvar db = mongoose.createConnection('mongodb://127.0.0.1:27017/test');\n// 设置数据类型\nvar monSchema = new mongooose.Schema({\n    name:{type:String,default:\"name\"},\n    age：{type:Number},\n    sex:{type:String}\n});\n// 选择集合\nvar monModel = db.model('user',monSchema);\n// 要删除的条件\nvar del  = {name:\"Nick\"};\n\nmonModel.remove(del,function(err,result){\n  if(err){\n    console.log(err);\n  }else{\n    console.log(\"update\");\n  }\n  db.close();\n});\n```\n修改数据\n--\n```js\n// 引入模块\nvar mongoose = require('mongoose');\n// 连接数据库\nvar db = mongoose.createConnection('mongodb://127.0.0.1:27017/test');\n// cosole.log(db);\n// 设置数据类型\nvar monSchema = new mongooose.Schema({\n    name:{type:String,default:\"name\"},\n    age：{type:Number},\n    sex:{type:String}\n});\n// 选择集合\nvar monModel = db.model('user',monSchema);\n// 原数据字段值\nvar oldValue  = {name:\"Nick\"};\n// 单条件更新\nvar newData1 = {$set:{name:\"内容\"}};\n// 多条件更新\nvar newData2 = {$set:{name:\"内容\",age:2}};\nmonModel.update(oldValue,newData,function(err,result){\n  if(err){\n    console.log(err);\n  }else{\n    console.log(\"update\");\n  }\n  db.close();\n});\n```\n查询数据\n--\n```js\n\n// 引入模块\nvar mongoose = require('mongoose');\n// 连接数据库\nvar db = mongoose.createConnection('mongodb://127.0.0.1:27017/test');\n// cosole.log(db);\n// 设置数据类型\nvar monSchema = new mongooose.Schema({\n    name:{type:String,default:\"name\"},\n    age：{type:Number},\n    sex:{type:String}\n});\n// 选择集合\nvar monModel = db.model('user',monSchema);\nvar content = {name:\"姓名2\"};\nvar field = {name:1,age:1,sex:1};\nmonModel.find(content,field,function(err,result){\n  if(err){\n    console.log(err);\n  }else{\n    console.log(result);\n  }\n  db.close();\n});\n```",
				"html": "<p>安装模块mongoose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install mongoose</div></pre></td></tr></table></figure>\n<p>[注意] mongoose模块依赖mongodb<br><a id=\"more\"></a></p>\n<h2 id=\"npm常用命令\"><a href=\"#npm常用命令\" class=\"headerlink\" title=\"npm常用命令\"></a>npm常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install &lt;name&gt; -g      #将包安装到全局环境中</div><div class=\"line\"></div><div class=\"line\">npm install &lt;name&gt; –-save  #安装的同时，将信息写入package.json中,便于后期维护查看</div><div class=\"line\"></div><div class=\"line\">npm remove &lt;name&gt;          #移除</div><div class=\"line\"></div><div class=\"line\">npm update &lt;name&gt;          #更新</div><div class=\"line\"></div><div class=\"line\">npm root -g                #查看全局的包安装路径</div><div class=\"line\"></div><div class=\"line\">npm -v                     #查看npm的版本</div></pre></td></tr></table></figure>\n<h2 id=\"开启mongodb数据库\"><a href=\"#开启mongodb数据库\" class=\"headerlink\" title=\"开启mongodb数据库\"></a>开启mongodb数据库</h2><p>进入mongod所在目录 执行命令 ./mongod –dbpath=存放数据的位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">例1：./mongod --dbpath=../data/dbname</div><div class=\"line\">例2：./mongod --dbpath=../data/dbname --port 自定义端口号，默认27017(了解即可，不推荐使用，修改默认端口号后期维护麻烦)</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">// 连接数据库</span></div><div class=\"line\"><span class=\"keyword\">var</span> db = mongoose.createConnection(<span class=\"string\">'mongodb://127.0.0.1:27017/test'</span>);</div><div class=\"line\"><span class=\"comment\">// 设置数据类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> monSchema = <span class=\"keyword\">new</span> mongooose.Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">default</span>:<span class=\"string\">\"username\"</span>&#125;,</div><div class=\"line\">    age：&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">Number</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">sex</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 选择集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> monModel = db.model(<span class=\"string\">'user'</span>,monSchema);</div><div class=\"line\"><span class=\"comment\">// 数据集</span></div><div class=\"line\"><span class=\"keyword\">var</span> content = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nick\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">23</span>,<span class=\"attr\">sex</span>:<span class=\"string\">'男'</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// 实例化对象并插入数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> monInsert = <span class=\"keyword\">new</span> monModel(content);</div><div class=\"line\">monInsert.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功插入数据'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">// 连接数据库</span></div><div class=\"line\"><span class=\"keyword\">var</span> db = mongoose.createConnection(<span class=\"string\">'mongodb://127.0.0.1:27017/test'</span>);</div><div class=\"line\"><span class=\"comment\">// 设置数据类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> monSchema = <span class=\"keyword\">new</span> mongooose.Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">default</span>:<span class=\"string\">\"name\"</span>&#125;,</div><div class=\"line\">    age：&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">Number</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">sex</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 选择集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> monModel = db.model(<span class=\"string\">'user'</span>,monSchema);</div><div class=\"line\"><span class=\"comment\">// 要删除的条件</span></div><div class=\"line\"><span class=\"keyword\">var</span> del  = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nick\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">monModel.remove(del,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"update\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">// 连接数据库</span></div><div class=\"line\"><span class=\"keyword\">var</span> db = mongoose.createConnection(<span class=\"string\">'mongodb://127.0.0.1:27017/test'</span>);</div><div class=\"line\"><span class=\"comment\">// cosole.log(db);</span></div><div class=\"line\"><span class=\"comment\">// 设置数据类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> monSchema = <span class=\"keyword\">new</span> mongooose.Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">default</span>:<span class=\"string\">\"name\"</span>&#125;,</div><div class=\"line\">    age：&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">Number</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">sex</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 选择集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> monModel = db.model(<span class=\"string\">'user'</span>,monSchema);</div><div class=\"line\"><span class=\"comment\">// 原数据字段值</span></div><div class=\"line\"><span class=\"keyword\">var</span> oldValue  = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Nick\"</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// 单条件更新</span></div><div class=\"line\"><span class=\"keyword\">var</span> newData1 = &#123;<span class=\"attr\">$set</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"内容\"</span>&#125;&#125;;</div><div class=\"line\"><span class=\"comment\">// 多条件更新</span></div><div class=\"line\"><span class=\"keyword\">var</span> newData2 = &#123;<span class=\"attr\">$set</span>:&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"内容\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">2</span>&#125;&#125;;</div><div class=\"line\">monModel.update(oldValue,newData,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"update\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 引入模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">// 连接数据库</span></div><div class=\"line\"><span class=\"keyword\">var</span> db = mongoose.createConnection(<span class=\"string\">'mongodb://127.0.0.1:27017/test'</span>);</div><div class=\"line\"><span class=\"comment\">// cosole.log(db);</span></div><div class=\"line\"><span class=\"comment\">// 设置数据类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> monSchema = <span class=\"keyword\">new</span> mongooose.Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">default</span>:<span class=\"string\">\"name\"</span>&#125;,</div><div class=\"line\">    age：&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">Number</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">sex</span>:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 选择集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> monModel = db.model(<span class=\"string\">'user'</span>,monSchema);</div><div class=\"line\"><span class=\"keyword\">var</span> content = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"姓名2\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> field = &#123;<span class=\"attr\">name</span>:<span class=\"number\">1</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"attr\">sex</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">monModel.find(content,field,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">  &#125;</div><div class=\"line\">  db.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481098969497,
				"created_by": 2,
				"updated_at": 1481183348113,
				"updated_by": 2,
				"published_at": 1481098969497,
				"published_by": 2
			},
			{
				"id": "ciwg0zxxo0013q0fct7cva978",
				"title": "r.js 配置文件 example.build.js 不完整注释",
				"slug": "rjs-example-demo",
				"markdown": "<!--more-->\n```js\n /*\n * This is an example build file that demonstrates how to use the build system for\n * require.js.\n *\n *\n * r.js 配置文件 example.build.js 不完整注释\\\n * 结合最近打包实践，对这个 r.js 下的 build 配置文件作了些补充说明：\n *\n *\n * THIS BUILD FILE WILL NOT WORK. It is referencing paths that probably\n * do not exist on your machine. Just use it as a guide.\n *\n *\n */\n\n({\n    // app顶级目录，非必选项。如果指定值，baseUrl则会以此为相对路径\n    appDir: \"some/path/\",\n\n    // 模块根目录。默认情况下所有模块资源都相对此目录。\n    // 若该值未指定，模块则相对build文件所在目录。\n    // 若appDir值已指定，模块根目录baseUrl则相对appDir。\n    baseUrl: \"./\",\n\n    // 配置文件目录\n    mainConfigFile: '../some/path/to/main.js',\n\n    // 设置模块别名\n    // RequireJS 2.0 中可以配置数组，顺序映射，当前面模块资源未成功加载时可顺序加载后续资源\n    paths: {\n        \"foo.bar\": \"../scripts/foo/bar\",\n        \"baz\": \"../another/path/baz\"\n    },\n\n    // 配置 CommonJS 的 package See http://requirejs.org/docs/api.html#packages for more information.\n    packagePaths: [],\n    packages: [],\n\n    // 指定输出目录，若值未指定，则相对 build 文件所在目录\n    dir: \"../some/path\",\n\n    // 在 RequireJS 2.0.2 中，输出目录的所有资源会在 build 前被删除\n    // 值为 true 时 rebuild 更快，但某些特殊情景下可能会出现无法预料的异常\n    keepBuildDir: true,\n\n    // 国际化配置\n    locale: \"en-us\",\n\n    // JS 文件优化方式，目前支持以下几种：\n    //   uglify: （默认） 使用 UglifyJS 来压缩代码\n    //   closure: 使用 Google's Closure Compiler 的简单优化模式\n    //   closure.keepLines: 使用 closure，但保持换行\n    //   none: 不压缩代码\n    optimize: \"uglify\",\n\n    // 使用 UglifyJS 时的可配置参数\n    // See https://github.com/mishoo/UglifyJS for the possible values.\n    uglify: {\n        toplevel: true,\n        ascii_only: true,\n        beautify: true,\n        max_line_length: 1000\n    },\n\n    // 使用 Closure Compiler 时的可配置参数\n    closure: {\n        CompilerOptions: {},\n        CompilationLevel: 'SIMPLE_OPTIMIZATIONS',\n        loggingLevel: 'WARNING'\n    },\n\n    // CSS 优化方式，目前支持以下几种：\n    // none: 不压缩，仅合并\n    // standard: 标准压缩，移除注释、换行，以及可能导致 IE 解析出错的代码\n    // standard.keepLines: 除标准压缩外，保留换行\n    // standard.keepComments: 除标准压缩外，保留注释 (r.js 1.0.8+)\n    // standard.keepComments.keepLines: 除标准压缩外，保留注释和换行 (r.js 1.0.8+)\n    optimizeCss: \"standard.keepLines\",\n\n    // 是否忽略 CSS 资源文件中的 @import 指令\n    cssImportIgnore: null,\n\n    // 一般用于命令行，可将多个 CSS 资源文件打包成单个 CSS 文件\n    cssIn: \"path/to/main.css\",\n    out: \"path/to/css-optimized.css\",\n\n    // 处理所有的文本资源依赖项，从而避免为加载资源而产生的大量单独xhr请求\n    inlineText: true,\n\n    // 是否开启严格模式\n    // 由于很多浏览器不支持 ES5 的严格模式，故此配置默认值为 false\n    useStrict: false,\n\n    //Specify build pragmas. If the source files contain comments like so:\n    //>>excludeStart(\"fooExclude\", pragmas.fooExclude);\n    //>>excludeEnd(\"fooExclude\");\n    //Then the comments that start with //>> are the build pragmas.\n    //excludeStart/excludeEnd and includeStart/includeEnd work, and the\n    //the pragmas value to the includeStart or excludeStart lines\n    //is evaluated to see if the code between the Start and End pragma\n    //lines should be included or excluded. If you have a choice to use\n    //\"has\" code or pragmas, use \"has\" code instead. Pragmas are harder\n    //to read, but they can be a bit more flexible on code removal vs.\n    //has-based code, which must follow JavaScript language rules.\n    //Pragmas also remove code in non-minified source, where has branch\n    //trimming is only done if the code is minified via UglifyJS or\n    //Closure Compiler.\n    pragmas: {\n        fooExclude: true\n    },\n\n    //Same as \"pragmas\", but only applied once during the file save phase\n    //of an optimization. \"pragmas\" are applied both during the dependency\n    //mapping and file saving phases on an optimization. Some pragmas\n    //should not be processed during the dependency mapping phase of an\n    //operation, such as the pragma in the CoffeeScript loader plugin,\n    //which wants the CoffeeScript compiler during the dependency mapping\n    //phase, but once files are saved as plain JavaScript, the CoffeeScript\n    //compiler is no longer needed. In that case, pragmasOnSave would be used\n    //to exclude the compiler code during the save phase.\n    pragmasOnSave: {\n        //Just an example\n        excludeCoffeeScript: true\n    },\n\n    //Allows trimming of code branches that use has.js-based feature detection:\n    //https://github.com/phiggins42/has.js\n    //The code branch trimming only happens if minification with UglifyJS or\n    //Closure Compiler is done. For more information, see:\n    //http://requirejs.org/docs/optimization.html#hasjs\n    has: {\n        'function-bind': true,\n        'string-trim': false\n    },\n\n    //Similar to pragmasOnSave, but for has tests -- only applied during the\n    //file save phase of optimization, where \"has\" is applied to both\n    //dependency mapping and file save phases.\n    hasOnSave: {\n        'function-bind': true,\n        'string-trim': false\n    },\n\n    // 命名空间，完整实例可以参考 http://requirejs.org/docs/faq-advanced.html#rename\n    namespace: 'foo',\n\n    // 跳过 pragmas 处理\n    skipPragmas: false,\n\n    //If skipModuleInsertion is false, then files that do not use define()\n    //to define modules will get a define() placeholder inserted for them.\n    //Also, require.pause/resume calls will be inserted.\n    //Set it to true to avoid this. This is useful if you are building code that\n    //does not use require() in the built project or in the JS files, but you\n    //still want to use the optimization tool from RequireJS to concatenate modules\n    //together.\n    skipModuleInsertion: false,\n\n    //Specify modules to stub out in the optimized file. The optimizer will\n    //use the source version of these modules for dependency tracing and for\n    //plugin use, but when writing the text into an optimized layer, these\n    //modules will get the following text instead:\n    //If the module is used as a plugin:\n    //    define({load: function(id){throw new Error(\"Dynamic load not allowed: \" + id);}});\n    //If just a plain module:\n    //    define({});\n    //This is useful particularly for plugins that inline all their resources\n    //and use the default module resolution behavior (do *not* implement the\n    //normalize() method). In those cases, an AMD loader just needs to know\n    //that the module has a definition. These small stubs can be used instead of\n    //including the full source for a plugin.\n    stubModules: ['text', 'bar'],\n\n    //If it is not a one file optimization, scan through all .js files in the\n    //output directory for any plugin resource dependencies, and if the plugin\n    //supports optimizing them as separate files, optimize them. Can be a\n    //slower optimization. Only use if there are some plugins that use things\n    //like XMLHttpRequest that do not work across domains, but the built code\n    //will be placed on another domain.\n    optimizeAllPluginResources: false,\n\n    // 处理级联依赖，默认为 false，此时能够在运行时动态 require 级联的模块。为 true 时，级联模块会被一同打包\n    findNestedDependencies: false,\n\n    //If set to true, any files that were combined into a build layer will be\n    //removed from the output folder.\n    removeCombined: false,\n\n    modules: [\n        {\n            // 模块 alias 名称\n            name: \"foo/bar/bop\",\n\n            //For build profiles that contain more than one modules entry,\n            //allow overrides for the properties that set for the whole build,\n            //for example a different set of pragmas for this module.\n            //The override's value is an object that can\n            //contain any of the other build options in this file.\n            //\n            override: {\n                pragmas: {\n                    fooExclude: true\n                }\n            }\n        },\n\n        // 将 alias 别名为 foo/bar/bop 和 foo/bar/bee 的模块打包成一个文件\n        {\n            name: \"foo/bar/bop\",\n            include: [\"foo/bar/bee\"]\n        },\n\n        // 将 foo/bar/bip 及其依赖项一并打包，但不包括 foo/bar/bop\n        {\n            name: \"foo/bar/bip\",\n            exclude: [\n                \"foo/bar/bop\"\n            ]\n        },\n\n        // 排除指定模块，但若该模块对所打包文件有级联依赖关系，则仍会被打包进去\n        {\n            name: \"foo/bar/bin\",\n            excludeShallow: [\n                \"foo/bar/bot\"\n            ]\n        },\n\n        // insertRequire 在 RequireJS 2.0 中被引入，在 built 文件的末尾插入 require([]) 以触发模块加载并运行\n        // insertRequire: [\"foo/baz\"] 即 require([\"foo/baz\"])\n        // 详情见 https://github.com/jrburke/almond\n        {\n            name: \"foo/baz\",\n            insertRequire: [\"foo/baz\"]\n        }\n    ],\n\n    // 仅优化单个模块及其依赖项\n    name: \"foo/bar/bop\",\n    include: [\"foo/bar/bee\"],\n    insertRequire: ['foo/bar/bop'],\n    out: \"path/to/optimized-file.js\",\n\n    // An alternative to \"include\"\n    deps: [\"foo/bar/bee\"],\n\n    // RequireJS 2.0 中，out 可以是一个函数\n    out: function (text) {\n        // 自定义优化内容\n    },\n\n    // 模块包裹函数，顾名思义使用特定内容包裹模块，如此一来 define/require 就不再是全局变量，在 end 中可以暴露一些全局变量供整个函数使用\n    wrap: {\n        start: \"(function() {\",\n        end: \"}());\"\n    },\n\n    // 另一种模块包裹方式\n    // (function() { + content + }());\n    wrap: true,\n\n    // 另一种模块包裹方式，包裹内容可以是指定文件\n    wrap: {\n        startFile: \"part/start.frag\",\n        endFile: \"parts/end.frag\"\n    },\n\n    // 不优化某些文件\n    fileExclusionRegExp: /^\\./,\n\n    // 默认保留模块的 license 注释\n    preserveLicenseComments: true,\n\n    // 设置 logging level\n    // TRACE: 0,\n    // INFO: 1,\n    // WARN: 2,\n    // ERROR: 3,\n    // SILENT: 4\n    // Default is 0.\n    logLevel: 0,\n\n    // 在每个文件模块被读取时的操作函数，可在函数体内作适当变换\n    onBuildRead: function (moduleName, path, contents) {\n        return contents.replace(/foo/g, 'bar');\n    },\n\n    // 在每个文件模块被写入时的操作函数\n    onBuildWrite: function (moduleName, path, contents) {\n        return contents.replace(/bar/g, 'foo');\n    },\n\n    // 若为true，优化器会强制在文件中包裹一层 define(require, exports, module) {})\n    cjsTranslate: true,\n\n    //Introduced in 2.0.2: a bit experimental.\n    //Each script in the build layer will be turned into\n    //a JavaScript string with a //@ sourceURL comment, and then wrapped in an\n    //eval call. This allows some browsers to see each evaled script as a\n    //separate script in the script debugger even though they are all combined\n    //in the same file. Some important limitations:\n    //1) Do not use in IE if conditional comments are turned on, it will cause\n    //errors:\n    //http://en.wikipedia.org/wiki/Conditional_comment#Conditional_comments_in_JScript\n    //2) It is only useful in optimize: 'none' scenarios. The goal is to allow\n    //easier built layer debugging, which goes against minification desires.\n    useSourceUrl: true\n})\n```",
				"html": "<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/*</span></div><div class=\"line\"> * This is an example build file that demonstrates how to use the build system for</div><div class=\"line\"> * require.js.</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * r.js 配置文件 example.build.js 不完整注释\\</div><div class=\"line\"> * 结合最近打包实践，对这个 r.js 下的 build 配置文件作了些补充说明：</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> * THIS BUILD FILE WILL NOT WORK. It is referencing paths that probably</div><div class=\"line\"> * do not exist on your machine. Just use it as a guide.</div><div class=\"line\"> *</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">(&#123;</div><div class=\"line\">    <span class=\"comment\">// app顶级目录，非必选项。如果指定值，baseUrl则会以此为相对路径</span></div><div class=\"line\">    appDir: <span class=\"string\">\"some/path/\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 模块根目录。默认情况下所有模块资源都相对此目录。</span></div><div class=\"line\">    <span class=\"comment\">// 若该值未指定，模块则相对build文件所在目录。</span></div><div class=\"line\">    <span class=\"comment\">// 若appDir值已指定，模块根目录baseUrl则相对appDir。</span></div><div class=\"line\">    baseUrl: <span class=\"string\">\"./\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 配置文件目录</span></div><div class=\"line\">    mainConfigFile: <span class=\"string\">'../some/path/to/main.js'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置模块别名</span></div><div class=\"line\">    <span class=\"comment\">// RequireJS 2.0 中可以配置数组，顺序映射，当前面模块资源未成功加载时可顺序加载后续资源</span></div><div class=\"line\">    paths: &#123;</div><div class=\"line\">        <span class=\"string\">\"foo.bar\"</span>: <span class=\"string\">\"../scripts/foo/bar\"</span>,</div><div class=\"line\">        <span class=\"string\">\"baz\"</span>: <span class=\"string\">\"../another/path/baz\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 配置 CommonJS 的 package See http://requirejs.org/docs/api.html#packages for more information.</span></div><div class=\"line\">    packagePaths: [],</div><div class=\"line\">    <span class=\"attr\">packages</span>: [],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 指定输出目录，若值未指定，则相对 build 文件所在目录</span></div><div class=\"line\">    dir: <span class=\"string\">\"../some/path\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在 RequireJS 2.0.2 中，输出目录的所有资源会在 build 前被删除</span></div><div class=\"line\">    <span class=\"comment\">// 值为 true 时 rebuild 更快，但某些特殊情景下可能会出现无法预料的异常</span></div><div class=\"line\">    keepBuildDir: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 国际化配置</span></div><div class=\"line\">    locale: <span class=\"string\">\"en-us\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// JS 文件优化方式，目前支持以下几种：</span></div><div class=\"line\">    <span class=\"comment\">//   uglify: （默认） 使用 UglifyJS 来压缩代码</span></div><div class=\"line\">    <span class=\"comment\">//   closure: 使用 Google's Closure Compiler 的简单优化模式</span></div><div class=\"line\">    <span class=\"comment\">//   closure.keepLines: 使用 closure，但保持换行</span></div><div class=\"line\">    <span class=\"comment\">//   none: 不压缩代码</span></div><div class=\"line\">    optimize: <span class=\"string\">\"uglify\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 UglifyJS 时的可配置参数</span></div><div class=\"line\">    <span class=\"comment\">// See https://github.com/mishoo/UglifyJS for the possible values.</span></div><div class=\"line\">    uglify: &#123;</div><div class=\"line\">        <span class=\"attr\">toplevel</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">ascii_only</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">beautify</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">max_line_length</span>: <span class=\"number\">1000</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用 Closure Compiler 时的可配置参数</span></div><div class=\"line\">    closure: &#123;</div><div class=\"line\">        <span class=\"attr\">CompilerOptions</span>: &#123;&#125;,</div><div class=\"line\">        <span class=\"attr\">CompilationLevel</span>: <span class=\"string\">'SIMPLE_OPTIMIZATIONS'</span>,</div><div class=\"line\">        <span class=\"attr\">loggingLevel</span>: <span class=\"string\">'WARNING'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CSS 优化方式，目前支持以下几种：</span></div><div class=\"line\">    <span class=\"comment\">// none: 不压缩，仅合并</span></div><div class=\"line\">    <span class=\"comment\">// standard: 标准压缩，移除注释、换行，以及可能导致 IE 解析出错的代码</span></div><div class=\"line\">    <span class=\"comment\">// standard.keepLines: 除标准压缩外，保留换行</span></div><div class=\"line\">    <span class=\"comment\">// standard.keepComments: 除标准压缩外，保留注释 (r.js 1.0.8+)</span></div><div class=\"line\">    <span class=\"comment\">// standard.keepComments.keepLines: 除标准压缩外，保留注释和换行 (r.js 1.0.8+)</span></div><div class=\"line\">    optimizeCss: <span class=\"string\">\"standard.keepLines\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否忽略 CSS 资源文件中的 @import 指令</span></div><div class=\"line\">    cssImportIgnore: <span class=\"literal\">null</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 一般用于命令行，可将多个 CSS 资源文件打包成单个 CSS 文件</span></div><div class=\"line\">    cssIn: <span class=\"string\">\"path/to/main.css\"</span>,</div><div class=\"line\">    <span class=\"attr\">out</span>: <span class=\"string\">\"path/to/css-optimized.css\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 处理所有的文本资源依赖项，从而避免为加载资源而产生的大量单独xhr请求</span></div><div class=\"line\">    inlineText: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否开启严格模式</span></div><div class=\"line\">    <span class=\"comment\">// 由于很多浏览器不支持 ES5 的严格模式，故此配置默认值为 false</span></div><div class=\"line\">    useStrict: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Specify build pragmas. If the source files contain comments like so:</span></div><div class=\"line\">    <span class=\"comment\">//&gt;&gt;excludeStart(\"fooExclude\", pragmas.fooExclude);</span></div><div class=\"line\">    <span class=\"comment\">//&gt;&gt;excludeEnd(\"fooExclude\");</span></div><div class=\"line\">    <span class=\"comment\">//Then the comments that start with //&gt;&gt; are the build pragmas.</span></div><div class=\"line\">    <span class=\"comment\">//excludeStart/excludeEnd and includeStart/includeEnd work, and the</span></div><div class=\"line\">    <span class=\"comment\">//the pragmas value to the includeStart or excludeStart lines</span></div><div class=\"line\">    <span class=\"comment\">//is evaluated to see if the code between the Start and End pragma</span></div><div class=\"line\">    <span class=\"comment\">//lines should be included or excluded. If you have a choice to use</span></div><div class=\"line\">    <span class=\"comment\">//\"has\" code or pragmas, use \"has\" code instead. Pragmas are harder</span></div><div class=\"line\">    <span class=\"comment\">//to read, but they can be a bit more flexible on code removal vs.</span></div><div class=\"line\">    <span class=\"comment\">//has-based code, which must follow JavaScript language rules.</span></div><div class=\"line\">    <span class=\"comment\">//Pragmas also remove code in non-minified source, where has branch</span></div><div class=\"line\">    <span class=\"comment\">//trimming is only done if the code is minified via UglifyJS or</span></div><div class=\"line\">    <span class=\"comment\">//Closure Compiler.</span></div><div class=\"line\">    pragmas: &#123;</div><div class=\"line\">        <span class=\"attr\">fooExclude</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Same as \"pragmas\", but only applied once during the file save phase</span></div><div class=\"line\">    <span class=\"comment\">//of an optimization. \"pragmas\" are applied both during the dependency</span></div><div class=\"line\">    <span class=\"comment\">//mapping and file saving phases on an optimization. Some pragmas</span></div><div class=\"line\">    <span class=\"comment\">//should not be processed during the dependency mapping phase of an</span></div><div class=\"line\">    <span class=\"comment\">//operation, such as the pragma in the CoffeeScript loader plugin,</span></div><div class=\"line\">    <span class=\"comment\">//which wants the CoffeeScript compiler during the dependency mapping</span></div><div class=\"line\">    <span class=\"comment\">//phase, but once files are saved as plain JavaScript, the CoffeeScript</span></div><div class=\"line\">    <span class=\"comment\">//compiler is no longer needed. In that case, pragmasOnSave would be used</span></div><div class=\"line\">    <span class=\"comment\">//to exclude the compiler code during the save phase.</span></div><div class=\"line\">    pragmasOnSave: &#123;</div><div class=\"line\">        <span class=\"comment\">//Just an example</span></div><div class=\"line\">        excludeCoffeeScript: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Allows trimming of code branches that use has.js-based feature detection:</span></div><div class=\"line\">    <span class=\"comment\">//https://github.com/phiggins42/has.js</span></div><div class=\"line\">    <span class=\"comment\">//The code branch trimming only happens if minification with UglifyJS or</span></div><div class=\"line\">    <span class=\"comment\">//Closure Compiler is done. For more information, see:</span></div><div class=\"line\">    <span class=\"comment\">//http://requirejs.org/docs/optimization.html#hasjs</span></div><div class=\"line\">    has: &#123;</div><div class=\"line\">        <span class=\"string\">'function-bind'</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"string\">'string-trim'</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Similar to pragmasOnSave, but for has tests -- only applied during the</span></div><div class=\"line\">    <span class=\"comment\">//file save phase of optimization, where \"has\" is applied to both</span></div><div class=\"line\">    <span class=\"comment\">//dependency mapping and file save phases.</span></div><div class=\"line\">    hasOnSave: &#123;</div><div class=\"line\">        <span class=\"string\">'function-bind'</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"string\">'string-trim'</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 命名空间，完整实例可以参考 http://requirejs.org/docs/faq-advanced.html#rename</span></div><div class=\"line\">    namespace: <span class=\"string\">'foo'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 跳过 pragmas 处理</span></div><div class=\"line\">    skipPragmas: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//If skipModuleInsertion is false, then files that do not use define()</span></div><div class=\"line\">    <span class=\"comment\">//to define modules will get a define() placeholder inserted for them.</span></div><div class=\"line\">    <span class=\"comment\">//Also, require.pause/resume calls will be inserted.</span></div><div class=\"line\">    <span class=\"comment\">//Set it to true to avoid this. This is useful if you are building code that</span></div><div class=\"line\">    <span class=\"comment\">//does not use require() in the built project or in the JS files, but you</span></div><div class=\"line\">    <span class=\"comment\">//still want to use the optimization tool from RequireJS to concatenate modules</span></div><div class=\"line\">    <span class=\"comment\">//together.</span></div><div class=\"line\">    skipModuleInsertion: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Specify modules to stub out in the optimized file. The optimizer will</span></div><div class=\"line\">    <span class=\"comment\">//use the source version of these modules for dependency tracing and for</span></div><div class=\"line\">    <span class=\"comment\">//plugin use, but when writing the text into an optimized layer, these</span></div><div class=\"line\">    <span class=\"comment\">//modules will get the following text instead:</span></div><div class=\"line\">    <span class=\"comment\">//If the module is used as a plugin:</span></div><div class=\"line\">    <span class=\"comment\">//    define(&#123;load: function(id)&#123;throw new Error(\"Dynamic load not allowed: \" + id);&#125;&#125;);</span></div><div class=\"line\">    <span class=\"comment\">//If just a plain module:</span></div><div class=\"line\">    <span class=\"comment\">//    define(&#123;&#125;);</span></div><div class=\"line\">    <span class=\"comment\">//This is useful particularly for plugins that inline all their resources</span></div><div class=\"line\">    <span class=\"comment\">//and use the default module resolution behavior (do *not* implement the</span></div><div class=\"line\">    <span class=\"comment\">//normalize() method). In those cases, an AMD loader just needs to know</span></div><div class=\"line\">    <span class=\"comment\">//that the module has a definition. These small stubs can be used instead of</span></div><div class=\"line\">    <span class=\"comment\">//including the full source for a plugin.</span></div><div class=\"line\">    stubModules: [<span class=\"string\">'text'</span>, <span class=\"string\">'bar'</span>],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//If it is not a one file optimization, scan through all .js files in the</span></div><div class=\"line\">    <span class=\"comment\">//output directory for any plugin resource dependencies, and if the plugin</span></div><div class=\"line\">    <span class=\"comment\">//supports optimizing them as separate files, optimize them. Can be a</span></div><div class=\"line\">    <span class=\"comment\">//slower optimization. Only use if there are some plugins that use things</span></div><div class=\"line\">    <span class=\"comment\">//like XMLHttpRequest that do not work across domains, but the built code</span></div><div class=\"line\">    <span class=\"comment\">//will be placed on another domain.</span></div><div class=\"line\">    optimizeAllPluginResources: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 处理级联依赖，默认为 false，此时能够在运行时动态 require 级联的模块。为 true 时，级联模块会被一同打包</span></div><div class=\"line\">    findNestedDependencies: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//If set to true, any files that were combined into a build layer will be</span></div><div class=\"line\">    <span class=\"comment\">//removed from the output folder.</span></div><div class=\"line\">    removeCombined: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">modules</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// 模块 alias 名称</span></div><div class=\"line\">            name: <span class=\"string\">\"foo/bar/bop\"</span>,</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//For build profiles that contain more than one modules entry,</span></div><div class=\"line\">            <span class=\"comment\">//allow overrides for the properties that set for the whole build,</span></div><div class=\"line\">            <span class=\"comment\">//for example a different set of pragmas for this module.</span></div><div class=\"line\">            <span class=\"comment\">//The override's value is an object that can</span></div><div class=\"line\">            <span class=\"comment\">//contain any of the other build options in this file.</span></div><div class=\"line\">            <span class=\"comment\">//</span></div><div class=\"line\">            override: &#123;</div><div class=\"line\">                <span class=\"attr\">pragmas</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">fooExclude</span>: <span class=\"literal\">true</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 将 alias 别名为 foo/bar/bop 和 foo/bar/bee 的模块打包成一个文件</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">\"foo/bar/bop\"</span>,</div><div class=\"line\">            <span class=\"attr\">include</span>: [<span class=\"string\">\"foo/bar/bee\"</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 将 foo/bar/bip 及其依赖项一并打包，但不包括 foo/bar/bop</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">\"foo/bar/bip\"</span>,</div><div class=\"line\">            <span class=\"attr\">exclude</span>: [</div><div class=\"line\">                <span class=\"string\">\"foo/bar/bop\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 排除指定模块，但若该模块对所打包文件有级联依赖关系，则仍会被打包进去</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">\"foo/bar/bin\"</span>,</div><div class=\"line\">            <span class=\"attr\">excludeShallow</span>: [</div><div class=\"line\">                <span class=\"string\">\"foo/bar/bot\"</span></div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// insertRequire 在 RequireJS 2.0 中被引入，在 built 文件的末尾插入 require([]) 以触发模块加载并运行</span></div><div class=\"line\">        <span class=\"comment\">// insertRequire: [\"foo/baz\"] 即 require([\"foo/baz\"])</span></div><div class=\"line\">        <span class=\"comment\">// 详情见 https://github.com/jrburke/almond</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">\"foo/baz\"</span>,</div><div class=\"line\">            <span class=\"attr\">insertRequire</span>: [<span class=\"string\">\"foo/baz\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仅优化单个模块及其依赖项</span></div><div class=\"line\">    name: <span class=\"string\">\"foo/bar/bop\"</span>,</div><div class=\"line\">    <span class=\"attr\">include</span>: [<span class=\"string\">\"foo/bar/bee\"</span>],</div><div class=\"line\">    <span class=\"attr\">insertRequire</span>: [<span class=\"string\">'foo/bar/bop'</span>],</div><div class=\"line\">    <span class=\"attr\">out</span>: <span class=\"string\">\"path/to/optimized-file.js\"</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// An alternative to \"include\"</span></div><div class=\"line\">    deps: [<span class=\"string\">\"foo/bar/bee\"</span>],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// RequireJS 2.0 中，out 可以是一个函数</span></div><div class=\"line\">    out: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 自定义优化内容</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 模块包裹函数，顾名思义使用特定内容包裹模块，如此一来 define/require 就不再是全局变量，在 end 中可以暴露一些全局变量供整个函数使用</span></div><div class=\"line\">    wrap: &#123;</div><div class=\"line\">        <span class=\"attr\">start</span>: <span class=\"string\">\"(function() &#123;\"</span>,</div><div class=\"line\">        <span class=\"attr\">end</span>: <span class=\"string\">\"&#125;());\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 另一种模块包裹方式</span></div><div class=\"line\">    <span class=\"comment\">// (function() &#123; + content + &#125;());</span></div><div class=\"line\">    wrap: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 另一种模块包裹方式，包裹内容可以是指定文件</span></div><div class=\"line\">    wrap: &#123;</div><div class=\"line\">        <span class=\"attr\">startFile</span>: <span class=\"string\">\"part/start.frag\"</span>,</div><div class=\"line\">        <span class=\"attr\">endFile</span>: <span class=\"string\">\"parts/end.frag\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 不优化某些文件</span></div><div class=\"line\">    fileExclusionRegExp: <span class=\"regexp\">/^\\./</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 默认保留模块的 license 注释</span></div><div class=\"line\">    preserveLicenseComments: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置 logging level</span></div><div class=\"line\">    <span class=\"comment\">// TRACE: 0,</span></div><div class=\"line\">    <span class=\"comment\">// INFO: 1,</span></div><div class=\"line\">    <span class=\"comment\">// WARN: 2,</span></div><div class=\"line\">    <span class=\"comment\">// ERROR: 3,</span></div><div class=\"line\">    <span class=\"comment\">// SILENT: 4</span></div><div class=\"line\">    <span class=\"comment\">// Default is 0.</span></div><div class=\"line\">    logLevel: <span class=\"number\">0</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在每个文件模块被读取时的操作函数，可在函数体内作适当变换</span></div><div class=\"line\">    onBuildRead: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">moduleName, path, contents</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> contents.replace(<span class=\"regexp\">/foo/g</span>, <span class=\"string\">'bar'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在每个文件模块被写入时的操作函数</span></div><div class=\"line\">    onBuildWrite: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">moduleName, path, contents</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> contents.replace(<span class=\"regexp\">/bar/g</span>, <span class=\"string\">'foo'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 若为true，优化器会强制在文件中包裹一层 define(require, exports, module) &#123;&#125;)</span></div><div class=\"line\">    cjsTranslate: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Introduced in 2.0.2: a bit experimental.</span></div><div class=\"line\">    <span class=\"comment\">//Each script in the build layer will be turned into</span></div><div class=\"line\">    <span class=\"comment\">//a JavaScript string with a //@ sourceURL comment, and then wrapped in an</span></div><div class=\"line\">    <span class=\"comment\">//eval call. This allows some browsers to see each evaled script as a</span></div><div class=\"line\">    <span class=\"comment\">//separate script in the script debugger even though they are all combined</span></div><div class=\"line\">    <span class=\"comment\">//in the same file. Some important limitations:</span></div><div class=\"line\">    <span class=\"comment\">//1) Do not use in IE if conditional comments are turned on, it will cause</span></div><div class=\"line\">    <span class=\"comment\">//errors:</span></div><div class=\"line\">    <span class=\"comment\">//http://en.wikipedia.org/wiki/Conditional_comment#Conditional_comments_in_JScript</span></div><div class=\"line\">    <span class=\"comment\">//2) It is only useful in optimize: 'none' scenarios. The goal is to allow</span></div><div class=\"line\">    <span class=\"comment\">//easier built layer debugging, which goes against minification desires.</span></div><div class=\"line\">    useSourceUrl: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481098645281,
				"created_by": 2,
				"updated_at": 1481183353232,
				"updated_by": 2,
				"published_at": 1481098645281,
				"published_by": 2
			},
			{
				"id": "ciwg0zxxu0015q0fc2krussd9",
				"title": "使用r.js进行简单的js/css压缩",
				"slug": "rjs-help",
				"markdown": "最近用require写了一个网站的模块,到压缩的时候,各种查资料学习,但由于时间较紧,将所有代码都压缩成一个文件,导致代码的体积很大,今天抽时间网上参考下官网的说明配置,将这次压缩代码的配置及运行命令记录下来,以后留着用.\n<!--more-->\n js的压缩\n--\n\n这次只是初步应用,如果有好的方法或有误的地方,还望各位大侠们指教.\n\n第一种配置的文件: 需要把所有依赖的文件都压缩到当前代码中.\n```js\n({\n   baseUrl: \"./\",\n   paths: {\n       amd_modules: \"../amd_modules\",\n       lib : \"../lib\"\n   },\n   name: \"main\",\n   optimizeCss: \"none\",\n   out: \"index-built.js\"\n})\n```\n　　baseUrl: 指当前配置文件的路径\n\n　　paths: 配置一些下面配置时需要的路径\n\n　　name: 需要被压缩的文件\n\n　　optimizeCss: none不压缩, standard标准压缩\n\n　　out: 输出的文件\n\n第二种配置的文件,去掉常用的库(单引用)\n\n```js\n({\n    mainConfigFile : \"main.js\",\n    baseUrl: \"./\",\n    paths : {\n        amd_modules: \"../amd_modules\" ,\n        lib: \"../lib\"\n    },\n    dir: \"built\",\n    keepBuildDir: false,  //不复制依赖文件\n\n    modules: [\n        {\n            name: \"main\",\n            exclude: [\"amd_modules/jquery/1.8.3/jquery\", \"lib/header/0.0.1/header\"]\n        }\n    ]\n})\n```\n　　dir: 输出目录的路径\n\n　　modules: 压缩合并的模块,exclude: 筛选掉的文件,不被压缩到main的压缩文件里\n\n　　执行代码:\n```\nnode r.js -o config.js\n```\n\ncss的压缩\n--\n第一种情况,直接压缩某个文件,执行代码\n```\nnode r.js -o cssIn=index.css out=built/index.css\n```\n第二种情况,压缩多个文件\n\n需要先将要压缩的文件放到一个css中,用@import引入,如下所示:存储文件为main.css\n```css\n@import url(\"icons.css\");\n@import url(\"window.css\");\n@import url(\"tabs.css\");\n@import url(\"index.css\");\n```\n执行代码:(标准压缩)\n```\nnode r.js -o cssIn=main.css out=built/main.css optimizeCss=standard\n```",
				"html": "<p>最近用require写了一个网站的模块,到压缩的时候,各种查资料学习,但由于时间较紧,将所有代码都压缩成一个文件,导致代码的体积很大,今天抽时间网上参考下官网的说明配置,将这次压缩代码的配置及运行命令记录下来,以后留着用.<br><a id=\"more\"></a></p>\n<h2 id=\"js的压缩\"><a href=\"#js的压缩\" class=\"headerlink\" title=\" js的压缩\"></a> js的压缩</h2><p>这次只是初步应用,如果有好的方法或有误的地方,还望各位大侠们指教.</p>\n<p>第一种配置的文件: 需要把所有依赖的文件都压缩到当前代码中.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&#123;</div><div class=\"line\">   <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"./\"</span>,</div><div class=\"line\">   <span class=\"attr\">paths</span>: &#123;</div><div class=\"line\">       <span class=\"attr\">amd_modules</span>: <span class=\"string\">\"../amd_modules\"</span>,</div><div class=\"line\">       <span class=\"attr\">lib</span> : <span class=\"string\">\"../lib\"</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">\"main\"</span>,</div><div class=\"line\">   <span class=\"attr\">optimizeCss</span>: <span class=\"string\">\"none\"</span>,</div><div class=\"line\">   <span class=\"attr\">out</span>: <span class=\"string\">\"index-built.js\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>　　baseUrl: 指当前配置文件的路径</p>\n<p>　　paths: 配置一些下面配置时需要的路径</p>\n<p>　　name: 需要被压缩的文件</p>\n<p>　　optimizeCss: none不压缩, standard标准压缩</p>\n<p>　　out: 输出的文件</p>\n<p>第二种配置的文件,去掉常用的库(单引用)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&#123;</div><div class=\"line\">    <span class=\"attr\">mainConfigFile</span> : <span class=\"string\">\"main.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">baseUrl</span>: <span class=\"string\">\"./\"</span>,</div><div class=\"line\">    <span class=\"attr\">paths</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">amd_modules</span>: <span class=\"string\">\"../amd_modules\"</span> ,</div><div class=\"line\">        <span class=\"attr\">lib</span>: <span class=\"string\">\"../lib\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">dir</span>: <span class=\"string\">\"built\"</span>,</div><div class=\"line\">    <span class=\"attr\">keepBuildDir</span>: <span class=\"literal\">false</span>,  <span class=\"comment\">//不复制依赖文件</span></div><div class=\"line\"></div><div class=\"line\">    modules: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">\"main\"</span>,</div><div class=\"line\">            <span class=\"attr\">exclude</span>: [<span class=\"string\">\"amd_modules/jquery/1.8.3/jquery\"</span>, <span class=\"string\">\"lib/header/0.0.1/header\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>　　dir: 输出目录的路径</p>\n<p>　　modules: 压缩合并的模块,exclude: 筛选掉的文件,不被压缩到main的压缩文件里</p>\n<p>　　执行代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node r.js -o config.js</div></pre></td></tr></table></figure></p>\n<h2 id=\"css的压缩\"><a href=\"#css的压缩\" class=\"headerlink\" title=\"css的压缩\"></a>css的压缩</h2><p>第一种情况,直接压缩某个文件,执行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node r.js -o cssIn=index.css out=built/index.css</div></pre></td></tr></table></figure></p>\n<p>第二种情况,压缩多个文件</p>\n<p>需要先将要压缩的文件放到一个css中,用@import引入,如下所示:存储文件为main.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"icons.css\"</span>);</div><div class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"window.css\"</span>);</div><div class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"tabs.css\"</span>);</div><div class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"index.css\"</span>);</div></pre></td></tr></table></figure></p>\n<p>执行代码:(标准压缩)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node r.js -o cssIn=main.css out=built/main.css optimizeCss=standard</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481098386289,
				"created_by": 2,
				"updated_at": 1481183360983,
				"updated_by": 2,
				"published_at": 1481098386289,
				"published_by": 2
			},
			{
				"id": "ciwg0zxve000lq0fc12n5mpi1",
				"title": "Jquery插件开发入门",
				"slug": "jquery-plugins",
				"markdown": "扩展jQuery插件和方法的作用是非常强大的，它可以节省大量开发时间。这篇文章将概述jQuery插件开发的基本知识，最佳做法和常见的陷阱。\n<!--more-->\n入门\n---\n编写一个jQuery插件开始于给jQuery.fn加入​​新的功能属性，此处添加的对象属性的名称就是你插件的名称：\n.代码如下:\n```js\njQuery.fn.myPlugin = function(){\n  //你自己的插件代码\n};\n```\n用户非常喜欢的$符号哪里去了？ 它仍然存在，但是，为了避免和其他JavaScript库冲突，我们最好将jQuery传递给一个自我执行的封闭程序，jQuery在此程序中映射为$符号，这样可以避免$号被其他库覆写。\n.代码如下:\n```js\n(function ($) {\n    $.fn.m​​yPlugin = function () {\n        //你自己的插件代码\n    };\n})(jQuery);\n```\n在这个封闭程序中，我们可以无限制的使用$符号来表示jQuery函数。\n\n环境\n---\n现在，我们可以开始编写实际的插件代码。 但是，在这之前，我们必须得对插件所处的环境有个概念。 在插件的范围里， this关键字代表了这个插件将要执行的jQuery对象， 这里容易产生一个普遍的误区，因为在其他包含callback的jQuery函数中，this关键字代表了原生的DOM元素。这常常会导致开发者误将this关键字无谓的包在jQuery中，如下所示。\n.代码如下:\n```js\n(function ($) {\n    $.fn.m​​yPlugin = function () {\n\n        //此处没有必要将this包在$号中如$(this)，因为this已经是一个jQuery对象。\n        //$(this)等同于 $($('#element'));\n\n        this.fadeIn('normal', function () {\n\n            //此处callback函数中this关键字代表一个DOM元素\n\n        });\n\n    };\n})(jQuery);\n\n$('#element').myPlugin();\n```\n基础知识\n---\n现在，我们理解了jQuery插件的基础知识，让我们写一个插件，做一些事情。\n.代码如下:\n```js\n(function ($) {\n\n    $.fn.m​​axHeight = function () {\n\n        var max = 0;\n\n        this.each(function () {\n            max = Math.max(max, $(this).height());\n        });\n\n        return max;\n    };\n})(jQuery);\n\nvar tallest = $('div').maxHeight(); //返回高度最大的div元素的高度\n```\n这是一个简单的插件，利用.height()返回页面中高度最大的div元素的高度。\n维护Chainability\n---\n很多时候，一个插件的意图仅仅是以某种方式修改收集的元素，并把它们传递给链中的下一个方法。 这是jQuery的设计之美，是jQuery如此受欢迎的原因之一。 因此，要保持一个插件的chainability，你必须确保你的插件返回this关键字。\n.代码如下:\n```js\n(function ($) {\n\n    $.fn.lockDimensions = function (type) {\n\n        return this.each(function () {\n\n            var $this = $(this);\n\n            if (!type || type == 'width') {\n                $this.width($this.width());\n            }\n\n            if (!type || type == 'height') {\n                $this.height($this.height());\n            }\n\n        });\n\n    };\n})(jQuery);\n\n$('div').lockDimensions('width').CSS('color', 'red');\n```\n由于插件返回this关键字，它保持了chainability，这样jQuery收集的元素可以继续被jQuery方法如.css控制。 因此，如果你的插件不返回固有的价值，你应该总是在其作用范围内返回this关键字。 此外，你可能会推断出，传递给插件的参数将会在插件的作用范围内被传递。 因此，在前面的例子，字符串'width'变成了插件的类型参数。\n默认值和选项\n--\n对于比较复杂的和提供了许多选项可定制的的插件，最好有一个当插件被调用的时候可以被拓展的默认设置(通过使用$.extend)。 因此，相对于调用一个有大量参数的插件，你可以调用一个对象参数，包含你了你想覆写的设置。\n.代码如下:\n```js\n(function ($) {\n\n    $.fn.tooltip = function (options) {\n\n        //创建一些默认值，拓展任何被提供的选项\n        var settings = $.extend({\n            'location': 'top',\n            'background-color': 'blue'\n        }, options);\n\n        return this.each(function () {\n\n            // Tooltip插件代码\n\n        });\n\n    };\n})(jQuery);\n\n$('div').tooltip({\n    'location': 'left'\n});\n```\n在这个例子中，调用tooltip插件时覆写了默认设置中的location选项，background-color选项保持默认值，所以最终被调用的设定值为：\n.代码如下:\n```js\n{\n    'location': 'left',\n    'background-color': 'blue'\n}\n```\n这是一个很灵活的方式，提供一个高度可配置的插件，而无需开发人员定义所有可用的选项。\n\n命名空间\n--\n正确命名空间你的插件是插件开发的一个非常重要的一部分。 正确的命名空间，可以保证你的插件将有一个非常低的机会被其他插件或同一页上的其他代码覆盖。 命名空间也使得你的生活作为一个插件开发人员更容易，因为它可以帮助你更好地跟踪你的方法，事件和数据。\n七、插件方法\n在任何情况下，一个单独的插件不应该在jQuery.fnjQuery.fn对象里有多个命名空间。\n.代码如下:\n```js\n(function ($) {\n\n    $.fn.tooltip = function (options) {\n        // this\n    };\n    $.fn.tooltipShow = function () {\n        // is\n    };\n    $.fn.tooltipHide = function () {\n        // bad\n    };\n    $.fn.tooltipUpdate = function (content) {\n        // !!!\n    };\n\n})(jQuery);\n```\n这是不被鼓励的，因为它$.fn使$.fn命名空间混乱。 为了解决这个问题，你应该收集对象文本中的所有插件的方法，通过传递该方法的字符串名称给插件以调用它们。\n.代码如下:\n```js\n(function ($) {\n\n    var methods = {\n        init: function (options) {\n            // this\n        },\n        show: function () {\n            // is\n        },\n        hide: function () {\n            // good\n        },\n        update: function (content) {\n            // !!!\n        }\n    };\n\n    $.fn.tooltip = function (method) {\n\n        // 方法调用\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method' + method + 'does not exist on jQuery.tooltip');\n        }\n\n    };\n\n})(jQuery);\n\n//调用init方法\n$('div').tooltip();\n\n//调用init方法\n$('div').tooltip({\n    foo: 'bar'\n});\n\n// 调用hide方法\n$('div').tooltip('hide');\n\n//调用Update方法\n$('div').tooltip('update', 'This is the new tooltip content!');\n```\n这种类型的插件架构允许您封装所有的方法在父包中，通过传递该方法的字符串名称和额外的此方法需要的参数来调用它们。 这种方法的封装和架构类型是jQuery插件社区的标准，它被无数的插件在使用，包括jQueryUI中的插件和widgets。\n事件\n--\n一个鲜为人知bind方法的功能即允许绑定事件命名空间。 如果你的插件绑定一个事件，一个很好的做法是赋予此事件命名空间。 通过这种方式，当你在解除绑定的时候不会干扰其他可能已经绑定的同一类型事件。   你可以通过追加命名空间到你需要绑定的的事件通过 ‘.<namespace>'。\n.代码如下:\n```js\n(function ($) {\n\n    var methods = {\n        init: function (options) {\n\n            return this.each(function () {\n                $(window).bind('resize.tooltip', methods.reposition);\n            });\n\n        },\n        destroy: function () {\n\n            return this.each(function () {\n                $(window).unbind('.tooltip');\n            })\n\n        },\n        reposition: function () {\n            //...\n        },\n        show: function () {\n            //...\n        },\n        hide: function () {\n            //...\n        },\n        update: function (content) {\n            //...\n        }\n    };\n\n    $.fn.tooltip = function (method) {\n\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method ' + method + ' does not exist on jQuery.tooltip');\n        }\n    };\n\n})(jQuery);\n\n$('#fun').tooltip();\n//一段时间之后... ...\n$('#fun').tooltip('destroy');\n```\n在这个例子中，当tooltip通过init方法初始化时，它将reposition方法绑定到resize事件并给reposition非那方法赋予命名空间通过追加.tooltip。 稍后， 当开发人员需要销毁tooltip的时候，我们可以同时解除其中reposition方法和resize事件的绑定，通过传递reposition的命名空间给插件。 这使我们能够安全地解除事件的绑定并不会影响到此插件之外的绑定。\n数据\n--\n通常在插件开发的时候，你可能需要记录或者检查你的插件是否已经被初始化给了一个元素。 使用jQuery的data方法是一个很好的基于元素的记录变量的途径。尽管如此，相对于记录大量的不同名字的分离的data,  使用一个单独的对象保存所有变量，并通过一个单独的命名空间读取这个对象不失为一个更好的方法。\n.代码如下:\n```js\n(function ($) {\n\n    var methods = {\n        init: function (options) {\n\n            return this.each(function () {\n\n                var $this = $(this),\n                    data = $this.data('tooltip'),\n                    tooltip = $('<div />', {\n                        text: $this.attr('title')\n                    });\n\n                // If the plugin hasn't been initialized yet\n                if (!data) {\n\n                    /*\n                     Do more setup stuff here\n                     */\n\n                    $(this).data('tooltip', {\n                        target: $this,\n                        tooltip: tooltip\n                    });\n\n                }\n            });\n        },\n        destroy: function () {\n\n            return this.each(function () {\n\n                var $this = $(this),\n                    data = $this.data('tooltip');\n\n                // Namespacing FTW\n                $(window).unbind('.tooltip');\n                data.tooltip.remove();\n                $this.removeData('tooltip');\n\n            })\n\n        },\n        reposition: function () {\n            // ...\n        },\n        show: function () {\n            // ...\n        },\n        hide: function () {\n            // ...\n        },\n        update: function (content) {\n            // ...\n        }\n    };\n\n    $.fn.tooltip = function (method) {\n\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method ' + method + ' does not exist on jQuery.tooltip');\n        }\n\n    };\n\n})(jQuery);\n```\n将数据通过命名空间封装在一个对象中，可以更容易的从一个集中的位置读取所有插件的属性。\n\n总结和最佳做法\n---\n编写jQuery插件允许你做出库，将最有用的功能集成到可重用的代码，可以节省开发者的时间，使开发更高效。 开发jQuery插件时，要牢记：\n1.始终包裹在一个封闭的插件：\n.代码如下:\n```js\n(function($) {\n/* plugin goes here */\n})(jQuery);\n```\n2.不要冗余包裹this关键字在插件的功能范围内\n3.除非插件返回特定值，否则总是返回this关键字来维持chainability 。\n4.传递一个可拓展的默认对象参数而不是大量的参数给插件。\n5.不要在一个插件中多次命名不同方法。\n3.始终命名空间的方法，事件和数据。\n\n",
				"html": "<p>扩展jQuery插件和方法的作用是非常强大的，它可以节省大量开发时间。这篇文章将概述jQuery插件开发的基本知识，最佳做法和常见的陷阱。<br><a id=\"more\"></a></p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>编写一个jQuery插件开始于给jQuery.fn加入​​新的功能属性，此处添加的对象属性的名称就是你插件的名称：<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn.myPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//你自己的插件代码</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>用户非常喜欢的$符号哪里去了？ 它仍然存在，但是，为了避免和其他JavaScript库冲突，我们最好将jQuery传递给一个自我执行的封闭程序，jQuery在此程序中映射为$符号，这样可以避免$号被其他库覆写。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    $.fn.m​​yPlugin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//你自己的插件代码</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>在这个封闭程序中，我们可以无限制的使用$符号来表示jQuery函数。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>现在，我们可以开始编写实际的插件代码。 但是，在这之前，我们必须得对插件所处的环境有个概念。 在插件的范围里， this关键字代表了这个插件将要执行的jQuery对象， 这里容易产生一个普遍的误区，因为在其他包含callback的jQuery函数中，this关键字代表了原生的DOM元素。这常常会导致开发者误将this关键字无谓的包在jQuery中，如下所示。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    $.fn.m​​yPlugin = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//此处没有必要将this包在$号中如$(this)，因为this已经是一个jQuery对象。</span></div><div class=\"line\">        <span class=\"comment\">//$(this)等同于 $($('#element'));</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.fadeIn(<span class=\"string\">'normal'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//此处callback函数中this关键字代表一个DOM元素</span></div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)(jQuery);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#element'</span>).myPlugin();</div></pre></td></tr></table></figure></p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>现在，我们理解了jQuery插件的基础知识，让我们写一个插件，做一些事情。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    $.fn.m​​axHeight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> max = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            max = <span class=\"built_in\">Math</span>.max(max, $(<span class=\"keyword\">this</span>).height());</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> max;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)(jQuery);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tallest = $(<span class=\"string\">'div'</span>).maxHeight(); <span class=\"comment\">//返回高度最大的div元素的高度</span></div></pre></td></tr></table></figure></p>\n<p>这是一个简单的插件，利用.height()返回页面中高度最大的div元素的高度。</p>\n<h2 id=\"维护Chainability\"><a href=\"#维护Chainability\" class=\"headerlink\" title=\"维护Chainability\"></a>维护Chainability</h2><p>很多时候，一个插件的意图仅仅是以某种方式修改收集的元素，并把它们传递给链中的下一个方法。 这是jQuery的设计之美，是jQuery如此受欢迎的原因之一。 因此，要保持一个插件的chainability，你必须确保你的插件返回this关键字。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    $.fn.lockDimensions = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!type || type == <span class=\"string\">'width'</span>) &#123;</div><div class=\"line\">                $<span class=\"keyword\">this</span>.width($<span class=\"keyword\">this</span>.width());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!type || type == <span class=\"string\">'height'</span>) &#123;</div><div class=\"line\">                $<span class=\"keyword\">this</span>.height($<span class=\"keyword\">this</span>.height());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)(jQuery);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'div'</span>).lockDimensions(<span class=\"string\">'width'</span>).CSS(<span class=\"string\">'color'</span>, <span class=\"string\">'red'</span>);</div></pre></td></tr></table></figure></p>\n<p>由于插件返回this关键字，它保持了chainability，这样jQuery收集的元素可以继续被jQuery方法如.css控制。 因此，如果你的插件不返回固有的价值，你应该总是在其作用范围内返回this关键字。 此外，你可能会推断出，传递给插件的参数将会在插件的作用范围内被传递。 因此，在前面的例子，字符串’width’变成了插件的类型参数。</p>\n<h2 id=\"默认值和选项\"><a href=\"#默认值和选项\" class=\"headerlink\" title=\"默认值和选项\"></a>默认值和选项</h2><p>对于比较复杂的和提供了许多选项可定制的的插件，最好有一个当插件被调用的时候可以被拓展的默认设置(通过使用$.extend)。 因此，相对于调用一个有大量参数的插件，你可以调用一个对象参数，包含你了你想覆写的设置。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    $.fn.tooltip = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建一些默认值，拓展任何被提供的选项</span></div><div class=\"line\">        <span class=\"keyword\">var</span> settings = $.extend(&#123;</div><div class=\"line\">            <span class=\"string\">'location'</span>: <span class=\"string\">'top'</span>,</div><div class=\"line\">            <span class=\"string\">'background-color'</span>: <span class=\"string\">'blue'</span></div><div class=\"line\">        &#125;, options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Tooltip插件代码</span></div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)(jQuery);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'div'</span>).tooltip(&#123;</div><div class=\"line\">    <span class=\"string\">'location'</span>: <span class=\"string\">'left'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，调用tooltip插件时覆写了默认设置中的location选项，background-color选项保持默认值，所以最终被调用的设定值为：<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">'location'</span>: <span class=\"string\">'left'</span>,</div><div class=\"line\">    <span class=\"string\">'background-color'</span>: <span class=\"string\">'blue'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是一个很灵活的方式，提供一个高度可配置的插件，而无需开发人员定义所有可用的选项。</p>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>正确命名空间你的插件是插件开发的一个非常重要的一部分。 正确的命名空间，可以保证你的插件将有一个非常低的机会被其他插件或同一页上的其他代码覆盖。 命名空间也使得你的生活作为一个插件开发人员更容易，因为它可以帮助你更好地跟踪你的方法，事件和数据。<br>七、插件方法<br>在任何情况下，一个单独的插件不应该在jQuery.fnjQuery.fn对象里有多个命名空间。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    $.fn.tooltip = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// this</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    $.fn.tooltipShow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// is</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    $.fn.tooltipHide = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// bad</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    $.fn.tooltipUpdate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// !!!</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这是不被鼓励的，因为它$.fn使$.fn命名空间混乱。 为了解决这个问题，你应该收集对象文本中的所有插件的方法，通过传递该方法的字符串名称给插件以调用它们。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> methods = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// this</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// is</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// good</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// !!!</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $.fn.tooltip = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 方法调用</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (methods[method]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> methods[method].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> method === <span class=\"string\">'object'</span> || !method) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> methods.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $.error(<span class=\"string\">'Method'</span> + method + <span class=\"string\">'does not exist on jQuery.tooltip'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用init方法</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).tooltip();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用init方法</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).tooltip(&#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用hide方法</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).tooltip(<span class=\"string\">'hide'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用Update方法</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).tooltip(<span class=\"string\">'update'</span>, <span class=\"string\">'This is the new tooltip content!'</span>);</div></pre></td></tr></table></figure></p>\n<p>这种类型的插件架构允许您封装所有的方法在父包中，通过传递该方法的字符串名称和额外的此方法需要的参数来调用它们。 这种方法的封装和架构类型是jQuery插件社区的标准，它被无数的插件在使用，包括jQueryUI中的插件和widgets。</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>一个鲜为人知bind方法的功能即允许绑定事件命名空间。 如果你的插件绑定一个事件，一个很好的做法是赋予此事件命名空间。 通过这种方式，当你在解除绑定的时候不会干扰其他可能已经绑定的同一类型事件。   你可以通过追加命名空间到你需要绑定的的事件通过 ‘.<namespace>‘。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> methods = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                $(<span class=\"built_in\">window</span>).bind(<span class=\"string\">'resize.tooltip'</span>, methods.reposition);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">destroy</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                $(<span class=\"built_in\">window</span>).unbind(<span class=\"string\">'.tooltip'</span>);</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">reposition</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $.fn.tooltip = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (methods[method]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> methods[method].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> method === <span class=\"string\">'object'</span> || !method) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> methods.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $.error(<span class=\"string\">'Method '</span> + method + <span class=\"string\">' does not exist on jQuery.tooltip'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#fun'</span>).tooltip();</div><div class=\"line\"><span class=\"comment\">//一段时间之后... ...</span></div><div class=\"line\">$(<span class=\"string\">'#fun'</span>).tooltip(<span class=\"string\">'destroy'</span>);</div></pre></td></tr></table></figure></namespace></p>\n<p>在这个例子中，当tooltip通过init方法初始化时，它将reposition方法绑定到resize事件并给reposition非那方法赋予命名空间通过追加.tooltip。 稍后， 当开发人员需要销毁tooltip的时候，我们可以同时解除其中reposition方法和resize事件的绑定，通过传递reposition的命名空间给插件。 这使我们能够安全地解除事件的绑定并不会影响到此插件之外的绑定。</p>\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><p>通常在插件开发的时候，你可能需要记录或者检查你的插件是否已经被初始化给了一个元素。 使用jQuery的data方法是一个很好的基于元素的记录变量的途径。尽管如此，相对于记录大量的不同名字的分离的data,  使用一个单独的对象保存所有变量，并通过一个单独的命名空间读取这个对象不失为一个更好的方法。<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> methods = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>),</div><div class=\"line\">                    data = $<span class=\"keyword\">this</span>.data(<span class=\"string\">'tooltip'</span>),</div><div class=\"line\">                    tooltip = $(<span class=\"string\">'&lt;div /&gt;'</span>, &#123;</div><div class=\"line\">                        <span class=\"attr\">text</span>: $<span class=\"keyword\">this</span>.attr(<span class=\"string\">'title'</span>)</div><div class=\"line\">                    &#125;);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// If the plugin hasn't been initialized yet</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!data) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">/*</span></div><div class=\"line\">                     Do more setup stuff here</div><div class=\"line\">                     */</div><div class=\"line\"></div><div class=\"line\">                    $(<span class=\"keyword\">this</span>).data(<span class=\"string\">'tooltip'</span>, &#123;</div><div class=\"line\">                        <span class=\"attr\">target</span>: $<span class=\"keyword\">this</span>,</div><div class=\"line\">                        <span class=\"attr\">tooltip</span>: tooltip</div><div class=\"line\">                    &#125;);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">destroy</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>),</div><div class=\"line\">                    data = $<span class=\"keyword\">this</span>.data(<span class=\"string\">'tooltip'</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Namespacing FTW</span></div><div class=\"line\">                $(<span class=\"built_in\">window</span>).unbind(<span class=\"string\">'.tooltip'</span>);</div><div class=\"line\">                data.tooltip.remove();</div><div class=\"line\">                $<span class=\"keyword\">this</span>.removeData(<span class=\"string\">'tooltip'</span>);</div><div class=\"line\"></div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">reposition</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $.fn.tooltip = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (methods[method]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> methods[method].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> method === <span class=\"string\">'object'</span> || !method) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> methods.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $.error(<span class=\"string\">'Method '</span> + method + <span class=\"string\">' does not exist on jQuery.tooltip'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>将数据通过命名空间封装在一个对象中，可以更容易的从一个集中的位置读取所有插件的属性。</p>\n<h2 id=\"总结和最佳做法\"><a href=\"#总结和最佳做法\" class=\"headerlink\" title=\"总结和最佳做法\"></a>总结和最佳做法</h2><p>编写jQuery插件允许你做出库，将最有用的功能集成到可重用的代码，可以节省开发者的时间，使开发更高效。 开发jQuery插件时，要牢记：<br>1.始终包裹在一个封闭的插件：<br>.代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">/* plugin goes here */</span></div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>2.不要冗余包裹this关键字在插件的功能范围内<br>3.除非插件返回特定值，否则总是返回this关键字来维持chainability 。<br>4.传递一个可拓展的默认对象参数而不是大量的参数给插件。<br>5.不要在一个插件中多次命名不同方法。<br>3.始终命名空间的方法，事件和数据。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481096358367,
				"created_by": 2,
				"updated_at": 1487207792344,
				"updated_by": 2,
				"published_at": 1481096358367,
				"published_by": 2
			},
			{
				"id": "ciwg0zxx2000yq0fchkmy8lli",
				"title": "Linux中常用操作命令",
				"slug": "linux-command",
				"markdown": "Linux，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。具体安装步骤，找百度。\n\n再安装Ubuntu。具体安装步骤，找百度。\n\n安装完后，可以看到Linux系统的目录结构，见链接http://www.cnblogs.com/laov/p/3409875.html\n<!--more-->\n\n\n\n\n常用指令\n----\n```bash\n\nls　　            #显示文件或目录\n\n     -l           #列出文件详细信息l(list)\n\n     -a           #列出当前目录下所有文件及目录，包括隐藏的a(all)\n\nmkdir             #创建目录\n\n     -p           #创建目录，若无父目录，则创建p(parent)\n\ncd                #切换目录\n\ntouch             #创建空文件\n\necho              #创建带有内容的文件。\n\ncat               #查看文件内容\n\ncp                #拷贝\n\nmv                #移动或重命名\n\nrm                #删除文件\n\n     -r           #递归删除，可删除子目录及文件\n\n     -f           #强制删除\n\nfind              #在文件系统中搜索某文件\n\nwc                #统计文本中行数、字数、字符数\n\ngrep              #在文本文件中查找某个字符串\n\nrmdir             #删除空目录\n\ntree              #树形结构显示目录，需要安装tree包\n\npwd               #显示当前目录\n\nln                #创建链接文件\n\nmore、less        #分页显示文本文件内容\n\nhead、tail        #显示文件头、尾内容\n\nctrl+alt+F1       #命令行全屏模式\n\n```\n系统管理命令\n---\n```bash\nstat              #显示指定文件的详细信息，比ls更详细\n\nwho               #显示在线登陆用户\n\nwhoami            #显示当前操作用户\n\nhostname          #显示主机名\n\nuname             #显示系统信息\n\ntop               #动态显示当前耗费资源最多进程信息\n\nps                #显示瞬间进程状态 ps -aux\n\ndu                #查看目录大小 du -h /home带有单位显示目录信息\n\ndf                #查看磁盘大小 df -h 带有单位显示磁盘信息\n\nifconfig          #查看网络情况\n\nping              #测试网络连通\n\nnetstat           #显示网络状态信息\n\nman               #命令不会用了，找男人  如：man ls\n\nclear             #清屏\n\nalias             #对命令重命名 如：alias showmeit=\"ps -aux\" ，另外解除使用unaliax showmeit\n\nkill              #杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。\n```\n\n\n打包压缩相关命令\n---\n```bash\ngzip：\n\nbzip2：\n\ntar:               #打包压缩\n\n     -c            # 归档文件\n\n     -x            #压缩文件\n\n     -z            #gzip压缩文件\n\n     -j            #bzip2压缩文件\n\n     -v            #显示压缩或解压缩过程 v(view)\n\n     -f            #使用档名\n\n例：\n\ntar -cvf /home/abc.tar /home/abc              #只打包，不压缩\n\ntar -zcvf /home/abc.tar.gz /home/abc          #打包，并用gzip压缩\n\ntar -jcvf /home/abc.tar.bz2 /home/abc         #打包，并用bzip2压缩\n```\n当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“c” 换成“x” 就可以了。\n\n\n\n关机/重启机器\n---\n```bash\nshutdown\n\n     -r             #关机重启\n\n     -h             #关机不重启\n\n     now            #立刻关机\n\nhalt                #关机\n\nreboot              #重启\n\n```\n\nLinux管道\n---\n将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。\n\n例：grep -r \"close\" /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。\n\n\n\nLinux软件包管理\n---\ndpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。\n\n比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。\n```bash\n\nsudo dpkg -i tree_1.5.3-1_i386.deb         #安装软件\n\nsudo dpkg -r tree                          #卸载软件\n\n```\n\n注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；\n\nAPT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。\n\n依然以tree为例\n```bash\nsudo apt-get install tree                      #安装tree\n\nsudo apt-get remove tree                       #卸载tree\n\nsudo apt-get update                            #更新软件\n\nsudo apt-get upgrade\n```\n\n\n将.rpm文件转为.deb文件\n\n.rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。\n\n```bash\nsudo alien abc.rpm\n```\n\n\nvim使用\n\nvim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。\n\n命令模式下：\n```bash\n:q                      #退出\n\n:q!                     #强制退出\n\n:wq                     #保存并退出\n\n:set number             #显示行号\n\n:set nonumber           #隐藏行号\n\n/apache                 #在文档中查找apache 按n跳到下一个，shift+n上一个\n\nyyp                     #复制光标所在行，并粘贴\n\nh(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)\n```\n\n\n用户及用户组管理\n```bash\n/etc/passwd      #存储用户账号\n\n/etc/group       #存储组账号\n\n/etc/shadow      #存储用户账号的密码\n\n/etc/gshadow     #存储用户组账号的密码\n\nuseradd          #用户名\n\nuserdel          #用户名\n\nadduser          #用户名\n\ngroupadd         #组名\n\ngroupdel         #组名\n\npasswd root      #给root设置密码\n\nsu root\n\nsu - root\n\n/etc/profile     #系统环境变量\n\nbash_profile     #用户环境变量\n\n.bashrc          #用户环境变量\n\nsu user          #切换用户，加载配置文件.bashrc\n\nsu - user        #切换用户，加载配置文件/etc/profile ，加载bash_profile\n\n#更改文件的用户及用户组\n\nsudo chown [-R] owner[:group] {File|Directory}\n\n#例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop\n\n#要想切换此文件所属的用户及组。可以使用命令。\n\nsudo chown root:root jdk-7u21-linux-i586.tar.gz\n```\n\n\n文件权限管理\n\n三种基本权限\n\n```bash\n\nR           #读         数值表示为4\n\nW           #写         数值表示为2\n\nX           #可执行      数值表示为1\n```\n\n\n如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r--\n\n-rw-rw-r--一共十个字符，分成四段。\n\n第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录\n\n第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6\n\n第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2=6\n\n第八九十个字符“r--”表示其他用户权限。              所以用数值表示为2\n\n所以操作此文件的权限用数值表示为662\n\n更改权限\n\nsudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名\n\n例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为\"-rwxrw-r-x\"，用数值表示为765\n```bash\nsudo chmod u+x g+w o+r  filename\n```\n上面的例子可以用数值表示\n```bash\nsudo chmod 765 filename\n```",
				"html": "<p>Linux，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。具体安装步骤，找百度。</p>\n<p>再安装Ubuntu。具体安装步骤，找百度。</p>\n<p>安装完后，可以看到Linux系统的目录结构，见链接<a href=\"http://www.cnblogs.com/laov/p/3409875.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/laov/p/3409875.html</a><br><a id=\"more\"></a></p>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ls　　            <span class=\"comment\">#显示文件或目录</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"_\">-l</span>           <span class=\"comment\">#列出文件详细信息l(list)</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"_\">-a</span>           <span class=\"comment\">#列出当前目录下所有文件及目录，包括隐藏的a(all)</span></div><div class=\"line\"></div><div class=\"line\">mkdir             <span class=\"comment\">#创建目录</span></div><div class=\"line\"></div><div class=\"line\">     -p           <span class=\"comment\">#创建目录，若无父目录，则创建p(parent)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span>                <span class=\"comment\">#切换目录</span></div><div class=\"line\"></div><div class=\"line\">touch             <span class=\"comment\">#创建空文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span>              <span class=\"comment\">#创建带有内容的文件。</span></div><div class=\"line\"></div><div class=\"line\">cat               <span class=\"comment\">#查看文件内容</span></div><div class=\"line\"></div><div class=\"line\">cp                <span class=\"comment\">#拷贝</span></div><div class=\"line\"></div><div class=\"line\">mv                <span class=\"comment\">#移动或重命名</span></div><div class=\"line\"></div><div class=\"line\">rm                <span class=\"comment\">#删除文件</span></div><div class=\"line\"></div><div class=\"line\">     -r           <span class=\"comment\">#递归删除，可删除子目录及文件</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"_\">-f</span>           <span class=\"comment\">#强制删除</span></div><div class=\"line\"></div><div class=\"line\">find              <span class=\"comment\">#在文件系统中搜索某文件</span></div><div class=\"line\"></div><div class=\"line\">wc                <span class=\"comment\">#统计文本中行数、字数、字符数</span></div><div class=\"line\"></div><div class=\"line\">grep              <span class=\"comment\">#在文本文件中查找某个字符串</span></div><div class=\"line\"></div><div class=\"line\">rmdir             <span class=\"comment\">#删除空目录</span></div><div class=\"line\"></div><div class=\"line\">tree              <span class=\"comment\">#树形结构显示目录，需要安装tree包</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">pwd</span>               <span class=\"comment\">#显示当前目录</span></div><div class=\"line\"></div><div class=\"line\">ln                <span class=\"comment\">#创建链接文件</span></div><div class=\"line\"></div><div class=\"line\">more、less        <span class=\"comment\">#分页显示文本文件内容</span></div><div class=\"line\"></div><div class=\"line\">head、tail        <span class=\"comment\">#显示文件头、尾内容</span></div><div class=\"line\"></div><div class=\"line\">ctrl+alt+F1       <span class=\"comment\">#命令行全屏模式</span></div></pre></td></tr></table></figure>\n<h2 id=\"系统管理命令\"><a href=\"#系统管理命令\" class=\"headerlink\" title=\"系统管理命令\"></a>系统管理命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">stat</span>              <span class=\"comment\">#显示指定文件的详细信息，比ls更详细</span></div><div class=\"line\"></div><div class=\"line\">who               <span class=\"comment\">#显示在线登陆用户</span></div><div class=\"line\"></div><div class=\"line\">whoami            <span class=\"comment\">#显示当前操作用户</span></div><div class=\"line\"></div><div class=\"line\">hostname          <span class=\"comment\">#显示主机名</span></div><div class=\"line\"></div><div class=\"line\">uname             <span class=\"comment\">#显示系统信息</span></div><div class=\"line\"></div><div class=\"line\">top               <span class=\"comment\">#动态显示当前耗费资源最多进程信息</span></div><div class=\"line\"></div><div class=\"line\">ps                <span class=\"comment\">#显示瞬间进程状态 ps -aux</span></div><div class=\"line\"></div><div class=\"line\">du                <span class=\"comment\">#查看目录大小 du -h /home带有单位显示目录信息</span></div><div class=\"line\"></div><div class=\"line\">df                <span class=\"comment\">#查看磁盘大小 df -h 带有单位显示磁盘信息</span></div><div class=\"line\"></div><div class=\"line\">ifconfig          <span class=\"comment\">#查看网络情况</span></div><div class=\"line\"></div><div class=\"line\">ping              <span class=\"comment\">#测试网络连通</span></div><div class=\"line\"></div><div class=\"line\">netstat           <span class=\"comment\">#显示网络状态信息</span></div><div class=\"line\"></div><div class=\"line\">man               <span class=\"comment\">#命令不会用了，找男人  如：man ls</span></div><div class=\"line\"></div><div class=\"line\">clear             <span class=\"comment\">#清屏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">alias</span>             <span class=\"comment\">#对命令重命名 如：alias showmeit=\"ps -aux\" ，另外解除使用unaliax showmeit</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">kill</span>              <span class=\"comment\">#杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</span></div></pre></td></tr></table></figure>\n<h2 id=\"打包压缩相关命令\"><a href=\"#打包压缩相关命令\" class=\"headerlink\" title=\"打包压缩相关命令\"></a>打包压缩相关命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip：</div><div class=\"line\"></div><div class=\"line\">bzip2：</div><div class=\"line\"></div><div class=\"line\">tar:               <span class=\"comment\">#打包压缩</span></div><div class=\"line\"></div><div class=\"line\">     -c            <span class=\"comment\"># 归档文件</span></div><div class=\"line\"></div><div class=\"line\">     -x            <span class=\"comment\">#压缩文件</span></div><div class=\"line\"></div><div class=\"line\">     -z            <span class=\"comment\">#gzip压缩文件</span></div><div class=\"line\"></div><div class=\"line\">     -j            <span class=\"comment\">#bzip2压缩文件</span></div><div class=\"line\"></div><div class=\"line\">     -v            <span class=\"comment\">#显示压缩或解压缩过程 v(view)</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"_\">-f</span>            <span class=\"comment\">#使用档名</span></div><div class=\"line\"></div><div class=\"line\">例：</div><div class=\"line\"></div><div class=\"line\">tar -cvf /home/abc.tar /home/abc              <span class=\"comment\">#只打包，不压缩</span></div><div class=\"line\"></div><div class=\"line\">tar -zcvf /home/abc.tar.gz /home/abc          <span class=\"comment\">#打包，并用gzip压缩</span></div><div class=\"line\"></div><div class=\"line\">tar -jcvf /home/abc.tar.bz2 /home/abc         <span class=\"comment\">#打包，并用bzip2压缩</span></div></pre></td></tr></table></figure>\n<p>当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“c” 换成“x” 就可以了。</p>\n<h2 id=\"关机-重启机器\"><a href=\"#关机-重启机器\" class=\"headerlink\" title=\"关机/重启机器\"></a>关机/重启机器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown</div><div class=\"line\"></div><div class=\"line\">     -r             <span class=\"comment\">#关机重启</span></div><div class=\"line\"></div><div class=\"line\">     -h             <span class=\"comment\">#关机不重启</span></div><div class=\"line\"></div><div class=\"line\">     now            <span class=\"comment\">#立刻关机</span></div><div class=\"line\"></div><div class=\"line\">halt                <span class=\"comment\">#关机</span></div><div class=\"line\"></div><div class=\"line\">reboot              <span class=\"comment\">#重启</span></div></pre></td></tr></table></figure>\n<h2 id=\"Linux管道\"><a href=\"#Linux管道\" class=\"headerlink\" title=\"Linux管道\"></a>Linux管道</h2><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p>\n<p>例：grep -r “close” /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。</p>\n<h2 id=\"Linux软件包管理\"><a href=\"#Linux软件包管理\" class=\"headerlink\" title=\"Linux软件包管理\"></a>Linux软件包管理</h2><p>dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。</p>\n<p>比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">sudo dpkg -i tree_1.5.3-1_i386.deb         <span class=\"comment\">#安装软件</span></div><div class=\"line\"></div><div class=\"line\">sudo dpkg -r tree                          <span class=\"comment\">#卸载软件</span></div></pre></td></tr></table></figure></p>\n<p>注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；</p>\n<p>APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。</p>\n<p>依然以tree为例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install tree                      <span class=\"comment\">#安装tree</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get remove tree                       <span class=\"comment\">#卸载tree</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get update                            <span class=\"comment\">#更新软件</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get upgrade</div></pre></td></tr></table></figure></p>\n<p>将.rpm文件转为.deb文件</p>\n<p>.rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo alien abc.rpm</div></pre></td></tr></table></figure>\n<p>vim使用</p>\n<p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p>\n<p>命令模式下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">:q                      <span class=\"comment\">#退出</span></div><div class=\"line\"></div><div class=\"line\">:q!                     <span class=\"comment\">#强制退出</span></div><div class=\"line\"></div><div class=\"line\">:wq                     <span class=\"comment\">#保存并退出</span></div><div class=\"line\"></div><div class=\"line\">:<span class=\"built_in\">set</span> number             <span class=\"comment\">#显示行号</span></div><div class=\"line\"></div><div class=\"line\">:<span class=\"built_in\">set</span> nonumber           <span class=\"comment\">#隐藏行号</span></div><div class=\"line\"></div><div class=\"line\">/apache                 <span class=\"comment\">#在文档中查找apache 按n跳到下一个，shift+n上一个</span></div><div class=\"line\"></div><div class=\"line\">yyp                     <span class=\"comment\">#复制光标所在行，并粘贴</span></div><div class=\"line\"></div><div class=\"line\">h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</div></pre></td></tr></table></figure></p>\n<p>用户及用户组管理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/passwd      <span class=\"comment\">#存储用户账号</span></div><div class=\"line\"></div><div class=\"line\">/etc/group       <span class=\"comment\">#存储组账号</span></div><div class=\"line\"></div><div class=\"line\">/etc/shadow      <span class=\"comment\">#存储用户账号的密码</span></div><div class=\"line\"></div><div class=\"line\">/etc/gshadow     <span class=\"comment\">#存储用户组账号的密码</span></div><div class=\"line\"></div><div class=\"line\">useradd          <span class=\"comment\">#用户名</span></div><div class=\"line\"></div><div class=\"line\">userdel          <span class=\"comment\">#用户名</span></div><div class=\"line\"></div><div class=\"line\">adduser          <span class=\"comment\">#用户名</span></div><div class=\"line\"></div><div class=\"line\">groupadd         <span class=\"comment\">#组名</span></div><div class=\"line\"></div><div class=\"line\">groupdel         <span class=\"comment\">#组名</span></div><div class=\"line\"></div><div class=\"line\">passwd root      <span class=\"comment\">#给root设置密码</span></div><div class=\"line\"></div><div class=\"line\">su root</div><div class=\"line\"></div><div class=\"line\">su - root</div><div class=\"line\"></div><div class=\"line\">/etc/profile     <span class=\"comment\">#系统环境变量</span></div><div class=\"line\"></div><div class=\"line\">bash_profile     <span class=\"comment\">#用户环境变量</span></div><div class=\"line\"></div><div class=\"line\">.bashrc          <span class=\"comment\">#用户环境变量</span></div><div class=\"line\"></div><div class=\"line\">su user          <span class=\"comment\">#切换用户，加载配置文件.bashrc</span></div><div class=\"line\"></div><div class=\"line\">su - user        <span class=\"comment\">#切换用户，加载配置文件/etc/profile ，加载bash_profile</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#更改文件的用户及用户组</span></div><div class=\"line\"></div><div class=\"line\">sudo chown [-R] owner[:group] &#123;File|Directory&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#要想切换此文件所属的用户及组。可以使用命令。</span></div><div class=\"line\"></div><div class=\"line\">sudo chown root:root jdk-7u21-linux-i586.tar.gz</div></pre></td></tr></table></figure></p>\n<p>文件权限管理</p>\n<p>三种基本权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">R           <span class=\"comment\">#读         数值表示为4</span></div><div class=\"line\"></div><div class=\"line\">W           <span class=\"comment\">#写         数值表示为2</span></div><div class=\"line\"></div><div class=\"line\">X           <span class=\"comment\">#可执行      数值表示为1</span></div></pre></td></tr></table></figure>\n<p>如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r–</p>\n<p>-rw-rw-r–一共十个字符，分成四段。</p>\n<p>第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p>\n<p>第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6</p>\n<p>第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2=6</p>\n<p>第八九十个字符“r–”表示其他用户权限。              所以用数值表示为2</p>\n<p>所以操作此文件的权限用数值表示为662</p>\n<p>更改权限</p>\n<p>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名</p>\n<p>例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod u+x g+w o+r  filename</div></pre></td></tr></table></figure></p>\n<p>上面的例子可以用数值表示<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod 765 filename</div></pre></td></tr></table></figure></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481095391635,
				"created_by": 2,
				"updated_at": 1481183344197,
				"updated_by": 2,
				"published_at": 1481095391635,
				"published_by": 2
			},
			{
				"id": "ciwg0zxti0008q0fczjx55any",
				"title": "git常用命令",
				"slug": "git-command",
				"markdown": "\n\nGit 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。\n\nGit常用操作命令：\n\n#远程仓库相关命令\n-------------\n\n```bash\n$ git clone git://github.com/jquery/jquery.git#检出仓库\n$ git remote -v#查看远程仓库\n$ git remote add [name] [url]#添加远程仓库\n$ git remote rm [name]#删除远程仓库\n$ git remote set-url --push [name] [newUrl]#修改远程仓库\n$ git pull [remoteName] [localBranchName]#拉取远程仓库\n$ git push [remoteName] [localBranchName]#推送远程仓库\n```\n<!--more-->\n*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\n```bash\n$git push origin test:master       #提交本地test分支作为远程的master分支\n$git push origin test:test         #提交本地test分支作为远程的test分支\n```\n#分支(branch)操作相关命令\n----\n```bash\n$ git branch#查看本地分支\n$ git branch -r#查看远程分支\n$ git branch [name] #创建本地分支----注意新分支创建后不会自动切换为当前分支\n$ git checkout [name] #切换分支\n$ git checkout -b [name] #创建新分支并立即切换到新分支\n$ git branch -d [name] ---- #删除分支-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n$ git merge [name] #合并分支----将名称为[name]的分支与当前分支合并\n$ git push origin [name] #创建远程分支(本地分支push到远程)\n$ git push origin :heads/[name] 或 $ gitpush origin :[name] #删除远程分支\n```\n*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\n```bash\n$git symbolic-ref HEAD refs/heads/[name]\n$rm .git/index\n$git clean -fdx\n```\n#版本(tag)操作相关命令\n-------------\n```bash\n$ git tag #查看版本\n$ git tag [name] #创建版本\n$ git tag -d [name] #创建版本\n$ git tag -r #查看远程版本\n$ git push origin [name] #创建远程版本(本地版本push到远程)\n$ git push origin :refs/tags/[name] #删除远程版本\n$ git pull origin --tags #合并远程仓库的tag到本地\n$ git push origin --tags #上传本地tag到远程仓库\n$ git tag -a [name] -m 'yourMessage' #创建带注释的tag\n```\n\n#子模块(submodule)相关操作命令\n-------------\n```bash\n$ git submodule add [url] [path] #添加子模块\n#eg：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs\n$ git submodule init  #初始化子模块----只在首次检出仓库时运行一次就行\n$ git submodule update #更新子模块----每次更新或切换分支后都需要运行一下\n#删除子模块：（分4步走哦）\n #1) $ git rm --cached [path]\n #2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉\n #3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉\n #4) 手动删除子模块残留的目录\n```\n\n#忽略一些文件、文件夹不提交\n-------------\n在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如\n```bash\ntarget\nbin\n*.db\n```\n\n#Git 常用命令\n-------------\n```bash\n\ngit branch #查看本地所有分支\ngit status #查看当前状态\ngit commit #提交\ngit branch -a #查看所有的分支\ngit branch -r #查看本地所有分支\ngit commit -am \"init\" #提交并且加注释\ngit remote add origin git@192.168.1.119:ndshow\ngit push origin master #将文件给推到服务器上\ngit remote show origin #显示远程库origin里的资源\ngit push origin master:develop\ngit push origin master:hb-dev #将本地库与服务器上的库进行关联\ngit checkout --track origin/dev #切换到远程dev分支\ngit branch -D master develop #删除本地库develop\ngit checkout -b dev #建立一个新的本地分支dev\ngit merge origin/dev #将分支dev与当前分支进行合并\ngit checkout dev #切换到本地dev分支\ngit remote show #查看远程库\ngit add .\ngit rm 文件名(包括路径) #从git中删除指定文件\ngit clone git://github.com/schacon/grit.git #从服务器上将代码给拉下来\ngit config --list #看所有用户\ngit ls-files #看已经被提交的\ngit rm [file name] #删除一个文件\ngit commit -a #提交当前repos的所有的改变\ngit add [file name] #添加一个文件到git index\ngit commit -v #当你用－v参数的时候可以看commit的差异\ngit commit -m #\"This is the message describing the commit\" 添加commit信息\ngit commit -a #-a是代表add，把所有的change加到git index里然后再commit\ngit commit -a #-v 一般提交命令\ngit log #看你commit的日志\ngit diff #查看尚未暂存的更新\ngit rm a.a #移除文件(从暂存区和工作区中删除)\ngit rm --cached #a.a 移除文件(只从暂存区中删除)\ngit commit -m \"remove\" #移除文件(从Git中删除)\ngit rm -f a.a #强行移除修改后文件(从暂存区和工作区中删除)\ngit diff --cached #或 $ git diff --staged 查看尚未提交的更新\ngit stash push #将文件给push到一个临时空间中\ngit stash pop #将文件从临时空间pop下来\ngit remote add origin git@github.com:username/Hello-World.git\ngit push origin master #将本地项目给提交到服务器中\ngit pull #本地与服务器端同步\ngit push (远程仓库名) (分支名) #将本地分支推送到服务器上去。\ngit push origin serverfix:awesomebranch\ngit fetch #相当于是从远程获取最新版本到本地，不会自动merge\ngit commit -a -m \"log_message\" #(-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：\ngit branch branch_0.1 master #从主分支master创建branch_0.1分支\ngit branch -m branch_0.1 branch_1.0 #将branch_0.1重命名为branch_1.0\ngit checkout branch_1.0/master #切换到branch_1.0/master分支\ndu -hs\n\nmkdir WebApp\ncd WebApp\ngit init\ntouch README\ngit add README\ngit commit -m 'first commit'\ngit remote add origin git@github.com:daixu/WebApp.git\ngit push -u origin master\n```",
				"html": "<p>Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</p>\n<p>Git常用操作命令：</p>\n<h2 id=\"远程仓库相关命令\"><a href=\"#远程仓库相关命令\" class=\"headerlink\" title=\"#远程仓库相关命令\"></a>#远程仓库相关命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/jquery/jquery.git<span class=\"comment\">#检出仓库</span></div><div class=\"line\">$ git remote -v<span class=\"comment\">#查看远程仓库</span></div><div class=\"line\">$ git remote add [name] [url]<span class=\"comment\">#添加远程仓库</span></div><div class=\"line\">$ git remote rm [name]<span class=\"comment\">#删除远程仓库</span></div><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url --push [name] [newUrl]<span class=\"comment\">#修改远程仓库</span></div><div class=\"line\">$ git pull [remoteName] [<span class=\"built_in\">local</span>BranchName]<span class=\"comment\">#拉取远程仓库</span></div><div class=\"line\">$ git push [remoteName] [<span class=\"built_in\">local</span>BranchName]<span class=\"comment\">#推送远程仓库</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> push origin <span class=\"built_in\">test</span>:master       <span class=\"comment\">#提交本地test分支作为远程的master分支</span></div><div class=\"line\"><span class=\"variable\">$git</span> push origin <span class=\"built_in\">test</span>:<span class=\"built_in\">test</span>         <span class=\"comment\">#提交本地test分支作为远程的test分支</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"分支-branch-操作相关命令\"><a href=\"#分支-branch-操作相关命令\" class=\"headerlink\" title=\"#分支(branch)操作相关命令\"></a>#分支(branch)操作相关命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch<span class=\"comment\">#查看本地分支</span></div><div class=\"line\">$ git branch -r<span class=\"comment\">#查看远程分支</span></div><div class=\"line\">$ git branch [name] <span class=\"comment\">#创建本地分支----注意新分支创建后不会自动切换为当前分支</span></div><div class=\"line\">$ git checkout [name] <span class=\"comment\">#切换分支</span></div><div class=\"line\">$ git checkout -b [name] <span class=\"comment\">#创建新分支并立即切换到新分支</span></div><div class=\"line\">$ git branch <span class=\"_\">-d</span> [name] ---- <span class=\"comment\">#删除分支-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</span></div><div class=\"line\">$ git merge [name] <span class=\"comment\">#合并分支----将名称为[name]的分支与当前分支合并</span></div><div class=\"line\">$ git push origin [name] <span class=\"comment\">#创建远程分支(本地分支push到远程)</span></div><div class=\"line\">$ git push origin :heads/[name] 或 $ gitpush origin :[name] <span class=\"comment\">#删除远程分支</span></div></pre></td></tr></table></figure>\n<p>*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$git</span> symbolic-ref HEAD refs/heads/[name]</div><div class=\"line\"><span class=\"variable\">$rm</span> .git/index</div><div class=\"line\"><span class=\"variable\">$git</span> clean -fdx</div></pre></td></tr></table></figure></p>\n<h2 id=\"版本-tag-操作相关命令\"><a href=\"#版本-tag-操作相关命令\" class=\"headerlink\" title=\"#版本(tag)操作相关命令\"></a>#版本(tag)操作相关命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"comment\">#查看版本</span></div><div class=\"line\">$ git tag [name] <span class=\"comment\">#创建版本</span></div><div class=\"line\">$ git tag <span class=\"_\">-d</span> [name] <span class=\"comment\">#创建版本</span></div><div class=\"line\">$ git tag -r <span class=\"comment\">#查看远程版本</span></div><div class=\"line\">$ git push origin [name] <span class=\"comment\">#创建远程版本(本地版本push到远程)</span></div><div class=\"line\">$ git push origin :refs/tags/[name] <span class=\"comment\">#删除远程版本</span></div><div class=\"line\">$ git pull origin --tags <span class=\"comment\">#合并远程仓库的tag到本地</span></div><div class=\"line\">$ git push origin --tags <span class=\"comment\">#上传本地tag到远程仓库</span></div><div class=\"line\">$ git tag <span class=\"_\">-a</span> [name] -m <span class=\"string\">'yourMessage'</span> <span class=\"comment\">#创建带注释的tag</span></div></pre></td></tr></table></figure>\n<h2 id=\"子模块-submodule-相关操作命令\"><a href=\"#子模块-submodule-相关操作命令\" class=\"headerlink\" title=\"#子模块(submodule)相关操作命令\"></a>#子模块(submodule)相关操作命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git submodule add [url] [path] <span class=\"comment\">#添加子模块</span></div><div class=\"line\"><span class=\"comment\">#eg：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</span></div><div class=\"line\">$ git submodule init  <span class=\"comment\">#初始化子模块----只在首次检出仓库时运行一次就行</span></div><div class=\"line\">$ git submodule update <span class=\"comment\">#更新子模块----每次更新或切换分支后都需要运行一下</span></div><div class=\"line\"><span class=\"comment\">#删除子模块：（分4步走哦）</span></div><div class=\"line\"> <span class=\"comment\">#1) $ git rm --cached [path]</span></div><div class=\"line\"> <span class=\"comment\">#2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</span></div><div class=\"line\"> <span class=\"comment\">#3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉</span></div><div class=\"line\"> <span class=\"comment\">#4) 手动删除子模块残留的目录</span></div></pre></td></tr></table></figure>\n<h2 id=\"忽略一些文件、文件夹不提交\"><a href=\"#忽略一些文件、文件夹不提交\" class=\"headerlink\" title=\"#忽略一些文件、文件夹不提交\"></a>#忽略一些文件、文件夹不提交</h2><p>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">target</div><div class=\"line\">bin</div><div class=\"line\">*.db</div></pre></td></tr></table></figure></p>\n<h2 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"#Git 常用命令\"></a>#Git 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">git branch <span class=\"comment\">#查看本地所有分支</span></div><div class=\"line\">git status <span class=\"comment\">#查看当前状态</span></div><div class=\"line\">git commit <span class=\"comment\">#提交</span></div><div class=\"line\">git branch <span class=\"_\">-a</span> <span class=\"comment\">#查看所有的分支</span></div><div class=\"line\">git branch -r <span class=\"comment\">#查看本地所有分支</span></div><div class=\"line\">git commit -am <span class=\"string\">\"init\"</span> <span class=\"comment\">#提交并且加注释</span></div><div class=\"line\">git remote add origin git@192.168.1.119:ndshow</div><div class=\"line\">git push origin master <span class=\"comment\">#将文件给推到服务器上</span></div><div class=\"line\">git remote show origin <span class=\"comment\">#显示远程库origin里的资源</span></div><div class=\"line\">git push origin master:develop</div><div class=\"line\">git push origin master:hb-dev <span class=\"comment\">#将本地库与服务器上的库进行关联</span></div><div class=\"line\">git checkout --track origin/dev <span class=\"comment\">#切换到远程dev分支</span></div><div class=\"line\">git branch -D master develop <span class=\"comment\">#删除本地库develop</span></div><div class=\"line\">git checkout -b dev <span class=\"comment\">#建立一个新的本地分支dev</span></div><div class=\"line\">git merge origin/dev <span class=\"comment\">#将分支dev与当前分支进行合并</span></div><div class=\"line\">git checkout dev <span class=\"comment\">#切换到本地dev分支</span></div><div class=\"line\">git remote show <span class=\"comment\">#查看远程库</span></div><div class=\"line\">git add .</div><div class=\"line\">git rm 文件名(包括路径) <span class=\"comment\">#从git中删除指定文件</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/schacon/grit.git <span class=\"comment\">#从服务器上将代码给拉下来</span></div><div class=\"line\">git config --list <span class=\"comment\">#看所有用户</span></div><div class=\"line\">git ls-files <span class=\"comment\">#看已经被提交的</span></div><div class=\"line\">git rm [file name] <span class=\"comment\">#删除一个文件</span></div><div class=\"line\">git commit <span class=\"_\">-a</span> <span class=\"comment\">#提交当前repos的所有的改变</span></div><div class=\"line\">git add [file name] <span class=\"comment\">#添加一个文件到git index</span></div><div class=\"line\">git commit -v <span class=\"comment\">#当你用－v参数的时候可以看commit的差异</span></div><div class=\"line\">git commit -m <span class=\"comment\">#\"This is the message describing the commit\" 添加commit信息</span></div><div class=\"line\">git commit <span class=\"_\">-a</span> <span class=\"comment\">#-a是代表add，把所有的change加到git index里然后再commit</span></div><div class=\"line\">git commit <span class=\"_\">-a</span> <span class=\"comment\">#-v 一般提交命令</span></div><div class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">#看你commit的日志</span></div><div class=\"line\">git diff <span class=\"comment\">#查看尚未暂存的更新</span></div><div class=\"line\">git rm a.a <span class=\"comment\">#移除文件(从暂存区和工作区中删除)</span></div><div class=\"line\">git rm --cached <span class=\"comment\">#a.a 移除文件(只从暂存区中删除)</span></div><div class=\"line\">git commit -m <span class=\"string\">\"remove\"</span> <span class=\"comment\">#移除文件(从Git中删除)</span></div><div class=\"line\">git rm <span class=\"_\">-f</span> a.a <span class=\"comment\">#强行移除修改后文件(从暂存区和工作区中删除)</span></div><div class=\"line\">git diff --cached <span class=\"comment\">#或 $ git diff --staged 查看尚未提交的更新</span></div><div class=\"line\">git stash push <span class=\"comment\">#将文件给push到一个临时空间中</span></div><div class=\"line\">git stash pop <span class=\"comment\">#将文件从临时空间pop下来</span></div><div class=\"line\">git remote add origin git@github.com:username/Hello-World.git</div><div class=\"line\">git push origin master <span class=\"comment\">#将本地项目给提交到服务器中</span></div><div class=\"line\">git pull <span class=\"comment\">#本地与服务器端同步</span></div><div class=\"line\">git push (远程仓库名) (分支名) <span class=\"comment\">#将本地分支推送到服务器上去。</span></div><div class=\"line\">git push origin serverfix:awesomebranch</div><div class=\"line\">git fetch <span class=\"comment\">#相当于是从远程获取最新版本到本地，不会自动merge</span></div><div class=\"line\">git commit <span class=\"_\">-a</span> -m <span class=\"string\">\"log_message\"</span> <span class=\"comment\">#(-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</span></div><div class=\"line\">git branch branch_0.1 master <span class=\"comment\">#从主分支master创建branch_0.1分支</span></div><div class=\"line\">git branch -m branch_0.1 branch_1.0 <span class=\"comment\">#将branch_0.1重命名为branch_1.0</span></div><div class=\"line\">git checkout branch_1.0/master <span class=\"comment\">#切换到branch_1.0/master分支</span></div><div class=\"line\">du -hs</div><div class=\"line\"></div><div class=\"line\">mkdir WebApp</div><div class=\"line\"><span class=\"built_in\">cd</span> WebApp</div><div class=\"line\">git init</div><div class=\"line\">touch README</div><div class=\"line\">git add README</div><div class=\"line\">git commit -m <span class=\"string\">'first commit'</span></div><div class=\"line\">git remote add origin git@github.com:daixu/WebApp.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1481094558968,
				"created_by": 2,
				"updated_at": 1481183279513,
				"updated_by": 2,
				"published_at": 1481094558968,
				"published_by": 2
			},
			{
				"id": "cixb3z67q0000hofco7vhfo1h",
				"title": "hexo命令及Markdown语法",
				"slug": "hexo_markdown",
				"markdown": "\n这篇我们要介绍两部分内容，Markdown与hexo的常用命令。\n<!--more-->\n# Markdown\nhexo是使用Markdown编辑文章的，我写的这些文章也都是用这种标记语言完成的。所以，我们先从Markdown说起。\n\n## 什么是Markdown\n\nMarkdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。\n## Markdown语法\n```bash\n1、分段： 两个回车\n2、换行 两个空格 + 回车\n3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题\n4、引用 >\n5、列表 *，+，-，1.，选其中之一，注意后面有个空格\n6、代码区块 四个空格开头\n7、链接 [文字](链接地址)\n8、图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址\n9、强调 **文字**，__文字__，_文字_，*文字*\n10、代码 ```，``\n```\n# hexo常用命令\n我们在前面的已经略微的接触了一些hexo的命令，如hexo new \"my blog\"，hexo server等。下面来介绍一下我们经常会用到的hexo命令\n## 新建\n```bash\n#新建的文件在hexo/source/_posts/my-blog.md\nhexo new \"my blog\"\n```\n## 编译\n```bash\n#一般部署上去的时候都需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件\nhexo generate\n```\n\n## 开启本地服务\n```bash\nhexo server #开启本地hexo服务用的\n```\n## 部署\n```bash\nhexo deploy\n#部署到git上的时候，需要用这个命令\n```\n## 清除public\n```bash\nhexo clean\n#当source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n```",
				"html": "<p>这篇我们要介绍两部分内容，Markdown与hexo的常用命令。<br><a id=\"more\"></a></p>\n<h1 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h1><p>hexo是使用Markdown编辑文章的，我写的这些文章也都是用这种标记语言完成的。所以，我们先从Markdown说起。</p>\n<h2 id=\"什么是Markdown\"><a href=\"#什么是Markdown\" class=\"headerlink\" title=\"什么是Markdown\"></a>什么是Markdown</h2><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。</p>\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、分段： 两个回车</div><div class=\"line\">2、换行 两个空格 + 回车</div><div class=\"line\">3、标题 <span class=\"comment\">#~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</span></div><div class=\"line\">4、引用 &gt;</div><div class=\"line\">5、列表 *，+，-，1.，选其中之一，注意后面有个空格</div><div class=\"line\">6、代码区块 四个空格开头</div><div class=\"line\">7、链接 [文字](链接地址)</div><div class=\"line\">8、图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址</div><div class=\"line\">9、强调 **文字**，__文字__，_文字_，*文字*</div><div class=\"line\">10、代码 ```，``</div></pre></td></tr></table></figure>\n<h1 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h1><p>我们在前面的已经略微的接触了一些hexo的命令，如hexo new “my blog”，hexo server等。下面来介绍一下我们经常会用到的hexo命令</p>\n<h2 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#新建的文件在hexo/source/_posts/my-blog.md</span></div><div class=\"line\">hexo new <span class=\"string\">\"my blog\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#一般部署上去的时候都需要编译一下，编译后，会出现一个public文件夹，将所有的md文件编译成html文件</span></div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h2 id=\"开启本地服务\"><a href=\"#开启本地服务\" class=\"headerlink\" title=\"开启本地服务\"></a>开启本地服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server <span class=\"comment\">#开启本地hexo服务用的</span></div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div><div class=\"line\"><span class=\"comment\">#部署到git上的时候，需要用这个命令</span></div></pre></td></tr></table></figure>\n<h2 id=\"清除public\"><a href=\"#清除public\" class=\"headerlink\" title=\"清除public\"></a>清除public</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\"><span class=\"comment\">#当source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</span></div></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1477929600000,
				"created_by": 2,
				"updated_at": 1483064045137,
				"updated_by": 2,
				"published_at": 1477929600000,
				"published_by": 2
			},
			{
				"id": "ciwg0zxur000gq0fcimwfpak5",
				"title": "使用gulp对Hexo性能优化篇",
				"slug": "hexo-gulp",
				"markdown": "\n\n\nhexo项目生成的public文件可以使用gulp进行压缩优化\n<!--more-->\n----------\n静态文件压缩\n-------------\n\n静态文件包括: html,css,js,images . 我才用了gulp来跑自动压缩任务 。具体方法如下:\n\n 1. npm 安装如下工具, 方法皆为 : npm install xxx –save\n```bash\n\"gulp\": \"^3.9.1\",\n\"gulp-htmlclean\": \"^2.7.6\",\n\"gulp-htmlmin\": \"^1.3.0\",\n\"gulp-imagemin\": \"^2.4.0\",\n\"gulp-minify-css\": \"^1.2.4\",\n\"gulp-uglify\": \"^1.5.3\",\n```\n 2. 建立 gulpfile.js 文件\n```js\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n    // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js','images'\n]);\n```\n注意， 修改上面的各个目录为你的真实目录， ** 代表0或多个子目录\n",
				"html": "<p>hexo项目生成的public文件可以使用gulp进行压缩优化</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"静态文件压缩\"><a href=\"#静态文件压缩\" class=\"headerlink\" title=\"静态文件压缩\"></a>静态文件压缩</h2><p>静态文件包括: html,css,js,images . 我才用了gulp来跑自动压缩任务 。具体方法如下:</p>\n<ol>\n<li><p>npm 安装如下工具, 方法皆为 : npm install xxx –save</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span>,</div><div class=\"line\"><span class=\"string\">\"gulp-htmlclean\"</span>: <span class=\"string\">\"^2.7.6\"</span>,</div><div class=\"line\"><span class=\"string\">\"gulp-htmlmin\"</span>: <span class=\"string\">\"^1.3.0\"</span>,</div><div class=\"line\"><span class=\"string\">\"gulp-imagemin\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</div><div class=\"line\"><span class=\"string\">\"gulp-minify-css\"</span>: <span class=\"string\">\"^1.2.4\"</span>,</div><div class=\"line\"><span class=\"string\">\"gulp-uglify\"</span>: <span class=\"string\">\"^1.5.3\"</span>,</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立 gulpfile.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</div><div class=\"line\"><span class=\"comment\">// 获取 gulp-imagemin 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>)</div><div class=\"line\"><span class=\"comment\">// 压缩 public 目录 css</span></div><div class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</div><div class=\"line\">        .pipe(minifycss())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 压缩 public 目录 html</span></div><div class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</div><div class=\"line\">    .pipe(htmlclean())</div><div class=\"line\">    .pipe(htmlmin(&#123;</div><div class=\"line\">         <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">         <span class=\"attr\">minifyJS</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">         <span class=\"attr\">minifyCSS</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">         <span class=\"attr\">minifyURLs</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    &#125;))</div><div class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 压缩 public/js 目录 js</span></div><div class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 压缩图片任务</span></div><div class=\"line\"><span class=\"comment\">// 在命令行输入 gulp images 启动此任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1. 找到图片</span></div><div class=\"line\">    gulp.src(<span class=\"string\">'./photos/*.*'</span>)</div><div class=\"line\">    <span class=\"comment\">// 2. 压缩图片</span></div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            <span class=\"attr\">progressive</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">    <span class=\"comment\">// 3. 另存图片</span></div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/images'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</div><div class=\"line\">    <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span>,<span class=\"string\">'images'</span></div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意， 修改上面的各个目录为你的真实目录， ** 代表0或多个子目录</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1477929600000,
				"created_by": 2,
				"updated_at": 1483064045164,
				"updated_by": 2,
				"published_at": 1477929600000,
				"published_by": 2
			},
			{
				"id": "ciwg0zxuh000eq0fcnk56cajp",
				"title": "使用node和git搭建Hexo博客",
				"slug": "hexo-start",
				"markdown": "# 安装Hexo\n```js\n  #修改npm下载路径\n  $ npm install -g cnpm --registry=https://registry.npm.taobao.org\n  #全局安装hexo\n  $ npm install -g hexo-cli\n```\n<!--more-->\n----------\n# 本地运行hexo\n\n```js\n#初始化hexo\n$ hexo init\n#安装依赖包\n$ npm install\n#运行hexo,以后要在本地运行博客只要输入该命令即可\n$ hexo s -g\n# 停止运行\n#按住Ctrl+C键即可停止\n\n```\n# hexo配置信息\n\n```js\n#博客名称\ntitle: Mr.hua\n#副标题\nsubtitle:subtitle\n#简介\ndescription: your site interdution\n#博客作者\nauthor: Mr.hua\n#博客语言\nlanguage: zh-CN\n#时区\ntimezone:\n\n#博客地址,与申请的GitHub一致\nurl: http://huajiang1989.github.io\nroot: /\n#博客链接格式\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n#日期格式\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n#分页，每页文章数量\nper_page: 10\npagination_dir: page\n\n#博客主题\ntheme: landscape\n\n#发布设置\ndeploy:\n  type: git\n  #huajiang1989改为你的github用户名\n  repository: https://github.com/huajiang1989/huajiang1989.github.io.git\n  branch: master\n```\n",
				"html": "<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#修改npm下载路径</div><div class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">#全局安装hexo</div><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h1 id=\"本地运行hexo\"><a href=\"#本地运行hexo\" class=\"headerlink\" title=\"本地运行hexo\"></a>本地运行hexo</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#初始化hexo</div><div class=\"line\">$ hexo init</div><div class=\"line\">#安装依赖包</div><div class=\"line\">$ npm install</div><div class=\"line\">#运行hexo,以后要在本地运行博客只要输入该命令即可</div><div class=\"line\">$ hexo s -g</div><div class=\"line\"># 停止运行</div><div class=\"line\">#按住Ctrl+C键即可停止</div></pre></td></tr></table></figure>\n<h1 id=\"hexo配置信息\"><a href=\"#hexo配置信息\" class=\"headerlink\" title=\"hexo配置信息\"></a>hexo配置信息</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">#博客名称</div><div class=\"line\">title: Mr.hua</div><div class=\"line\">#副标题</div><div class=\"line\">subtitle:subtitle</div><div class=\"line\">#简介</div><div class=\"line\">description: your site interdution</div><div class=\"line\">#博客作者</div><div class=\"line\">author: Mr.hua</div><div class=\"line\">#博客语言</div><div class=\"line\">language: zh-CN</div><div class=\"line\">#时区</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\">#博客地址,与申请的GitHub一致</div><div class=\"line\">url: http://huajiang1989.github.io</div><div class=\"line\">root: /</div><div class=\"line\">#博客链接格式</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: true</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\">#日期格式</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\">#分页，每页文章数量</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\">#博客主题</div><div class=\"line\">theme: landscape</div><div class=\"line\"></div><div class=\"line\">#发布设置</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  #huajiang1989改为你的github用户名</div><div class=\"line\">  repository: https://github.com/huajiang1989/huajiang1989.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1477929600000,
				"created_by": 2,
				"updated_at": 1483064045123,
				"updated_by": 2,
				"published_at": 1477929600000,
				"published_by": 2
			},
			{
				"id": "cixb5jc2s0000dkfcy1bflwdg",
				"title": "hexo主题设置",
				"slug": "hexo-theme",
				"markdown": "\n这篇文章要介绍一下hexo的主题的目录结构及主要文件的作用，并且以light主题为例，较为详细的了解如何优化自己的博客站点。\n<!--more-->\n\n# hexo的主题目录结构\n```bash\n|-- themes\n   |-- landscape\n   |-- light\n```\n\n我的目录结构，截图如下:\n ![haha](http://syxiaqj.github.io/image/introduce-hexo-theme/themeDir.png)\n如上面看到的，有两个landscape，light主题，文件夹名称即为主题名称，还记得上一篇文章hexo主目录中的_config.yml文件Extensions部分中的theme:参数吗，那个参数的值便于这里的文件夹名称对应，值是哪个，便意味着哪个主题得到了你的“宠信”（哈哈）。\n## 如何下载主题\nhexo拥有丰富的主题供你选择：主题传送门\n你可以手动下载其中的一款或者几款，然后拷贝到你的themes目录下，搞定！\n或者，你cd到themes目录\n```bash\ncd 你的themes目录\n```\n然后运行一下命令\n```bash\ngit clone 主题url\n```\n## 分析light主题\n```bash\n#目录结构\n|-- _config.yml\n|-- languages/\n|-- layout/\n|-- LICENSE\n|-- README.md\n|-- source/\n_config.yml\n```\n## 主题配置文件\n### languages\n语言目录，用于保存语言文件\n### layout\n布局目录，目录结构\n```bash\n|-- _partial/\n|-- _widget/\n|-- archive.ejs *\n|-- category.ejs *\n|-- index.ejs *\n|-- layout.ejs *\n|-- page.ejs *\n|-- post.ejs *\n|-- tag.ejs *\n```\n以上打*的文件表示，每个主题至少需要这些文件。所有的主题都是用layout.ejs作为默认的布局文件，你也可以自定义布局文件。\n_widget/： 小工具目录，在light主题中对右边栏的控制。\n_partial/： 组件目录，给博客添加统计、评论等功能\nhexo支持很多模板引擎，诸如EJS，Swig，Haml，Jade等，文件以什么后缀，即表示用的是哪个模板引擎，light主题用的是EJS模板。每种模板引擎的语法与使用，各位请点击链接查看，这里就不赘述了。\n### source\n主题资源目录，主题用到的CSS、Javascript等文件需要放在这个目录中，会被编译到hexo的public目录中。\n如何进行编译，后面会介绍，我们先赶紧来优化一下自己的博客站点。\n## 优化主题\n_config.yml\n主题配置配置文件，介绍主要参数\n```bash\nmenu:        #站点导航栏 （标签: 路径）\n  首页: /\n  归档: /archives\n  关于: /about\n\nwidgets:        #小工具 即站点的右边一栏 页面会按这里的顺序排列\n- recent_posts\n- category\n- weibo_show\n- blogroll\n\nexcerpt_link: 阅读全文   #默认是Read more 可以改成中文\n\ntwitter:    #墙内很少用此鸟，so可以删掉\n\naddthis:    #这个也可以删掉\n  enable: true\n\nfancybox: true\n\nbaidu_analytics: true    #百度统计，天朝还是这个好使，没办法滴\n\ngoogle_analytics:        #默认统计，多么希望用这个统计，可惜\n\nrss: /atom.xml        #RSS\n\ncomment_provider:\n```\n# 添加多说\nlight主题自带的是disqus，国内用户，当然不好使，还是用“多说”好。\n\n1.先在多说注册\n2.创建站点\n3.完成后，在“工具”中，获取通用代码\n```js\n<!-- Duoshuo Comment BEGIN -->\n<div class=\"ds-thread\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"用户名\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = 'http://static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n        || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n    </script>\n<!-- Duoshuo Comment END -->\n```\n4.用下面命令打开comment.ejs\n```bash\nvim themes/light/layout/_partial/comment.ejs\n```\n修改如下\n```js\n<% if (page.comments){ %>\n<section id=\"comment\">\n    //多说通用代码\n</section>\n<% } %>\n```\n5.Over\n# 添加分享\n虽然某度，我基本不用，但是某度的分享，大家都用，我也就用用。\n1.打开百度分享，获取代码。记得进行下一步按钮设置，可以对是否设置页面分享、图片分享、划词分享、按钮类型、风格、图标大小等功能。\n2.在themes/light/layout/_partial/目录下，新建一个baidu_analytics.ejs文件\n```bash\ntouch themes/light/layout/_partial/baidu_analytics.ejs\n```\n3.将获取的代码写入baidu_analytics.ejs文件\n4.在themes/light/layout/layout.ejs文件中添加百度统计，添加到</body>标记前\n```\n<%- partial('_partial/baidu_analytics') %>\n```\n# 添加微博show\n\n1、到微博开发平台获取代码\n2、在themes/light/layout/_widget/目录下，新建一个weibo_show.ejs文件，并且将刚获取的代码，写入该文件\n3、在themes/light/_config.yml文件中的widgets中添加weibo_show\n```\nwidgets:\n- weibo_show\n```\n见上面介绍_config.yml内容\n# 添加友情链接\n1、在themes/light/layout/_widget/目录下，新建blogroll.ejs\n2、编辑文件\n```html\n<div class=\"widget tag\">\n<h3 class=\"title\">友情链接</h3>\n<ul class=\"entry\">\n<li>\n    <a href=\"链接地址\" title=\"title\" target=\"_blank\">显示名称</a>\n</li>\n</ul>\n</div>\n```\n3、在themes/light/_config.yml文件中的widgets中添加blogroll\n```\nwidgets:\n- blogroll\n```\n见上面介绍_config.yml内容\n# 添加“关于”\n作为一个完整的博客站点，“关于”页是不能少的。下面，我们在导航栏上添加上这部分内容\n1、新建一个页面\n```bash\nhexo new page \"about\"\n```\n2、编辑source/about/index.md，至于编辑什么，您随意。\n3、在主题的配置文件themes/light/_config.yml中添加\n```\nmenu:\n  关于: /about\n```\n见上面介绍_config.yml内容",
				"html": "<p>这篇文章要介绍一下hexo的主题的目录结构及主要文件的作用，并且以light主题为例，较为详细的了解如何优化自己的博客站点。<br><a id=\"more\"></a></p>\n<h1 id=\"hexo的主题目录结构\"><a href=\"#hexo的主题目录结构\" class=\"headerlink\" title=\"hexo的主题目录结构\"></a>hexo的主题目录结构</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-- themes</div><div class=\"line\">   |-- landscape</div><div class=\"line\">   |-- light</div></pre></td></tr></table></figure>\n<p>我的目录结构，截图如下:<br> <img src=\"http://syxiaqj.github.io/image/introduce-hexo-theme/themeDir.png\" alt=\"haha\"><br>如上面看到的，有两个landscape，light主题，文件夹名称即为主题名称，还记得上一篇文章hexo主目录中的_config.yml文件Extensions部分中的theme:参数吗，那个参数的值便于这里的文件夹名称对应，值是哪个，便意味着哪个主题得到了你的“宠信”（哈哈）。</p>\n<h2 id=\"如何下载主题\"><a href=\"#如何下载主题\" class=\"headerlink\" title=\"如何下载主题\"></a>如何下载主题</h2><p>hexo拥有丰富的主题供你选择：主题传送门<br>你可以手动下载其中的一款或者几款，然后拷贝到你的themes目录下，搞定！<br>或者，你cd到themes目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> 你的themes目录</div></pre></td></tr></table></figure></p>\n<p>然后运行一下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> 主题url</div></pre></td></tr></table></figure></p>\n<h2 id=\"分析light主题\"><a href=\"#分析light主题\" class=\"headerlink\" title=\"分析light主题\"></a>分析light主题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#目录结构</span></div><div class=\"line\">|-- _config.yml</div><div class=\"line\">|-- languages/</div><div class=\"line\">|-- layout/</div><div class=\"line\">|-- LICENSE</div><div class=\"line\">|-- README.md</div><div class=\"line\">|-- <span class=\"built_in\">source</span>/</div><div class=\"line\">_config.yml</div></pre></td></tr></table></figure>\n<h2 id=\"主题配置文件\"><a href=\"#主题配置文件\" class=\"headerlink\" title=\"主题配置文件\"></a>主题配置文件</h2><h3 id=\"languages\"><a href=\"#languages\" class=\"headerlink\" title=\"languages\"></a>languages</h3><p>语言目录，用于保存语言文件</p>\n<h3 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h3><p>布局目录，目录结构<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-- _partial/</div><div class=\"line\">|-- _widget/</div><div class=\"line\">|-- archive.ejs *</div><div class=\"line\">|-- category.ejs *</div><div class=\"line\">|-- index.ejs *</div><div class=\"line\">|-- layout.ejs *</div><div class=\"line\">|-- page.ejs *</div><div class=\"line\">|-- post.ejs *</div><div class=\"line\">|-- tag.ejs *</div></pre></td></tr></table></figure></p>\n<p>以上打*的文件表示，每个主题至少需要这些文件。所有的主题都是用layout.ejs作为默认的布局文件，你也可以自定义布局文件。<br>_widget/： 小工具目录，在light主题中对右边栏的控制。<br>_partial/： 组件目录，给博客添加统计、评论等功能<br>hexo支持很多模板引擎，诸如EJS，Swig，Haml，Jade等，文件以什么后缀，即表示用的是哪个模板引擎，light主题用的是EJS模板。每种模板引擎的语法与使用，各位请点击链接查看，这里就不赘述了。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h3><p>主题资源目录，主题用到的CSS、Javascript等文件需要放在这个目录中，会被编译到hexo的public目录中。<br>如何进行编译，后面会介绍，我们先赶紧来优化一下自己的博客站点。</p>\n<h2 id=\"优化主题\"><a href=\"#优化主题\" class=\"headerlink\" title=\"优化主题\"></a>优化主题</h2><p>_config.yml<br>主题配置配置文件，介绍主要参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:        <span class=\"comment\">#站点导航栏 （标签: 路径）</span></div><div class=\"line\">  首页: /</div><div class=\"line\">  归档: /archives</div><div class=\"line\">  关于: /about</div><div class=\"line\"></div><div class=\"line\">widgets:        <span class=\"comment\">#小工具 即站点的右边一栏 页面会按这里的顺序排列</span></div><div class=\"line\">- recent_posts</div><div class=\"line\">- category</div><div class=\"line\">- weibo_show</div><div class=\"line\">- blogroll</div><div class=\"line\"></div><div class=\"line\">excerpt_link: 阅读全文   <span class=\"comment\">#默认是Read more 可以改成中文</span></div><div class=\"line\"></div><div class=\"line\">twitter:    <span class=\"comment\">#墙内很少用此鸟，so可以删掉</span></div><div class=\"line\"></div><div class=\"line\">addthis:    <span class=\"comment\">#这个也可以删掉</span></div><div class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">fancybox: <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">baidu_analytics: <span class=\"literal\">true</span>    <span class=\"comment\">#百度统计，天朝还是这个好使，没办法滴</span></div><div class=\"line\"></div><div class=\"line\">google_analytics:        <span class=\"comment\">#默认统计，多么希望用这个统计，可惜</span></div><div class=\"line\"></div><div class=\"line\">rss: /atom.xml        <span class=\"comment\">#RSS</span></div><div class=\"line\"></div><div class=\"line\">comment_provider:</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加多说\"><a href=\"#添加多说\" class=\"headerlink\" title=\"添加多说\"></a>添加多说</h1><p>light主题自带的是disqus，国内用户，当然不好使，还是用“多说”好。</p>\n<p>1.先在多说注册<br>2.创建站点<br>3.完成后，在“工具”中，获取通用代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- Duoshuo Comment BEGIN --&gt;</div><div class=\"line\">&lt;div class=\"ds-thread\"&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> duoshuoQuery = &#123;<span class=\"attr\">short_name</span>:<span class=\"string\">\"用户名\"</span>&#125;;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">        ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</div><div class=\"line\">        ds.src = <span class=\"string\">'http://static.duoshuo.com/embed.js'</span>;</div><div class=\"line\">        ds.charset = <span class=\"string\">'UTF-8'</span>;</div><div class=\"line\">        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">        || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</div><div class=\"line\">    &#125;)();</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;!-- Duoshuo Comment END --&gt;</div></pre></td></tr></table></figure></p>\n<p>4.用下面命令打开comment.ejs<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim themes/light/layout/_partial/comment.ejs</div></pre></td></tr></table></figure></p>\n<p>修改如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (page.comments)&#123; %&gt;</div><div class=\"line\">&lt;section id=\"comment\"&gt;</div><div class=\"line\">    //多说通用代码</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>5.Over</p>\n<h1 id=\"添加分享\"><a href=\"#添加分享\" class=\"headerlink\" title=\"添加分享\"></a>添加分享</h1><p>虽然某度，我基本不用，但是某度的分享，大家都用，我也就用用。<br>1.打开百度分享，获取代码。记得进行下一步按钮设置，可以对是否设置页面分享、图片分享、划词分享、按钮类型、风格、图标大小等功能。<br>2.在themes/light/layout/_partial/目录下，新建一个baidu_analytics.ejs文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch themes/light/layout/_partial/baidu_analytics.ejs</div></pre></td></tr></table></figure></p>\n<p>3.将获取的代码写入baidu_analytics.ejs文件<br>4.在themes/light/layout/layout.ejs文件中添加百度统计，添加到标记前<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;_partial/baidu_analytics&apos;) %&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加微博show\"><a href=\"#添加微博show\" class=\"headerlink\" title=\"添加微博show\"></a>添加微博show</h1><p>1、到微博开发平台获取代码<br>2、在themes/light/layout/_widget/目录下，新建一个weibo_show.ejs文件，并且将刚获取的代码，写入该文件<br>3、在themes/light/_config.yml文件中的widgets中添加weibo_show<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">- weibo_show</div></pre></td></tr></table></figure></p>\n<p>见上面介绍_config.yml内容</p>\n<h1 id=\"添加友情链接\"><a href=\"#添加友情链接\" class=\"headerlink\" title=\"添加友情链接\"></a>添加友情链接</h1><p>1、在themes/light/layout/_widget/目录下，新建blogroll.ejs<br>2、编辑文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"widget tag\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>友情链接<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"entry\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"链接地址\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>显示名称<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>3、在themes/light/_config.yml文件中的widgets中添加blogroll<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">- blogroll</div></pre></td></tr></table></figure></p>\n<p>见上面介绍_config.yml内容</p>\n<h1 id=\"添加“关于”\"><a href=\"#添加“关于”\" class=\"headerlink\" title=\"添加“关于”\"></a>添加“关于”</h1><p>作为一个完整的博客站点，“关于”页是不能少的。下面，我们在导航栏上添加上这部分内容<br>1、新建一个页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new page <span class=\"string\">\"about\"</span></div></pre></td></tr></table></figure></p>\n<p>2、编辑source/about/index.md，至于编辑什么，您随意。<br>3、在主题的配置文件themes/light/_config.yml中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  关于: /about</div></pre></td></tr></table></figure></p>\n<p>见上面介绍_config.yml内容</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1477929600000,
				"created_by": 2,
				"updated_at": 1483064045151,
				"updated_by": 2,
				"published_at": 1477929600000,
				"published_by": 2
			},
			{
				"id": "ciwg0zx440000q0fcs12xjr1l",
				"title": "",
				"markdown": "<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n",
				"html": "<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n",
				"image": null,
				"featured": 0,
				"page": 1,
				"status": "draft",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1487298167225,
				"created_by": 2,
				"updated_at": 1487298167218,
				"updated_by": 2,
				"published_at": 1487298167225,
				"published_by": 2
			},
			{
				"id": "ciwg0zy1y001rq0fc8h0oje08",
				"title": "标签",
				"markdown": "",
				"html": "",
				"image": null,
				"featured": 0,
				"page": 1,
				"status": "draft",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1419223144000,
				"created_by": 2,
				"updated_at": 1487224245155,
				"updated_by": 2,
				"published_at": 1419223144000,
				"published_by": 2
			},
			{
				"id": "ciwg0zy2c001tq0fc69tmlvug",
				"title": "分类",
				"markdown": "",
				"html": "",
				"image": null,
				"featured": 0,
				"page": 1,
				"status": "draft",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1419223144000,
				"created_by": 2,
				"updated_at": 1487224286370,
				"updated_by": 2,
				"published_at": 1419223144000,
				"published_by": 2
			}
		],
		"tags": [
			{
				"id": "ciwg2cosv000tqcfcsyzydc9j",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "cj3maj59j000238fcmfm9dvja",
				"name": "grpc",
				"slug": "grpc",
				"description": ""
			},
			{
				"id": "ciwg2colr0000qcfcv8sf5avn",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17he0003akfcfj0by538",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj0d9iibe0001j4fc6p1117jo",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iibe0001j4fc6p1117jo",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iibe0001j4fc6p1117jo",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iibe0001j4fc6p1117jo",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iibe0001j4fc6p1117jo",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iibe0001j4fc6p1117jo",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "ciwg2cot5000zqcfcpe78k5h9",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg2cot5000zqcfcpe78k5h9",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciy8w76ld00026sfc1n3y6zjc",
				"name": "React/React Native",
				"slug": "React-React-Native",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciz7p5ytf0002lcfcwmrkk14i",
				"name": "TypeScript",
				"slug": "TypeScript",
				"description": ""
			},
			{
				"id": "ciz7p5ytf0002lcfcwmrkk14i",
				"name": "TypeScript",
				"slug": "TypeScript",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciy8w76ld00026sfc1n3y6zjc",
				"name": "React/React Native",
				"slug": "React-React-Native",
				"description": ""
			},
			{
				"id": "ciwg2cosv000tqcfcsyzydc9j",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "cixrmvdmk00020kfcev0lfdvu",
				"name": "MongoDB",
				"slug": "MongoDB",
				"description": ""
			},
			{
				"id": "cixrmruue0002y4fc76bceddl",
				"name": "mysql",
				"slug": "mysql",
				"description": ""
			},
			{
				"id": "cixpnuwil0002rkfcfq6h2d1n",
				"name": "sass",
				"slug": "sass",
				"description": ""
			},
			{
				"id": "cixipq37v0003csfctfvlutju",
				"name": "npm",
				"slug": "npm",
				"description": ""
			},
			{
				"id": "cixipq3800005csfchs83pgxz",
				"name": "gulp",
				"slug": "gulp",
				"description": ""
			},
			{
				"id": "cixb3so6c000264fckmulomo9",
				"name": "php",
				"slug": "php",
				"description": ""
			},
			{
				"id": "cixb3so6c000264fckmulomo9",
				"name": "php",
				"slug": "php",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwg2colr0000qcfcv8sf5avn",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciwg2cosv000tqcfcsyzydc9j",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwvf88ys00022ofcvp50tgt0",
				"name": "reg",
				"slug": "reg",
				"description": ""
			},
			{
				"id": "ciwq4ljx40002cgfcr9lm3w70",
				"name": "mock",
				"slug": "mock",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8ir0002c0fctly3km79",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwn1305a0002h4fcgbrp957j",
				"name": "angular",
				"slug": "angular",
				"description": ""
			},
			{
				"id": "ciwg412yh0002x0fcsb8xwxe1",
				"name": "koa",
				"slug": "koa",
				"description": ""
			},
			{
				"id": "ciwg412yh0002x0fcsb8xwxe1",
				"name": "koa",
				"slug": "koa",
				"description": ""
			},
			{
				"id": "ciwg412yh0002x0fcsb8xwxe1",
				"name": "koa",
				"slug": "koa",
				"description": ""
			},
			{
				"id": "ciwg412yh0002x0fcsb8xwxe1",
				"name": "koa",
				"slug": "koa",
				"description": ""
			},
			{
				"id": "ciwg2coon0005qcfcjb27rl4g",
				"name": "express",
				"slug": "express",
				"description": ""
			},
			{
				"id": "ciwg2coon0005qcfcjb27rl4g",
				"name": "express",
				"slug": "express",
				"description": ""
			},
			{
				"id": "ciwg2coon0005qcfcjb27rl4g",
				"name": "express",
				"slug": "express",
				"description": ""
			},
			{
				"id": "ciwg2coq7000dqcfc8xqy53ot",
				"name": "git",
				"slug": "git",
				"description": ""
			},
			{
				"id": "ciwg2cot5000zqcfcpe78k5h9",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg2cot5000zqcfcpe78k5h9",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg2cotd0013qcfc6dmngz84",
				"name": "rules",
				"slug": "rules",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg2colr0000qcfcv8sf5avn",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg2colr0000qcfcv8sf5avn",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciwg2cot5000zqcfcpe78k5h9",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg2colr0000qcfcv8sf5avn",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciwg2colr0000qcfcv8sf5avn",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg2cosv000tqcfcsyzydc9j",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciwg2cosx000vqcfcyi6q86ny",
				"name": "r.js",
				"slug": "r-js",
				"description": ""
			},
			{
				"id": "ciwg2cosx000vqcfcyi6q86ny",
				"name": "r.js",
				"slug": "r-js",
				"description": ""
			},
			{
				"id": "ciypf96ud0002wcfcfvu3hzb2",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg2cosq000rqcfcgo0saxp8",
				"name": "linux",
				"slug": "linux",
				"description": ""
			},
			{
				"id": "ciwg2coq7000dqcfc8xqy53ot",
				"name": "git",
				"slug": "git",
				"description": ""
			},
			{
				"id": "ciwg2corj000jqcfcsmusdxqx",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			},
			{
				"id": "ciwg2corj000jqcfcsmusdxqx",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			},
			{
				"id": "ciwg2corj000jqcfcsmusdxqx",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			},
			{
				"id": "ciwg2corj000jqcfcsmusdxqx",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			}
		],
		"posts_tags": [
			{
				"tag_id": "ciwg2cosv000tqcfcsyzydc9j",
				"post_id": "cj3pm6jdm0000kkfcvoh8fptj"
			},
			{
				"tag_id": "cj3maj59j000238fcmfm9dvja",
				"post_id": "cj3maj58l000038fco7c2ggq4"
			},
			{
				"tag_id": "ciwg2colr0000qcfcv8sf5avn",
				"post_id": "cj1od6kd700005wfc4wqu5kdf"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17ho0006akfcpvawfcpl"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17fr0000akfca95shmu2"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17ib000lakfcbggwnvdm"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17ik000oakfc34lfk5gg"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17hh0004akfcu21ckavb"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17g20001akfcs1e0nvfz"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17i6000iakfcu7re47y3"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17hv000aakfcx3m2aa1i"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17i1000dakfcgcufmneu"
			},
			{
				"tag_id": "cj17g17he0003akfcfj0by538",
				"post_id": "cj17g17hk0005akfclv2zkr55"
			},
			{
				"tag_id": "cj0d9iibe0001j4fc6p1117jo",
				"post_id": "cj0m8sfw20000w4fchwe2iyj3"
			},
			{
				"tag_id": "cj0d9iibe0001j4fc6p1117jo",
				"post_id": "cj0iv4on2000058fcoeutxvnu"
			},
			{
				"tag_id": "cj0d9iibe0001j4fc6p1117jo",
				"post_id": "cj0hjqs1v0000jkfc3cihbvxd"
			},
			{
				"tag_id": "cj0d9iibe0001j4fc6p1117jo",
				"post_id": "cj0hirkoj00004cfcproq705h"
			},
			{
				"tag_id": "cj0d9iibe0001j4fc6p1117jo",
				"post_id": "cj0dann7n0000lwfcamcbs7jl"
			},
			{
				"tag_id": "cj0d9iibe0001j4fc6p1117jo",
				"post_id": "cj0d9dwmd0000ncfcj6u5qjx1"
			},
			{
				"tag_id": "ciwg2cot5000zqcfcpe78k5h9",
				"post_id": "cj07wiysb0000tgfczpgybtmb"
			},
			{
				"tag_id": "ciwg2cot5000zqcfcpe78k5h9",
				"post_id": "cj07ru3sw0000l8fc1aytobqg"
			},
			{
				"tag_id": "ciy8w76ld00026sfc1n3y6zjc",
				"post_id": "cizt7jzzs0000v8fcf1rodp42"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cizj4wypr000088fc6qcasflf"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cizex0j93000098fchas9dkof"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cize2ofv70003ucfcfi1ii6xe"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cize1s4ot0000ucfcdlaz07x6"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cize1inxo0000qgfcb9ftanfi"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cizdvvbma0000lgfc5j781hrc"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cizdg0aiv0000k8fc9vf2xpld"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciz95pdlx00004ofc45vyalzj"
			},
			{
				"tag_id": "ciz7p5ytf0002lcfcwmrkk14i",
				"post_id": "ciz8b0a10000000fcvj1dkuzz"
			},
			{
				"tag_id": "ciz7p5ytf0002lcfcwmrkk14i",
				"post_id": "ciz7p5ysn0000lcfc1b9uap41"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciyz9rjy60000xgfc9bo920zx"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciyz91o9p0000ywfcnv1lt5u8"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciypf96ta0000wcfcgvux0w5m"
			},
			{
				"tag_id": "ciy8w76ld00026sfc1n3y6zjc",
				"post_id": "ciy8w76jt00006sfcdwgy6tep"
			},
			{
				"tag_id": "ciwg2cosv000tqcfcsyzydc9j",
				"post_id": "ciy5kkb9n0000dsfcfaihfhqu"
			},
			{
				"tag_id": "cixrmvdmk00020kfcev0lfdvu",
				"post_id": "cixrmvcl400000kfcw4sjc45b"
			},
			{
				"tag_id": "cixrmruue0002y4fc76bceddl",
				"post_id": "cixrmruth0000y4fcigodrfe4"
			},
			{
				"tag_id": "cixpnuwil0002rkfcfq6h2d1n",
				"post_id": "cixpnuwff0000rkfcz902x6q6"
			},
			{
				"tag_id": "cixipq37v0003csfctfvlutju",
				"post_id": "cixipq36n0000csfcku4oqst0"
			},
			{
				"tag_id": "cixipq3800005csfchs83pgxz",
				"post_id": "cixipq36w0001csfcim29yj05"
			},
			{
				"tag_id": "cixb3so6c000264fckmulomo9",
				"post_id": "cixb5jc3b0001dkfc172kdbfw"
			},
			{
				"tag_id": "cixb3so6c000264fckmulomo9",
				"post_id": "cixb3so2p000064fcywqv4unm"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "cix1fexaw0000c0fc2315vc81"
			},
			{
				"tag_id": "ciwg2colr0000qcfcv8sf5avn",
				"post_id": "ciwxbcx14000a0kfcog5jqj8l"
			},
			{
				"tag_id": "ciwg2cosv000tqcfcsyzydc9j",
				"post_id": "ciwx9d9xu00070kfcfn6c01px"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwx915jz00000kfckkw0ast0"
			},
			{
				"tag_id": "ciwvf88ys00022ofcvp50tgt0",
				"post_id": "ciwvf88wh00002ofc1uac6pku"
			},
			{
				"tag_id": "ciwq4ljx40002cgfcr9lm3w70",
				"post_id": "ciwq4ljvu0000cgfcjpibr2qp"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciwoq84qa0003q0fclktmcpv4"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciwoq3xw10000q0fcm7ndsqef"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciwoo5ice000084fcnw6lvehv"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciwoo5icw000184fcgmoz3mkt"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciwomrpdl0000gsfcbzt5bt2t"
			},
			{
				"tag_id": "ciwnjf8ir0002c0fctly3km79",
				"post_id": "ciwnjf8g90000c0fc7reydtdq"
			},
			{
				"tag_id": "ciwn1305a0002h4fcgbrp957j",
				"post_id": "ciwn1301q0000h4fc3l689ecy"
			},
			{
				"tag_id": "ciwg412yh0002x0fcsb8xwxe1",
				"post_id": "ciwg4deqi0000hofcg5csuwwe"
			},
			{
				"tag_id": "ciwg412yh0002x0fcsb8xwxe1",
				"post_id": "ciwg499th0000f8fc9nue2imi"
			},
			{
				"tag_id": "ciwg412yh0002x0fcsb8xwxe1",
				"post_id": "ciwg412xe0000x0fc4ona7q06"
			},
			{
				"tag_id": "ciwg412yh0002x0fcsb8xwxe1",
				"post_id": "ciwg412y40001x0fcm6f1la08"
			},
			{
				"tag_id": "ciwg2coon0005qcfcjb27rl4g",
				"post_id": "ciwg0zxst0005q0fc7uuds8i3"
			},
			{
				"tag_id": "ciwg2coon0005qcfcjb27rl4g",
				"post_id": "ciwg0zxtz000aq0fcy1biihb4"
			},
			{
				"tag_id": "ciwg2coon0005qcfcjb27rl4g",
				"post_id": "ciwg0zxt10006q0fckjygi6iw"
			},
			{
				"tag_id": "ciwg2coq7000dqcfc8xqy53ot",
				"post_id": "ciwg0zxub000cq0fchsdstdk1"
			},
			{
				"tag_id": "ciwg2cot5000zqcfcpe78k5h9",
				"post_id": "ciwg0zxyc0018q0fcip5w3aml"
			},
			{
				"tag_id": "ciwg2cot5000zqcfcpe78k5h9",
				"post_id": "ciwg0zxyi0019q0fcaduv3bxp"
			},
			{
				"tag_id": "ciwg2cotd0013qcfc6dmngz84",
				"post_id": "ciwg0zy26001sq0fck31w7oe1"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwg0zxwo000tq0fcqxsfq0d0"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwg0zxwd000qq0fc2d180ggy"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwg0zxvw000oq0fc3x0ftmaw"
			},
			{
				"tag_id": "ciwg2colr0000qcfcv8sf5avn",
				"post_id": "ciwg0zxv2000iq0fcrxlu4g1a"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwg0zxwt000vq0fc5a64kbj1"
			},
			{
				"tag_id": "ciwg2colr0000qcfcv8sf5avn",
				"post_id": "ciwg0zxva000kq0fce4xf7392"
			},
			{
				"tag_id": "ciwg2cot5000zqcfcpe78k5h9",
				"post_id": "ciwg0zy1n001qq0fcfm0gjm6d"
			},
			{
				"tag_id": "ciwg2colr0000qcfcv8sf5avn",
				"post_id": "ciwg0zxro0002q0fcuvn2bnhy"
			},
			{
				"tag_id": "ciwg2colr0000qcfcv8sf5avn",
				"post_id": "ciwg0zxsi0004q0fcd2ob9wzc"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwg0zxqu0001q0fckotbu2s9"
			},
			{
				"tag_id": "ciwg2cosv000tqcfcsyzydc9j",
				"post_id": "ciwg0zxxf0010q0fcx7vybo2w"
			},
			{
				"tag_id": "ciwg2cosx000vqcfcyi6q86ny",
				"post_id": "ciwg0zxxo0013q0fct7cva978"
			},
			{
				"tag_id": "ciwg2cosx000vqcfcyi6q86ny",
				"post_id": "ciwg0zxxu0015q0fc2krussd9"
			},
			{
				"tag_id": "ciypf96ud0002wcfcfvu3hzb2",
				"post_id": "ciwg0zxve000lq0fc12n5mpi1"
			},
			{
				"tag_id": "ciwg2cosq000rqcfcgo0saxp8",
				"post_id": "ciwg0zxx2000yq0fchkmy8lli"
			},
			{
				"tag_id": "ciwg2coq7000dqcfc8xqy53ot",
				"post_id": "ciwg0zxti0008q0fczjx55any"
			},
			{
				"tag_id": "ciwg2corj000jqcfcsmusdxqx",
				"post_id": "cixb3z67q0000hofco7vhfo1h"
			},
			{
				"tag_id": "ciwg2corj000jqcfcsmusdxqx",
				"post_id": "ciwg0zxur000gq0fcimwfpak5"
			},
			{
				"tag_id": "ciwg2corj000jqcfcsmusdxqx",
				"post_id": "ciwg0zxuh000eq0fcnk56cajp"
			},
			{
				"tag_id": "ciwg2corj000jqcfcsmusdxqx",
				"post_id": "cixb5jc2s0000dkfcy1bflwdg"
			}
		],
		"categories": [
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "cj3maj58y000138fcgd2sf9ur",
				"name": "grpc",
				"slug": "grpc",
				"description": ""
			},
			{
				"id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj17g17g60002akfc4e46bxbp",
				"name": "js-design-pattern",
				"slug": "js-design-pattern",
				"description": ""
			},
			{
				"id": "cj0d9iiay0000j4fckvi1dgsy",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iiay0000j4fckvi1dgsy",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iiay0000j4fckvi1dgsy",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iiay0000j4fckvi1dgsy",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iiay0000j4fckvi1dgsy",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "cj0d9iiay0000j4fckvi1dgsy",
				"name": "test",
				"slug": "test",
				"description": ""
			},
			{
				"id": "ciwg0zxzd001lq0fcm6yl2bay",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg0zxzd001lq0fcm6yl2bay",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciy8w76kg00016sfcint3n3bv",
				"name": "React/React Native",
				"slug": "React-React-Native",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciz7p5ysw0001lcfcqm1trl8c",
				"name": "TypeScript",
				"slug": "TypeScript",
				"description": ""
			},
			{
				"id": "ciz7p5ysw0001lcfcqm1trl8c",
				"name": "TypeScript",
				"slug": "TypeScript",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciypf96tk0001wcfcxde6d1wr",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciy8w76kg00016sfcint3n3bv",
				"name": "React/React Native",
				"slug": "React-React-Native",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "cixrmvdmi00010kfc4utreyo7",
				"name": "MongoDB",
				"slug": "MongoDB",
				"description": ""
			},
			{
				"id": "cixrmrutr0001y4fcixrgftjg",
				"name": "mysql",
				"slug": "mysql",
				"description": ""
			},
			{
				"id": "cixpnuwge0001rkfc55s8422f",
				"name": "sass",
				"slug": "sass",
				"description": ""
			},
			{
				"id": "cixipq3720002csfctxjj22vu",
				"name": "npm",
				"slug": "npm",
				"description": ""
			},
			{
				"id": "cixipq37z0004csfc5mvfdi67",
				"name": "gulp",
				"slug": "gulp",
				"description": ""
			},
			{
				"id": "cixb3so4x000164fc39ygtu05",
				"name": "php",
				"slug": "php",
				"description": ""
			},
			{
				"id": "cixb3so4x000164fc39ygtu05",
				"name": "php",
				"slug": "php",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciypf96tk0001wcfcxde6d1wr",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwvf88x600012ofctwmcwxig",
				"name": "reg",
				"slug": "reg",
				"description": ""
			},
			{
				"id": "ciwq4ljwa0001cgfcm74sn5ic",
				"name": "mock",
				"slug": "mock",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwnjf8h80001c0fci1atzkly",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "ciwn1303d0001h4fc9f1wxnvi",
				"name": "angular",
				"slug": "angular",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciwg0zxuo000fq0fcq3sxfhbh",
				"name": "express",
				"slug": "express",
				"description": ""
			},
			{
				"id": "ciwg0zxuo000fq0fcq3sxfhbh",
				"name": "express",
				"slug": "express",
				"description": ""
			},
			{
				"id": "ciwg0zxuo000fq0fcq3sxfhbh",
				"name": "express",
				"slug": "express",
				"description": ""
			},
			{
				"id": "ciwg0zxvp000nq0fcbuqjw6fe",
				"name": "git",
				"slug": "git",
				"description": ""
			},
			{
				"id": "ciwg0zxzd001lq0fcm6yl2bay",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg0zxzd001lq0fcm6yl2bay",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciypf96tk0001wcfcxde6d1wr",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciypf96tk0001wcfcxde6d1wr",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciwg0zxzd001lq0fcm6yl2bay",
				"name": "webpack",
				"slug": "webpack",
				"description": ""
			},
			{
				"id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"name": "es6",
				"slug": "es6",
				"description": ""
			},
			{
				"id": "ciypf96tk0001wcfcxde6d1wr",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg0zxyx001fq0fcjg9nawo5",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "ciwg0zxz0001hq0fcorn8ndyx",
				"name": "r.js",
				"slug": "r-js",
				"description": ""
			},
			{
				"id": "ciwg0zxz0001hq0fcorn8ndyx",
				"name": "r.js",
				"slug": "r-js",
				"description": ""
			},
			{
				"id": "ciypf96tk0001wcfcxde6d1wr",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "ciwg0zxys001dq0fcz0x0ubfa",
				"name": "linux",
				"slug": "linux",
				"description": ""
			},
			{
				"id": "ciwg0zxvp000nq0fcbuqjw6fe",
				"name": "git",
				"slug": "git",
				"description": ""
			},
			{
				"id": "ciwg0zxxm0012q0fcpfc32kf3",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			},
			{
				"id": "ciwg0zxxm0012q0fcpfc32kf3",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			},
			{
				"id": "ciwg0zxxm0012q0fcpfc32kf3",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			},
			{
				"id": "ciwg0zxxm0012q0fcpfc32kf3",
				"name": "hexo",
				"slug": "hexo",
				"description": ""
			}
		],
		"posts_categories": [
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "cj3pm6jdm0000kkfcvoh8fptj"
			},
			{
				"category_id": "cj3maj58y000138fcgd2sf9ur",
				"post_id": "cj3maj58l000038fco7c2ggq4"
			},
			{
				"category_id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"post_id": "cj1od6kd700005wfc4wqu5kdf"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17ho0006akfcpvawfcpl"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17fr0000akfca95shmu2"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17ib000lakfcbggwnvdm"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17ik000oakfc34lfk5gg"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17hh0004akfcu21ckavb"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17g20001akfcs1e0nvfz"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17i6000iakfcu7re47y3"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17hv000aakfcx3m2aa1i"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17i1000dakfcgcufmneu"
			},
			{
				"category_id": "cj17g17g60002akfc4e46bxbp",
				"post_id": "cj17g17hk0005akfclv2zkr55"
			},
			{
				"category_id": "cj0d9iiay0000j4fckvi1dgsy",
				"post_id": "cj0m8sfw20000w4fchwe2iyj3"
			},
			{
				"category_id": "cj0d9iiay0000j4fckvi1dgsy",
				"post_id": "cj0iv4on2000058fcoeutxvnu"
			},
			{
				"category_id": "cj0d9iiay0000j4fckvi1dgsy",
				"post_id": "cj0hjqs1v0000jkfc3cihbvxd"
			},
			{
				"category_id": "cj0d9iiay0000j4fckvi1dgsy",
				"post_id": "cj0hirkoj00004cfcproq705h"
			},
			{
				"category_id": "cj0d9iiay0000j4fckvi1dgsy",
				"post_id": "cj0dann7n0000lwfcamcbs7jl"
			},
			{
				"category_id": "cj0d9iiay0000j4fckvi1dgsy",
				"post_id": "cj0d9dwmd0000ncfcj6u5qjx1"
			},
			{
				"category_id": "ciwg0zxzd001lq0fcm6yl2bay",
				"post_id": "cj07wiysb0000tgfczpgybtmb"
			},
			{
				"category_id": "ciwg0zxzd001lq0fcm6yl2bay",
				"post_id": "cj07ru3sw0000l8fc1aytobqg"
			},
			{
				"category_id": "ciy8w76kg00016sfcint3n3bv",
				"post_id": "cizt7jzzs0000v8fcf1rodp42"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cizj4wypr000088fc6qcasflf"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cizex0j93000098fchas9dkof"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cize2ofv70003ucfcfi1ii6xe"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cize1s4ot0000ucfcdlaz07x6"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cize1inxo0000qgfcb9ftanfi"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cizdvvbma0000lgfc5j781hrc"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cizdg0aiv0000k8fc9vf2xpld"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciz95pdlx00004ofc45vyalzj"
			},
			{
				"category_id": "ciz7p5ysw0001lcfcqm1trl8c",
				"post_id": "ciz8b0a10000000fcvj1dkuzz"
			},
			{
				"category_id": "ciz7p5ysw0001lcfcqm1trl8c",
				"post_id": "ciz7p5ysn0000lcfc1b9uap41"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciyz9rjy60000xgfc9bo920zx"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciyz91o9p0000ywfcnv1lt5u8"
			},
			{
				"category_id": "ciypf96tk0001wcfcxde6d1wr",
				"post_id": "ciypf96ta0000wcfcgvux0w5m"
			},
			{
				"category_id": "ciy8w76kg00016sfcint3n3bv",
				"post_id": "ciy8w76jt00006sfcdwgy6tep"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciy5kkb9n0000dsfcfaihfhqu"
			},
			{
				"category_id": "cixrmvdmi00010kfc4utreyo7",
				"post_id": "cixrmvcl400000kfcw4sjc45b"
			},
			{
				"category_id": "cixrmrutr0001y4fcixrgftjg",
				"post_id": "cixrmruth0000y4fcigodrfe4"
			},
			{
				"category_id": "cixpnuwge0001rkfc55s8422f",
				"post_id": "cixpnuwff0000rkfcz902x6q6"
			},
			{
				"category_id": "cixipq3720002csfctxjj22vu",
				"post_id": "cixipq36n0000csfcku4oqst0"
			},
			{
				"category_id": "cixipq37z0004csfc5mvfdi67",
				"post_id": "cixipq36w0001csfcim29yj05"
			},
			{
				"category_id": "cixb3so4x000164fc39ygtu05",
				"post_id": "cixb5jc3b0001dkfc172kdbfw"
			},
			{
				"category_id": "cixb3so4x000164fc39ygtu05",
				"post_id": "cixb3so2p000064fcywqv4unm"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "cix1fexaw0000c0fc2315vc81"
			},
			{
				"category_id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"post_id": "ciwxbcx14000a0kfcog5jqj8l"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciwx9d9xu00070kfcfn6c01px"
			},
			{
				"category_id": "ciypf96tk0001wcfcxde6d1wr",
				"post_id": "ciwx915jz00000kfckkw0ast0"
			},
			{
				"category_id": "ciwvf88x600012ofctwmcwxig",
				"post_id": "ciwvf88wh00002ofc1uac6pku"
			},
			{
				"category_id": "ciwq4ljwa0001cgfcm74sn5ic",
				"post_id": "ciwq4ljvu0000cgfcjpibr2qp"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciwoq84qa0003q0fclktmcpv4"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciwoq3xw10000q0fcm7ndsqef"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciwoo5ice000084fcnw6lvehv"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciwoo5icw000184fcgmoz3mkt"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciwomrpdl0000gsfcbzt5bt2t"
			},
			{
				"category_id": "ciwnjf8h80001c0fci1atzkly",
				"post_id": "ciwnjf8g90000c0fc7reydtdq"
			},
			{
				"category_id": "ciwn1303d0001h4fc9f1wxnvi",
				"post_id": "ciwn1301q0000h4fc3l689ecy"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciwg4deqi0000hofcg5csuwwe"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciwg499th0000f8fc9nue2imi"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciwg412xe0000x0fc4ona7q06"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciwg412y40001x0fcm6f1la08"
			},
			{
				"category_id": "ciwg0zxuo000fq0fcq3sxfhbh",
				"post_id": "ciwg0zxst0005q0fc7uuds8i3"
			},
			{
				"category_id": "ciwg0zxuo000fq0fcq3sxfhbh",
				"post_id": "ciwg0zxtz000aq0fcy1biihb4"
			},
			{
				"category_id": "ciwg0zxuo000fq0fcq3sxfhbh",
				"post_id": "ciwg0zxt10006q0fckjygi6iw"
			},
			{
				"category_id": "ciwg0zxvp000nq0fcbuqjw6fe",
				"post_id": "ciwg0zxub000cq0fchsdstdk1"
			},
			{
				"category_id": "ciwg0zxzd001lq0fcm6yl2bay",
				"post_id": "ciwg0zxyc0018q0fcip5w3aml"
			},
			{
				"category_id": "ciwg0zxzd001lq0fcm6yl2bay",
				"post_id": "ciwg0zxyi0019q0fcaduv3bxp"
			},
			{
				"category_id": "ciypf96tk0001wcfcxde6d1wr",
				"post_id": "ciwg0zxvw000oq0fc3x0ftmaw"
			},
			{
				"category_id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"post_id": "ciwg0zxv2000iq0fcrxlu4g1a"
			},
			{
				"category_id": "ciypf96tk0001wcfcxde6d1wr",
				"post_id": "ciwg0zxwt000vq0fc5a64kbj1"
			},
			{
				"category_id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"post_id": "ciwg0zxva000kq0fce4xf7392"
			},
			{
				"category_id": "ciwg0zxzd001lq0fcm6yl2bay",
				"post_id": "ciwg0zy1n001qq0fcfm0gjm6d"
			},
			{
				"category_id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"post_id": "ciwg0zxro0002q0fcuvn2bnhy"
			},
			{
				"category_id": "ciwg0zxsb0003q0fc9r7jvg2o",
				"post_id": "ciwg0zxsi0004q0fcd2ob9wzc"
			},
			{
				"category_id": "ciypf96tk0001wcfcxde6d1wr",
				"post_id": "ciwg0zxqu0001q0fckotbu2s9"
			},
			{
				"category_id": "ciwg0zxyx001fq0fcjg9nawo5",
				"post_id": "ciwg0zxxf0010q0fcx7vybo2w"
			},
			{
				"category_id": "ciwg0zxz0001hq0fcorn8ndyx",
				"post_id": "ciwg0zxxo0013q0fct7cva978"
			},
			{
				"category_id": "ciwg0zxz0001hq0fcorn8ndyx",
				"post_id": "ciwg0zxxu0015q0fc2krussd9"
			},
			{
				"category_id": "ciypf96tk0001wcfcxde6d1wr",
				"post_id": "ciwg0zxve000lq0fc12n5mpi1"
			},
			{
				"category_id": "ciwg0zxys001dq0fcz0x0ubfa",
				"post_id": "ciwg0zxx2000yq0fchkmy8lli"
			},
			{
				"category_id": "ciwg0zxvp000nq0fcbuqjw6fe",
				"post_id": "ciwg0zxti0008q0fczjx55any"
			},
			{
				"category_id": "ciwg0zxxm0012q0fcpfc32kf3",
				"post_id": "cixb3z67q0000hofco7vhfo1h"
			},
			{
				"category_id": "ciwg0zxxm0012q0fcpfc32kf3",
				"post_id": "ciwg0zxur000gq0fcimwfpak5"
			},
			{
				"category_id": "ciwg0zxxm0012q0fcpfc32kf3",
				"post_id": "ciwg0zxuh000eq0fcnk56cajp"
			},
			{
				"category_id": "ciwg0zxxm0012q0fcpfc32kf3",
				"post_id": "cixb5jc2s0000dkfcy1bflwdg"
			}
		],
		"users": [
			{
				"id": 2,
				"slug": "Mr.Hua",
				"name": "Mr.Hua",
				"email": "admin@admin.com"
			}
		],
		"role_users": [
			{
				"user_id": 2,
				"role_id": 3
			}
		]
	}
}